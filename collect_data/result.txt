[{"HHH-11370":{"info":{"issue_title":"Consider making javax.enterprise:cdi-api dependency &quot;provided&quot;","issue_key":"HHH-11370","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.2.7","issue_labels":"5.2.7","issue_description":"Commit 65bbf28d3c fixed issue                                                          HHH-10923                                                              Closed                 and at the same time moved the javax.enterprise:cdi-api dependency from the provided scope into compile.  I'm not sure if that change was intentional or not but it can have an unfortunate knock on effect with hibernate-validator which since now requires a valid EL implementation. Since javax.enterprise:cdi-api pulls in a el-api, you now need to have the com.sun.el.ExpressionFactoryImpl class on your classpath. If you use a different EL provider that ships its own ExpressionFactory it may not get picked up (depending on the order of your classpath).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11370?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-88401","commnet_date":"2017-01-05T04:48:59-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 05\/Jan\/2017 04:48 AM    n        n        It is still in provided.  The problem is a type for trying to add a testCompile dependency on it as well which incorrectly uses the scope compile (rather than testCompile, although testRuntime is more appropriate IMO).  Reference https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1464\/files#diff-197d2841569f03ef77fff9b387e93425R80 n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 05\/Jan\/2017 04:48 AM                      It is still in provided.  The problem is a type for trying to add a testCompile dependency on it as well which incorrectly uses the scope compile (rather than testCompile, although testRuntime is more appropriate IMO).  Reference  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1464\/files#diff-197d2841569f03ef77fff9b387e93425R80               n        n    n"},{"commnet_id":"comment-88504","commnet_date":"2017-01-06T09:51:26-0800","commnet_user":"Phillip Webb","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Phillip Webbn added a comment  - 06\/Jan\/2017 09:51 AM    n        n        Steve,nnYou mean it's provided in a technical sense? i.e. it's safe to exclude? It's definitely in the compile scope of the pom.xml (at least in 5.2.2 http:\/\/central.maven.org\/maven2\/org\/hibernate\/hibernate-core\/5.2.5.Final\/hibernate-core-5.2.5.Final.pom). n    n    n        n            Show  n            n                        n    n    n    n                nn       Phillip Webbn added a comment  - 06\/Jan\/2017 09:51 AM                      Steve, nn You mean it's provided in a technical sense? i.e. it's safe to exclude? It's definitely in the  compile  scope of the  pom.xml  (at least in 5.2.2  http:\/\/central.maven.org\/maven2\/org\/hibernate\/hibernate-core\/5.2.5.Final\/hibernate-core-5.2.5.Final.pom ).              n        n    n"},{"commnet_id":"comment-88509","commnet_date":"2017-01-06T13:45:10-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 06\/Jan\/2017 13:45 PM    n        n        The build used to have this:nnnrn    provided( \"javax.enterprise:cdi-api:${cdiVersion}\"  )rnnnnSomeone wanted to to be sure to forcefully override the version of CDI coming from Arquillian for testing, but it was not done very well, so we now have:nnnrn    provided( \"javax.enterprise:cdi-api:${cdiVersion}\"  )rn    compile( \"javax.enterprise:cdi-api:${cdiVersion}\"  ) {rn        <span class=\"code-comment\">\/\/ we need to force it to make sure we influence the one coming from arquillianrn<\/span>        force=<span class=\"code-keyword\">true<\/span>rn    }rnnnnnWhich obviously hides the \"provided\" scope one.  Really this should have been:nnnrn    provided( \"javax.enterprise:cdi-api:${cdiVersion}\"  ) {rn        <span class=\"code-comment\">\/\/ we need to force it to make sure we influence the one coming from arquillian <span class=\"code-keyword\">for<\/span> testingrn<\/span>        force=<span class=\"code-keyword\">true<\/span>rn    }rnnnnor :nnrn    provided( \"javax.enterprise:cdi-api:${cdiVersion}\"  )rn    testCompile( \"javax.enterprise:cdi-api:${cdiVersion}\"  ) {rn        <span class=\"code-comment\">\/\/ we need to force it to make sure we influence the one coming from arquillianrn<\/span>        force=<span class=\"code-keyword\">true<\/span>rn    }rnnnnn n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 06\/Jan\/2017 13:45 PM                      The build used to have this: nn  n rn    provided(  \"javax.enterprise:cdi-api:${cdiVersion}\"  )rn n  nn Someone wanted to to be sure to forcefully override the version of CDI coming from Arquillian for testing, but it was not done very well, so we now have: nn  n rn    provided(  \"javax.enterprise:cdi-api:${cdiVersion}\"  )rn    compile(  \"javax.enterprise:cdi-api:${cdiVersion}\"  ) {rn         \/\/ we need to force it to make sure we influence the one coming from arquillianrn         force= true rn    }rn n  nnn Which obviously hides the \"provided\" scope one.  Really this should have been: nn  n rn    provided(  \"javax.enterprise:cdi-api:${cdiVersion}\"  ) {rn         \/\/ we need to force it to make sure we influence the one coming from arquillian  for  testingrn         force= true rn    }rn n  nn or : n  n rn    provided(  \"javax.enterprise:cdi-api:${cdiVersion}\"  )rn    testCompile(  \"javax.enterprise:cdi-api:${cdiVersion}\"  ) {rn         \/\/ we need to force it to make sure we influence the one coming from arquillianrn         force= true rn    }rn n  nnn             n        n    n"}]}},{"HSEARCH-2539":{"info":{"issue_title":"Return a CompletableFuture instead of a Future from MassIndexer.start()","issue_key":"HSEARCH-2539","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"5.x","issue_component":"5.x","issue_labels":"5.x","issue_description":"The CompletableFutures introduced in Java 8 provide a much more powerful API than the old-style Futures do.\r\n E.g. attaching callbacks would be much easier and elegant with a CompletableFuture.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2539?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-88310","commnet_date":"2017-01-05T01:14:51-0800","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 05\/Jan\/2017 01:14 AM    n        n        Great idea, thanks for raising this.nnThe only issue is to decide in which version we can introduce this change: until version 5.6 we still aim to be Java 7 compatible. Version 5.7 will require Java8 but aims to be API compatible as we only break APIs in 6.0.nnI'll optimistically schedule this for version 5.7 to see if we can find a backwards compatible solution.nnRelates to: n    n                n        n            n            HSEARCH-1105n        n                                                    Closed n             n . I'll close the older issue as this seems the better option. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 05\/Jan\/2017 01:14 AM                      Great idea, thanks for raising this. nn The only issue is to decide in which version we can introduce this change: until version 5.6 we still aim to be Java 7 compatible. Version 5.7 will require Java8 but aims to be API compatible as we only break APIs in 6.0. nn I'll optimistically schedule this for version 5.7 to see if we can find a backwards compatible solution. nn Relates to: n     n                 n         n             n            HSEARCH-1105n         n                                                     Closed n             n . I'll close the older issue as this seems the better option.              n        n    n"}]}},{"OGM-1227":{"info":{"issue_title":"Upgrade Mongo java driver to version 3.4.1","issue_key":"OGM-1227","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0.Beta2","issue_labels":"5.1.0.Beta2","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1227?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1195":{"info":{"issue_title":"Fix link to annotation processor documentation in README.md","issue_key":"HV-1195","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.4-next","issue_labels":"5.4-next","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1195?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11362":{"info":{"issue_title":"Support multiple segments in the table structure of SequenceStyleGenerator ","issue_key":"HHH-11362","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"5.1.1","issue_component":"5.1.1","issue_labels":"5.1.1","issue_description":"In Hibernate there are multiple ways to use tables as id generators:\r\n By explicitly using the TableGenerator strategy or as fallback from SequenceStyleGenerator when the underlying dialect doesn't support sequences.  However, there's a difference between the implementation of these two strategies.\r\n While the former allows defining multiple segments (buckets) in one table, The latter use one table for each sequence name which isn't always optimal for the users.  To overcome this I've extended the SequenceStyleGenerator and used a slightly modified TableStructure that takes into account additional parameters an use them in its JDBC queries (just as the original TableGenerator does)   It would be nice if the native sequence generator could be customized in the same way in order to allow finer grained control over the table structure and I'm currently working on a pull request for this feature.  Thanks.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11362?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11358":{"info":{"issue_title":"Changes to persister contracts","issue_key":"HHH-11358","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6.0.0.Alpha1","issue_labels":"6.0.0.Alpha1","issue_description":"Incorporate the changes to persister contracts per the work done on the SQM PoC.  Mainly this is comprised of 2 main tasks:  \tClean up the API to be better OO design (especially encapsulation and composition). \tAdd the new SQM TableGroup generation contracts","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11358?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-88011","commnet_date":"2016-12-24T00:06:44-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 24\/Dec\/2016 00:06 AM    n        n        Mainly done on wip\/6.0 n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 24\/Dec\/2016 00:06 AM                      Mainly done on wip\/6.0              n        n    n"}]}},{"HHH-11357":{"info":{"issue_title":"Improve result checking for tests that sort insert actions","issue_key":"HHH-11357","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.1.4,                                            5.2.7","issue_labels":"5.1.4,                                            5.2.7","issue_description":"Add checks for:  \tthe number of PreparedStatements generated for inserts; \tthe number of entities created.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11357?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11356":{"info":{"issue_title":"Adjust the 2nd-Cache SPIs to better reflect supported uses","issue_key":"HHH-11356","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6.0.0.Alpha1","issue_labels":"6.0.0.Alpha1","issue_description":"Mainly this is to pull out the caching SPI changes proposed on                                                          HHH-10707                                                              Open                 &#91;1&#93;  into its own Jira.     interface  RegionFactory {      \/\/ todo : any other information useful to pass along?       Region buildRegion(String  name);  }    interface  Region {      ...        EntityRegionAccessStrategy buildEntityRegionAccessStrategy(              AccessType accessType,               CacheDataDescription metadata) throws  CacheException;        NaturalIdRegionAccessStrategy buildAccessStrategy(              AccessType accessType,               CacheDataDescription metadata) throws  CacheException;        CollectionRegionAccessStrategy buildCollectionAccessStrategy(              AccessType accessType,               CacheDataDescription metadata) throws  CacheException;        ...    }     &#91;1&#93;  Specifically the comment https:\/\/hibernate.atlassian.net\/browse\/HHH-10707?focusedCommentId=84079&amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-84079   If we end up implementing these other changes, here are some others ideas I'd like to do at the same time (but not really worth making on their own):   \tRename org.hibernate.cache.spi.access.RegionAccessStrategy to just RegionAccess.  IMO the \"Strategy\" part adds no value.  Similarly, renames its specializations: \t \t\torg.hibernate.cache.spi.access.EntityRegionAccessStrategy -&gt; EntityRegionAccess. \t\torg.hibernate.cache.spi.access.NaturalIdRegionAccessStrategy -&gt;NaturalIdRegionAccess \t \t \torg.hibernate.cache.spi.access.CollectionRegionAccessStrategy -&gt;CollectionRegionAccess. \tRemove the various #toMap methods","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11356?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1194":{"info":{"issue_title":"BootstrappingTest of the documentation is not tested at all","issue_key":"HV-1194","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"6.0-next","issue_labels":"6.0-next","issue_description":"The @Test annotations are missing. Thus the bootstrapping examples are not tested at all.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1194?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1193":{"info":{"issue_title":"Avoid systematic resizing of collections when using CollectionHelper with a size","issue_key":"HV-1193","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"6.0-next","issue_labels":"6.0-next","issue_description":"In Validator, we usually use CollectionHelper.newHashMap(int initialCapacity) to avoid the resizing of the HashMap after its initialization.  The issue is that it's doing more harm than good because the default load factor is of 0.75 so the initial size of the map is always smaller than what we expect and it's always resized.  We should rename the parameter to expectedSize instead of initialCapacity and calculate the size taking into account the default load factor.  Typically, we use the following pattern to initialize a correctly sized Map:    Given a List&lt;String &gt; myList, we create the Map with:  Map&lt;String , Object &gt; myMap = CollectionHelper.newHashMap( myList.size() );  for  ( String  element : myList ) {      myMap.put( element, object );  }     Currently the Map is created with an initial capacity of myList.size() but as the load factor is of 0.75, when we try to put myList.size() elements in it, it is systematically resized. This is totally counter productive as the purpose was to avoid the resizing of the Map.  Same for Set.  See for instance Lists.newArrayListWithExpectedSize of Guava.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1193?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1192":{"info":{"issue_title":"Take into account the fact that @ConvertGroup is now repeatable and can be used as type arguments","issue_key":"HV-1192","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6.0-next","issue_labels":"6.0-next","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1192?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1189":{"info":{"issue_title":"Outdated javadoc comment for BeanMetaData#getDefaultValidationSequence","issue_key":"HV-1189","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.4-next","issue_labels":"5.4-next","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1189?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-87817","commnet_date":"2016-12-21T23:50:35-0800","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 21\/Dec\/2016 23:50 PM    n        n        Merged into master. Do you really want that for 5.4? n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 21\/Dec\/2016 23:50 PM                      Merged into master. Do you really want that for 5.4?              n        n    n"},{"commnet_id":"comment-87900","commnet_date":"2016-12-22T01:58:40-0800","commnet_user":"Guillaume Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Guillaume Smetn added a comment  - 22\/Dec\/2016 01:58 AM    n        n        We will have to roll a release anyway so I'd prefer having it in. It's a detail but it does not give the right image when users find outdated comments.nnI backported it. n    n    n        n            Show  n            n                        n    n    n    n                nn       Guillaume Smetn added a comment  - 22\/Dec\/2016 01:58 AM                      We will have to roll a release anyway so I'd prefer having it in. It's a detail but it does not give the right image when users find outdated comments. nn I backported it.              n        n    n"}]}},{"HSEARCH-2527":{"info":{"issue_title":"Avoid mixups of analyzers and analyzer references in analyzer-related code","issue_key":"HSEARCH-2527","issue_type":"Improvement","issue_status":"Pull Request Sent","issue_priority":"Pull Request Sent","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.6.0.Final","issue_labels":"5.6.0.Final","issue_description":"See discussions on https:\/\/github.com\/hibernate\/hibernate-search\/pull\/1263, in particular https:\/\/github.com\/hibernate\/hibernate-search\/pull\/1263#discussion_r92806649","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2527?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11348":{"info":{"issue_title":"Provide  &quot;property path search&quot; SPI over the AttributeContainer","issue_key":"HHH-11348","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Duplicate","issue_fix_version":"None","issue_component":"6.0.0.Alpha1","issue_labels":"6.0.0.Alpha1","issue_description":"HHH-11241                                                              Closed                 added warnings that PropertyMapping SPIs can cause problems when there are duplicated property names in subclasses, because the PropertyMapping will only contain one of those properties.  6.0 will provide an opportunity to add SPIs to be able to query an AttributeContainer for a \"property path\" in 6.0, e.g., persister.resolvePropertyPath( \"address.zip\" ).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11348?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-87729","commnet_date":"2016-12-19T15:01:13-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 19\/Dec\/2016 15:01 PM    n        n        Duplicates n    n                n        n            n            HHH-11348n        n                                                    Closed n             n n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 19\/Dec\/2016 15:01 PM                      Duplicates n     n                 n         n             n            HHH-11348n         n                                                     Closed n             n              n        n    n"},{"commnet_id":"comment-87730","commnet_date":"2016-12-19T15:01:47-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 19\/Dec\/2016 15:01 PM    n        n        I mean n    n                n        n            n            HHH-11347n        n                                                    Open n             n  n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 19\/Dec\/2016 15:01 PM                      I mean n     n                 n         n             n            HHH-11347n         n                                                     Open n             n               n        n    n"}]}},{"OGM-1226":{"info":{"issue_title":"Update Neo4j and MongoDB","issue_key":"OGM-1226","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0.Beta2","issue_labels":"5.1.0.Beta2","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1226?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2524":{"info":{"issue_title":"Allow using the Elasticsearch integration in OSGi environments","issue_key":"HSEARCH-2524","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"build,                                            documentation,                                            elasticsearch,                                            integration","issue_description":"We decided that we will not spend time on OSGi support, unless there is significant demand from users.  If you wish to use Hibernate Search to drive Elasticsearch from your application running within an OSGi container, please leave a comment and\/or vote for this issue.  Patches and integration tests to make this happen are very welcome!","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2524?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1225":{"info":{"issue_title":"Fix Neo4j tests","issue_key":"OGM-1225","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0.Beta2,                                            5.0.4.Final","issue_labels":"5.1.0.Beta2,                                            5.0.4.Final","issue_description":"There are two errors:   \tIn ManyToManyExtraTest Neo4j should be able to count the association accordingly, instead there is a different expected number. It is also inserting the same element in the same association twice instead of inserting it in two different associations.     \tUnidirectionalManyToManyTest is a copy of BidirectionalManyToManyTest","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1225?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11346":{"info":{"issue_title":"Upgrade gradle to 3.2.1 + Upgrade build scan plugin to 1.3","issue_key":"HHH-11346","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"5.2.5","issue_component":"5.2.5","issue_labels":"5.2.5","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11346?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1188":{"info":{"issue_title":"Switch to LinkedHashSet to preserve order of constraints and messages","issue_key":"HV-1188","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Won&#39;t Fix","issue_fix_version":"5.3.4.Final ,                                            5.4.0.Beta1","issue_component":"5.3.4.Final ,                                            5.4.0.Beta1","issue_labels":"5.3.4.Final","issue_description":"You read the title and may think \"But in Java the order in which constraints\/annotations are evaluated is undefined\"?\r\n Not really! Luckily starting with Java 8 getDeclaredAnnotations returns us annotations in a guaranteed order! Please read through this great stackoverflow answer to convince yourself:\r\n http:\/\/stackoverflow.com\/a\/30222541\/810109\r\n ...getDeclaredAnnotations() will get called to determine the order of the elements in the returned array...\r\n ...So the answer is, yes, getDeclaredAnnotations() provides the annotations in a guaranteed order...  So to make use of this ordering we should switch all HashSet's to LinkedHashSet's. This will guarantee us that the annotations will be processe in the order they are defined and also that any failing contraints (error messages) will always display in a guaranteed order.  We have patched Hibernate Validator already and we can confirm this is working like a charm!  Switching form HashSet to LinkedHashSet has de facto no performance impact.\r\n Read is the same. \"Just\" putting objects into a LinkedHashSet is in theory a bit slower - we are talking about nanoseconds when inserting millions of objects. So i think this is negligible. (E.g. check out http:\/\/www.programcreek.com\/2013\/03\/hashset-vs-treeset-vs-linkedhashset\/ and scroll down to \"6. Performance testing\")  Given that  \tgetDeclaredAnnotations guarantees us the order and \tswitchting everything to LinkedHashSet doesn't have any real life performance implications    it would be awesome to get this into Hiberante Validator as soon as possible.  I will submit a pull request with the changes.  Thank you!","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1188?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-87702","commnet_date":"2016-12-16T05:43:39-0800","commnet_user":"Matthias Kurz","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Matthias Kurzn added a comment  - 16\/Dec\/2016 05:43 AM    n        n        Pull request: https:\/\/github.com\/hibernate\/hibernate-validator\/pull\/608nnThe million dollar questions:\r\nnIs there something which speaks against this change? n    n    n        n            Show  n            n                        n    n    n    n                nn       Matthias Kurzn added a comment  - 16\/Dec\/2016 05:43 AM                      Pull request:  https:\/\/github.com\/hibernate\/hibernate-validator\/pull\/608  nn The million dollar questions: nIs there something which speaks against this change?              n        n    n"},{"commnet_id":"comment-87703","commnet_date":"2016-12-16T05:48:56-0800","commnet_user":"Matthias Kurz","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Matthias Kurzn added a comment  - 16\/Dec\/2016 05:48 AM    n        n        I updated the description of this ticket a little bit. n    n    n        n            Show  n            n                        n    n    n    n                nn       Matthias Kurzn added a comment  - 16\/Dec\/2016 05:48 AM                      I updated the description of this ticket a little bit.              n        n    n"},{"commnet_id":"comment-88005","commnet_date":"2016-12-23T08:36:48-0800","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 23\/Dec\/2016 08:36 AM    n        n        Hi Matthias, as discussed in the PR and the BVAL issue there are doubts left about whether that behavior is really guaranteed by the JDK or not. So I'm going to close this as \"Won't fix\" for now, but I think and hope we can find a satisfying solution on the spec level. It'd be awesome if you could join the discussion around this, e.g. on the BV mailing list. Thanks a lot for your efforts! n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 23\/Dec\/2016 08:36 AM                      Hi Matthias, as discussed in the PR and the BVAL issue there are doubts left about whether that behavior is really guaranteed by the JDK or not. So I'm going to close this as \"Won't fix\" for now, but I think and hope we can find a satisfying solution on the spec level. It'd be awesome if you could join the discussion around this, e.g. on the BV mailing list. Thanks a lot for your efforts!              n        n    n"}]}},{"HSEARCH-2521":{"info":{"issue_title":"Clarify if error HSEARCH000278 could be caused by the entity not being a managed entity","issue_key":"HSEARCH-2521","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.8","issue_labels":"5.8","issue_description":"Error HSEARCH000278 throws exceptions with messages like \"Can't build query for type 'org.mine.Cat' which is neither indexed nor has any indexed sub-types.\".  When people have a wrongly configured Hibernate ORM SessionFactory, and the entity wasn't picked up at all, pointing out that it's not \"indexed\" is confusing, as the annotation might be there.  When we encounter such an issues, we should check with the ORM component first to verify that this is at least a managed entity so that we can throw a more sensible error.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2521?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11344":{"info":{"issue_title":"Reduce execution time of hibernate-infinispan testsuite","issue_key":"HHH-11344","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.2.5","issue_component":"5.2.5","issue_labels":"5.2.5","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11344?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2520":{"info":{"issue_title":"Support analyzer definitions with the Elasticsearch MERGE strategy","issue_key":"HSEARCH-2520","issue_type":"Improvement","issue_status":"Pull Request Sent","issue_priority":"Pull Request Sent","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.8","issue_labels":"5.8","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2520?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2519":{"info":{"issue_title":"Support anlyzer definitions with the Elasticsearch VALIDATE strategy","issue_key":"HSEARCH-2519","issue_type":"Improvement","issue_status":"Pull Request Sent","issue_priority":"Pull Request Sent","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.8","issue_labels":"5.8","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2519?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2518":{"info":{"issue_title":"AnalyzerDef does not allow to bind an existing Analyzer class to a name","issue_key":"HSEARCH-2518","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.x","issue_labels":"5.x","issue_description":"As highlighted in this SO question: http:\/\/stackoverflow.com\/questions\/40928584\/use-existing-analyzer-in-hibernate-search-analyzerdiscriminator  Not being able to associated an existing Analyzer class, for example org.apache.lucene.analysis.cjk.CJKAnalyzer to a \"definition name\", preculeds it from being used in some contexts, for example via @AnalyzerDiscriminator.  We have several alternative solutions.  \tallow @AnalyzerDef to refer to an Analyzer class (how to handle the either\/or of the various attributes? looks bad). \tallow the discriminator to return the class instance (horrible, and doesn't resolve the problem for possible other needs of named analyzers) \tallow defining name\/class pairs in the configuration properties?    I think I prefer the 3rd option, but I also have the feeling that @AnalyzerDef isn't \"complete\" without this capability as it's not symmetric with the dual-capability of @Analyzer.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2518?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11343":{"info":{"issue_title":"Add ILike Restriction providing escape character","issue_key":"HHH-11343","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"4.0.1 ,                                            5.2.5","issue_component":"4.0.1 ,                                            5.2.5","issue_labels":"4.0.1","issue_description":"Hi Folks, \r\n                working with criteria queries, we found the following situation:  \"It's not easy as it's supposed to be, to build a criterion using Restrictions.Ilike providing escape character\".  Restrictions is a class with package-default visibility. So in order to workaround this issue we've done the following steps:  a. Created the same package (org.hibernate.criterion) in our project.\r\n b. Extended class Restrictions and Overwrited method ILike, creating LikeExpression using protected constructor providing escape character.  Maybe there's a chance to provide default value as property for LikeExpression's escape char or something.\r\n Thanks!","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11343?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-87707","commnet_date":"2016-12-16T16:27:01-0800","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 16\/Dec\/2016 16:27 PM    n        n        Nicolu00E1s Zdanovicz, the legacy Hibernate org.hibernate.Criteria API, which should be considered deprecated: https:\/\/docs.jboss.org\/hibernate\/orm\/5.2\/userguide\/html_single\/Hibernate_User_Guide.html#appendix-legacy-criteriannWe have no plans to make improvements to this legacy API. If you create a pull request with a test case and fix, then maybe someone will apply it. No promises though. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 16\/Dec\/2016 16:27 PM                       Nicolu00E1s Zdanovicz , the legacy Hibernate org.hibernate.Criteria API, which should be considered deprecated:  https:\/\/docs.jboss.org\/hibernate\/orm\/5.2\/userguide\/html_single\/Hibernate_User_Guide.html#appendix-legacy-criteria  nn We have no plans to make improvements to this legacy API. If you create a pull request with a test case and fix, then maybe someone will apply it. No promises though.              n        n    n"}]}},{"OGM-1224":{"info":{"issue_title":"Update dependencies","issue_key":"OGM-1224","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.1-next","issue_labels":"5.1-next","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1224?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1187":{"info":{"issue_title":"Support JDK9 ea+148","issue_key":"HV-1187","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.4-next,                                            5.3-next","issue_labels":"5.4-next,                                            5.3-next","issue_description":"The latest JDK introduces new constraints regarding the ability to make accessible private fields of JDK classes.  It requires fixes to HV and additional JVM options.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1187?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-87709","commnet_date":"2016-12-17T12:59:31-0800","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Gunnar Morlingn added a comment  - 17\/Dec\/2016 12:59 PM     - edited  n        n        Merged for 6.0. Guillaume Smet, let's see and discuss next week with the WF team whether we need to backport to 5.3, too. n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Gunnar Morlingn added a comment  - 17\/Dec\/2016 12:59 PM     - edited                    Merged for 6.0.  Guillaume Smet , let's see and discuss next week with the WF team whether we need to backport to 5.3, too.              n        n    n"}]}},{"HV-1186":{"info":{"issue_title":"Move javax.money version properties outside of the WF dependencies block","issue_key":"HV-1186","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"6.0-next","issue_labels":"6.0-next","issue_description":"javax.money is not part of WF so these properties shouldn't be there.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1186?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11339":{"info":{"issue_title":"PutFromLoads in replicated\/distributed caches should propagate asynchronously","issue_key":"HHH-11339","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.11 ,                                            5.1.3 ,                                            5.2.5","issue_component":"5.0.11 ,                                            5.1.3 ,                                            5.2.5","issue_labels":"5.0.11","issue_description":"I've found out that putFromLoads were not propagated to other caches asynchronously, probably due to locking issues of local vs. synchronous vs. asynchronous commands.  This can be resolved by locking on the command when it's going to be executed locally (that is when it is not just sent to origin for forwarding), and executing both an asynchronously distributed write and local one (because we want the modifications to be applied synchronously, not waiting until primary owner replicates the change back).  As the updates applied to the cache entry do not rely on the order, the origin -&gt; primary -&gt; backup replication is completely unnecessary and we can always distributed the update to all owners directly form origin, and without FIFO-ordering in JGroups. That can be achieved by simple overload of distribution interceptor.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11339?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-88214","commnet_date":"2017-01-03T00:55:15-0800","commnet_user":"Radim Vansa","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Radim Vansan added a comment  - 03\/Jan\/2017 00:55 AM    n        n        Fixed in master (5.2), backports pending. n    n    n        n            Show  n            n                        n    n    n    n                nn       Radim Vansan added a comment  - 03\/Jan\/2017 00:55 AM                      Fixed in master (5.2), backports pending.              n        n    n"}]}},{"HHH-11338":{"info":{"issue_title":"Apply HHH-11194 fix to Dialect subclasses","issue_key":"HHH-11338","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.2.5","issue_component":"5.2.5","issue_labels":"5.2.5","issue_description":"The HHH-11194 fix does not take into consideration subclasses.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11338?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-87501","commnet_date":"2016-12-14T04:14:51-0800","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 14\/Dec\/2016 04:14 AM    n        n        Applied Pull Request upstream. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 14\/Dec\/2016 04:14 AM                      Applied Pull Request upstream.              n        n    n"}]}},{"HSEARCH-2516":{"info":{"issue_title":"Support complex parameter types for Elasticsearch analyzer definitions","issue_key":"HSEARCH-2516","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Duplicate","issue_fix_version":"None","issue_component":"None","issue_labels":"elasticsearch","issue_description":"Follows up on                                                          HSEARCH-2219                                                              Closed                  Some tokenizers, token filters or char filters have parameters with a structured type (array), but currently we only allow strings and transmit them as is to Elasticsearch (we don't even convert integers).  For instance:   \thttps:\/\/www.elastic.co\/guide\/en\/elasticsearch\/reference\/2.4\/analysis-ngram-tokenizer.html =&gt; \"token_chars\" is an array \thttps:\/\/www.elastic.co\/guide\/en\/elasticsearch\/reference\/2.4\/analysis-edgengram-tokenizer.html =&gt; \"token_chars\" is an array \thttps:\/\/www.elastic.co\/guide\/en\/elasticsearch\/reference\/2.4\/analysis-mapping-charfilter.html =&gt; \"mappings\" is an array \thttps:\/\/www.elastic.co\/guide\/en\/elasticsearch\/reference\/5.1\/analysis-htmlstrip-charfilter.html =&gt; \"escape_tags\" is an array    (Note: the list above is exhaustive for tokenizers and char filters, but we should also have a look at token filters)","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2516?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-87608","commnet_date":"2016-12-16T00:07:07-0800","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 16\/Dec\/2016 00:07 AM    n        n        Was taken care of as part of n    n                n        n            n            HSEARCH-2219n        n                                                    Closed n             n n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 16\/Dec\/2016 00:07 AM                      Was taken care of as part of n     n                 n         n             n            HSEARCH-2219n         n                                                     Closed n             n              n        n    n"}]}},{"HSEARCH-2515":{"info":{"issue_title":"Implement support for lucene search_analyzer","issue_key":"HSEARCH-2515","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.5.5.Final","issue_component":"5.5.5.Final","issue_labels":"5.5.5.Final","issue_description":"At the moment it is possible to define only one analyzer per field, which is used during index time and also during search time. It would be beneficial Implement support for specification of analyzer used only in search time. Something similar is available in plain Lucene see i.e.:  https:\/\/www.elastic.co\/guide\/en\/elasticsearch\/guide\/current\/_index_time_search_as_you_type.html","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2515?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11326":{"info":{"issue_title":"Conditional Auditing through class-level annotations","issue_key":"HHH-11326","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"hibernate-envers","issue_description":"The current conditional auditing solution works but its somewhat intrusive.  It requires users to register their own Hibernate listeners and implement their own hooks on whether to audit a particular entity or not.  This works, but such a solution could easily be standardized.  Consider the notion of introducing a new annotation, @AuditListener.  This annotation is much like its JPA counterpart, @EventListener.  The annotation allows specifying a class that is to act as a callback mechanism.  The various methods of the specified class allow users to inspect the state of the entity during the various event life cycles used by Envers.  The code users were expected to put inside the custom event listeners can now be moved to these callback classes instead, eliminating users from having to manipulate with event listener registration.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11326?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-87241","commnet_date":"2016-12-08T18:21:01-0800","commnet_user":"Chris Cranford","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Chris Cranfordn added a comment  - 08\/Dec\/2016 18:21 PM    n        n        Based on discussion from http:\/\/stackoverflow.com\/a\/41052120\/1572269 n    n    n        n            Show  n            n                        n    n    n    n                nn       Chris Cranfordn added a comment  - 08\/Dec\/2016 18:21 PM                      Based on discussion from  http:\/\/stackoverflow.com\/a\/41052120\/1572269               n        n    n"}]}},{"HHH-11325":{"info":{"issue_title":"REVINFO table column names differ when you extend the default implementation.","issue_key":"HHH-11325","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.0.11 ,                                            5.1.3 ,                                            5.2.5","issue_component":"5.0.11 ,                                            5.1.3 ,                                            5.2.5","issue_labels":"5.0.11","issue_description":"When using the default configuration, Envers will generate the REVINFO table with columns named REV and REVTSTMP.  Unfortunately, when a custom implementation is introduced, the REVINFO table will use the column naming strategy used by ORM.    Whether the DefaultRevisionEntity is used or an implementation extends it, the column names used for the @RevisionNumber and @RevisionTimestamp annotated properties should be the same.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11325?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2514":{"info":{"issue_title":"Allow passing Service instances to the Hibernate ORM bootstrap parameters","issue_key":"HSEARCH-2514","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.x","issue_labels":"5.x","issue_description":"Following up on: https:\/\/forum.hibernate.org\/posting.php?mode=reply&amp;f=9&amp;t=1043730  Generalizing the request:  It would be useful to be able to inject a Service instance into the Hibernate (ORM) configuration properties, when Hibernate is being booted programmatically.  We already allow overriding of Service instances using the programmatic bootstrap of Hibernate Search (through an org.hibernate.search.cfg.spi.SearchConfiguration), however this method is not feasible when using Hibernate ORM as we automatically bootstrap with our own SearchConfiguration.  The more specific request is to allow configuring the Infinispan CacheManager using its builder API. If the general purpose idea I sketched above is not feasible, maybe we can do something for the specific Infinispan need?","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2514?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11322":{"info":{"issue_title":"Unable to enhance class: Attachment.class: Attachment class is frozen","issue_key":"HHH-11322","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Duplicate","issue_fix_version":"5.2.5","issue_component":"5.2.5","issue_labels":"5.2.5","issue_description":"I tested this one Hibernate 5.2.4, and everything is working just fine.  However, on 5.2.5, the following exception is thrown by the Maven enhancer plugin:   [ERROR] Failed to execute goal org.hibernate.orm.tooling:hibernate-enhance-maven-plugin:5.2.5.Final:enhance (default) on project forum:   Unable to enhance class: Attachment.class: com.vladmihalcea.book.hpjp.hibernate.forum.Attachment class is frozen     To replicate it, I have attached a sample project.  You just need to run:   mvn clean test-compile","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11322?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-87313","commnet_date":"2016-12-12T06:51:45-0800","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 12\/Dec\/2016 06:51 AM    n        n        Duplicate of https:\/\/hibernate.atlassian.net\/browse\/HHH-11242 n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 12\/Dec\/2016 06:51 AM                      Duplicate of  https:\/\/hibernate.atlassian.net\/browse\/HHH-11242               n        n    n"},{"commnet_id":"comment-87314","commnet_date":"2016-12-12T06:52:01-0800","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 12\/Dec\/2016 06:52 AM    n        n        Duplicate of https:\/\/hibernate.atlassian.net\/browse\/HHH-11242 n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 12\/Dec\/2016 06:52 AM                      Duplicate of  https:\/\/hibernate.atlassian.net\/browse\/HHH-11242               n        n    n"}]}},{"HHH-11321":{"info":{"issue_title":"ByteBuddy Enhancer throws java.lang.IllegalStateException: Cannot resolve type description for certain classes","issue_key":"HHH-11321","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.2.5","issue_component":"5.2.5","issue_labels":"5.2.5","issue_description":"I have assembled a test project that replicates this issue. It seems like the Byte Buddy enhancer manages to enhance some classes, while for others it throw the following exception:   ERROR: HHH000279: Unable to build enhancement metamodel for PostComment  java.lang.IllegalStateException: Cannot resolve type description for com.vladmihalcea.book.hpjp.hibernate.forum.Post          at net.bytebuddy.pool.TypePool$Resolution$Illegal.resolve(TypePool.java:149)          at net.bytebuddy.pool.TypePool$Default$LazyTypeDescription$TokenizedGenericType.toErasure(TypePool.java:6668)          at net.bytebuddy.pool.TypePool$Default$LazyTypeDescription$GenericTypeToken$Resolution$Raw$RawAnnotatedType.of(TypePool.java:4011)          at net.bytebuddy.pool.TypePool$Default$LazyTypeDescription$GenericTypeToken$Resolution$Raw.resolveFieldType(TypePool.java:3898)          at net.bytebuddy.pool.TypePool$Default$LazyTypeDescription$LazyFieldDescription.getType(TypePool.java:6965)          at net.bytebuddy.description.field.FieldDescription$AbstractBase.asToken(FieldDescription.java:136)          at net.bytebuddy.description.field.FieldDescription$AbstractBase.asToken(FieldDescription.java:87)          at net.bytebuddy.description.field.FieldList$AbstractBase.asTokenList(FieldList.java:47)          at net.bytebuddy.dynamic.scaffold.InstrumentedType$Default.of(InstrumentedType.java:381)          at net.bytebuddy.ByteBuddy.redefine(ByteBuddy.java:558)          at org.hibernate.bytecode.enhance.internal.bytebuddy.EnhancerImpl.enhance(EnhancerImpl.java:104)          at org.hibernate.bytecode.enhance.internal.bytebuddy.EnhancerImpl.enhance(EnhancerImpl.java:126)          at org.hibernate.orm.tooling.maven.MavenEnhancePlugin.doEnhancement(MavenEnhancePlugin.java:197)          at org.hibernate.orm.tooling.maven.MavenEnhancePlugin.execute(MavenEnhancePlugin.java:138)          at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:132)          at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)          at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)          at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)          at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)          at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)          at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)          at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:120)          at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:355)          at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:155)          at org.apache.maven.cli.MavenCli.execute(MavenCli.java:584)          at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:216)          at org.apache.maven.cli.MavenCli.main(MavenCli.java:160)          at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)          at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)          at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)          at java.lang.reflect.Method.invoke(Method.java:498)          at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)          at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)          at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)          at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)  Dec 08, 2016 12:36:52 PM org.hibernate.bytecode.enhance.internal.bytebuddy.EnhancerImpl enhance  ERROR: HHH000279: Unable to build enhancement metamodel for PostDetails  Dec 08, 2016 12:36:52 PM org.hibernate.bytecode.enhance.internal.bytebuddy.EnhancerImpl doEnhance  INFO: Enhancing [Tag] as Entity  [INFO] Successfully enhanced class [d:\\Vlad\\Work\\HHH\\HHH-BB\\target\\classes\\com\\vladmihalcea\\book\\hpjp\\hibernate\\forum\\Tag.class]     To replicate the issue, you can simply run:   &gt; mvn clean test-compile","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11321?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-87238","commnet_date":"2016-12-08T04:44:32-0800","commnet_user":"Rafael Winterhalter","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Rafael Winterhaltern added a comment  - 08\/Dec\/2016 04:44 AM     - edited  n        n        The problem is the use of Enhancer::enhance(File). The plugin resolves class files by the relative path of the passed instance where it is no longer possible to distinguish between a type foo.bar.Qux and a type bar.Qux residing in a folder foo. The API should not be used but the plugin should resolve the name and byte array itself. When I refactored the plugin to not rely on Javassist types, this boundary broke without a test to capture the problem. A similar problem occurs when using Javassist.nnI am preparing a patch for it right now. n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Rafael Winterhaltern added a comment  - 08\/Dec\/2016 04:44 AM     - edited                    The problem is the use of Enhancer::enhance(File). The plugin resolves class files by the relative path of the passed instance where it is no longer possible to distinguish between a type foo.bar.Qux and a type bar.Qux residing in a folder foo. The API should not be used but the plugin should resolve the name and byte array itself. When I refactored the plugin to not rely on Javassist types, this boundary broke without a test to capture the problem. A similar problem occurs when using Javassist. nn I am preparing a patch for it right now.              n        n    n"},{"commnet_id":"comment-87403","commnet_date":"2016-12-13T23:40:39-0800","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 13\/Dec\/2016 23:40 PM    n        n        Applied PR upstream. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 13\/Dec\/2016 23:40 PM                      Applied PR upstream.              n        n    n"}]}},{"HHH-11320":{"info":{"issue_title":"Disable EntityRegionAccessStrategyTest#testContestedPutFromLoad because of short timeout","issue_key":"HHH-11320","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.2.5","issue_component":"5.2.5","issue_labels":"5.2.5","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11320?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1182":{"info":{"issue_title":"Update WildFly patch name in the documentation","issue_key":"HV-1182","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.4.0.Beta1","issue_labels":"5.4.0.Beta1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1182?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11319":{"info":{"issue_title":"The dirtyPropertyNames content is NOT logged properly","issue_key":"HHH-11319","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"5.2.5","issue_component":"5.2.5","issue_labels":"5.2.5","issue_description":"While tracing the dirty checking with SLF4J+logback to find the dirty property names and got a log entry like below    org.hibernate.event.internal.DefaultFlushEntityEventListener - Found dirty properties    [[packagename.entityclass#9742239717]] : [Ljava.lang.String ;@68abb468     Which the contents of dirtyPropertyNames are NOT printed, but the type and object id.\r\n The log statement needs to use Arrays.toString to print the contents of dirtyPropertyNames.      \/\/original code from org.hibernate.event.internal.DefaultFlushEntityEventListener in hibernate-core       LOG.tracev(  \t\t\"Found dirty properties [{0}] : {1}\" ,  \t\tMessageHelper.infoString( persister.getEntityName(), id ),  \t\tdirtyPropertyNames                  \/\/recommend to use Arrays.toString(dirtyPropertyNames)       );","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11319?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-87502","commnet_date":"2016-12-14T04:40:44-0800","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 14\/Dec\/2016 04:40 AM    n        n        Applied Pull Request upstream. Gail Badner, you might want to backport it. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 14\/Dec\/2016 04:40 AM                      Applied Pull Request upstream.  Gail Badner , you might want to backport it.              n        n    n"}]}},{"HV-1180":{"info":{"issue_title":"Detect cyclic definition of group sequence due to group inheritance in the annotation processor","issue_key":"HV-1180","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.4-next","issue_labels":"5.4-next","issue_description":"See https:\/\/github.com\/hibernate\/hibernate-validator\/pull\/569#issuecomment-265460391","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1180?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2511":{"info":{"issue_title":"Set dynamic mapping for attirbutes","issue_key":"HSEARCH-2511","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6","issue_labels":"6","issue_description":"Dynamic mapping can be set for single properties. A possible mapping in Elasticserach would look like this:   Unable to find source-code formatter for language: json.  Available languages are: actionscript, html, java, javascript, none, sql, xhtml, xml  {      \"mappings\" : {          \"my_type\" : {             \"dynamic\" :      \"strict\" ,               \"properties\" : {                  \"title\" :  { \"type\" : \"string\" },                  \"stash\" :  {                      \"type\" :     \"object\" ,                     \"dynamic\" :  true                    }              }          }      }  }     More details on the Elasticsearch documentation","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2511?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11318":{"info":{"issue_title":"Fix Infinispan Javadoc documentation typos","issue_key":"HHH-11318","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.2.5","issue_component":"5.2.5","issue_labels":"5.2.5","issue_description":"There are several typos that need to be fixed.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11318?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-87209","commnet_date":"2016-12-07T04:19:26-0800","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Vlad Mihalcean added a comment  - 07\/Dec\/2016 04:19 AM     - edited  n        n        Applied PR upstream. Gail Badner, you might want to backport this one to 5.1 or 5.0. n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Vlad Mihalcean added a comment  - 07\/Dec\/2016 04:19 AM     - edited                    Applied  PR  upstream.  Gail Badner , you might want to backport this one to 5.1 or 5.0.              n        n    n"}]}},{"HHH-11317":{"info":{"issue_title":"Several typos and style fixes in documentation","issue_key":"HHH-11317","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.2.5","issue_component":"5.2.5","issue_labels":"5.2.5","issue_description":"This issue accompanies the following Pull request which fixes several documentation-related typos.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11317?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-87204","commnet_date":"2016-12-07T03:01:06-0800","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 07\/Dec\/2016 03:01 AM    n        n        Applied PR upstream. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 07\/Dec\/2016 03:01 AM                      Applied PR upstream.              n        n    n"}]}},{"HHH-11313":{"info":{"issue_title":"Same column returned with multiple aliases in scalar query","issue_key":"HHH-11313","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"4.2.21 ,                                            5.0.11","issue_component":"4.2.21 ,                                            5.0.11","issue_labels":"4.2.21","issue_description":"In the case of a relation \"OneToMany\" between two JPA entities, when we make a search on the parent entity, the generated SQL presents duplicated fields. Here is an example:                     select                                  school0_.ID as ID1_0_0_,                                 students1_.ID as ID1_1_1_,                                 school0_.NAME as NAME2_0_0_,                                 school0_.ZIP_CODE as ZIP_CODE3_0_0_,                                 students1_.FNAME as FNAME2_1_1_,                                 students1_.LNAME as LNAME3_1_1_,                                 students1_.SCHOOL_ID as SCHOOL_I4_0_0__,                                 students1_.ID as ID1_1_0__ -- duplicated by ID1_1_1_ above                   from                                  SCHOOL school0_                   inner  join                                  STUDENT students1_                   on                                  school0_.ID=students1_.SCHOOL_ID                   where                                  school0_.ZIP_CODE=?                   order by                                  school0_.ID     In more complicated cases, there can be more than two duplicated fields. Although the duplication of fields doesn't distort performance at a DB level.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11313?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-87225","commnet_date":"2016-12-07T10:45:42-0800","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 07\/Dec\/2016 10:45 AM    n        n        This issue does not duplicate n    n                n        n            n            HHH-3045n        n                                                    Closed n             n. n    n                n        n            n            HHH-3045n        n                                                    Closed n             n is about aliases that are literally the same. This issue involves the same column value being returned with 2 different aliases. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 07\/Dec\/2016 10:45 AM                      This issue does not duplicate n     n                 n         n             n            HHH-3045n         n                                                     Closed n             n. n     n                 n         n             n            HHH-3045n         n                                                     Closed n             n is about aliases that are literally the same. This issue involves the same column value being returned with 2 different aliases.              n        n    n"},{"commnet_id":"comment-87243","commnet_date":"2016-12-09T00:30:01-0800","commnet_user":"Tom Ross","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Tom Rossn added a comment  - 09\/Dec\/2016 00:30 AM    n        n        I have attached simple test case. n    n    n        n            Show  n            n                        n    n    n    n                nn       Tom Rossn added a comment  - 09\/Dec\/2016 00:30 AM                      I have attached simple test case.              n        n    n"},{"commnet_id":"comment-87510","commnet_date":"2016-12-14T15:07:16-0800","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 14\/Dec\/2016 15:07 PM    n        n        The following reproduces this issue the same way as the attached test case:\r\nnorg.hibernate.test.annotations.onetomany.OneToManyTest#testSimpleOneToManyCollection using a bidirectional many-to-one\/one-to-many association with the resulting SQL:nn{{\r\nn    select\r\nn        discountti0_.CUSTOMER_ID as CUSTOMER3_3_0_,\r\nn        discountti0_.id as id1_3_0_,\r\nn        discountti0_.id as id1_3_1_,\r\nn        discountti0_.discount as discount2_3_1_,\r\nn        discountti0_.CUSTOMER_ID as CUSTOMER3_3_1_ \r\nn    from\r\nn        Discount discountti0_ \r\nn    where\r\nn        discountti0_.CUSTOMER_ID=?\r\nn}}nnAliases ending with \"_1\" are used when reading entity data (e..g, Discount).nnAliases ending with \"_0\" are used when reading the collection \"key\" and \"element\". The collection \"key\" is the JoinColumn, which is used to resolve the collection owner (e.g, the particular Customer that owns the collection being read). For OneToMany, the \"element\" is the entity ID (e.g., Discount ID), which is used to add the entity element to the collection being read.nnIf a particular entity is included as an element in a collection being read, then that entity's ID will be read twice (once with an alias ending with \"_0\", and once with alias ending with \"_1\").nnIf the association is bidirectional ManyToOne\/OneToMany, then the JoinColumn will also be read twice as well.nnIt may be possible to remove the duplication, but I'm not sure how complicated it would be to do this in the current code base. I am also not sure how much of a savings it would be unless the entity ID or join column is particularly expensive to query. In that case, it would be desirable to choose a more suitable ID\/join column.nnSteve Ebersole, are there any plans to remove this duplication in SQM? n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 14\/Dec\/2016 15:07 PM                      The following reproduces this issue the same way as the attached test case: norg.hibernate.test.annotations.onetomany.OneToManyTest#testSimpleOneToManyCollection using a bidirectional many-to-one\/one-to-many association with the resulting SQL: nn {{ n    select n        discountti0_.CUSTOMER_ID as CUSTOMER3_3_0_, n        discountti0_.id as id1_3_0_, n        discountti0_.id as id1_3_1_, n        discountti0_.discount as discount2_3_1_, n        discountti0_.CUSTOMER_ID as CUSTOMER3_3_1_  n    from n        Discount discountti0_  n    where n        discountti0_.CUSTOMER_ID=? n}} nn Aliases ending with \"_1\" are used when reading entity data (e..g, Discount). nn Aliases ending with \"_0\" are used when reading the collection \"key\" and \"element\". The collection \"key\" is the JoinColumn, which is used to resolve the collection owner (e.g, the particular Customer that owns the collection being read). For OneToMany, the \"element\" is the entity ID (e.g., Discount ID), which is used to add the entity element to the collection being read. nn If a particular entity is included as an element in a collection being read, then that entity's ID will be read twice (once with an alias ending with \"_0\", and once with alias ending with \"_1\"). nn If the association is bidirectional ManyToOne\/OneToMany, then the JoinColumn will also be read twice as well. nn It may be possible to remove the duplication, but I'm not sure how complicated it would be to do this in the current code base. I am also not sure how much of a savings it would be unless the entity ID or join column is particularly expensive to query. In that case, it would be desirable to choose a more suitable ID\/join column. nn  Steve Ebersole , are there any plans to remove this duplication in SQM?              n        n    n"},{"commnet_id":"comment-87708","commnet_date":"2016-12-17T06:06:08-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 17\/Dec\/2016 06:06 AM    n        n        This is in fact already in place in SQM.  From the proof-of-concept's design doc:nnn==== SelectClausernrnThe SQL AST `SelectClause` contains one or more `SqlSelection` references representing SQLrnexpressions (column reference, aggregate function, literal, etc) that are an individualrnselection in the SQL query.rnrnThese `SqlSelection` references have the following characteristics...rnrnFirst they are uniqued by `SqlSelectable`.  `SqlSelectable` is an interface describing thingsrnthat can be rendered as a SQL selection.  Examples of `SqlSelectable` include:rnrn* `ColumnBinding`rn* `MinFunction`rn* `QueryLiteral`rn* `Parameter`rn* etcrnrnDuring `SqmSelectToSqlAstConverter` processing, part of resolving a `SqlSelectable` into arn`SqlSelection` is to make sure we use the same `SqlSelection` for the same `SqlSelectable`rnno matter how many times we see it.  E.g., multiple references to the `ColumnBinding` `p.name`rnwill all resolve the the same `SqlSelection`.  In other words, given an HQL query likern`select p.name, p.name from Person p` we will actually render the following SQL:rn`select p.name from person p`.  Notice the single column reference.  The HQL query will stillrnreturn the 2 values; we will see how that works when we talk about Return objects.rnrnThis \"uniqueing\" is managed through `SqmSelectToSqlAstConverter#sqlSelectionMapByQuerySpec`rnand `SqmSelectToSqlAstConverter#resolveSqlSelection`.rnrnSecondly, a `SqlSelection` incorporates the position in the SQL select clause.  This isrnimportant when we come back to discuss Returns.rnrn[NOTE]rn====rnI'd like to come back and investigate leveraging the SqlSelection position whenrnrendering order-by (and group-by?) clauses.  ANSI SQL defines (and most DBs support)rnreferring to a selection by position in the order-by.  For example, given a SQL query likern`select p.id, p.name from Person p order by 1`, the interpretation would be to order thernresults by the first selection item (p.id).rn====rnnnnThe background, as you allude to Gail Badner, is really the name-based reads from the ResultSet which expects certain patterns to the alias names it should read.  As 6.0 (with SQM) moves to position-based reads this is not necessary anymore. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 17\/Dec\/2016 06:06 AM                      This is in fact already in place in SQM.  From the proof-of-concept's design doc: nn  n ==== SelectClausernrnThe SQL AST `SelectClause` contains one or more `SqlSelection` references representing SQLrnexpressions (column reference, aggregate function, literal, etc) that are an individualrnselection in the SQL query.rnrnThese `SqlSelection` references have the following characteristics...rnrnFirst they are uniqued by `SqlSelectable`.  `SqlSelectable` is an interface describing thingsrnthat can be rendered as a SQL selection.  Examples of `SqlSelectable` include:rnrn* `ColumnBinding`rn* `MinFunction`rn* `QueryLiteral`rn* `Parameter`rn* etcrnrnDuring `SqmSelectToSqlAstConverter` processing, part of resolving a `SqlSelectable` into arn`SqlSelection` is to make sure we use the same `SqlSelection` for the same `SqlSelectable`rnno matter how many times we see it.  E.g., multiple references to the `ColumnBinding` `p.name`rnwill all resolve the the same `SqlSelection`.  In other words, given an HQL query likern`select p.name, p.name from Person p` we will actually render the following SQL:rn`select p.name from person p`.  Notice the single column reference.  The HQL query will stillrnreturn the 2 values; we will see how that works when we talk about Return objects.rnrnThis \"uniqueing\" is managed through `SqmSelectToSqlAstConverter#sqlSelectionMapByQuerySpec`rnand `SqmSelectToSqlAstConverter#resolveSqlSelection`.rnrnSecondly, a `SqlSelection` incorporates the position in the SQL select clause.  This isrnimportant when we come back to discuss Returns.rnrn[NOTE]rn====rnI'd like to come back and investigate leveraging the SqlSelection position whenrnrendering order-by (and group-by?) clauses.  ANSI SQL defines (and most DBs support)rnreferring to a selection by position in the order-by.  For example, given a SQL query likern`select p.id, p.name from Person p order by 1`, the interpretation would be to order thernresults by the first selection item (p.id).rn====rn n  nn The background, as you allude to  Gail Badner , is really the name-based reads from the ResultSet which expects certain patterns to the alias names it should read.  As 6.0 (with SQM) moves to position-based reads this is not necessary anymore.              n        n    n"}]}},{"HHH-11308":{"info":{"issue_title":" Bump c3p0 version up to support JDBC 4.2","issue_key":"HHH-11308","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.11 ,                                            5.1.3 ,                                            5.2.5","issue_component":"5.0.11 ,                                            5.1.3 ,                                            5.2.5","issue_labels":"5.0.11","issue_description":"While reading this Hibernate forum thread, I realized that we are still using an old C3P0 version which was built for JDBC 3.  As explained in this StackOverflow answer, we should be using 0.9.5 version for JDBC 4, which is the case for all 5.x branches.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11308?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-87106","commnet_date":"2016-12-06T04:47:02-0800","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 06\/Dec\/2016 04:47 AM    n        n        Gail Badner We need to backport this on 5.0 and 5.1 and probably 4.3 as well. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 06\/Dec\/2016 04:47 AM                       Gail Badner  We need to backport this on 5.0 and 5.1 and probably 4.3 as well.              n        n    n"}]}},{"HHH-11307":{"info":{"issue_title":"When .class cannot be loaded, throw a sensible exception instead of NPE","issue_key":"HHH-11307","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"5.2.5","issue_component":"5.2.5","issue_labels":"5.2.5","issue_description":"When the .class file for a given class cannot be loaded, currently a NullPointerException is thrown. It would be nicer if a sensible exception were thrown instead.  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1672","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11307?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-87311","commnet_date":"2016-12-12T05:51:53-0800","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 12\/Dec\/2016 05:51 AM    n        n        Applied PR upstream. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 12\/Dec\/2016 05:51 AM                      Applied PR upstream.              n        n    n"}]}},{"HV-1178":{"info":{"issue_title":"Custom ValidationProviderResolver no longer needed for OSGi with explicitely given provider","issue_key":"HV-1178","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"6.0-next","issue_labels":"6.0-next","issue_description":"This is just a clean up so that our examples are not misleading. Note that one of our tests does not use provider() so we need to keep the resolver for this test.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1178?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1177":{"info":{"issue_title":"Test our javax.money integration in OSGi environments","issue_key":"HV-1177","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.4.0.Beta1","issue_labels":"5.4.0.Beta1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1177?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-87202","commnet_date":"2016-12-07T02:04:30-0800","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 07\/Dec\/2016 02:04 AM    n        n        Merged into master and 5.4. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 07\/Dec\/2016 02:04 AM                      Merged into master and 5.4.              n        n    n"}]}},{"HSEARCH-2502":{"info":{"issue_title":"Support the *.worker.execution configuration option on Elasticsearch","issue_key":"HSEARCH-2502","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.8","issue_labels":"5.8","issue_description":"This option should make calls to org.hibernate.search.indexes.spi.IndexManager.performOperations(List&lt;LuceneWork&gt;, IndexingMonitor) synchronous or asynchronous depending on its value.  It already is implemented for Lucene, see the call to org.hibernate.search.backend.BackendFactory.isConfiguredAsSync(Properties) in org.hibernate.search.backend.impl.lucene.WorkspaceHolder.initialize(Properties, WorkerBuildContext, IndexManager).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2502?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1175":{"info":{"issue_title":"Support type annotations on arrays and arrays of primitives","issue_key":"HV-1175","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"6.0-next","issue_labels":"6.0-next","issue_description":"This is a follow-up of https:\/\/hibernate.atlassian.net\/browse\/HV-1165.  Currently we don't support type annotations on arrays. Part of the code is ready for it but there are some code paths which don't support it.  And we currently don't support array of primitives at all leading to unexpected behaviors.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1175?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2498":{"info":{"issue_title":"Use a generic representation of queries in the DSL","issue_key":"HSEARCH-2498","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6","issue_labels":"6","issue_description":"Currently, queries are internally (and externally, in fact) represented as Lucene Queries, even when querying Elasticsearch. The Query DSL returns Lucene Queries, for instance.  We should have a representation of queries that abstracts itself from actual indexing services, so as to eventually be able to model queries that do more than what Lucene does. For instance, \"exists\" queries for Elasticsearch, or boolean term queries.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2498?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-86905","commnet_date":"2016-12-02T04:20:09-0800","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 02\/Dec\/2016 04:20 AM    n        n        We also need to keep in mind that the translation of an \"internal representation\" of a Query into a native query will not depend only on the target technology (Elasticsearch,Lucene,others?) but also on the metadata we have about the specific properties\/fields.nnAn excellent example is the \"exists\" query; with Lucene it might commonly be a TermQuery but it could also be looking into the bitsets of a docvalues set, if there is one. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 02\/Dec\/2016 04:20 AM                      We also need to keep in mind that the translation of an \"internal representation\" of a Query into a native query will not depend only on the target technology (Elasticsearch,Lucene,others?) but also on the metadata we have about the specific properties\/fields. nn An excellent example is the \"exists\" query; with Lucene it might commonly be a TermQuery but it could also be looking into the bitsets of a docvalues set, if there is one.              n        n    n"}]}},{"HHH-11300":{"info":{"issue_title":"create documentation about available loggers and there usage","issue_key":"HHH-11300","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.2.5","issue_component":"5.2.5","issue_labels":"5.2.5","issue_description":"hibernate-core lists 150 usages of call like this:\r\n CoreLogging.messageLogger( Configuration.class );\r\n These calls setup loggers that can be used in log4j.xml to add debug information to logging output. So the information which loggers are available and what level does something important is quite essential to see what is going on. Not every class has its own logger so there is no easy mapping between the logger name and the class you want to know something about.\r\n As far as I know there is no index available about the existing loggers and what they log.\r\n I can imagine that it is lots of work to maintain it. So it might be necessary to not be to precise about exact logging as it is part of changing sourcecode. \r\n Even a short description that does not get into much detail would be good and maybe it even helps the developers to reuse loggers where useful.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11300?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1174":{"info":{"issue_title":"Typos in test methods name of Executable*Test","issue_key":"HV-1174","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"6.0-next","issue_labels":"6.0-next","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1174?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1173":{"info":{"issue_title":"Clean up some superfluous operations","issue_key":"HV-1173","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.4.0.Beta1","issue_labels":"5.4.0.Beta1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1173?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1172":{"info":{"issue_title":"Remove unused methods from Cascadable","issue_key":"HV-1172","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"6.0-next","issue_labels":"6.0-next","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1172?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1171":{"info":{"issue_title":"Include the simple name of the class when logging a method name","issue_key":"HV-1171","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"6.0-next","issue_labels":"6.0-next","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1171?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11295":{"info":{"issue_title":"Some improvements to EntityJoinTest","issue_key":"HHH-11295","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.1.3 ,                                            5.2.5","issue_component":"5.1.3 ,                                            5.2.5","issue_labels":"5.1.3","issue_description":"I prepared some improvements for EntityJoinTest  \tright outer join is covered in addition to left outer join \tinner join test uncommented \tassert against actual contents of returned rows, not just count of returned rows","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11295?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-87220","commnet_date":"2016-12-07T07:49:21-0800","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 07\/Dec\/2016 07:49 AM    n        n        Applied on master. Gail Badner you might want to backport this one. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 07\/Dec\/2016 07:49 AM                      Applied on master.  Gail Badner  you might want to backport this one.              n        n    n"},{"commnet_id":"comment-87809","commnet_date":"2016-12-21T13:51:51-0800","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 21\/Dec\/2016 13:51 PM    n        n        Reopening to add 5.1.4 as a fix version. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 21\/Dec\/2016 13:51 PM                      Reopening to add 5.1.4 as a fix version.              n        n    n"}]}},{"HHH-11290":{"info":{"issue_title":"Migrate all documentation snippets that derive the source code from extras instead of actual Unit Tests","issue_key":"HHH-11290","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.2.5","issue_component":"5.2.5","issue_labels":"5.2.5","issue_description":"Initially, all code snippets were injected from an extras folder. While most examples have been migrating to using Unit Tests, we still have some chapters where we use the legacy code snippet behavior.   The benefit of having all code snippets injected from Unit Tests is that we can make sure no example will break without being notified.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11290?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1169":{"info":{"issue_title":"Upgrade javax.el dependency to 3.0.1-b8","issue_key":"HV-1169","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.4.0.Beta1","issue_labels":"5.4.0.Beta1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1169?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11282":{"info":{"issue_title":"Support m2e\/Eclipse integration in hibernate-enhance-maven-plugin","issue_key":"HHH-11282","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.2.5","issue_component":"5.2.5","issue_labels":"5.2.5","issue_description":"It would be nice if hibernate-enhance-maven-plugin included m2e support.  See https:\/\/wiki.eclipse.org\/M2E_compatible_maven_plugins  Adding such support would eliminate having to manually add m2e configuration to the pom for every project that uses hibernate-enhance-maven-plugin and would speed up development by only causing Eclipse to refresh files that are changed by the plugin.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11282?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-87733","commnet_date":"2016-12-19T20:33:43-0800","commnet_user":"Craig","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Craign added a comment  - 19\/Dec\/2016 20:33 PM    n        n        Since the PR was merged, this issue should be resolved as fixed for version 5.2.6. n    n    n        n            Show  n            n                        n    n    n    n                nn       Craign added a comment  - 19\/Dec\/2016 20:33 PM                      Since the PR was merged, this issue should be resolved as fixed for version 5.2.6.              n        n    n"}]}},{"HSEARCH-2496":{"info":{"issue_title":"Smarter dirty checking when using @ContainedIn with custom field bridges","issue_key":"HSEARCH-2496","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.5.5.Final ,                                            5.6.0.Beta4","issue_component":"5.5.5.Final ,                                            5.6.0.Beta4","issue_labels":"5.5.5.Final","issue_description":"HSEARCH-2486                                                              Closed                 demonstrates two issues, the second one being that, in the case of entities \"contained\" in other entities (with a back reference marked with @ContainedIn, dirty checking optimizations only consider those properties that are indexed in the \"contained\" entity, even though the \"containing\" entity might declare fields with custom field bridges that make use of different properties, thereby requiring reindexing of the containing entity even when the contained entity does not require reindexing.  As far as I know it's not a supported use case, but maybe it should be?  An example:     @Entity  public  class Contained {    @OneToOne(mappedBy = \"contained\" )    @ContainedIn    private  Containing containing;      @Field    private  int  indexedInContained;      \/*     * This property is considered irrelevant when doing dirty-checking on Contained,     * because it's not indexed as far as Contained is concerned.     * The property is used when indexing Containing, though, but its dirtiness is being     * ignored anyway...     *\/    private  int  indexedInContaining;  }    @Entity  @Indexed  public  class Containing {    @Field(bridge = @FieldBridge(impl = MyFieldBridge.class))    @OneToOne    private  Contained contained;  }    public  class MyFieldBridge implements  FieldBridge {    void set(String  name, Object  value, Document document, LuceneOptions luceneOptions) {      int  indexedValue = ((Contained)value).indexedInContaining;      luceneOptions.addNumericFieldToDocument(name, indexedValue, document);    }  }     This issue is very close to                                                          HSEARCH-1093                                                              Open                , but the solution we proposed in that ticket wouldn't do here, because only the custom bridge knows which properties are being used. The solution would be to provide a way for custom bridges to declare which properties of the given value they are using... Or to provide a way for users to disable optimizations altogether.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2496?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11281":{"info":{"issue_title":"AvailableSettings.ENABLE_LAZY_LOAD_NO_TRANS should have warning javadoc","issue_key":"HHH-11281","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"5.2.5","issue_component":"5.2.5","issue_labels":"5.2.5","issue_description":"There are some setting in AvailableSettings that are kind of bad practize to use like the mentionend ENABLE_LAZY_LOAD_NO_TRANS. As I setup junit tests using code where the settings are directly referenced to configure hibernate (this way I can be sure the setting is still available if I update hibernate) it would be helpful if such settings that are really there to workaround code problems somehow would at least contain a warning in javadoc. Nice would be a deprecation tag even if it never will be removed as this would be seen by every developer looking at the test code.  Currently this setting does not contain javadoc at all.   Besides it would be nice if hibernate search could use the same way as hibernate orm to declare constants in form of an interface instead of a class \"Environment\". Currently I have entries of the form setProperty(CONNECTION_PROVIDER, ...); for orm (AvailableSettings .java) and setProperty(Environment.AUTOREGISTER_LISTENERS,..); for search (Environment.java). If you ask me it would even be fine to let Environment be an interface extending AvailableSettings but I know you want to allow to use hibernate-search without hibernate-orm.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11281?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1161":{"info":{"issue_title":"osgi\/integrationtest\/pom.xml points to the wrong checkstyle configuration","issue_key":"HV-1161","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.4.0.Beta1","issue_labels":"5.4.0.Beta1","issue_description":"It points to checkstyle-documentation.xml whereas it should have pointed to checkstyle-junit.xml.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1161?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11275":{"info":{"issue_title":"Support SUBSELECT or SELECT FetchMode on @FetchProfile","issue_key":"HHH-11275","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"5.1.2","issue_component":"5.1.2","issue_labels":"5.1.2","issue_description":"I'm trying to fetch additional child entities eagerly with @FetchProfile. But currently @FetchProfile only supports JOIN. I don't want to use JOIN only this association because root entity is big.    My FetchProfile    @FetchProfiles({          @FetchProfile(name = \"fetchAllProperties\" , fetchOverrides = {                  @FetchProfile.FetchOverride(entity = ContentImage.class, association = \"contentImages\" , mode = FetchMode.SUBSELECT),          })  })      Current Hibernate Code    private  static  void bindFetchProfile(FetchProfile fetchProfileAnnotation, Mappings mappings) {  \t\tfor  ( FetchProfile.FetchOverride fetch : fetchProfileAnnotation.fetchOverrides() ) {  \t\t\torg.hibernate.annotations.FetchMode mode = fetch.mode();  \t\t\tif  ( !mode.equals( org.hibernate.annotations.FetchMode.JOIN ) ) {  \t\t\t\tthrow  new  MappingException( \"Only FetchMode.JOIN is currently supported\"  );  \t\t\t}    \t\t\tSecondPass sp = new  VerifyFetchProfileReferenceSecondPass( fetchProfileAnnotation.name(), fetch, mappings );  \t\t\tmappings.addSecondPass( sp );  \t\t}  \t}","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11275?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1223":{"info":{"issue_title":"Make queries work with InheritanceType#TABLE_PER_CLASS in Neo4j and MongoDB","issue_key":"OGM-1223","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.1-next","issue_labels":"5.1-next","issue_description":"The tests should already be in core: SimpleQueriesWithTablePerClassInheritanceTest  They were introduced by                                                          OGM-732                                                              Closed","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1223?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2485":{"info":{"issue_title":"Allow to use different ES clusters for different entities (i.e. introduce IndexingService)","issue_key":"HSEARCH-2485","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6","issue_labels":"6","issue_description":"For the moment, one can only define the targeted ES cluster globally. It would be great to be able to target different clusters for different entities.  This would require the introduction of a concept of IndexingService (exact name to be determined), representing a service that provides indexing and querying capabilities.  While we're at it, we could generalize this concept, which would have other advantages.  Most notably, it could help abstracting from Lucene APIs with respect to local analysis:   \tfully abstract from analyzer references (move most of the code in `ConfigContext` to `IndexingService` implementations) \tintroduce namespaces for analyzer definition (maybe) \tavoid exposing mutable static variables such as `RemoteAnalyzer.DEFAULT` and `RemoteAnalyzer.KEYWORD`. It's no big deal right now, since those are always initialized with the same same value, but it's a bit unsafe if we happen to change that in the future.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2485?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11266":{"info":{"issue_title":"Add support for Spring Cache as a second level cache","issue_key":"HHH-11266","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.2.4","issue_component":"5.2.4","issue_labels":"5.2.4","issue_description":"Hibernate has a number of cache implementations available, including jcache, ehcache, and hazelcast. I'd like to see Spring's cache abstraction added to that list.  By supporting Spring's cache abstraction, Hibernate would be able to use any cache configured by Spring, providing these advantages:  \tThe same configuration can be used by Spring and Hibernate (which simplifies things) \tAll implementations of Spring's cache become available to Hibernate","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11266?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11265":{"info":{"issue_title":"JCacheRegionFactory should allow for subclasses to specify CacheManager","issue_key":"HHH-11265","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.2.4","issue_component":"5.2.4","issue_labels":"5.2.4","issue_description":"It would be nice for org.hibernate.cache.jcache.JCacheRegionFactory to be refactored to have a \"getCacheManager()\" protected method that subclasses can override so they can get the CacheManager in some other way. Currently, in order to get a different CacheManager than by using the the means by which the \"start\" currently provides involves copying the  JCacheRegionFactory class and modifying it - using inheritance would be more maintainable and all around better.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11265?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-86507","commnet_date":"2016-11-28T02:19:59-0800","commnet_user":"Louis Jacomet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Louis Jacometn added a comment  - 28\/Nov\/2016 02:19 AM    n        n        Hi Craig,nnCould you describe a bit more what you are trying to achieve exactly?nnBy the specification, JCache mandates that when invoking `CachingProvider.getCacheManager` you will get the same `CacheManager` instance as long as the parameters do match, so same URI and `ClassLoader`.\r\nnSo why would you need to go through the `JCacheRegionFactory` to access the `CacheManager`? n    n    n        n            Show  n            n                        n    n    n    n                nn       Louis Jacometn added a comment  - 28\/Nov\/2016 02:19 AM                      Hi Craig, nn Could you describe a bit more what you are trying to achieve exactly? nn By the specification, JCache mandates that when invoking `CachingProvider.getCacheManager` you will get the same `CacheManager` instance as long as the parameters do match, so same URI and `ClassLoader`. nSo why would you need to go through the `JCacheRegionFactory` to access the `CacheManager`?              n        n    n"},{"commnet_id":"comment-86511","commnet_date":"2016-11-28T06:00:03-0800","commnet_user":"Craig","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Craign added a comment  - 28\/Nov\/2016 06:00 AM    n        n        I'd like to support use cases where a cache can be used that isn't acquired using the JCache standard process.\r\nnFor example, in n    n                n        n            n            HHH-11266n        n                                                    Open n             n, I'd like to provide (by overriding the protected methods I've added in the pull request attached to this ticket) JCacheRegionFactory with a JCache that isn't acquired by the JCache standard process and is instead created as a wapper over another cache abstraction.\r\nnAnother use case would be to override these added protected methods to get the cache manager and\/or cache provider using configuration provided by a framework instead of Hibernate configuration. (Perhaps a configuration web service or some other means could be consulted to get the cache manager and\/or cache provider.)\r\nnMy intention is more for allowing subclasses to override these protected methods as opposed to subclasses calling them (although, as you said, calling them works fine too). n    n    n        n            Show  n            n                        n    n    n    n                nn       Craign added a comment  - 28\/Nov\/2016 06:00 AM                      I'd like to support use cases where a cache can be used that isn't acquired using the JCache standard process. nFor example, in n     n                 n         n             n            HHH-11266n         n                                                     Open n             n, I'd like to provide (by overriding the protected methods I've added in the pull request attached to this ticket) JCacheRegionFactory with a JCache that isn't acquired by the JCache standard process and is instead created as a wapper over another cache abstraction. nAnother use case would be to override these added protected methods to get the cache manager and\/or cache provider using configuration provided by a framework instead of Hibernate configuration. (Perhaps a configuration web service or some other means could be consulted to get the cache manager and\/or cache provider.) nMy intention is more for allowing subclasses to override these protected methods as opposed to subclasses calling them (although, as you said, calling them works fine too).              n        n    n"},{"commnet_id":"comment-86806","commnet_date":"2016-12-01T16:43:33-0800","commnet_user":"Craig","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Craign added a comment  - 01\/Dec\/2016 16:43 PM     - edited  n        n        Louis Jacomet so what do you think? Is this mergeable? Are there any changes to the PR that I could make that would be helpful?nnThanks! n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Craign added a comment  - 01\/Dec\/2016 16:43 PM     - edited                     Louis Jacomet  so what do you think? Is this mergeable? Are there any changes to the PR that I could make that would be helpful? nn Thanks!              n        n    n"},{"commnet_id":"comment-87500","commnet_date":"2016-12-14T02:42:20-0800","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 14\/Dec\/2016 02:42 AM    n        n        Applied Pull Request upstream. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 14\/Dec\/2016 02:42 AM                      Applied Pull Request upstream.              n        n    n"}]}},{"HHH-11264":{"info":{"issue_title":"Unify native and JPA implementations of Hibernate event listeners","issue_key":"HHH-11264","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"6.0.0.Alpha1","issue_labels":"6.0.0.Alpha1","issue_description":"Since implementing JPA Hibernate has defined 2 sets of implementations of many of its event listener contracts: one for native behavior, one for JPA-defined behavior.  Consolidate this into a single set.    Another option is to keep both sets, but pick one or the other based on #isJpaBootstrap by default.  May be a good idea to do that for 6.0 not matter what we decide moving forward.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11264?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11263":{"info":{"issue_title":"Introduce BootstrapContext","issue_key":"HHH-11263","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"6.0.0.Alpha1","issue_labels":"6.0.0.Alpha1","issue_description":"Introduce a context object for resources available only during bootstrap","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11263?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11261":{"info":{"issue_title":"Document logging ID ranges and enforce them","issue_key":"HHH-11261","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"6.0.0.Alpha1","issue_labels":"6.0.0.Alpha1","issue_description":"Per title","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11261?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11260":{"info":{"issue_title":"Apply fetch-size optimization for result streaming with MySQL","issue_key":"HHH-11260","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Rejected","issue_fix_version":"5.2.0","issue_component":"5.2.0","issue_labels":"5.2.0","issue_description":"Hibernate 5.2 introduced Query.stream to consume results as stream. A user wanting to benefit from iterative streaming is required to set Query.setFetchSize(Integer.MIN_VALUE) otherwise the ResultSet is entirely stored in memory:  Quote from MySQL JDBC docs:  By default, ResultSets are completely retrieved and stored in memory. In most cases this is the most efficient way to operate and, due to the design of the MySQL &#91;...&#93;  If you are working with ResultSets that have a large number of rows &#91;...&#93;  you can tell the driver to stream the results back one row at a time.    stmt = conn.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,java.sql.ResultSet.CONCUR_READ_ONLY);  stmt.setFetchSize(Integer .MIN_VALUE);     Users could participate from this optimization if the query yields to a Read-Only cursor and Forward-Only result set by defaulting to Query.setFetchSize(Integer.MIN_VALUE) (on query level) if no other fetch size settings are applied.  Doing so imposes a caveat:  There are some caveats with this approach. You must read all of the rows in the result set (or close it) before you can issue any other queries on the connection, or an exception will be thrown.  Reference   \thttps:\/\/knes1.github.io\/blog\/2015\/2015-10-19-streaming-mysql-results-using-java8-streams-and-spring-data.html \thttps:\/\/dev.mysql.com\/doc\/connector-j\/6.0\/en\/connector-j-reference-implementation-notes.html","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11260?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-86208","commnet_date":"2016-11-18T07:53:17-0800","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 18\/Nov\/2016 07:53 AM    n        n        We could do the same for PostgreSQL, although we need to set a positive value. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 18\/Nov\/2016 07:53 AM                      We could do the same for  PostgreSQL , although we need to set a positive value.              n        n    n"},{"commnet_id":"comment-86316","commnet_date":"2016-11-23T05:42:19-0800","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 23\/Nov\/2016 05:42 AM    n        n        After doing some measurements, the cost of streaming is much higher than fetching the whole ResultSet, which is the default behavior.nnThat being said, the current default is much more appealing that streaming. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 23\/Nov\/2016 05:42 AM                      After doing  some measurements , the cost of streaming is much higher than fetching the whole ResultSet, which is the default behavior. nn That being said, the current default is much more appealing that streaming.              n        n    n"}]}},{"HHH-11259":{"info":{"issue_title":"Improved CDI support including support for other types of managed beans","issue_key":"HHH-11259","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"6.0.0.Alpha1","issue_labels":"6.0.0.Alpha1","issue_description":"The main thrust of this issue is to generally improve the support for CDI in Hibernate ORM in terms of general refactoring.  But the other design goal is to make it easier to support new kinds of managed beans.  Initially this will include AttributeConverters, but I can also see supporting Hibernate event listeners, Hibernate services, etc.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11259?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2476":{"info":{"issue_title":"Report search failures that produced results anyway in Elasticsearch","issue_key":"HSEARCH-2476","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Cannot Reproduce","issue_fix_version":"None","issue_component":"None","issue_labels":"elasticsearch","issue_description":"For instance, sorting on a field that has null values for some documents, without specifying the value to use as a replacement, will result in a HTTP status code 200, with search results, but the returned JSON will contain a non-empty \"_shards.failures\" array.  Example:     {    \"took\"  : 5,    \"timed_out\"  : false ,    \"_shards\"  : {      \"total\"  : 3,      \"successful\"  : 1,      \"failed\"  : 2,      \"failures\"  : [ {        \"shard\"  : 0,        \"index\"  : \"guests\" ,        \"node\"  : \"BmJBXb6JRDm89f6ljEA9HA\" ,        \"reason\"  : {          \"type\"  : \"search_parse_exception\" ,          \"reason\"  : \"No mapping found for  [uniqueNumericField] in order to sort on\"         }      } ]    },    ...  }     We should report such failures, be it only in a debug log. Maybe we should even throw an exception?","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2476?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-87101","commnet_date":"2016-12-06T01:53:52-0800","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 06\/Dec\/2016 01:53 AM    n        n        I couldn't reproduce the issue. Setting this aside for now, as we have more urgent matters. n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 06\/Dec\/2016 01:53 AM                      I couldn't reproduce the issue. Setting this aside for now, as we have more urgent matters.              n        n    n"},{"commnet_id":"comment-87701","commnet_date":"2016-12-16T02:05:27-0800","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 16\/Dec\/2016 02:05 AM    n        n        Solving this as \"Cannot reproduce\"; I'm not sure it was even valid.nnInitially the issue appeared in `org.hibernate.search.test.configuration.mutablefactory.MutableFactoryTest.testMultiThreadedAddClasses()`. It turned out another issue in this test was that indexes were being deleted and created during the test (n    n                n        n            n            HSEARCH-2480n        n                                                    Closed n             n), which was solved in https:\/\/github.com\/hibernate\/hibernate-search\/commit\/f6655fbd2649e5d6aac254870b39c58e584c5ccennIt may be that the shard failures we see here only happen when shards are being created. Then it would make sense for Elasticsearch to report this as a success, because those shards don't contain any data anyway. n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 16\/Dec\/2016 02:05 AM                      Solving this as \"Cannot reproduce\"; I'm not sure it was even valid. nn Initially the issue appeared in `org.hibernate.search.test.configuration.mutablefactory.MutableFactoryTest.testMultiThreadedAddClasses()`. It turned out another issue in this test was that indexes were being deleted and created  during  the test (n     n                 n         n             n            HSEARCH-2480n         n                                                     Closed n             n), which was solved in  https:\/\/github.com\/hibernate\/hibernate-search\/commit\/f6655fbd2649e5d6aac254870b39c58e584c5cce  nn It may be that the shard failures we see here only happen when shards are being created. Then it would make sense for Elasticsearch to report this as a success, because those shards don't contain any data anyway.              n        n    n"}]}},{"HHH-11255":{"info":{"issue_title":"@NaturalId mapping fails when using a composite natural identifier","issue_key":"HHH-11255","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.2.4","issue_component":"5.2.4","issue_labels":"5.2.4","issue_description":"When using a composite natural identifier:     @NaturalId  @Embedded  private  PostalCode postalCode;     and generating the schema using hbm2ddl, Hibernate throws the following exception:   org.hibernate.MappingException: Unable to find column with physical name postalCode in table PostalCarrier    \tat org.hibernate.boot.internal.InFlightMetadataCollectorImpl.getLogicalColumnName(InFlightMetadataCollectorImpl.java:1001)  \tat org.hibernate.boot.internal.InFlightMetadataCollectorImpl.getLogicalColumnName(InFlightMetadataCollectorImpl.java:971)  \tat org.hibernate.cfg.IndexOrUniqueKeySecondPass.doSecondPass(IndexOrUniqueKeySecondPass.java:69)","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11255?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-86203","commnet_date":"2016-11-17T07:24:36-0800","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 17\/Nov\/2016 07:24 AM    n        n        Gail Badner I think this should be migrated to 5.1 and 5.0 if it replicates there as well. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 17\/Nov\/2016 07:24 AM                       Gail Badner  I think this should be migrated to 5.1 and 5.0 if it replicates there as well.              n        n    n"}]}},{"HHH-11253":{"info":{"issue_title":"Make Byte Buddy BytecodeProvider impl the default","issue_key":"HHH-11253","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6.0.0.Alpha1","issue_labels":"6.0.0.Alpha1","issue_description":"Make Byte Buddy BytecodeProvider implementation the default BytecodeProvider.    Also, most likely drop Javassist BytecodeProvider implementation.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11253?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2471":{"info":{"issue_title":"Add support for projection on unmapped fields with Elasticsearch","issue_key":"HSEARCH-2471","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta4,                                            5.7.0.Beta1","issue_labels":"5.6.0.Beta4,                                            5.7.0.Beta1","issue_description":"Currently, we throw a SearchException for projections on fields that are not mapped to an entity (HSEARCH400019), whereas Lucene accepts that.  Since there already is an implementation of projection extraction without metadata (which is about to be removed, see                                                          HSEARCH-2470                                                              Closed                ), we might as well reuse that implementation for unknown fields. It may be what was originally intended.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2471?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1216":{"info":{"issue_title":"Documentation is missing example of mapping using inheritance in Neo4j","issue_key":"OGM-1216","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.1-next","issue_labels":"5.1-next","issue_description":"We should also check the there is an example for the other dialects and detail the support for HQL queries","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1216?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11252":{"info":{"issue_title":"Support fulltext search","issue_key":"HHH-11252","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"hibernate-core","issue_description":"I know there is hibernate-search module. But hibernate-search is no relationship with main database. Sometimes main database queries needs fulltext search.   Popular database vendors supports fulltext index, fulltext search.  \r\n MySQL http:\/\/dev.mysql.com\/doc\/refman\/5.7\/en\/fulltext-search.html\r\n PostGreSQL https:\/\/www.postgresql.org\/docs\/9.5\/static\/textsearch-tables.html\r\n Oracle http:\/\/stackoverflow.com\/a\/7440224\/976115","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11252?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-86100","commnet_date":"2016-11-16T02:29:35-0800","commnet_user":"Christian Beikov","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Christian Beikovn added a comment  - 16\/Nov\/2016 02:29 AM    n        n        May I ask how you expect such a support to look like? I mean you could just use FUNCTION to call specific SQL functions or add some SQLFunction implementations to abstract that for the FTS functionality. n    n    n        n            Show  n            n                        n    n    n    n                nn       Christian Beikovn added a comment  - 16\/Nov\/2016 02:29 AM                      May I ask how you expect such a support to look like? I mean you could just use  FUNCTION  to call specific SQL functions or add some SQLFunction implementations to abstract that for the FTS functionality.              n        n    n"},{"commnet_id":"comment-86102","commnet_date":"2016-11-16T02:35:03-0800","commnet_user":"hurelhuyag","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       hurelhuyagn added a comment  - 16\/Nov\/2016 02:35 AM    n        n        I tried to create SQLFunction. Here is my function. But no success.nnrnpublic  class MySQL56FulltextSQLFunction implements  SQLFunction {rnrn    @Overridern    <span class=\"code-keyword\">public<\/span> <span class=\"code-object\">boolean<\/span> hasArguments() {rn        <span class=\"code-keyword\">return<\/span> <span class=\"code-keyword\">true<\/span>;rn    }rnrn    @Overridern    public  boolean  hasParenthesesIfNoArguments() {rn        <span class=\"code-keyword\">return<\/span> <span class=\"code-keyword\">false<\/span>;rn    }rnrn    @Overridern    public  Type getReturnType(Type firstArgumentType, Mapping mapping) throws  QueryException {rn        <span class=\"code-keyword\">return<\/span> StandardBasicTypes.BOOLEAN;rn    }rnrn    @Overridern    public  String  render(Type firstArgumentType, List arguments, SessionFactoryImplementor factory) throws  QueryException {rn        <span class=\"code-keyword\">if<\/span> (arguments == <span class=\"code-keyword\">null<\/span> || arguments.size() &lt; 2){rn            <span class=\"code-keyword\">throw<\/span> <span class=\"code-keyword\">new<\/span> IllegalStateException(<span class=\"code-quote\">\"The function at least 2 arguments\"<\/span>);rn        }rn        StringBuilder result = new  StringBuilder(\"match(\" ).append(arguments.get(0));rn        int  last = arguments.size()-1;rn        for  (int  i=1; i&lt;last; i++){rn            result.append(<span class=\"code-quote\">\",\"<\/span>).append(arguments.get(i));rn        }rn        result.append(\") against(\" ).append(arguments.get(last)).append(\")\" );rn        return  result.toString();rn    }rn}rnrnpublic  class MySQL56InnoDBDialect extends  MySQL5InnoDBDialect {rnrn    <span class=\"code-keyword\">public<\/span> MySQL56InnoDBDialect() {rn        <span class=\"code-keyword\">super<\/span>();rn        registerFunction(<span class=\"code-quote\">\"fts\"<\/span>, <span class=\"code-keyword\">new<\/span> MySQL56FulltextSQLFunction());rn    }rn}rnn n    n    n        n            Show  n            n                        n    n    n    n                nn       hurelhuyagn added a comment  - 16\/Nov\/2016 02:35 AM                      I tried to create SQLFunction. Here is my function. But no success. n  n rn public  class MySQL56FulltextSQLFunction  implements  SQLFunction {rnrn    @Overridern     public   boolean  hasArguments() {rn         return   true ;rn    }rnrn    @Overridern     public   boolean  hasParenthesesIfNoArguments() {rn         return   false ;rn    }rnrn    @Overridern     public  Type getReturnType(Type firstArgumentType, Mapping mapping)  throws  QueryException {rn         return  StandardBasicTypes.BOOLEAN;rn    }rnrn    @Overridern     public   String  render(Type firstArgumentType, List arguments, SessionFactoryImplementor factory)  throws  QueryException {rn         if  (arguments ==  null  || arguments.size() &lt; 2){rn             throw   new  IllegalStateException( \"The function at least 2 arguments\" );rn        }rn        StringBuilder result =  new  StringBuilder( \"match(\" ).append(arguments.get(0));rn         int  last = arguments.size()-1;rn         for  ( int  i=1; i&lt;last; i++){rn            result.append( \",\" ).append(arguments.get(i));rn        }rn        result.append( \") against(\" ).append(arguments.get(last)).append( \")\" );rn         return  result.toString();rn    }rn}rnrn public  class MySQL56InnoDBDialect  extends  MySQL5InnoDBDialect {rnrn     public  MySQL56InnoDBDialect() {rn         super ();rn        registerFunction( \"fts\" ,  new  MySQL56FulltextSQLFunction());rn    }rn}rn n               n        n    n"},{"commnet_id":"comment-86104","commnet_date":"2016-11-16T02:48:02-0800","commnet_user":"hurelhuyag","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       hurelhuyagn added a comment  - 16\/Nov\/2016 02:48 AM    n        n        I need to generate fulltext query with multiple paramters. nnrnselect  * from  contents where  match(categoryIds) against('\"14\"  \"21\" ' IN BOOLEAN MODE);rnnnnin Criteria api nnrnRestrictions.fts('categoryIds', 14, 21);rnnnnin HQL nnUnable to find source-code formatter for language: jpql.  Available languages are: actionscript, html, java, javascript, none, sql, xhtml, xmlrn\"from Content c where fts('c.categoryIds', 14, 21)\" rnn n    n    n        n            Show  n            n                        n    n    n    n                nn       hurelhuyagn added a comment  - 16\/Nov\/2016 02:48 AM                      I need to generate fulltext query with multiple paramters.  n  n rn select  *  from  contents  where  match(categoryIds) against(' \"14\"   \"21\" ' IN BOOLEAN MODE);rn n  nn in Criteria api  n  n rnRestrictions.fts('categoryIds', 14, 21);rn n  nn in HQL  n  n  Unable to find source-code formatter for language: jpql.  Available languages are: actionscript, html, java, javascript, none, sql, xhtml, xml  rn \"from Content c where fts('c.categoryIds', 14, 21)\" rn n               n        n    n"},{"commnet_id":"comment-86105","commnet_date":"2016-11-16T02:57:11-0800","commnet_user":"Christian Beikov","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Christian Beikovn added a comment  - 16\/Nov\/2016 02:57 AM    n        n        Well if 'c.categoryIds' is an array as the name suggests you have to implement a user type for that too. Other than that, remvoe the quotes ' then Hibernate will pass the columns as argument to your function. n    n    n        n            Show  n            n                        n    n    n    n                nn       Christian Beikovn added a comment  - 16\/Nov\/2016 02:57 AM                      Well if 'c.categoryIds' is an array as the name suggests you have to implement a user type for that too. Other than that, remvoe the quotes  '  then Hibernate will pass the columns as argument to your function.              n        n    n"}]}},{"HSEARCH-2469":{"info":{"issue_title":"Ability to fail over to the next host when a request to an Elasticsearch host fails","issue_key":"HSEARCH-2469","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.8","issue_labels":"5.8","issue_description":"Following                                                          HSEARCH-2235                                                              Closed                , we allow users to configure multiple hosts and use them in turns (load-balancing). This is handled automatically by Jest.  Jest, however, does not handle failover. If we want to implement it, we'll have to either do it ourselves in JestClient or to contribute a patch.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2469?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1215":{"info":{"issue_title":"Remove [classname] from the documentation","issue_key":"OGM-1215","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0.Beta3","issue_labels":"5.1.0.Beta3","issue_description":"We are trying to make the sources of the documentation readable, other projects have already removed it and OGM should do the same.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1215?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1214":{"info":{"issue_title":"Upgrade neo4j-java-driver to version 1.0.6","issue_key":"OGM-1214","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0.Beta2","issue_labels":"5.1.0.Beta2","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1214?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1211":{"info":{"issue_title":"Optimise MongoDB generation of IDs","issue_key":"OGM-1211","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"mongodb","issue_description":"The code to generate unique numeric ids MongoDBDialect#nextValue is always issues at least two RPCs. It could benefit from initializing the initial values of each sequence upfront, probably at schema generation; if we know the initial value is written, we can issue only the update increment RPC.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1211?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11247":{"info":{"issue_title":"Allow Write-Behind Caching for Collections","issue_key":"HHH-11247","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"5.2.4","issue_component":"5.2.4","issue_labels":"5.2.4","issue_description":"I recently learned the hard way that collection caching is never write-through. Vlad Mihalcea argued it could be @Where and @Filter that this is not done. Are there any chances we could opt-out of that and have a write through cache on collections or are there further reasons that stand in the way of that?","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11247?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1210":{"info":{"issue_title":"Enhance working with inherited entities by using multiple Labels","issue_key":"OGM-1210","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.1.0.Beta1","issue_component":"5.1.0.Beta1","issue_labels":"5.1.0.Beta1","issue_description":"At the moment if you use an inheritance structure within your entity classes the nodes are not created correctly from my point of view.  If I model a structure like this...     @Entity(name = \"PERSON\" )  public  abstract  class Person {      @Id    @GeneratedValue(strategy = GenerationType.SEQUENCE,                    generator = \"personIdGenerator\" )    @SequenceGenerator(name = \"personIdGenerator\" ,                       sequenceName = \"personSequence\" ,                       initialValue = 1,                       allocationSize = 1)    @Column(name = \"Id\" )    private  Long  id;      @Column(name = \"Name\" )    private  String  name;        \/\/ other attributes + getter and setter   }        @Entity(name = \"PLAYER\" )  public  class Player extends  Person {      \/\/ further attributes + getter and setter   }     ... Hibernate-Ogm generates a Node with the Labels ENTITY and PERSON. Furthermore it gets the properties Id, Name and DTYPE. The DTYPE is then the name of the concrete subclass.\r\n From my point of view I would expect a Node with the Labels ENTITY, PERSON and PLAYER or ENTITY and PLAYER. I'm note absolutly sure what's the correct solution here but it feels strange not to be able to query my node like this:    \"MATCH (n:PLAYER) RETURN n\"     Instead I have to write it like this...    \"MATCH (n) WHERE n.DTYPE='PLAYER' RETURN n\"     ...which feels strange.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1210?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-86009","commnet_date":"2016-11-14T04:12:08-0800","commnet_user":"Davide D&#39;Alto","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Davide D&#39;Alton added a comment  - 14\/Nov\/2016 04:12 AM    n        n        Thanks Richard, that's a good point n    n    n        n            Show  n            n                        n    n    n    n                nn       Davide D&#39;Alton added a comment  - 14\/Nov\/2016 04:12 AM                      Thanks  Richard , that's a good point              n        n    n"},{"commnet_id":"comment-86010","commnet_date":"2016-11-14T04:14:44-0800","commnet_user":"Davide D&#39;Alto","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Davide D&#39;Alton added a comment  - 14\/Nov\/2016 04:14 AM    n        n        I think it make sense to have multiple labels in this case:nnYou should be able to execute both queries:nnnMATCH (n:PLAYER) RETURN nnnnnMATCH (n:PERSON) RETURN nn n    n    n        n            Show  n            n                        n    n    n    n                nn       Davide D&#39;Alton added a comment  - 14\/Nov\/2016 04:14 AM                      I think it make sense to have multiple labels in this case: nn You should be able to execute both queries: nn  n MATCH (n:PLAYER) RETURN n n  nn  n MATCH (n:PERSON) RETURN n n               n        n    n"},{"commnet_id":"comment-86109","commnet_date":"2016-11-16T04:36:05-0800","commnet_user":"Davide D&#39;Alto","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Davide D&#39;Alton added a comment  - 16\/Nov\/2016 04:36 AM    n        n        For your use case, if it is enough to have the node mapped as ENTITY and PLAYER you can use the annotation @Inheritance(strategy=TABLE_PER_CLASS)nnnrnt@Entityrnt@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)rntclass Person { ...}rnn n    n    n        n            Show  n            n                        n    n    n    n                nn       Davide D&#39;Alton added a comment  - 16\/Nov\/2016 04:36 AM                      For your use case, if it is enough to have the node mapped as ENTITY and PLAYER you can use the annotation @Inheritance(strategy=TABLE_PER_CLASS) nn  n rnt@Entityrnt@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)rntclass Person { ...}rn n               n        n    n"}]}},{"HHH-11246":{"info":{"issue_title":"Useless class lookup during constant conversion","issue_key":"HHH-11246","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Trivial","issue_affects_version":"Duplicate","issue_fix_version":"5.2.4","issue_component":"5.2.4","issue_labels":"5.2.4","issue_description":"Hibernate performs useless class lookup when applying the constant conversion. For instance, in the query SELECT p FROM Event p WHERE p.eventstart&lt;?1, there will be a class lookup for ch.astorm.entities.Event and for p.eventstart and this will occur each time the query needs to be compiled by Hibernate.\r\n There will be a warning in the logs just as mentioned in the issue                                                          HHH-11245                                                              Closed                .  The \"randomess\" described in                                                          HHH-11243                                                              Closed                 is caused by query plan caching (see                                                          HHH-4627                                                              Closed                ). Hence, to reproduce the warning systematically, a \"new\" query needs to be given to Hibernate, which is somewhat easy if they are not parametrized.\r\n So, I set the property hibernate.query.plan_cache_max_size to 40 (which will be the minimum accepted value because of the BoundedConcurrentHashMap fixed parameters created in QueryPlanCache) and created a simple loop in each query to force renewal of the cache:     entityManager.createQuery(\"SELECT p FROM Event p WHERE p.eventstart&lt;=?1 AND p.eventend&gt;=?2\" , Event.class);  for (int  qp=0 ; qp&lt;40 ; ++qp) {          \/\/generate a different query each time to force the query cache plan to renew           entityManager.createQuery(\"SELECT p FROM Event p WHERE 0=\" +qp);  }     My patch suggests transforming the method handleDotStructure in QueryTranslatorImpl (line 613) to:     private  void handleDotStructure(AST dotStructureRoot) {  \tfinal  String  expression = ASTUtil.getPathText( dotStructureRoot );   \tfinal  Object  entity = factory.getMetamodel().entity( expression );  \tif ( entity == null  &amp;&amp; expression.indexOf('.') != -1 ) { \/\/avoid some useless lookups   \t\t\/\/lookup &amp; constant transformation, if  any   \t}  }     This check will avoid entity lookups (because the expression ch.astorm.entities.Event will cause a lookup on ch.astorm.entities which will be always null), but the patterns like p.eventstart will still cause IMHO a useless lookup which could probably be avoided by using the parsed HQL query.  Any suggestion is welcome.\r\n Thanks in advance.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11246?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-87404","commnet_date":"2016-12-13T23:49:45-0800","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 13\/Dec\/2016 23:49 PM    n        n        This is a duplicate of https:\/\/hibernate.atlassian.net\/browse\/HHH-4959 n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 13\/Dec\/2016 23:49 PM                      This is a duplicate of  https:\/\/hibernate.atlassian.net\/browse\/HHH-4959               n        n    n"}]}},{"HHH-11245":{"info":{"issue_title":"Usage of a closed Thread Context ClassLoader","issue_key":"HHH-11245","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"5.2.4","issue_component":"5.2.4","issue_labels":"5.2.4","issue_description":"The org.hibernate.boot.registry.classloading.internal.ClassLoaderServiceImpl stores the thread context classloader during the startup. Since this ClassLoader is only available during the bootstrap, all further call to it will cause a warning in the logs, having the following stack:   Warning:   ASURLClassLoader EarClassLoader :   doneCalled = true  doneSnapshot = ASURLClassLoader.done() called ON EarClassLoader :   urlSet = [URLEntry : &lt;entries&gt;]  doneCalled = false    Parent -&gt; org.glassfish.internal.api.DelegatingClassLoader@7a442fc6   AT Fri Nov 11 20:10:22 CET 2016    BY :[java.lang.Thread.getStackTrace(Thread.java:1556), com.sun.enterprise.loader.ASURLClassLoader.done(ASURLClassLoader.java:216), com.sun.enterprise.loader.ASURLClassLoader.preDestroy(ASURLClassLoader.java:184), org.glassfish.javaee.full.deployment.EarClassLoader.preDestroy(EarClassLoader.java:100), org.glassfish.deployment.common.DeploymentContextImpl.getClassLoader(DeploymentContextImpl.java:266), org.glassfish.deployment.common.DeploymentContextImpl.getClassLoader(DeploymentContextImpl.java:216), com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:485), com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:219), org.glassfish.deployment.admin.DeployCommand.execute(DeployCommand.java:491), com.sun.enterprise.v3.admin.CommandRunnerImpl$2$1.run(CommandRunnerImpl.java:539), com.sun.enterprise.v3.admin.CommandRunnerImpl$2$1.run(CommandRunnerImpl.java:535), java.security.AccessController.doPrivileged(Native Method), javax.security.auth.Subject.doAs(Subject.java:360), com.sun.enterprise.v3.admin.CommandRunnerImpl$2.execute(CommandRunnerImpl.java:534), com.sun.enterprise.v3.admin.CommandRunnerImpl$3.run(CommandRunnerImpl.java:565), com.sun.enterprise.v3.admin.CommandRunnerImpl$3.run(CommandRunnerImpl.java:557), java.security.AccessController.doPrivileged(Native Method), javax.security.auth.Subject.doAs(Subject.java:360), com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:556), com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:1464), com.sun.enterprise.v3.admin.CommandRunnerImpl.access$1300(CommandRunnerImpl.java:109), com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1846), com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1722), com.sun.enterprise.v3.admin.AdminAdapter.doCommand(AdminAdapter.java:534), com.sun.enterprise.v3.admin.AdminAdapter.onMissingResource(AdminAdapter.java:224), org.glassfish.grizzly.http.server.StaticHttpHandlerBase.service(StaticHttpHandlerBase.java:189), com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459), com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167), org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:201), org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:175), org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235), org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119), org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:284), org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:201), org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:133), org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:112), org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77), org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:561), org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112), org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117), org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56), org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137), org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:565), org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:545), java.lang.Thread.run(Thread.java:745)] Parent -&gt; org.glassfish.internal.api.DelegatingClassLoader@7a442fc6   was requested to find class ch.astorm.entities after done was invoked from the following stack trace  java.lang.Throwable  \tat com.sun.enterprise.loader.ASURLClassLoader.findClassData(ASURLClassLoader.java:825)  \tat com.sun.enterprise.loader.ASURLClassLoader.findClass(ASURLClassLoader.java:742)  \tat java.lang.ClassLoader.loadClass(ClassLoader.java:424)  \tat java.lang.ClassLoader.loadClass(ClassLoader.java:357)  \tat org.hibernate.boot.registry.classloading.internal.ClassLoaderServiceImpl$AggregatedClassLoader.findClass(ClassLoaderServiceImpl.java:209)  \tat java.lang.ClassLoader.loadClass(ClassLoader.java:424)  \tat java.lang.ClassLoader.loadClass(ClassLoader.java:357)  \tat java.lang.Class.forName0(Native Method)  \tat java.lang.Class.forName(Class.java:348)  \tat org.hibernate.boot.registry.classloading.internal.ClassLoaderServiceImpl.classForName(ClassLoaderServiceImpl.java:226)  ...     This is done by the following piece of code in the class constructor (line 83):     \/\/ then the TCCL, if  one...   final  ClassLoader  tccl = locateTCCL();  if  ( tccl != null  ) {  \torderedClassLoaderSet.add( tccl );  }     Actually, this has no functional impact since the needed classes will always be found in the provided ClassLoader which is given by the EntityManagerFactoryBuilderImpl (line 360) because it's the PersistenceUnit's one and will always be available.  However, the adding of the TCCL should be configurable by a property and\/or be platform-configured by default (for Glassfish, SunOneJtaPlatform).  I attached a patch as proposal for a fix, which adds the property hibernate.classloader.tccl_lookup which can handle the values never,before,after, although I'm not sure it is relevant to handle the before and after behaviours... But I think it's interesting to have them since the thread context ClassLoader could change during the runtime.  Any feedback would be appreciated.\r\n Thanks in advance.  PS. This issue replaces                                                          HHH-11243                                                              Closed","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11245?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-86325","commnet_date":"2016-11-23T19:06:13-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 23\/Nov\/2016 19:06 PM    n        n        Andrea had already started the 5.2.5 release, so I'll get this into 5.2.6.  Thanks for the contribution Cedric! n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 23\/Nov\/2016 19:06 PM                      Andrea had already started the 5.2.5 release, so I'll get this into 5.2.6.  Thanks for the contribution Cedric!              n        n    n"},{"commnet_id":"comment-86402","commnet_date":"2016-11-24T03:11:38-0800","commnet_user":"Andrea Boriero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Andrea Borieron added a comment  - 24\/Nov\/2016 03:11 AM    n        n        Steve Ebersole still time to include it in 5.2.5. n    n    n        n            Show  n            n                        n    n    n    n                nn       Andrea Borieron added a comment  - 24\/Nov\/2016 03:11 AM                       Steve Ebersole  still time to include it in 5.2.5.              n        n    n"}]}},{"HSEARCH-2466":{"info":{"issue_title":"Prevent mappings that assign multiple types to a single field","issue_key":"HSEARCH-2466","issue_type":"Remove Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6","issue_labels":"6","issue_description":"We should prevent the situation described in                                                          HSEARCH-2448                                                              Closed                 to arise regardless of the indexing service.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2466?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2465":{"info":{"issue_title":"Drop support for @Field.indexNullAs \/ @IndexedEmbedded.indexNullAs","issue_key":"HSEARCH-2465","issue_type":"Remove Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6","issue_labels":"6","issue_description":"We can only consider this removal if we manage to resolve                                                          HSEARCH-2464                                                              Open                . Otherwise, we would harm a great many users.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2465?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-86012","commnet_date":"2016-11-14T05:22:03-0800","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 14\/Nov\/2016 05:22 AM    n        n        Note: I linked several tickets that would become irrelevant if we actually drop support for indexNullAs. They should be closed if this happens. n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 14\/Nov\/2016 05:22 AM                      Note: I linked several tickets that would become irrelevant if we actually drop support for  indexNullAs . They should be closed if this happens.              n        n    n"}]}},{"HSEARCH-2464":{"info":{"issue_title":"Add support for &quot;exists&quot; queries","issue_key":"HSEARCH-2464","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6","issue_labels":"6","issue_description":"As outlined in  , support for null tokens can be problematic in some situations.  It can trigger:   \tanalysis issues (when querying on a null token, you probably don't want your query to be analyzed) \tmapping issues (see                                                          HSEARCH-2389                                                              Open                 or                                                          HSEARCH-2415                                                              Closed                )    As Sanne Grinovero suggested in                                                          HSEARCH-2389                                                              Open                , a better solution might be to implement \"exists\" queries. They already exist in Elasticsearch, and maybe we could implement them easily with recent Lucene versions.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2464?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2463":{"info":{"issue_title":"Avoid non-trivial computation when accessing metadata","issue_key":"HSEARCH-2463","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6","issue_labels":"6","issue_description":"Currently, some metadata getters, such as TypeMetadata.getDocumentFieldMetadataFor, trigger a tree traversal through embedded types metadata.\r\n We probably want to cache such things, maybe by initializing a flattened view of all embedded metadata upon metadata generation.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2463?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1154":{"info":{"issue_title":"Make distribution and documentation buildable with JDK9","issue_key":"HV-1154","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.3.2.Final","issue_labels":"5.3.2.Final","issue_description":"This is a backport of some of the commits of: https:\/\/hibernate.atlassian.net\/browse\/HV-1147:  \thttps:\/\/github.com\/hibernate\/hibernate-validator\/commit\/df8bcc99af3f89df46215d754886e8d195a6472d \thttps:\/\/github.com\/hibernate\/hibernate-validator\/commit\/c81e0be266bc796c8e2c32853b368ad5c967e1cd \thttps:\/\/github.com\/hibernate\/hibernate-validator\/commit\/9afcc3e23fdb6f1312d5236ea5de66e106b7c054","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1154?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2462":{"info":{"issue_title":"Split internal metadata into two: agnostic metadata and indexing service specific metadata","issue_key":"HSEARCH-2462","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Critical","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6","issue_labels":"6","issue_description":"We want to make it as easy as possible for users to switch between indexing services (Lucene, Elasticsearch).  To that end, we would isolate as much as possible the mapping from the indexing services specifics.\r\n This means in particular that field bridges would no longer give access to Lucene-specific features (such as SortedDocValuesFields), but would only serve the purpose of transforming the data from the entity model to a generic document model. Then we'd have another layer (maybe customizable) that would transform the data from the generic document model to a document model that would be specific to an indexing   So we'd have:  Entity ====&#91;Field bridge&#93; ===&gt; Generic Document ====&#91;Indexing service specific bridge&#93; ===&gt; Indexing service specific document  Note that the indexing service specific bridge might only be a standard, non-customizable singleton (on contrary to field bridges): this is yet to be determined.  We'd likely require a reverse process when extracting query results:  Entity &lt;====&#91;Field bridge&#93; === Generic Document &lt;====&#91;Indexing service specific bridge&#93; === Indexing service specific document  See                                                          HSEARCH-2055                                                              Open                 for discussions about this \"FieldBridge 2.0\" API.  The purpose of this ticket is to discuss required changes to the metadata. Indeed, to support this process, we'd need metadata about the generic document model: which fields are supposed to be sortable, what are their types, their expected formats (for dates in particular), etc., so that the indexing service specific bridge would know how to interpret the generic document.\r\n Before starting the actual work, we'll probably need to enumerate the required metadata.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2462?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-85906","commnet_date":"2016-11-10T08:24:14-0800","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Yoann Rodiu00E8ren added a comment  - 10\/Nov\/2016 08:24 AM     - edited  n        n        One thing that would have to change, in particular, is that we'd organize metadata differently. For instance, we currently have a hierarchy:nnnrnTypeMetadatarn   =&gt; DocumentFieldMetadatarn      =&gt; Facet metadatarn      =&gt; BridgeDefinedFieldrn   =&gt; PropertyMetadatarn      =&gt; List of sortable fieldsrnnnnThere are multiple issues with this hierarchy:nnntJava properties are mixed with document fields. Ideally, we'd want to keep a clear separation between those, or at the very least making access to Java metadata totally optional from indexing service specific bridges (everything that's necessary should be in the \"generic document\" metadata)ntBridge-defined fields are second-class citizens, whereas they should be treated the same as fields defined directly in the mappingnnnnOne possibility would be something like that:nnnrnTypeMetadatarn   =&gt; GenericBridgeMetadatarn      =&gt; 1 java accessor (whole type or property)rn      =&gt; 1 bridgern      =&gt; Multiple resulting fields metadata (either defined in the mapping or by the bridge)rn         =&gt; Properties: type, is it sortable, is it stored, ...rnnnnTo achieve this, we'd probably have to make a clear distinction between simple bridges (one java object instance =&gt; one document field value) and more complex ones (one java object instance =&gt; multiple document field values). When mapping, some attributes would only make sense for simple bridges, such as the field name, the \"sortable\" attribute, ... This would probably result in two distinct annotations: maybe @Field (single field, optionally with a simple transformation function) and @Bridge (defines its own implementation-dependent set of fields)? n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Yoann Rodiu00E8ren added a comment  - 10\/Nov\/2016 08:24 AM     - edited                    One thing that would have to change, in particular, is that we'd organize metadata differently. For instance, we currently have a hierarchy: nn  n rnTypeMetadatarn   =&gt; DocumentFieldMetadatarn      =&gt; Facet metadatarn      =&gt; BridgeDefinedFieldrn   =&gt; PropertyMetadatarn      =&gt; List of sortable fieldsrn n  nn There are multiple issues with this hierarchy: nn nt Java properties are mixed with document fields. Ideally, we'd want to keep a clear separation between those, or at the very least making access to Java metadata totally optional from indexing service specific bridges (everything that's necessary should be in the \"generic document\" metadata) nt Bridge-defined fields are second-class citizens, whereas they should be treated the same as fields defined directly in the mapping n nnn One possibility would be something like that: nn  n rnTypeMetadatarn   =&gt; GenericBridgeMetadatarn      =&gt; 1 java accessor (whole type or property)rn      =&gt; 1 bridgern      =&gt; Multiple resulting fields metadata (either defined in the mapping or by the bridge)rn         =&gt; Properties: type, is it sortable, is it stored, ...rn n  nn To achieve this, we'd probably have to make a clear distinction between simple bridges (one java object instance =&gt; one document field value) and more complex ones (one java object instance =&gt; multiple document field values). When mapping, some attributes would only make sense for simple bridges, such as the field name, the \"sortable\" attribute, ... This would probably result in two distinct annotations: maybe  @Field  (single field, optionally with a  simple  transformation function) and  @Bridge  (defines its own implementation-dependent set of fields)?              n        n    n"},{"commnet_id":"comment-86802","commnet_date":"2016-12-01T04:50:55-0800","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 01\/Dec\/2016 04:50 AM    n        n        To be noted: if we do split metadata in two, it would probably make more sense for indexNullAs to be interpreted as string representations of the field value in the generic document.nnDates, for instance, are currently indexed as numbers with the Lucene indexing service, and as strings (more or less) with the Elasticsearch indexing service. So we currently require 'indexNullAs' to be formatted as numbers when using Lucene and as ISO-8601 strings when using Elasticsearch. Requiring users to always use an ISO-8601 string, regardless of the actual indexing format, would probably be better. n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 01\/Dec\/2016 04:50 AM                      To be noted: if we do split metadata in two, it would probably make more sense for indexNullAs to be interpreted as string representations of the field value in the  generic  document. nn Dates, for instance, are currently indexed as numbers with the Lucene indexing service, and as strings (more or less) with the Elasticsearch indexing service. So we currently require 'indexNullAs' to be formatted as numbers when using Lucene and as ISO-8601 strings when using Elasticsearch. Requiring users to always use an ISO-8601 string, regardless of the actual indexing format, would probably be better.              n        n    n"}]}},{"HHH-11235":{"info":{"issue_title":"split checkstyles into fatal and non-fatal configs","issue_key":"HHH-11235","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.5","issue_labels":"5.2.5","issue_description":"Having checkstyle report only include \"fatal violations\" would helps new contributors immensely.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11235?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-85808","commnet_date":"2016-11-09T09:39:01-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 09\/Nov\/2016 09:39 AM    n        n        The standard checkstyle task now does just \"fatal\" violation checks.  I added a new task nonFatalCheckstyle (depending on checkstyle). n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 09\/Nov\/2016 09:39 AM                      The standard  checkstyle  task now does just \"fatal\" violation checks.  I added a new task  nonFatalCheckstyle  (depending on  checkstyle ).              n        n    n"}]}},{"HSEARCH-2460":{"info":{"issue_title":"Prevent field bridges from bypassing @IndexedEmbedded prefixes","issue_key":"HSEARCH-2460","issue_type":"Remove Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6","issue_labels":"6","issue_description":"Currently, field bridges can define whatever name they want for their fields, and this name is used exactly as is.  Two issues arise from this situation:   1. It's not easy for field bridge implementors to override the default field name (prefix + java property name) properly: they are only given the default field name, with no indication whatsoever on what is the prefix and what is the name. Even with string manipulation, it may be impossible to tell one from the other (when the prefix is overridden, for instance). Most of the time, the easiest solution is to only add a suffix to the default field name, which is probably the sanest choice anyway.\r\n  2. Field bridge implementors can easily bypass the prefix and add a field to the root of the document, which is a dubious practice at best.  When we design the FieldBridge 2.0, we might want to tacle this (especially the second issue).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2460?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-85805","commnet_date":"2016-11-09T07:41:54-0800","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Yoann Rodiu00E8ren added a comment  - 09\/Nov\/2016 07:41 AM     - edited  n        n        We could solve the issue by only passing relative names to field bridges, and expecting them to output only relative names.nnFor instance:nnnrnpublic  class MyBridge implements  HibernateSearchComplexBridge {rn <span class=\"code-keyword\">private<\/span> FieldDefinition myField1;rn <span class=\"code-keyword\">private<\/span> FieldDefinition myField2;rn <span class=\"code-keyword\">private<\/span> FieldDefinition myField3;rn <span class=\"code-keyword\">public<\/span> void register(FieldRegistry registry, <span class=\"code-object\">String<\/span> defaultRelativeName) {rnu2002u2002 myField1 = registry.start(<span class=\"code-quote\">\"name1\"<\/span>, Types.SOME_TYPE). ...u2002u2002.build();rnu2002u2002 myField2 = registry.start(<span class=\"code-quote\">\"name2\"<\/span>, Types.SOME_TYPE). ...u2002u2002.build();rnu2002u2002 myField3 = registry.start(<span class=\"code-quote\">\"name3\"<\/span>, Types.SOME_TYPE). ...u2002u2002.build();rn }rn public  void set(org.hibernate.search.Document document, Object  value) {rn   document.set(myField1, someValue);rn   document.set(myField2, someValue);rn   document.set(myField3, someValue);rn }rn}rnnnnWhatever is behind the registry could simply prepend the relevant prefix to \"name1\", \"name2\", etc. n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Yoann Rodiu00E8ren added a comment  - 09\/Nov\/2016 07:41 AM     - edited                    We could solve the issue by only passing relative names to field bridges, and expecting them to output only relative names. nn For instance: nn  n rn public  class MyBridge  implements  HibernateSearchComplexBridge {rn  private  FieldDefinition myField1;rn  private  FieldDefinition myField2;rn  private  FieldDefinition myField3;rn  public  void register(FieldRegistry registry,  String  defaultRelativeName) {rnu2002u2002 myField1 = registry.start( \"name1\" , Types.SOME_TYPE). ...u2002u2002.build();rnu2002u2002 myField2 = registry.start( \"name2\" , Types.SOME_TYPE). ...u2002u2002.build();rnu2002u2002 myField3 = registry.start( \"name3\" , Types.SOME_TYPE). ...u2002u2002.build();rn }rn  public  void set(org.hibernate.search.Document document,  Object  value) {rn   document.set(myField1, someValue);rn   document.set(myField2, someValue);rn   document.set(myField3, someValue);rn }rn}rn n  nn Whatever is behind the registry could simply prepend the relevant prefix to \"name1\", \"name2\", etc.              n        n    n"}]}},{"HSEARCH-2459":{"info":{"issue_title":"Reuse ContainedInRecursionContext code when parsing annotations?","issue_key":"HSEARCH-2459","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6","issue_labels":"6","issue_description":"We have code responsible for keeping track of the recursion limits when taking ContainedIn into account at runtime:   \torg.hibernate.search.engine.spi.ContainedInRecursionContext \torg.hibernate.search.engine.spi.AbstractDocumentBuilder.updateContainedInRecursionContext(Object, ContainedInMetadata, ContainedInRecursionContext)    As it happens, the process of generating metadata requires similar code, but is currently implemented differently with:   \torg.hibernate.search.engine.metadata.impl.ParseContext and more specifically its methods isMaxLevelReached(), getMaxLevel(), setMaxLevel(int), getLevel(), incrementLevel() and decrementLevel() \torg.hibernate.search.engine.metadata.impl.PathsContext (which seems to also have an error-tracking purpose in org.hibernate.search.engine.metadata.impl.AnnotationMetadataProvider.validateAllPathsEncountered(XProperty, PathsContext, IndexedEmbedded)) \torg.hibernate.search.engine.metadata.impl.AnnotationMetadataProvider.checkForIndexedEmbedded(XProperty, Builder, String, boolean, Builder, ConfigContext, PathsContext, ParseContext) \torg.hibernate.search.engine.metadata.impl.AnnotationMetadataProvider.updatePaths(String, PathsContext, IndexedEmbedded) \torg.hibernate.search.engine.metadata.impl.AnnotationMetadataProvider.isInPath(String, PathsContext, IndexedEmbedded)    It may be a good idea to factor in these two implementations if they are indeed achieving a similar purpose. Especially since the ContainedInRecursionContext implementation seems simpler.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2459?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2458":{"info":{"issue_title":"Issue warnings (at least) when ignoring fields during the Elasticsearch mapping generation","issue_key":"HSEARCH-2458","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"5.6.0.Beta3","issue_component":"5.6.0.Beta3","issue_labels":"5.6.0.Beta3","issue_description":"Issue spotted here: https:\/\/github.com\/hibernate\/hibernate-search\/pull\/1217\/commits\/dfc7f199358808397d144d79d89f7915851db222#r87074164  Right now, we're only logging debug messages when failing to add a property\/field to the ES mapping:      \t\t\/\/ normal document fields   \t\tfor  ( DocumentFieldMetadata fieldMetadata : typeMetadata.getNonEmbeddedDocumentFieldMetadata() ) {  \t\t\ttry  {  \t\t\t\taddPropertyMapping( mappingBuilder, fieldMetadata );  \t\t\t}  \t\t\tcatch  (IncompleteDataException e) {  \t\t\t\tLOG.debug( \"Not adding a mapping for  field \"  + fieldMetadata.getAbsoluteName() + \" because of incomplete data\" , e );  \t\t\t}  \t\t}    \t\t\/\/ bridge-defined fields   \t\tfor  ( BridgeDefinedField bridgeDefinedField : getNonEmbeddedBridgeDefinedFields( typeMetadata ) ) {  \t\t\ttry  {  \t\t\t\taddPropertyMapping( mappingBuilder, bridgeDefinedField );  \t\t\t}  \t\t\tcatch  (IncompleteDataException e) {  \t\t\t\tLOG.debug( \"Not adding a mapping for  field \"  + bridgeDefinedField.getAbsoluteName() + \" because of incomplete data\" , e );  \t\t\t}  \t\t}    ....      \t\tfor  ( FacetMetadata facetMetadata : fieldMetadata.getFacetMetadata() ) {  \t\t\ttry  {  \t\t\t\taddFieldMapping( propertyMapping, mappingBuilder, facetMetadata );  \t\t\t}  \t\t\tcatch  (IncompleteDataException e) {  \t\t\t\tLOG.debug( \"Not adding a mapping for  facet \"  + facetMetadata.getAbsoluteName() + \" because of incomplete data\" , e );  \t\t\t}  \t\t}     The only way to get IncompleteDataException can be found in addTypeOptions:     ...  \t\t\t\tbreak ;  \t\t\tcase  UNKNOWN_NUMERIC:  \t\t\t\t\/\/ Likely a custom field bridge which does not expose the type of the given field; either correctly   \t\t\t\t\/\/ so (because the given name is the default  field and this  bridge does not wish to use that field   \t\t\t\t\/\/ name as is) or incorrectly; The field will not be added to the mapping, causing an exception at   \t\t\t\t\/\/ runtime if  the bridge writes that field nevertheless   \t\t\t\telasticsearchType = null ;  \t\t\t\tbreak ;  \t\t\tcase  STRING:  \t\t\tcase  UNKNOWN:  \t\t\tdefault :  \t\t\t\telasticsearchType = DataType.STRING;  \t\t\t\tbreak ;  \t\t}    \t\tif  ( elasticsearchType == null  ) {  \t\t\tthrow  new  IncompleteDataException( \"Field type could not be determined\"  );  \t\t}     While I understand that we might not want to make the mapping generation fail completely (so that users may test more easily), at least we should issue a warning. Or maybe even log an error.  Something to be considered: Sanne Grinovero expressed concerned about issuing warnings, since in some enterprises they are considered blocking when putting applications in production.  I feel like one of the purposes of warnings is to inform users about potential error, and leave it to the user to decide if it's bad or not. So in this case, it would be exactly what we need. Now, if it's blocking for some users...  Guillaume Smet, Sanne Grinovero, WDYT?","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2458?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-85801","commnet_date":"2016-11-09T05:30:37-0800","commnet_user":"Guillaume Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Guillaume Smetn added a comment  - 09\/Nov\/2016 05:30 AM    n        n        Yoann Rodiu00E8re Could you give us an example of a case where this error would be considered normal? n    n    n        n            Show  n            n                        n    n    n    n                nn       Guillaume Smetn added a comment  - 09\/Nov\/2016 05:30 AM                       Yoann Rodiu00E8re  Could you give us an example of a case where this error would be considered normal?              n        n    n"},{"commnet_id":"comment-85806","commnet_date":"2016-11-09T08:16:49-0800","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 09\/Nov\/2016 08:16 AM    n        n        Guillaume Smet There was one right in the code snippet:nnnrntttt\/\/ Likely a custom field bridge which does not expose the type of the given field; either correctlyrn tttt\/\/ so (because the given name is the default  field and this  bridge does not wish to use that fieldrn tttt\/\/ name as is) or incorrectly; The field will not be added to the mapping, causing an exception atrn tttt\/\/ runtime if  the bridge writes that field nevertheless rnnnnAnd it's actually the only case I can think of. So it would be when:nnntA given field has a field bridgentThis field bridge does not use (nor provide metadata for) the default field namentorg.hibernate.search.engine.metadata.impl.AnnotationMetadataProvider.determineNumericFieldEncoding(FieldBridge) fails to determine the numeric encodingntorg.hibernate.search.engine.metadata.impl.AnnotationMetadataProvider.isNumericField(NumericField, FieldBridge) returns truennnnIf that happened, there would be a numeric field with unknown encoding, and generating the mapping for such field is impossible.nnNow that I think of this, though, I wonder if this can even happen... I mean, this would require someone to put an @Numeric annotation on his field and to use a custom field bridge.\r\nnBefore we fixed n    n                n        n            n            HSEARCH-2330n        n                                                    Closed n             n that was a valid use case, because it was about the only way to make the default field numeric when using a custom field bridge. Now, though, it doesn't seem useful at all.nnAnyway, the comment above is not mine, so I'm not 100% sure why it was added. Here is the commit: https:\/\/github.com\/hibernate\/hibernate-search\/commit\/1450f9dd385ce810a09365beec02deba387d03af#diff-09eccad1a2093907e2d873d3193a4be7R309 I'd say maybe Gunnar Morling can help, but I doubt it given it's almost 1 year old...nnIf we decide that it's not useful anymore, then the solution to this ticket would simply throw an exception. n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 09\/Nov\/2016 08:16 AM                       Guillaume Smet  There was one right in the code snippet: nn  n rntttt \/\/ Likely a custom field bridge which does not expose the type of the given field; either correctlyrn tttt \/\/ so (because the given name is the  default  field and  this  bridge does not wish to use that fieldrn tttt \/\/ name as is) or incorrectly; The field will not be added to the mapping, causing an exception atrn tttt \/\/ runtime  if  the bridge writes that field nevertheless rn n  nn And it's actually the only case I can think of. So it would be when: nn nt A given field has a field bridge nt This field bridge does not use (nor provide metadata for) the default field name nt org.hibernate.search.engine.metadata.impl.AnnotationMetadataProvider.determineNumericFieldEncoding(FieldBridge) fails to determine the numeric encoding nt org.hibernate.search.engine.metadata.impl.AnnotationMetadataProvider.isNumericField(NumericField, FieldBridge) returns true n nnn If that happened, there would be a numeric field with unknown encoding, and generating the mapping for such field is impossible. nn Now that I think of this, though, I wonder if this can even happen... I mean, this would require someone to put an @Numeric annotation on his field  and  to use a custom field bridge. nBefore we fixed n     n                 n         n             n            HSEARCH-2330n         n                                                     Closed n             n that was a valid use case, because it was about the only way to make the default field numeric when using a custom field bridge. Now, though, it doesn't seem useful at all. nn Anyway, the comment above is not mine, so I'm not 100% sure why it was added. Here is the commit:  https:\/\/github.com\/hibernate\/hibernate-search\/commit\/1450f9dd385ce810a09365beec02deba387d03af#diff-09eccad1a2093907e2d873d3193a4be7R309  I'd say maybe  Gunnar Morling  can help, but I doubt it given it's almost 1 year old... nn If we decide that it's not useful anymore, then the solution to this ticket would simply throw an exception.              n        n    n"}]}},{"HHH-11233":{"info":{"issue_title":"JPA SQL function with no arguments can only be called if we provide a comma","issue_key":"HHH-11233","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.2.4","issue_component":"5.2.4","issue_labels":"5.2.4","issue_description":"Assuming that we want to call the NOW() database function from an entity query.  If we write the query like this:     Date now = entityManager.createQuery(      \"select FUNCTION('now') \"  +      \"from Event \"  +      \"where id = :id\" , Date.class)  .setParameter( \"id\" , 1L )  .getSingleResult();     We get the following exception thrown:   java.lang.IllegalArgumentException: org.hibernate.hql.internal.ast.QuerySyntaxException: expecting COMMA, found ')' near line 1, column 22 [select FUNCTION('now') from org.hibernate.test.sql.function.JpaFunctionTest$Event where id = :id]     If we provide a comma:     Date now = entityManager.createQuery(      \"select FUNCTION('now',) \"  +      \"from Event \"  +      \"where id = :id\" , Date.class)  .setParameter( \"id\" , 1L )  .getSingleResult();     It works fine.  However, according to JPA specs, the BNF is:   function_invocation::= FUNCTION(function_name {, function_arg}*)","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11233?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-86106","commnet_date":"2016-11-16T03:22:06-0800","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 16\/Nov\/2016 03:22 AM    n        n        Gail Badner you might want to backport this one if that's the case in 5.0 or 5.1. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 16\/Nov\/2016 03:22 AM                       Gail Badner  you might want to backport this one if that's the case in 5.0 or 5.1.              n        n    n"}]}},{"HHH-11231":{"info":{"issue_title":"[jpa] &#39;where 1=1&#39; works but &#39;where true&#39; and &#39;where 1&#39; fail","issue_key":"HHH-11231","issue_type":"New Feature","issue_status":"Awaiting Response","issue_priority":"Awaiting Response","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.2.2","issue_component":"5.2.2","issue_labels":"5.2.2","issue_description":"Not really sure if this is by design, but please review the following:  succeeds:    em.createQuery(\"from EventsEvent where 1=1\" );     fails:    em.createQuery(\"from EventsEvent where true \" );     fails:    em.createQuery(\"from EventsEvent where 1\" );     exception:\r\n org.hibernate.hql.internal.ast.QuerySyntaxException: unexpected AST node: true near line 1, column 85 [from tv.twelvetone.medusa.components.provider.sis.api.data.events.EventsEvent where true","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11231?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-85702","commnet_date":"2016-11-08T06:10:16-0800","commnet_user":"Steven Spungin","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steven Spunginn added a comment  - 08\/Nov\/2016 06:10 AM    n        n        BTW, I am using MySQL dialect. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steven Spunginn added a comment  - 08\/Nov\/2016 06:10 AM                      BTW, I am using MySQL dialect.              n        n    n"},{"commnet_id":"comment-86524","commnet_date":"2016-11-28T15:26:27-0800","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 28\/Nov\/2016 15:26 PM    n        n        Steven Spungin, I am seeing the same results that you mention. I scanned the JPA 2.1 spec and I don't see anything in the BNF that seems to support \"where true\" or \"where 1\", so I think this is probably expected.nnCan you point me to something in the BNF that suggests it should be supported?n n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 28\/Nov\/2016 15:26 PM                       Steven Spungin , I am seeing the same results that you mention. I scanned the JPA 2.1 spec and I don't see anything in the BNF that seems to support \"where true\" or \"where 1\", so I think this is probably expected. nn Can you point me to something in the BNF that suggests it should be supported? n             n        n    n"},{"commnet_id":"comment-86606","commnet_date":"2016-11-29T08:02:08-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 29\/Nov\/2016 08:02 AM    n        n        You wont find it.  Neither of those are valid according to JPA spec.  This would be a \"feature request\", but to be honest I do not see the benefit in supporting either of those. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 29\/Nov\/2016 08:02 AM                      You wont find it.  Neither of those are valid according to JPA spec.  This would be a \"feature request\", but to be honest I do not see the benefit in supporting either of those.              n        n    n"},{"commnet_id":"comment-87115","commnet_date":"2016-12-06T12:55:25-0800","commnet_user":"Steven Spungin","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steven Spunginn added a comment  - 06\/Dec\/2016 12:55 PM    n        n        They all seem to be valid predicates to me. nn I wrote my own custom dialect, so this is not a problem for me anymore, but it's surprising how little documentation there is concerning this.  It's also odd that &#91;where 1=1&#93;  is in the specs but &#91;where true&#93;  is not. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steven Spunginn added a comment  - 06\/Dec\/2016 12:55 PM                      They all seem to be valid predicates to me.  nn  I wrote my own custom dialect, so this is not a problem for me anymore, but it's surprising how little documentation there is concerning this.  It's also odd that  &#91;where 1=1&#93;  is in the specs but  &#91;where true&#93;  is not.              n        n    n"},{"commnet_id":"comment-87218","commnet_date":"2016-12-07T07:26:34-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 07\/Dec\/2016 07:26 AM    n        n        Even SQL does not support these.  JPQL and HQL are largely derived from SQL n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 07\/Dec\/2016 07:26 AM                      Even SQL does not support these.  JPQL and HQL are largely derived from SQL              n        n    n"},{"commnet_id":"comment-87229","commnet_date":"2016-12-07T18:39:52-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 07\/Dec\/2016 18:39 PM    n        n        What we (dev team) decided here is that we will not support TRUE\/FALSE as a predicates themselves.  nnWe may even optimize 1=1 to just drop that predicate altogether in the generated SQL.   n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 07\/Dec\/2016 18:39 PM                      What we (dev team) decided here is that we will not support TRUE\/FALSE as a predicates themselves.   nn We may even optimize 1=1 to just drop that predicate altogether in the generated SQL.                n        n    n"},{"commnet_id":"comment-87230","commnet_date":"2016-12-07T19:36:27-0800","commnet_user":"Steven Spungin","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steven Spunginn added a comment  - 07\/Dec\/2016 19:36 PM    n        n        I added true() and false() to my custom sql dialect as a work around.  It's useful when building an appended query that might not have any other predicates. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steven Spunginn added a comment  - 07\/Dec\/2016 19:36 PM                      I added true() and false() to my custom sql dialect as a work around.  It's useful when building an appended query that might not have any other predicates.              n        n    n"}]}},{"HV-1150":{"info":{"issue_title":"Minor infelicities in the Polish specific annotations javadoc","issue_key":"HV-1150","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.4.0.Beta1","issue_labels":"5.4.0.Beta1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1150?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1200":{"info":{"issue_title":"Upgrade Neo4j to version 3.0.7","issue_key":"OGM-1200","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0.Beta1","issue_labels":"5.1.0.Beta1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1200?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2455":{"info":{"issue_title":"Improve massindexer with Elasticsearch by disabling some refresh and replication","issue_key":"HSEARCH-2455","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.7","issue_labels":"5.7","issue_description":"Consider in MassIndexer to set refresh period to -1 (i.e. infinite) while doing mass indexer and then set back to the default value when it's done.\r\n Also consider changing the replicat # to 0 while indexing and back to its value when done. That's a bit dangerous so only do on initial indexing (fresh index without usage?).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2455?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-85556","commnet_date":"2016-11-04T06:57:45-0700","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 04\/Nov\/2016 06:57 AM    n        n        I don't think there's such a notion as \"initial indexing\" in Hibernate Search.\r\nnThere's a notion of purge before the indexing, though: maybe we could disable the replicas only when there's an initial purge? n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 04\/Nov\/2016 06:57 AM                      I don't think there's such a notion as \"initial indexing\" in Hibernate Search. nThere's a notion of purge before the indexing, though: maybe we could disable the replicas only when there's an initial purge?              n        n    n"},{"commnet_id":"comment-85560","commnet_date":"2016-11-04T07:06:55-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 04\/Nov\/2016 07:06 AM    n        n        Our current MassIndexer implementations don't really allow an \"index upgrade\" but always expect the index to be empty, so I'd always apply this flag. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 04\/Nov\/2016 07:06 AM                      Our current MassIndexer implementations don't really allow an \"index upgrade\" but always expect the index to be empty, so I'd always apply this flag.              n        n    n"}]}},{"HSEARCH-2454":{"info":{"issue_title":"Add support for (multi)fields in Elasticsearch to map the same property on several fields","issue_key":"HSEARCH-2454","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Duplicate","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"Today we map them into separate fields but Elasticsearch has the notion of subfields  https:\/\/www.elastic.co\/guide\/en\/elasticsearch\/reference\/5.0\/multi-fields.html  So the JSON doc would have the field value only once.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2454?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-86004","commnet_date":"2016-11-14T02:21:29-0800","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 14\/Nov\/2016 02:21 AM    n        n        Duplicates n    n                n        n            n            HSEARCH-2215n        n                                                    Open n             n. n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 14\/Nov\/2016 02:21 AM                      Duplicates n     n                 n         n             n            HSEARCH-2215n         n                                                     Open n             n.              n        n    n"}]}},{"HSEARCH-2453":{"info":{"issue_title":"Add support for Elasticsearch authentication","issue_key":"HSEARCH-2453","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"elasticsearch","issue_description":"JEST supports that for info","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2453?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2452":{"info":{"issue_title":"Add ability to pass several IPs to Elasticsearch host","issue_key":"HSEARCH-2452","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Duplicate","issue_fix_version":"None","issue_component":"None","issue_labels":"elasticsearch","issue_description":"Alternatively or in addition is to add discoveryEnabled option of JEST  This is necessary to get fail over support.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2452?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-85910","commnet_date":"2016-11-10T09:58:26-0800","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 10\/Nov\/2016 09:58 AM    n        n        Closing as duplicate of n    n                n        n            n            HSEARCH-2235n        n                                                    Closed n             n n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 10\/Nov\/2016 09:58 AM                      Closing as duplicate of n     n                 n         n             n            HSEARCH-2235n         n                                                     Closed n             n              n        n    n"}]}},{"HSEARCH-2450":{"info":{"issue_title":"In internal metadata, provide access to BridgeDefinedFields through their source document field","issue_key":"HSEARCH-2450","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"5.6.0.Beta3","issue_component":"5.6.0.Beta3","issue_labels":"5.6.0.Beta3","issue_description":"We currently have to go through every possible document field source to collect bridge-defined fields (properties + class bridges), which really isn't practical.  Moving the bridge definitions to the document field on which their source field bridge was applied would make it easier to use the metadata.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2450?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11225":{"info":{"issue_title":"Add CriteriaBuilder overloads for methods dealing with Collection to also deal with Map","issue_key":"HHH-11225","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.5","issue_labels":"5.2.5","issue_description":"The JPA CriteriaBuilder contract defines the following methods in relation to Collections:  \tjavax.persistence.criteria.CriteriaBuilder#isEmpty \tjavax.persistence.criteria.CriteriaBuilder#isNotEmpty \tjavax.persistence.criteria.CriteriaBuilder#size    But it defines no support for any of these in regards to a Map.  We should add support for these predicates against Maps to our CriteriaBuilderImpl.  See http:\/\/stackoverflow.com\/questions\/40259448\/jpa-criteriabuilder-to-generate-query-where-map-is-empty-using-mapkeycolumn","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11225?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-85712","commnet_date":"2016-11-08T09:46:47-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 08\/Nov\/2016 09:46 AM    n        n        Due to type-erasure we cannot name these the same as the javax.persistence.criteria.CriteriaBuilder counterparts.  We could for the form of #size taking a Collection but for consistency with these other new methods, I propose we do not.  So we will have the following additions:nnnt&lt;M extends Map&lt;?,?&gt;&gt; Predicate isMapEmpty(Expression&lt;M&gt; mapExpression);nt&lt;M extends Map&lt;?,?&gt;&gt; Predicate isMapNotEmpty(Expression&lt;M&gt; mapExpression);nt&lt;M extends Map&lt;?,?&gt;&gt; Expression&lt;Integer&gt; mapSize(Expression&lt;M&gt; mapExpression);nt&lt;M extends Map&lt;?,?&gt;&gt; Expression&lt;Integer&gt; mapSize(M map);nnnnn n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 08\/Nov\/2016 09:46 AM                      Due to type-erasure we cannot name these the same as the  javax.persistence.criteria.CriteriaBuilder  counterparts.  We  could  for the form of  #size  taking a  Collection  but for consistency with these other new methods, I propose we do not.  So we will have the following additions: nn nt &lt;M extends Map&lt;?,?&gt;&gt; Predicate isMapEmpty(Expression&lt;M&gt; mapExpression); nt &lt;M extends Map&lt;?,?&gt;&gt; Predicate isMapNotEmpty(Expression&lt;M&gt; mapExpression); nt &lt;M extends Map&lt;?,?&gt;&gt; Expression&lt;Integer&gt; mapSize(Expression&lt;M&gt; mapExpression); nt &lt;M extends Map&lt;?,?&gt;&gt; Expression&lt;Integer&gt; mapSize(M map); n nnnn             n        n    n"},{"commnet_id":"comment-85714","commnet_date":"2016-11-08T11:10:12-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 08\/Nov\/2016 11:10 AM    n        n        For what it is worth... Locally I was able to use CriteriaBuilder#isEmpty with a Map even though the signature is clearly defined only for Expression&lt;Collection&gt; - no explanation as to why.nnRegardless, I have added the methods above.nnNote that n    n                n        n            n            HHH-6686n        n                                                    Open n             n affects these new #isMap&#91;Not&#93; Empty methods too...n n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 08\/Nov\/2016 11:10 AM                      For what it is worth... Locally I was able to use  CriteriaBuilder#isEmpty  with a Map even though the signature is clearly defined only for  Expression&lt;Collection&gt;  - no explanation as to why. nn Regardless, I have added the methods above. nn Note that n     n                 n         n             n            HHH-6686n         n                                                     Open n             n affects these new  #isMap &#91;Not&#93; Empty  methods too... n             n        n    n"}]}},{"HHH-11224":{"info":{"issue_title":"built in support for converting Ceylon types to Java types","issue_key":"HHH-11224","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.2.4","issue_component":"5.2.4","issue_labels":"5.2.4","issue_description":"I would like a lightweight way to have Hibernate automatically convert Ceylon types like ceylon.language.String and ceylon.language.Integer to java.lang.String and java.lang.Long when the Ceylon type is passed to    \tEntityManager.find() and friends, or to \tQuery.setParameter().    I was thinking that this could be something as simple as an implicit contract to call a stringValue() or longValue() method instead of throwing stuff like:  java.lang.IllegalArgumentException: Provided id of the wrong type for class jaxrs.example.entity.Employee. Expected: class java.lang.Long, got class ceylon.language.Integer  But I'm open to other suggestions. What I don't want to have to do is go annotating everything explicitly with JPA's @Convert. And I want it to work when I don't have complete control over Hibernate, for example, when Hibernate is instantiated by Spring or by Java EE.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11224?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-85521","commnet_date":"2016-11-04T01:14:04-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 04\/Nov\/2016 01:14 AM    n        n        Could you define converters that are auto-applied (@Converter(autoApply=true) on the definition of converters, not attributes using them)?nnThat has the advantage that you could provide them in a Ceylon\/ORM integration module which is thrown into the mix when using Hibernate ORM with Ceylon. Java EE and Spring should consider @Converter types during their scanning. Some config may be needed only to enable that integration module for scanning. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 04\/Nov\/2016 01:14 AM                      Could you define converters that are auto-applied ( @Converter(autoApply=true)  on the  definition  of converters, not attributes using them)? nn That has the advantage that you could provide them in a Ceylon\/ORM integration module which is thrown into the mix when using Hibernate ORM with Ceylon. Java EE and Spring should consider  @Converter  types during their scanning. Some config may be needed only to enable that integration module for scanning.              n        n    n"},{"commnet_id":"comment-85524","commnet_date":"2016-11-04T01:27:04-0700","commnet_user":"Gavin King","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gavin Kingn added a comment  - 04\/Nov\/2016 01:27 AM    n        n        Well, the problem is that AFAICT autoApply'd converters only work when they're defined and packaged in the persistence unit. In this case I would want to package the converter in a separate .car file.nnFurthermore, the underlying field in the entity is just a plain `long`, so I'm not sure if the converter would actually be used? n    n    n        n            Show  n            n                        n    n    n    n                nn       Gavin Kingn added a comment  - 04\/Nov\/2016 01:27 AM                      Well, the problem is that AFAICT  autoApply 'd converters only work when they're defined and packaged in the persistence unit. In this case I would want to package the converter in a separate  .car  file. nn Furthermore, the underlying field in the entity is just a plain `long`, so I'm not sure if the converter would actually be used?              n        n    n"}]}},{"HSEARCH-2449":{"info":{"issue_title":"Allow configuration of the pool sizes, timeouts and autodiscovery for the Jest client connections","issue_key":"HSEARCH-2449","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.CR1,                                            5.7.0.Beta2","issue_labels":"5.6.0.CR1,                                            5.7.0.Beta2","issue_description":"To really get the Jest client usable for production, we need to expose the following configurations:  \tthe pool sizes \tthe different timeouts on the HTTP requests - it might even be a good idea to set the read timeout a bit higher by default (AFAICS the default for Jest is 3 seconds) \tthe autodiscovery feature - which allows failover and discovery of new nodes in the cluster: there is a boolean and a frequency: we should at least expose the boolean    To be clear, the autodiscovery only brings \"overall\" failover, not \"per-request\" failover. It only implies that failing nodes will eventually be removed from the server list, but a failing request caused by a failing node will not be tried again on another node. Thus                                                          HSEARCH-2469                                                              Open                 will still be valid even if we add autodiscovery.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2449?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2448":{"info":{"issue_title":"Throw exceptions with clear messages when there are field type conflicts with Elasticsearch","issue_key":"HSEARCH-2448","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.6.0.Beta3","issue_component":"5.6.0.Beta3","issue_labels":"5.6.0.Beta3","issue_description":"With the Lucene backend, we used to allow using a specific path as both a composite object and a concrete object (string, long, etc). For instance, if we have something like this:     myComposite.leaf=foo  myComposite=bar     Then myComposite may hold both a concrete value (\"bar\") and sub-fields (myComposite.leaf).  A concrete case when this could happen is when you have a property annotated with both @Field and @IndexedEmbedded:     @IndexedEmbedded(prefix = \"myComposite.\" )  @Field(name = \"myComposite\" )  private  MyComposite myComposite;     This works alright with Lucene, because there is no such thing as a composite object: the data is flattened and stored as a big bag of key\/value pairs.\r\n But with Elasticsearch, this is not the case, at least not when interacting through the APIs: composite object have dedicated types (the object and nested datatypes), and those do not allow storing concrete values (only sub-fields).  Currently though, we do not check for such cases, and when an error happens, it's rather cryptic because it comes from Elasticsearch and does not have much context.  We should make sure that we throw clear exceptions:   \twhen generating the mapping, we should throw an exception with a clear message when an ES property has multiple types (object and something else). Currently, the last encountered wins, and we may end up with properties with the long datatype (for instance) that also have their own properties, which will make ES cry. \twhen mapping generation is disabled, we should make sure to throw an exception anyway. We may do this at runtime (when using conflicting fields in projections, sorts or queries) or when boostrapping, whichever is easier.    The limitations have already been documented as part of                                                          HSEARCH-2396                                                              Closed                .","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2448?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-86505","commnet_date":"2016-11-28T02:03:34-0800","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 28\/Nov\/2016 02:03 AM    n        n        Actually, we need to fix n    n                n        n            n            HSEARCH-2419n        n                                                    Closed n             n first. The reason is that the bug mentioned in n    n                n        n            n            HSEARCH-2419n        n                                                    Closed n             n requires users to do exactly what we want to prevent: add both an @IndexedEmbedded and a @Field annotations to the same field. n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 28\/Nov\/2016 02:03 AM                      Actually, we need to fix n     n                 n         n             n            HSEARCH-2419n         n                                                     Closed n             n first. The reason is that the bug mentioned in n     n                 n         n             n            HSEARCH-2419n         n                                                     Closed n             n requires users to do exactly what we want to prevent: add both an  @IndexedEmbedded  and a  @Field  annotations to the same field.              n        n    n"}]}},{"HSEARCH-2447":{"info":{"issue_title":"Make it easier to add sortable fields from custom field bridges","issue_key":"HSEARCH-2447","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.6.0.Beta3","issue_component":"5.6.0.Beta3","issue_labels":"5.6.0.Beta3","issue_description":"See https:\/\/github.com\/hibernate\/hibernate-search\/pull\/1212#discussion_r86206665  Custom field bridges which provide sortable fields don't have their doc values added automatically, because we prevent that explicitly in org.hibernate.search.engine.spi.DocumentBuilderIndexedEntity.addSortFieldDocValues(Document, PropertyMetadata, float, Object). That behavior is documented:  Fields added through class-level bridges or custom field-level bridges (when not using the default field name) cannot\r\n be marked as sortable by means of the `@SortableField` annotation. Instead the field bridge itself has to add the\r\n required doc value fields, in addition to the document fields it adds. Furthermore such bridge needs to implement the\r\n `MetadataProvidingFieldBridge` interface which defines a method `configureFieldMetadata()` for marking the fields\r\n created by this bridge as sortable:  We should do something to make that easier.  One solution would be to provide methods in LuceneOptions to add sortable fields (internally, we'd add the docvalues along with the standard field).  Another solution would be to simply remove the requirement for field bridges to provide the doc values field themselves: we could do that for them. It seems it would be easy enough as long as the custom field bridge adds a standard field (IntField, DoubleField, etc.) with the value to sort on.  However, I just checked: the sortable() thing in custom field bridges has been added in 5.5.1 \/ 5.6.0:                                                          HSEARCH-2021                                                              Closed                . So the second solution would mean introducing breaking changes...","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2447?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2446":{"info":{"issue_title":"Allow Numeric Faceting from FieldBridge","issue_key":"HSEARCH-2446","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"5.5.5.Final","issue_component":"5.5.5.Final","issue_labels":"5.5.5.Final","issue_description":"I'm trying to create numeric facet index from bridge. I found DoubleDocValuesField from hibernate-search's source code But can't use it in query. I also tried SortedSetDocValuesFacetField it working but it's string. String doesn't support range faceting. I need range facetable dynamic property something like this.     public  class AttrFieldBridge implements  FieldBridge {    public  void set(String  name, Object  value, Document document, LuceneOptions luceneOptions) {      if  (value != null ) {          @SuppressWarnings(\"unchecked\" )          List&lt;Attribute&gt; attrs = (List&lt;Attribute&gt;) value;          for  (Attribute attr : attrs){              String  fieldName = name+\"_\" +attr.getAttributeId();              double  fieldValue = attr.getVal();                document.add(new  DoubleDocValuesField(fieldName, fieldValue));              document.add(new  DoubleField(fieldName, fieldValue, Field.Store.NO));          }      }  }      I created stackoverflow question.\r\n http:\/\/stackoverflow.com\/questions\/40380449\/how-to-index-numeric-value-for-range-facet\/40398415","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2446?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11223":{"info":{"issue_title":"Initialize bytecode enhanced lazy to-one using a single SQL statement","issue_key":"HHH-11223","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"Currently, 2 SQL statements are executed when a bytecode enhanced lazy to-one is initialized.  For example, suppose Order#customer is a many-to-one association: \r\n 1) Loads the FK value (select o.customer_id from orders o where o.id = ?)\r\n 2) Loads the related state (select ... from customers c where c.id = ?)  This issue involves combining the 2 SQL statements into a single statement using a join.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11223?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2445":{"info":{"issue_title":"Improve error handling","issue_key":"HSEARCH-2445","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.6.0.Beta3","issue_component":"5.6.0.Beta3","issue_labels":"5.6.0.Beta3","issue_description":"Currently it's possible to set an error handler at search integration level, by using the property hibernate.search.error_handler pointing to a implementation class. The error handler is a callback that presents the exception and an org.hibernate.search.exception.ErrorContext that contains the works that failed and the Throwable  On a particular Infinispan index manager, sometimes it may be desirable to retry some indexing operations when a particular exception happens in the backend, and the current mechanism poses some challenges:   \tThe error handler is at SearchIntegrator level, so all shards (index managers) share the same error handler; \tThere's no indication of which index manager that the error occurred; \tIt's not possible to compose multiple error handlers into one, which would allow to first do a RetryErrorHandler and then delegate it to the LogErrorHandler if it fails.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2445?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-85480","commnet_date":"2016-11-02T03:18:42-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 02\/Nov\/2016 03:18 AM    n        n        We could add more context to org.hibernate.search.exception.ErrorContext; specifically we could add:nntString getIndexManagerName();ntString getShardIdentifier();nnnnThe shardname method is redundant as it could be inferred from the IndexManager name, but I guess it could be useful. Would these help for your use case?\r\nnWould you rather need a reference to the IndexManager instance, or a reference to other backend components?nnI'm not sure what you mean by \"It's not possible to compose multiple error handlers into one\".  Is something preventing you from creating a composite implementation, or is it that you'd expect to be able to provide multiple of them and have the search-engine facilitate the composition? n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 02\/Nov\/2016 03:18 AM                      We could add more context to  org.hibernate.search.exception.ErrorContext ; specifically we could add: n nt String getIndexManagerName(); nt String getShardIdentifier(); n nnn The shardname method is redundant as it could be inferred from the IndexManager name, but I guess it could be useful. Would these help for your use case? nWould you rather need a reference to the IndexManager instance, or a reference to other backend components? nn I'm not sure what you mean by \"It's not possible to compose multiple error handlers into one\".  Is something preventing you from creating a composite implementation, or is it that you'd expect to be able to provide multiple of them and have the search-engine facilitate the composition?              n        n    n"},{"commnet_id":"comment-85482","commnet_date":"2016-11-02T03:31:46-0700","commnet_user":"Gustavo Fernandes","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gustavo Fernandesn added a comment  - 02\/Nov\/2016 03:31 AM    n        n        IndexMamanager getIndexManager();   would be ideal, as it contains the other attributes you mentioned.nnI'm not sure what you mean by \"It's not possible to compose multiple error handlers into one\"nnI meant the engine does not offer composition support for multiple error handlers, Index Manager implementors and users need to compose themselves, potentially wrapping the default logging error handler but adding another behaviours. I'd say this is minor though, the important thing is having more feedback about the error. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gustavo Fernandesn added a comment  - 02\/Nov\/2016 03:31 AM                       IndexMamanager getIndexManager();    would be ideal, as it contains the other attributes you mentioned. nn  I'm not sure what you mean by \"It's not possible to compose multiple error handlers into one\"  nn I meant the engine does not offer composition support for multiple error handlers, Index Manager implementors and users need to compose themselves, potentially wrapping the default logging error handler but adding another behaviours. I'd say this is minor though, the important thing is having more feedback about the error.              n        n    n"}]}},{"HSEARCH-2444":{"info":{"issue_title":"Consider putting @Field on the basic collection TYPE_USE","issue_key":"HSEARCH-2444","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6","issue_labels":"6","issue_description":"If we go for Java Se 8 only, we could do the following     \t@ElementCollection  \t@IndexedEmbedded  \tpublic  List&lt;@Field String &gt; tags = new  ArrayList&lt;&gt;();     instead of     \t@ElementCollection  \t@IndexedEmbedded          @Field  \tpublic  List&lt;String &gt; tags = new  ArrayList&lt;&gt;();","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2444?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2443":{"info":{"issue_title":"Hibernate Search pom leads to incorrect dependencies used in client project","issue_key":"HSEARCH-2443","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Won&#39;t Fix","issue_fix_version":"5.6.0.Beta3","issue_component":"5.6.0.Beta3","issue_labels":"5.6.0.Beta3","issue_description":"I found a usability issue while working on a demo.  Here is my POM     \t&lt;properties&gt;   \t\t&lt;project.build.sourceEncoding&gt; UTF-8&lt;\/project.build.sourceEncoding&gt;   \t\t&lt;project.reporting.outputEncoding&gt; UTF-8&lt;\/project.reporting.outputEncoding&gt;   \t\t&lt;maven.compiler.source&gt; 1.8&lt;\/maven.compiler.source&gt;   \t\t&lt;maven.compiler.target&gt; 1.8&lt;\/maven.compiler.target&gt;     \t\t&lt;version.org.hibernate.orm&gt; 5.1.2.Final&lt;\/version.org.hibernate.orm&gt;   \t\t&lt;version.org.hibernate.search&gt; 5.6.0.Beta3&lt;\/version.org.hibernate.search&gt;   \t\t&lt;slf4jVersion&gt; 1.6.4&lt;\/slf4jVersion&gt;   \t&lt;\/properties&gt;     \t&lt;dependencies&gt;   \t\t&lt;!-- Compile --&gt;    \t\t&lt;dependency&gt;   \t\t\t&lt;groupId&gt; org.hibernate&lt;\/groupId&gt;   \t\t\t&lt;artifactId&gt; hibernate-search-orm&lt;\/artifactId&gt;   \t\t\t&lt;version&gt; ${version.org.hibernate.search}&lt;\/version&gt;   \t\t&lt;\/dependency&gt;   \t\t&lt;dependency&gt;   \t\t\t&lt;groupId&gt; org.hibernate&lt;\/groupId&gt;   \t\t\t&lt;artifactId&gt; hibernate-search-elasticsearch&lt;\/artifactId&gt;   \t\t\t&lt;version&gt; ${version.org.hibernate.search}&lt;\/version&gt;   \t\t&lt;\/dependency&gt;   \t\t&lt;dependency&gt;   \t\t\t&lt;groupId&gt; org.hibernate&lt;\/groupId&gt;   \t\t\t&lt;artifactId&gt; hibernate-entitymanager&lt;\/artifactId&gt;   \t\t\t&lt;version&gt; ${version.org.hibernate.orm}&lt;\/version&gt;   \t\t&lt;\/dependency&gt;      But in the runtime logs, I see that ORM 5.1.0 is used (the version selected by Hibernate Search's POM).     [2016-11-02 08:43:38,485][INFO ][org.hibernate.Version    ] HHH000412: Hibernate Core {5.1.0.Final}     One way out is to do     \t\t&lt;dependency&gt;   \t\t\t&lt;groupId&gt; org.hibernate&lt;\/groupId&gt;   \t\t\t&lt;artifactId&gt; hibernate-search-elasticsearch&lt;\/artifactId&gt;   \t\t\t&lt;version&gt; ${version.org.hibernate.search}&lt;\/version&gt;   \t\t\t&lt;exclusions&gt;   \t\t\t\t&lt;exclusion&gt;   \t\t\t\t\t&lt;groupId&gt; org.hibernate&lt;\/groupId&gt;   \t\t\t\t\t&lt;artifactId&gt; hibernate-core&lt;\/artifactId&gt;   \t\t\t\t\t&lt;artifactId&gt; hibernate-entitymanager&lt;\/artifactId&gt;   \t\t\t\t&lt;\/exclusion&gt;   \t\t\t&lt;\/exclusions&gt;   \t\t&lt;\/dependency&gt;      But that is not very nice for users.  Is there anything we could do? Maybe making hibernate-entitymanager and hibernate-core optional dependencies in hibernate-search-orm?","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2443?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-85477","commnet_date":"2016-11-02T01:08:41-0700","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 02\/Nov\/2016 01:08 AM    n        n        Making hibernate-entitymanager and hibernate-core provided in hibernate-search-orm would harm simpler use (where you don't specify the Hibernate version). From a user's perspective, I wouldn't like the artifact I use to require me to know about their dependencies in order for them to work properly... That is, unless you meant something else when you said \"optional dependencies\".nnA solution to your issue is to specify the dependency without the version, and to fix the version using dependency management instead. Then you don't need exclusion anymore. This is actually a really common issue when building application on top of multiple external libraries, so I don't think it's worth a workaround. Unless, again, I missed the point.nnnrnt&lt;properties&gt; rntt&lt;project.build.sourceEncoding&gt; UTF-8&lt;\/project.build.sourceEncoding&gt; rntt&lt;project.reporting.outputEncoding&gt; UTF-8&lt;\/project.reporting.outputEncoding&gt; rntt&lt;maven.compiler.source&gt; 1.8&lt;\/maven.compiler.source&gt; rntt&lt;maven.compiler.target&gt; 1.8&lt;\/maven.compiler.target&gt; rnrntt&lt;version.org.hibernate.orm&gt; 5.1.2.Final&lt;\/version.org.hibernate.orm&gt; rntt&lt;version.org.hibernate.search&gt; 5.6.0.Beta3&lt;\/version.org.hibernate.search&gt; rntt&lt;slf4jVersion&gt; 1.6.4&lt;\/slf4jVersion&gt; rnt&lt;\/properties&gt; rnrnt&lt;dependencies&gt; rntt&lt;dependency&gt; rnttt&lt;groupId&gt; org.hibernate&lt;\/groupId&gt; rnttt&lt;artifactId&gt; hibernate-search-orm&lt;\/artifactId&gt; rntt&lt;\/dependency&gt; rntt&lt;dependency&gt; rnttt&lt;groupId&gt; org.hibernate&lt;\/groupId&gt; rnttt&lt;artifactId&gt; hibernate-search-elasticsearch&lt;\/artifactId&gt; rntt&lt;\/dependency&gt; rntt&lt;dependency&gt; rnttt&lt;groupId&gt; org.hibernate&lt;\/groupId&gt; rnttt&lt;artifactId&gt; hibernate-entitymanager&lt;\/artifactId&gt; rntt&lt;\/dependency&gt; rnt&lt;\/dependencies&gt; rnrnt&lt;dependencyManagement&gt; rntt&lt;dependency&gt; rnttt&lt;groupId&gt; org.hibernate&lt;\/groupId&gt; rnttt&lt;artifactId&gt; hibernate-search-orm&lt;\/artifactId&gt; rnttt&lt;version&gt; ${version.org.hibernate.search}&lt;\/version&gt; rntt&lt;\/dependency&gt; rntt&lt;dependency&gt; rnttt&lt;groupId&gt; org.hibernate&lt;\/groupId&gt; rnttt&lt;artifactId&gt; hibernate-search-elasticsearch&lt;\/artifactId&gt; rnttt&lt;version&gt; ${version.org.hibernate.search}&lt;\/version&gt; rntt&lt;\/dependency&gt; rntt&lt;dependency&gt; rnttt&lt;groupId&gt; org.hibernate&lt;\/groupId&gt; rnttt&lt;artifactId&gt; hibernate-entitymanager&lt;\/artifactId&gt; rnttt&lt;version&gt; ${version.org.hibernate.orm}&lt;\/version&gt; rntt&lt;\/dependency&gt; rntt&lt;dependency&gt; rnttt&lt;groupId&gt; org.hibernate&lt;\/groupId&gt; rnttt&lt;artifactId&gt; hibernate-core&lt;\/artifactId&gt; rnttt&lt;version&gt; ${version.org.hibernate.orm}&lt;\/version&gt; rntt&lt;\/dependency&gt; rnt&lt;\/dependencyManagement&gt; rnnnnI've always seen dependency management being defined in some parent pom, and actual dependencies in modules, but it should also work if done in the same pom. n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 02\/Nov\/2016 01:08 AM                      Making  hibernate-entitymanager  and  hibernate-core   provided  in  hibernate-search-orm  would harm simpler use (where you don't specify the Hibernate version). From a user's perspective, I wouldn't like the artifact I use to require me to know about their dependencies in order for them to work properly... That is, unless you meant something else when you said \"optional dependencies\". nn A solution to your issue is to specify the dependency without the version, and to fix the version using  dependency management  instead. Then you don't need exclusion anymore. This is actually a really common issue when building application on top of multiple external libraries, so I don't think it's worth a workaround. Unless, again, I missed the point. nn  n rnt &lt;properties&gt; rntt &lt;project.build.sourceEncoding&gt; UTF-8 &lt;\/project.build.sourceEncoding&gt; rntt &lt;project.reporting.outputEncoding&gt; UTF-8 &lt;\/project.reporting.outputEncoding&gt; rntt &lt;maven.compiler.source&gt; 1.8 &lt;\/maven.compiler.source&gt; rntt &lt;maven.compiler.target&gt; 1.8 &lt;\/maven.compiler.target&gt; rnrntt &lt;version.org.hibernate.orm&gt; 5.1.2.Final &lt;\/version.org.hibernate.orm&gt; rntt &lt;version.org.hibernate.search&gt; 5.6.0.Beta3 &lt;\/version.org.hibernate.search&gt; rntt &lt;slf4jVersion&gt; 1.6.4 &lt;\/slf4jVersion&gt; rnt &lt;\/properties&gt; rnrnt &lt;dependencies&gt; rntt &lt;dependency&gt; rnttt &lt;groupId&gt; org.hibernate &lt;\/groupId&gt; rnttt &lt;artifactId&gt; hibernate-search-orm &lt;\/artifactId&gt; rntt &lt;\/dependency&gt; rntt &lt;dependency&gt; rnttt &lt;groupId&gt; org.hibernate &lt;\/groupId&gt; rnttt &lt;artifactId&gt; hibernate-search-elasticsearch &lt;\/artifactId&gt; rntt &lt;\/dependency&gt; rntt &lt;dependency&gt; rnttt &lt;groupId&gt; org.hibernate &lt;\/groupId&gt; rnttt &lt;artifactId&gt; hibernate-entitymanager &lt;\/artifactId&gt; rntt &lt;\/dependency&gt; rnt &lt;\/dependencies&gt; rnrnt &lt;dependencyManagement&gt; rntt &lt;dependency&gt; rnttt &lt;groupId&gt; org.hibernate &lt;\/groupId&gt; rnttt &lt;artifactId&gt; hibernate-search-orm &lt;\/artifactId&gt; rnttt &lt;version&gt; ${version.org.hibernate.search} &lt;\/version&gt; rntt &lt;\/dependency&gt; rntt &lt;dependency&gt; rnttt &lt;groupId&gt; org.hibernate &lt;\/groupId&gt; rnttt &lt;artifactId&gt; hibernate-search-elasticsearch &lt;\/artifactId&gt; rnttt &lt;version&gt; ${version.org.hibernate.search} &lt;\/version&gt; rntt &lt;\/dependency&gt; rntt &lt;dependency&gt; rnttt &lt;groupId&gt; org.hibernate &lt;\/groupId&gt; rnttt &lt;artifactId&gt; hibernate-entitymanager &lt;\/artifactId&gt; rnttt &lt;version&gt; ${version.org.hibernate.orm} &lt;\/version&gt; rntt &lt;\/dependency&gt; rntt &lt;dependency&gt; rnttt &lt;groupId&gt; org.hibernate &lt;\/groupId&gt; rnttt &lt;artifactId&gt; hibernate-core &lt;\/artifactId&gt; rnttt &lt;version&gt; ${version.org.hibernate.orm} &lt;\/version&gt; rntt &lt;\/dependency&gt; rnt &lt;\/dependencyManagement&gt; rn n  nn I've always seen dependency management being defined in some parent pom, and actual dependencies in modules, but it should also work if done in the same pom.              n        n    n"},{"commnet_id":"comment-85478","commnet_date":"2016-11-02T01:24:09-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 02\/Nov\/2016 01:24 AM    n        n        ok, I guess I'm too new to Maven and did not really bother looking at dependencyManagement n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 02\/Nov\/2016 01:24 AM                      ok, I guess I'm too new to Maven and did not really bother looking at dependencyManagement              n        n    n"},{"commnet_id":"comment-85479","commnet_date":"2016-11-02T01:24:46-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 02\/Nov\/2016 01:24 AM    n        n        BTW I think someone using Hibernate Search (for ORM) and not caring about the Hibernate ORM version behind is more fantasy than reality. n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 02\/Nov\/2016 01:24 AM                      BTW I think someone using Hibernate Search (for ORM) and not caring about the Hibernate ORM version behind is more fantasy than reality.              n        n    n"}]}},{"HHH-11221":{"info":{"issue_title":"Add more authors to the User Guide header","issue_key":"HHH-11221","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.2.4","issue_component":"5.2.4","issue_labels":"5.2.4","issue_description":"Add more authors to the User Guide header","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11221?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-85473","commnet_date":"2016-11-01T12:49:26-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 01\/Nov\/2016 12:49 PM    n        n        Please add my name as well. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 01\/Nov\/2016 12:49 PM                      Please add my name as well.              n        n    n"},{"commnet_id":"comment-85474","commnet_date":"2016-11-01T13:34:26-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 01\/Nov\/2016 13:34 PM    n        n        Sure, Gail Badner n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 01\/Nov\/2016 13:34 PM                      Sure,  Gail Badner               n        n    n"},{"commnet_id":"comment-85483","commnet_date":"2016-11-02T03:56:08-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 02\/Nov\/2016 03:56 AM    n        n        Gail Badner, you might want to backport this one to 5.1. and 5.0. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 02\/Nov\/2016 03:56 AM                       Gail Badner , you might want to backport this one to 5.1. and 5.0.              n        n    n"}]}},{"HHH-11220":{"info":{"issue_title":"Auto-detect SQL Server 2016 when the major version is 13","issue_key":"HHH-11220","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.2.3","issue_component":"5.2.3","issue_labels":"5.2.3","issue_description":"Please add support for SQL Server 2016.  When trying to autodetect the best dialect to use, we recieve this error:\r\n WARN StandardDialectResolver - HHH000385: Unknown Microsoft SQL Server major version &#91;13&#93;  using SQL Server 2000 dialect","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11220?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-85716","commnet_date":"2016-11-08T11:29:19-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 08\/Nov\/2016 11:29 AM    n        n        What needs to be different for a 2016 Dialect versus the 2012 Dialect? n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 08\/Nov\/2016 11:29 AM                      What needs to be different for a 2016 Dialect versus the 2012 Dialect?              n        n    n"},{"commnet_id":"comment-85717","commnet_date":"2016-11-08T11:49:00-0800","commnet_user":"Daniel Stewart","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Daniel Stewartn added a comment  - 08\/Nov\/2016 11:49 AM    n        n        No breaking changes (that would affect hibernate) were made in 2016, so I would say that nothing needs to be different. n    n    n        n            Show  n            n                        n    n    n    n                nn       Daniel Stewartn added a comment  - 08\/Nov\/2016 11:49 AM                      No breaking changes (that would affect hibernate) were made in 2016, so I would say that nothing needs to be different.              n        n    n"}]}},{"OGM-1199":{"info":{"issue_title":"Associations should be mappable to a different Relationship-Type name","issue_key":"OGM-1199","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"neo4j","issue_description":"For Entities and their properties it is possible to specify a name when the class or property name differs from the label or propery name in the database.  e.g.    @Entity(name = \"TVSHOW\" )  public  class TvShow implements  Serializable {     @Column(name = \"title\" )     private  String  name;  }     Unfortunately there seems to be no equivalent for Associations. Either add this feature or enhance the documentation if this is already possible, please.  I would expect it to look something like this:    @ManyToOne(name = \"EXECUTED_BY\"   private  Object  executedBy;","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1199?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2440":{"info":{"issue_title":"Consider support for nested objects and parent child","issue_key":"HSEARCH-2440","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Duplicate","issue_fix_version":"None","issue_component":"None","issue_labels":"backend,                                            elasticsearch","issue_description":"Elasticsearch has two interesting features mapping wise   \tnested objects https:\/\/www.elastic.co\/guide\/en\/elasticsearch\/guide\/current\/nested-objects.html \tparent child https:\/\/www.elastic.co\/guide\/en\/elasticsearch\/guide\/current\/parent-child.html    We should offer the option for a user to chose when an @IndexedEmbedded is mapped as manual denormalization, nested object or parent child.  We can orthogonally add support for this in the Lucene backend.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2440?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-85442","commnet_date":"2016-10-31T03:48:53-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 31\/Oct\/2016 03:48 AM    n        n        Duplicate of n    n                n        n            n            HSEARCH-2263n        n                                                    Open n             n n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 31\/Oct\/2016 03:48 AM                      Duplicate of n     n                 n         n             n            HSEARCH-2263n         n                                                     Open n             n              n        n    n"}]}},{"HSEARCH-2435":{"info":{"issue_title":"Improve Elasticsearch documentation","issue_key":"HSEARCH-2435","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.6.0.Beta3","issue_component":"5.6.0.Beta3","issue_labels":"5.6.0.Beta3","issue_description":"improve configuration section describing the options, when to use them and their default value. \tremove Groovy plugin install mention","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2435?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1197":{"info":{"issue_title":"Property for Neo4j embedded should be settable without configuration file","issue_key":"OGM-1197","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.1-next","issue_labels":"5.1-next","issue_description":"Like in Infinispan remote and MongoDB we should make it possible to configure Neo4j embedded using a prefix for the properties instead of a resource file","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1197?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11206":{"info":{"issue_title":"Document all configurations that are not present in AvailableSettings","issue_key":"HHH-11206","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.5","issue_labels":"5.2.5","issue_description":"There are many configuration properties that are not mentioned in AvailableSettings, therefore they haven't been documented:   \thibernate.validator.apply_to_ddl \thibernate.dialect.oracle.prefer_long_raw \thibernate.schema_name_resolver    to name a few. Not only hibernate-core, but all other modules should be scanned as well and all properties need to be documented.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11206?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-85606","commnet_date":"2016-11-07T06:38:05-0800","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 07\/Nov\/2016 06:38 AM    n        n        Gail Badner, this one can be integrated into 5.1 and 5.0. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 07\/Nov\/2016 06:38 AM                       Gail Badner , this one can be integrated into 5.1 and 5.0.              n        n    n"}]}},{"HHH-11204":{"info":{"issue_title":"Fix typo for all &quot;occured&quot; error message to occurred","issue_key":"HHH-11204","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.5","issue_labels":"5.2.5","issue_description":"There are many Hibernate error messages that use the word occured instead of occurred.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11204?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-85467","commnet_date":"2016-11-01T07:41:30-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 01\/Nov\/2016 07:41 AM    n        n        Gail Badner, this one should be backported to any other older branch. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 01\/Nov\/2016 07:41 AM                       Gail Badner , this one should be backported to any other older branch.              n        n    n"}]}},{"HV-1145":{"info":{"issue_title":"Update checkstyle ParenPad rule to include RESOURCE_SPECIFICATION","issue_key":"HV-1145","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"6.0-next","issue_labels":"6.0-next","issue_description":"It's the token used for the try with resources pattern.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1145?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1195":{"info":{"issue_title":"Update checkstyle ParenPad rule to include RESOURCE_SPECIFICATION","issue_key":"OGM-1195","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0.Beta3","issue_labels":"5.1.0.Beta3","issue_description":"It's the token used for the try with resources pattern.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1195?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2430":{"info":{"issue_title":"Update checkstyle ParenPad rule to include RESOURCE_SPECIFICATION","issue_key":"HSEARCH-2430","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Trivial","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.7","issue_labels":"5.7","issue_description":"It's the token used for the try with resources pattern.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2430?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2428":{"info":{"issue_title":"Provide an alternative to org.hibernate.search.analyzer.Discriminator for Elasticsearch?","issue_key":"HSEARCH-2428","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.6.0.Beta3","issue_component":"5.6.0.Beta3","issue_labels":"5.6.0.Beta3","issue_description":"org.hibernate.search.analyzer.Discriminator allows to dynamically choose the analyzer to use on each field based on the value of one entity property.\r\n This can't be done on Elasticsearch, as analyzers are defined by the mapping, and cannot be specified when indexing.  We should either:   \tFind a way to implement this (unlikely). \tProvide an alternative to Elasticsearch backend users. The Elasticsearch doc advises to use fields to address a similar use case: https:\/\/www.elastic.co\/guide\/en\/elasticsearch\/reference\/2.4\/multi-fields.html#_multi_fields_with_multiple_analyzers ; see                                                          HSEARCH-2454                                                              Closed                 \tOr at the very least, document the lack of support and the fact that it will stay that way. This is currently documented as a temporary limitation as part of                                                          HSEARCH-2393                                                              Closed                .    Note: there are disabled tests that should be re-enabled if we implement this feature or marked as definitively disabled if we decide otherwise. Search for the string HSEARCH-2428 in the codebase.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2428?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11200":{"info":{"issue_title":"HikariCPConnectionProvider should allow it&#39;s configuration through HikariConfig","issue_key":"HHH-11200","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Trivial","issue_affects_version":"Unresolved","issue_fix_version":"5.2.3","issue_component":"5.2.3","issue_labels":"5.2.3","issue_description":"Hi.  I'm working with hibernate\/hikari stack, and just though it would be cool to configure HikariCPConnectionProvider not only via classic properties, but by passing user-generated HikariConfig as well:     config = new  HikariConfig();  ...  provider = new  HikariCPConnectionProvider();  provider.configure(config);       That would allow more flexible configurations for end users and decrease amount of depressive typos (e.g. when you type things like `max_poool_size` and don't discover it for a while).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11200?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1142":{"info":{"issue_title":"Follow-up to-dos around Lambda based API for constraint definition","issue_key":"HV-1142","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"Currently validateType only takes a Class object, but I think we should have one for Type, too. Because a user may wish to define an expression for List&lt;String&gt; instead of raw List (e.g. an equivalent to SizeValidatorForCollection) \tCurrently there is no way to declare a cross-parameter constraint using a Lambda expression (as the supported validation target(s) is controlled via an annotation on ConstraintValidator implementations)","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1142?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1141":{"info":{"issue_title":"Add @Incubating annotation","issue_key":"HV-1141","issue_type":"New Feature","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"6.0-next","issue_labels":"6.0-next","issue_description":"Currently we use a JavaDoc tag \"hv.experimental\" to flag experimental\/incubating APIs\/SPIs. Using a proper annotation makes it easier for users to spot used incubating things (you can search for references in the IDE and also the generated JavaDocs will contain a list of all incubating members).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1141?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11191":{"info":{"issue_title":"org.hibernate.envers.revision_field_name should also change the field name of revinfo to avoid confusion","issue_key":"HHH-11191","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Trivial","issue_affects_version":"Unresolved","issue_fix_version":"5.2.2","issue_component":"5.2.2","issue_labels":"5.2.2","issue_description":"When generating the database schema using the Hibernate property     &lt;property name=\"hibernate.hbm2ddl.auto\"  value=\"create\" \/&gt;      The column name of the entitiy tables is correctly changed into the value provided via the Hibernate property     &lt;property name=\"org.hibernate.envers.revision_field_name\"  value=\"revision\" \/&gt;      but the name of the column of the Envers table revinfo is still REV which can lead to confusion when e.g. storing the DDL scripts externally.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11191?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-85103","commnet_date":"2016-10-21T06:10:47-0700","commnet_user":"Chris Cranford","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Chris Cranfordn added a comment  - 21\/Oct\/2016 06:10 AM    n        n        One interim solution would be to provide your own custom revision entity implementation so that you can specifically assign the column names to the various REVINFO attributes that you'd like to use for consistency in your database schema.  The behavior you experience only occurs when using the default revision entity implementations as the column names are static and don't change based on user customizations. n    n    n        n            Show  n            n                        n    n    n    n                nn       Chris Cranfordn added a comment  - 21\/Oct\/2016 06:10 AM                      One interim solution would be to provide your own custom revision entity implementation so that you can specifically assign the column names to the various  REVINFO  attributes that you'd like to use for consistency in your database schema.  The behavior you experience only occurs when using the default revision entity implementations as the column names are static and don't change based on user customizations.              n        n    n"}]}},{"HHH-11190":{"info":{"issue_title":"Add more details to the Performance Tuning chapter","issue_key":"HHH-11190","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.2.3","issue_component":"5.2.3","issue_labels":"5.2.3","issue_description":"The Performance Tuning chapter used to provide some links to external blogs which allowed the reader to get more details about a specific topic.  Those links have been removed by HHH-11189, so we need to add all those details back as User Guide sections.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11190?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11189":{"info":{"issue_title":"Remove all links to external blog posts from User Guide","issue_key":"HHH-11189","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.2.3","issue_component":"5.2.3","issue_labels":"5.2.3","issue_description":"Remove all links to external blog posts from User Guide.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11189?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-85043","commnet_date":"2016-10-20T20:52:06-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 20\/Oct\/2016 20:52 PM    n        n        Gail Badner, I removed the links to my blog. You can backport the Performance Tuning chapter to 5.1. and 5.0. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 20\/Oct\/2016 20:52 PM                       Gail Badner , I removed the links to my blog. You can backport the Performance Tuning chapter to 5.1. and 5.0.              n        n    n"}]}},{"HHH-11186":{"info":{"issue_title":"Add examples for all Hibernate annotations","issue_key":"HHH-11186","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.2.3","issue_component":"5.2.3","issue_labels":"5.2.3","issue_description":"Now that HHH-7010 is resolved, it's time to add examples for all Hibernate annotations.   The easiest way to spot a Hibernate annotation which does not have a corresponding User Guide section is to search for the Hibernate annotations which don't offer a \"See the ... for more info\" link.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11186?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1138":{"info":{"issue_title":"Improve consistency of ValidatorImpl regarding parameters order","issue_key":"HV-1138","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.4.0.Beta1","issue_labels":"5.4.0.Beta1","issue_description":"In ValidatorImpl, the order of the parameters ValidationContext and ValueContext is not always consistent. It should be improved.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1138?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1137":{"info":{"issue_title":"Avoid unnecessary counting of constraint violations in ValidatorImpl","issue_key":"HV-1137","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.4.0.Beta1","issue_labels":"5.4.0.Beta1","issue_description":"During parameter and return value validation we keep track of the number of constraint violations, but that's not needed really.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1137?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1136":{"info":{"issue_title":"Add translation of validation messages  to Ukrainian","issue_key":"HV-1136","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.4.0.Beta1","issue_labels":"5.4.0.Beta1","issue_description":"Provide a translation of ValidationMessages to Ukrainian.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1136?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1192":{"info":{"issue_title":"Checkstyle: stricter ParenPad rule","issue_key":"OGM-1192","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0.Beta1","issue_labels":"5.1.0.Beta1","issue_description":"Our checkstyle ParenPad rule does not conform with our formatting rules, it needs to take into account more token types.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1192?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1191":{"info":{"issue_title":"Dead code warning in OgmLoader","issue_key":"OGM-1191","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0.Beta3","issue_labels":"5.1.0.Beta3","issue_description":"In OgmLoader, we have the following code:    \t\t\/\/it's a non existing object: cut short    \t\tif  ( resultset == null  ) {  \t\t\treturn  null ;  \t\t}     while we use resultset a few lines above:    Tuple tuple = resultset.unwrap( TupleAsMapResultSet.class ).getTuple();     This is wrong: we should either remove the code or move it a few lines above.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1191?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2421":{"info":{"issue_title":"Support statistics with Elasticsearch","issue_key":"HSEARCH-2421","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6","issue_labels":"6","issue_description":"Some tests fail because of the lack of support for statistics with Elasticsearch.  In particular:   \torg.hibernate.search.test.jmx.IndexControlMBeanTest.testIndexAndPurge() \torg.hibernate.search.test.configuration.mutablefactory.MutableFactoryTest.testAddingClassSimpleAPIwithJMX() \t... ?    Please do a search in the code for this ticket (HSEARCH-2421) when solving the issue.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2421?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1135":{"info":{"issue_title":"Implement initial BV 2.0 proposal for @Past\/@Future support for JSR 310","issue_key":"HV-1135","issue_type":"New Feature","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"6.0-next","issue_labels":"6.0-next","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1135?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1190":{"info":{"issue_title":"Improve dependency strategy for embedded datastores","issue_key":"OGM-1190","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"neo4j","issue_description":"The current implementation requires the embedded datastore implementation even a remote datastore strategy is used by an application. In the case of Neo4j both the neo4j and neo4j-java-driver are required. The neo4j dependency introduces a lot of further dependencies because it provides the entire stack of functionality of what is provided by an external neo4j installation.  What I`m trying to say is to customise the build strategy. Our application runs within a OSGi runtime container, which resolves dependencies of a component in this case hibernate-ogm-neo4j to outside dependencies in a strict manner. If the dependencies are not fulfilled the hibernate-ogm-neo4j and (neo4j) bundles does not get resolved.  Remote - Bolt\r\n hibernate-ogm-neo4j --&gt; neo4j-java-driver + replace neo4j with neo4j-graphdb-api  Remote - Http\r\n hibernate-ogm-neo4j --&gt; resteasy + replace neo4j with neo4j-graphdb-api  Embedded\r\n hibernate-ogm-neo4j --&gt; neo4j  Maybe this can be resolved by adapting the maven profiles in the hibernate-ogm-neo4j - pom file. I haven`t looked at the strategy the determination process works in order to select the defined datastore provider, but maybe maven supports an option to declare an entry point in order to respect an environment parameter of the developer providing a separate compilation output for each the supported profiles. This principle could be applied to other datastores as well which supports different transport protocols.  Thanks!","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1190?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-85700","commnet_date":"2016-11-08T03:34:25-0800","commnet_user":"Davide D&#39;Alto","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Davide D&#39;Alton added a comment  - 08\/Nov\/2016 03:34 AM    n        n        I think we are going to split the module in 3 separates artifacts n    n    n        n            Show  n            n                        n    n    n    n                nn       Davide D&#39;Alton added a comment  - 08\/Nov\/2016 03:34 AM                      I think we are going to split the module in 3 separates artifacts              n        n    n"}]}},{"OGM-1189":{"info":{"issue_title":"Support execution of Native update queries for Neo4j","issue_key":"OGM-1189","issue_type":"New Feature","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0.Beta1","issue_labels":"5.1.0.Beta1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1189?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1133":{"info":{"issue_title":"Add group inheritance chapter in HV documentation","issue_key":"HV-1133","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"5.3.0.Final","issue_component":"5.3.0.Final","issue_labels":"5.3.0.Final","issue_description":"Hibernate-validator documentation do not mention the possibility to declare constraints group inheriting from other groups or from Default group, as describe in bean-validation 1.1 spec.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1133?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-85027","commnet_date":"2016-10-18T23:40:37-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Gunnar Morlingn added a comment  - 18\/Oct\/2016 23:40 PM     - edited  n        n        Guillaume Smet, this one has 5.3.1 as a fix version. I don't consider it as a bug, though, hence I wouldn't backport it. Let's change it to 6?nnBtw. if we really wanted it for 5.3.1, it shouldn't be in state \"Fixed\" yet as it hasn't been backported yet. Let's only resolve issues after the changes have been applied to the right branch, otherwise it's just too easy to forget a merge. The same goes for n    n                n        n            n            HV-1132n        n                                                    Closed n             n. n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Gunnar Morlingn added a comment  - 18\/Oct\/2016 23:40 PM     - edited                     Guillaume Smet , this one has 5.3.1 as a fix version. I don't consider it as a bug, though, hence I wouldn't backport it. Let's change it to 6? nn Btw. if we really wanted it for 5.3.1, it shouldn't be in state \"Fixed\" yet as it hasn't been backported yet. Let's only resolve issues after the changes have been applied to the right branch, otherwise it's just too easy to forget a merge. The same goes for n     n                 n         n             n            HV-1132n         n                                                     Closed n             n.              n        n    n"}]}},{"HSEARCH-2418":{"info":{"issue_title":"Analyzer names-instance Map should be a pluggable Service","issue_key":"HSEARCH-2418","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.7","issue_labels":"5.7","issue_description":"Currently the Analyzers are being looked up by name, but the name map is built by Hibernate Search itself according to its configuration and @AnalyzerDef annotations.  Other frameworks, Infinispan Query as a concrete case, might want to provide additional means for defining analyzers. We decided at a face to face meeting that the simplest solution would be to make our \"Analyzer Map\" a Service contract, so that they can inject their own instance to override the current one, which would be promoted to \"default implementation\".  The interface definition looks like trivial; we need to make sure however that we consistently use this and keep in mind that the Map is a concurrent service, which might be updated by external parties at runtime.  I suspect - and hope - that we'll be able to agree that such updates can only be additive: i.e. adding a new name\/analyzer couple would be fine, but changing or removing the mapping of a previously defined name is more problematic without introducing some locking mechanism.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2418?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-87301","commnet_date":"2016-12-09T01:24:14-0800","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 09\/Dec\/2016 01:24 AM    n        n        Sanne Grinovero I started looking into that ticket, but I'm not sure I understand the matter. The part about injection new analyzers at runtime in particular seems a bit strange, and may conflict with what we'll do in n    n                n        n            n            HSEARCH-2219n        n                                                    Closed n             n...\r\nnAnyway, I'll work on n    n                n        n            n            HSEARCH-2219n        n                                                    Closed n             n instead and will either leave this ticket to you or come back to that later. n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 09\/Dec\/2016 01:24 AM                       Sanne Grinovero  I started looking into that ticket, but I'm not sure I understand the matter. The part about injection new analyzers at  runtime  in particular seems a bit strange, and may conflict with what we'll do in n     n                 n         n             n            HSEARCH-2219n         n                                                     Closed n             n... nAnyway, I'll work on n     n                 n         n             n            HSEARCH-2219n         n                                                     Closed n             n instead and will either leave this ticket to you or come back to that later.              n        n    n"}]}},{"OGM-1188":{"info":{"issue_title":"Consider not requiring a synthetic protobuf schema for simple keys","issue_key":"OGM-1188","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"infinispan","issue_description":"Right now we generate one schema for the entity and Infinispan value. And another schema for the Infinispan key which contains the entity id     \/\/ peuso protobuf message   message Cloud_id {      String  id required = 1  }  message Cloud {      String  id required = 1      String  name required = 2  }     In the simple cases where the id is not a composite id, we could simplify things by just sending a native String instead of a Cloud_id message. It would probably be a more natural mapping that a user would use.  Let's discuss that as a simplifying option.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1188?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11177":{"info":{"issue_title":"Duplicate queries during startup","issue_key":"HHH-11177","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"4.3.11 ,                                            5.2.3","issue_component":"4.3.11 ,                                            5.2.3","issue_labels":"4.3.11","issue_description":"During startup phase, Hibernate relies on \"SHOW FULL TABLES\" to discover the schema. \r\n It executes the same command multiple times for the same table. As the execution time can vary between 100 and 200 ms on a loaded server, this can lead to very long startup times in the range of minutes. The duplication can be observed both in 4.3.11 and 5.2.3 however in the later one, it's more severe. Below is an example of number of queries observed for a complex schema with around 120 tables.\r\n Hibernate 4.3.11: 232 x SHOW FULL TABLES FROM\r\n Hibernate 5.2.3:   591 x SHOW FULL TABLES FROM\r\n In 5.2.3, the number of queries executed for same table varies. We have one table for which we see the same query 19 times!  All the queries can be easily observed by enabling general log in Mysql. The issue might be related to                                                          HHH-11023                                                              Closed","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11177?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-85003","commnet_date":"2016-10-17T05:09:45-0700","commnet_user":"Sergiu Hlihor","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Sergiu Hlihorn added a comment  - 17\/Oct\/2016 05:09 AM     - edited  n        n        I've submitted the issue as an improvement, however I consider it as a major bug, cause the startup times are a no go for production deployment. n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Sergiu Hlihorn added a comment  - 17\/Oct\/2016 05:09 AM     - edited                    I've submitted the issue as an improvement, however I consider it as a major bug, cause the startup times are a no go for production deployment.              n        n    n"},{"commnet_id":"comment-85009","commnet_date":"2016-10-17T09:33:00-0700","commnet_user":"Andrea Boriero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Andrea Borieron added a comment  - 17\/Oct\/2016 09:33 AM    n        n        Hi Sergiu Hlihor,nncan you share the log?nnhave you tried to set the hibernate.hbm2ddl.jdbc_metadata_extraction_strategy property to \"individually\"? nnThanks n    n    n        n            Show  n            n                        n    n    n    n                nn       Andrea Borieron added a comment  - 17\/Oct\/2016 09:33 AM                      Hi  Sergiu Hlihor , nn can you share the log? nn have you tried to set the hibernate.hbm2ddl.jdbc_metadata_extraction_strategy property to \"individually\"?  nn Thanks              n        n    n"},{"commnet_id":"comment-85015","commnet_date":"2016-10-17T15:25:00-0700","commnet_user":"Sergiu Hlihor","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sergiu Hlihorn added a comment  - 17\/Oct\/2016 15:25 PM    n        n        I cannot share the log, cause it reveals the complete data model that we use.  What I noticed from logs is that I see more identical entries for entities which have Many-to-One relationships (the entity for which the table is queried 19 times has more than 4 Many-to-One relationships) but it's not a rule. nnI'll comeback later with a result for testing the suggested setting. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sergiu Hlihorn added a comment  - 17\/Oct\/2016 15:25 PM                      I cannot share the log, cause it reveals the complete data model that we use.  What I noticed from logs is that I see more identical entries for entities which have Many-to-One relationships (the entity for which the table is queried 19 times has more than 4 Many-to-One relationships) but it's not a rule.  nn I'll comeback later with a result for testing the suggested setting.              n        n    n"},{"commnet_id":"comment-85016","commnet_date":"2016-10-17T15:26:54-0700","commnet_user":"Andrea Boriero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Andrea Borieron added a comment  - 17\/Oct\/2016 15:26 PM    n        n        Hi Sergiu Hlihor,nnno worries I think I have figured out the issue and the solution.nnThanks  n    n    n        n            Show  n            n                        n    n    n    n                nn       Andrea Borieron added a comment  - 17\/Oct\/2016 15:26 PM                      Hi  Sergiu Hlihor , nn no worries I think I have figured out the issue and the solution. nn Thanks               n        n    n"}]}},{"HSEARCH-2417":{"info":{"issue_title":"Allow definition of Elasticsearch analyzers from Hibernate Search","issue_key":"HSEARCH-2417","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Duplicate","issue_fix_version":"None","issue_component":"None","issue_labels":"elasticsearch","issue_description":"It seems there is an API allowing to define analyzers remotely in ES: https:\/\/www.elastic.co\/guide\/en\/elasticsearch\/reference\/2.4\/indices-update-settings.html  Maybe we could use that to push analyzers along with the mappings?","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2417?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-85708","commnet_date":"2016-11-08T09:00:24-0800","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 08\/Nov\/2016 09:00 AM    n        n        Moving to 5.6.0-CR1, but it will be the lowest priority. It's a prerequisite to adding ES 5.0 support. n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 08\/Nov\/2016 09:00 AM                      Moving to 5.6.0-CR1, but it will be the  lowest priority . It's a prerequisite to adding ES 5.0 support.              n        n    n"}]}},{"HHH-11176":{"info":{"issue_title":"Add support for Tuple results for native queries","issue_key":"HHH-11176","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.2.3","issue_component":"5.2.3","issue_labels":"5.2.3","issue_description":"According to this Spring ticket, it could be useful if we supported the Tuple container for native queries as well.  For the moment, it only works with entity queries: JPQL, Criteria API.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11176?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11175":{"info":{"issue_title":"Remove the Cartesian Product note from JOINED inheritance","issue_key":"HHH-11175","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.4","issue_labels":"5.2.4","issue_description":"According to this StackOverflow question, there's a note which makes a claim that JOINED inheritance can lead to a Cartesian Product.   This is not correct since, no matter how many subclasses a given base class have, when using a polymorphic query against the base class, we will just fetch the total number of subclass entities, not a Cartesian Product between all of them.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11175?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84927","commnet_date":"2016-10-13T08:01:18-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 13\/Oct\/2016 08:01 AM    n        n        Gail Badner, you might want to backport this one to 5.1 and 5.0. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 13\/Oct\/2016 08:01 AM                       Gail Badner , you might want to backport this one to 5.1 and 5.0.              n        n    n"}]}},{"HHH-11174":{"info":{"issue_title":"Document that XML file mappings can reside outside of JAR","issue_key":"HHH-11174","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.4","issue_labels":"5.2.4","issue_description":"As illustrated in this blog post, we should document this behavior in the User Guide as well.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11174?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-85313","commnet_date":"2016-10-25T07:44:37-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 25\/Oct\/2016 07:44 AM    n        n        Gail Badner you might want to backport this to 5.1. and 5.0. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 25\/Oct\/2016 07:44 AM                       Gail Badner  you might want to backport this to 5.1. and 5.0.              n        n    n"}]}},{"HHH-11172":{"info":{"issue_title":"allow MetadataContributor to be called after second-pass","issue_key":"HHH-11172","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"hibernate-core","issue_description":"MetadataContributor gets called durcing meta-data building after the first-pass but before the second-pass:     processor.finishUp();  for  ( MetadataContributor contributor : classLoaderService.loadJavaServices( MetadataContributor.class ) ) {    contributor.contribute( metadataCollector, jandexView );  }  metadataCollector.processSecondPasses( rootMetadataBuildingContext );     a lot of things are happening in the second-pass. There should be the possibly to let a MetadataContributor (or a new interface) be called after the second pass.   For example, join columns are only available after the second pass. And it is quite hard to guess their names and do some further processing after the first pass without having those join columns.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11172?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84917","commnet_date":"2016-10-13T02:26:40-0700","commnet_user":"RemoM","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       RemoMn added a comment  - 13\/Oct\/2016 02:26 AM    n        n        second passes can be added with metadataCollector passed to the contributed, that solved the problem. n    n    n        n            Show  n            n                        n    n    n    n                nn       RemoMn added a comment  - 13\/Oct\/2016 02:26 AM                      second passes can be added with metadataCollector passed to the contributed, that solved the problem.              n        n    n"},{"commnet_id":"comment-84939","commnet_date":"2016-10-13T14:49:49-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 13\/Oct\/2016 14:49 PM    n        n        RemoM, it sounds like you have what you need. can this be closed? n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 13\/Oct\/2016 14:49 PM                       RemoM , it sounds like you have what you need. can this be closed?              n        n    n"}]}},{"HSEARCH-2412":{"info":{"issue_title":"Add the target URL in Elasticsearch error messages","issue_key":"HSEARCH-2412","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta4,                                            5.7.0.Beta1","issue_labels":"5.6.0.Beta4,                                            5.7.0.Beta1","issue_description":"Currently we only have the POST data, but the URL itself carries some GET data, and even the path itself may help when debugging.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2412?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1130":{"info":{"issue_title":"Ensure 5.3 runs on JDK 9","issue_key":"HV-1130","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.3.1.Final","issue_labels":"5.3.1.Final","issue_description":"There may be nothing to do besides setting up a job which ensures that 5.3.x. runs on JDK 9, too.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1130?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84945","commnet_date":"2016-10-14T08:50:53-0700","commnet_user":"Guillaume Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Guillaume Smetn added a comment  - 14\/Oct\/2016 08:50 AM    n        n        Gunnar Morling I backported the recent JDK9 fixes to 5.3.nnI created a CI job too. n    n    n        n            Show  n            n                        n    n    n    n                nn       Guillaume Smetn added a comment  - 14\/Oct\/2016 08:50 AM                       Gunnar Morling  I backported the recent JDK9 fixes to 5.3. nn I created a CI job too.              n        n    n"}]}},{"HV-1129":{"info":{"issue_title":"Upgrade WildFly Arquillian version","issue_key":"HV-1129","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.3.1.Final","issue_labels":"5.3.1.Final","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1129?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1128":{"info":{"issue_title":"Enable integration tests on JDK 9","issue_key":"HV-1128","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.3.1.Final","issue_labels":"5.3.1.Final","issue_description":"The WildFly tests pass now, using a fairly new JDK 9 (&gt;b130 or so), with 10.1.0.Final.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1128?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2405":{"info":{"issue_title":"Support caching for filters with Elasticsearch","issue_key":"HSEARCH-2405","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6","issue_labels":"6","issue_description":"For now, the Elasticsearch backend does not support caching of the Filter instances as the caching API is based on Lucene filters.  Note: there are tests that should pass when this ticket is resolved, and that are currently disabled using the ElasticsearchSupportInProgress category. Those tests will be (or have been) outlined as part of                                                          HSEARCH-2390                                                              Closed                .","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2405?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1126":{"info":{"issue_title":"Upgrade the plexus-archiver dependency used by the assembly plugin to support JDK9","issue_key":"HV-1126","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.3.1.Final","issue_labels":"5.3.1.Final","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1126?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2400":{"info":{"issue_title":"Support IndexingMonitor for the Elasticsearch backend","issue_key":"HSEARCH-2400","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta4,                                            5.7.0.Beta1","issue_labels":"5.6.0.Beta4,                                            5.7.0.Beta1","issue_description":"IndexingMonitor is not supported yet: it is ignored in org.hibernate.search.elasticsearch.impl.ElasticsearchIndexManager.performOperations(List&lt;LuceneWork&gt;, IndexingMonitor)  Note: there are tests that should pass when this ticket is resolved, and that are currently disabled in the pom.xml of the Elasticsearch module. Those tests will be (or have been) outlined as part of                                                          HSEARCH-2390                                                              Closed                .","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2400?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2399":{"info":{"issue_title":"Implement timeouts for the Elasticsearch backend","issue_key":"HSEARCH-2399","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.7","issue_labels":"5.7","issue_description":"Note: there are tests that should pass when this ticket is resolved, and that are currently disabled in the pom.xml of the Elasticsearch module. Those tests will be (or have been) outlined as part of                                                          HSEARCH-2390                                                              Closed                .","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2399?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2398":{"info":{"issue_title":"Improve field name\/type validation when querying the Elasticsearch backend","issue_key":"HSEARCH-2398","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"5.6.0.Beta3","issue_component":"5.6.0.Beta3","issue_labels":"5.6.0.Beta3","issue_description":"Note: there are tests that should pass when this ticket is resolved, and that are currently disabled in the pom.xml of the Elasticsearch module. Those tests will be (or have been) outlined as part of                                                          HSEARCH-2390                                                              Closed                .\r\n Also, some relevant tests are disabled using the ElasticsearchSupportInProgress category.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2398?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2396":{"info":{"issue_title":"Support custom field bridges with the Elasticsearch backend (for EmbeddedIds for instance)","issue_key":"HSEARCH-2396","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Critical","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta4,                                            5.7.0.Beta1","issue_labels":"5.6.0.Beta4,                                            5.7.0.Beta1","issue_description":"The main issue being that Elasticsearch doesn't support composite IDs.  Note: there are tests that should pass when this ticket is resolved, and that are currently disabled in the pom.xml of the Elasticsearch module. Those tests will be (or have been) outlined as part of                                                          HSEARCH-2390                                                              Closed                .","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2396?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2395":{"info":{"issue_title":"Support MoreLikeThisQueries with the Elasticsearch backend","issue_key":"HSEARCH-2395","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6","issue_labels":"6","issue_description":"Note: there are tests that should pass when this ticket is resolved, and that are currently disabled in the pom.xml of the Elasticsearch module. Those tests will be (or have been) outlined as part of                                                          HSEARCH-2390                                                              Closed                .","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2395?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1186":{"info":{"issue_title":"Review class names for dialect and providers","issue_key":"OGM-1186","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.1-next","issue_labels":"5.1-next","issue_description":"Infinispan and Neo4j use different naming conventions, we should pick one and try to be consistent.  For Neo4j, we have:\r\n &#91;Embedded|Bolt|Http&#93; DatastoreProvider  For Infinispan, we have:\r\n Infinispan&#91;Embedded|Remote&#93; DatastoreProvider","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1186?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11164":{"info":{"issue_title":"Tracking audit log without current revision","issue_key":"HHH-11164","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"hibernate-envers","issue_description":"It would be desirable to configure envers in that way, that the audit tables only contain historic revisions, excluding the current revision. With this, the main table would contain the current revision and the audit table would contain all revisions before the current revision.  The main reason for this feature request is the fact, that we're using liquibase in our project to manage database migration. Since we're dealing with lot's of master data (with the requirement to audit all of them) wich is inserted into database via liquibase, we would be forced to insert the audit data beside the revision meta data by hand. The requested feature would free us from this, since the first historic revision would be inserted into the audit log before the first update event.  We tried to used conditional auditing, as described in developer guide. Since envers architecture seems to be build upon POST (post update for example) events instead of PRE (pre update for example) events, we weren't able to design a working concept as all the listeners assume post events.  It would be fine if you'd evaluate this feature request. We can imagine that it is interesting for projects which use a db migration tool like liquibase and envers to audit changed on entities","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11164?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84871","commnet_date":"2016-10-10T09:26:38-0700","commnet_user":"Chris Cranford","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Chris Cranfordn added a comment  - 10\/Oct\/2016 09:26 AM    n        n        It would be desirable to configure envers in that way, that the audit tables only contain historic revisions, excluding the current revision. With this, the main table would contain the current revision and the audit table would contain all revisions before the current revision.nSo, where is the revision number and revision timestamp related to the current revision stored or are these values no longer relevant in your proposal?nnThe main reason for this feature request is the fact, that we're using liquibase in our project to manage database migration. Since we're dealing with lot's of master data (with the requirement to audit all of them) wich is inserted into database via liquibase, we would be forced to insert the audit data beside the revision meta data by hand. The requested feature would free us from this, since the first historic revision would be inserted into the audit log before the first update event.nAre you assuming your liquibase scripts would only ever INSERT rows and never have a need to UPDATE or DELETE audited entity rows? n    n    n        n            Show  n            n                        n    n    n    n                nn       Chris Cranfordn added a comment  - 10\/Oct\/2016 09:26 AM                       It would be desirable to configure envers in that way, that the audit tables only contain historic revisions, excluding the current revision. With this, the main table would contain the current revision and the audit table would contain all revisions before the current revision.  n So, where is the revision number and revision timestamp related to the current revision stored or are these values no longer relevant in your proposal? n n The main reason for this feature request is the fact, that we're using liquibase in our project to manage database migration. Since we're dealing with lot's of master data (with the requirement to audit all of them) wich is inserted into database via liquibase, we would be forced to insert the audit data beside the revision meta data by hand. The requested feature would free us from this, since the first historic revision would be inserted into the audit log before the first update event.  n Are you assuming your liquibase scripts would only ever INSERT rows and never have a need to UPDATE or DELETE audited entity rows?              n        n    n"},{"commnet_id":"comment-84872","commnet_date":"2016-10-10T10:22:00-0700","commnet_user":"Ansgar Schulte","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Ansgar Schulte n added a comment  - 10\/Oct\/2016 10:22 AM    n        n        nSo, where is the revision number and revision timestamp related to the current revision stored or are these values no longer relevant in your proposal?nnDue to another requirement (4 eyes principle), we need to put some general metadata to our \"BaseEntity\" wich is mapped as @MappedSuperclass. \r\nnThese are for example:nntThe creating user (might be a technical one)ntThe user which is the last editorntThe user which approved the last change of this entityntLast editing timestamp (which would be our own revision timestamp)ntLast approval timestampnnnnNearly every entity in our entity model which is dynamic data must follow the 4 eyes principle with strict auditing of every change. So we would have the revision timestamp as part of our entity model. The revision ID is not relevant in our case. As our project will include an extensive migration of existing data of a legacy system, were a good part of the data comes from code, business area will provide csv files to bring the initial state to the database. The first revision - again - will have all necessary information included, so we aim for Envers to audit the initial state before the first update of a row is about to be performed to not loose the initial state. When deleting an entity, the current approach serves well for us, but we're getting effort issues if we would be forced to create a huge liquibase changelog file for all the initial revisions. I've tried to generate this changelog with liquibase but wasn't able to do that, since liquibsae db diff on data level is not supported.nnnAre you assuming your liquibase scripts would only ever INSERT rows and never have a need to UPDATE or DELETE audited entity rows?nnOur entity model is separated into two parts: Dynamic data which is expected to grow or change rapidly and masterdata which is expected to stay constant most of the time. Initial db state will come thoroughly through liquibase. Once inserted the dynamic data will only be updated or deleted through the application by the users. So update and delete statements will trigger Envers to audit the changes. Masterdata will only be inserted and might updated without the need of an audit log. The changelog files under version control will serve as a audit log here. n    n    n        n            Show  n            n                        n    n    n    n                nn       Ansgar Schulte n added a comment  - 10\/Oct\/2016 10:22 AM                      n So, where is the revision number and revision timestamp related to the current revision stored or are these values no longer relevant in your proposal?  nn Due to another requirement (4 eyes principle), we need to put some general metadata to our \"BaseEntity\" wich is mapped as @MappedSuperclass.  nThese are for example: n nt The creating user (might be a technical one) nt The user which is the last editor nt The user which approved the last change of this entity nt Last editing timestamp (which would be our own revision timestamp) nt Last approval timestamp n nnn Nearly every entity in our entity model which is dynamic data must follow the 4 eyes principle with strict auditing of every change. So we would have the revision timestamp as part of our entity model. The revision ID is not relevant in our case. As our project will include an extensive migration of existing data of a legacy system, were a good part of the data comes from code, business area will provide csv files to bring the initial state to the database. The first revision - again - will have all necessary information included, so we aim for Envers to audit the initial state before the first update of a row is about to be performed to not loose the initial state. When deleting an entity, the current approach serves well for us, but we're getting effort issues if we would be forced to create a huge liquibase changelog file for all the initial revisions. I've tried to generate this changelog with liquibase but wasn't able to do that, since liquibsae db diff on data level is not supported. nn n Are you assuming your liquibase scripts would only ever INSERT rows and never have a need to UPDATE or DELETE audited entity rows?  nn Our entity model is separated into two parts: Dynamic data which is expected to grow or change rapidly and masterdata which is expected to stay constant most of the time. Initial db state will come thoroughly through liquibase. Once inserted the dynamic data will only be updated or deleted through the application by the users. So update and delete statements will trigger Envers to audit the changes. Masterdata will only be inserted and might updated without the need of an audit log. The changelog files under version control will serve as a audit log here.              n        n    n"},{"commnet_id":"comment-84873","commnet_date":"2016-10-10T14:37:37-0700","commnet_user":"Chris Cranford","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Chris Cranfordn added a comment  - 10\/Oct\/2016 14:37 PM     - edited  n        n        I understand your situation and concerns, but what you are proposing is not a simple change.  It is in fact a considerable overhaul to not only the internals of Envers itself but to expected results exposed through its query API.nnIn the meanwhile, I would suggest one of the following alternatives:nn1. Preprocess the input and generate secondary input files.\r\nnIn your case this would imply taking your domain-expert provided CSV files and your business code output and generating a set of additional CSV files that allow you to insert directly into the Envers schema tables.nn2. Rather than loading data directly to the database and bypassing Hibernate, write a batch load process that allows you to leverage Hibernate allowing its event system to work as intended for integrators such as Envers.nnThe benefit of (1) is that it is likely the fastest way to load large volumes of data, particularly because you can use low-level database tools to import your files while (2) is likely a bit slower but minimizes the tools needed generate the additional seed files.nnIn the case of (1), this probably would work quite well with your existing migration solution while (2) likely does not. n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Chris Cranfordn added a comment  - 10\/Oct\/2016 14:37 PM     - edited                    I understand your situation and concerns, but what you are proposing is not a simple change.  It is in fact a considerable overhaul to not only the internals of Envers itself but to expected results exposed through its query API. nn In the meanwhile, I would suggest one of the following alternatives: nn 1. Preprocess the input and generate secondary input files. nIn your case this would imply taking your domain-expert provided CSV files and your business code output and generating a set of additional CSV files that allow you to insert directly into the Envers schema tables. nn 2. Rather than loading data directly to the database and bypassing Hibernate, write a batch load process that allows you to leverage Hibernate allowing its event system to work as intended for integrators such as Envers. nn The benefit of (1) is that it is likely the fastest way to load large volumes of data, particularly because you can use low-level database tools to import your files while (2) is likely a bit slower but minimizes the tools needed generate the additional seed files. nn In the case of (1), this probably would work quite well with your existing migration solution while (2) likely does not.              n        n    n"},{"commnet_id":"comment-84877","commnet_date":"2016-10-10T22:26:56-0700","commnet_user":"Ansgar Schulte","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Ansgar Schulte n added a comment  - 10\/Oct\/2016 22:26 PM    n        n        I assumed that and can definitely understand that this would imply major changes.\r\nnSo we will discuss the mentioned alternatives in developer team. As I see the default generated envers scheme uses an auto incremented column for revision ID (REVINFO.REV). I assume it would also be possible to use database sequences for that field right? This would ease the integration with liquibase generated scripts. n    n    n        n            Show  n            n                        n    n    n    n                nn       Ansgar Schulte n added a comment  - 10\/Oct\/2016 22:26 PM                      I assumed that and can definitely understand that this would imply major changes. nSo we will discuss the mentioned alternatives in developer team. As I see the default generated envers scheme uses an auto incremented column for revision ID (REVINFO.REV). I assume it would also be possible to use database sequences for that field right? This would ease the integration with liquibase generated scripts.              n        n    n"},{"commnet_id":"comment-84882","commnet_date":"2016-10-11T04:58:21-0700","commnet_user":"Chris Cranford","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Chris Cranfordn added a comment  - 11\/Oct\/2016 04:58 AM    n        n        As I see the default generated envers scheme uses an auto incremented column for revision ID (REVINFO.REV). I assume it would also be possible to use database sequences for that field right?nWhen the configuration setting org.hibernate.envers.use_revision_entity_with_native_id is true (the default for backward compatibility), then Envers will use an auto-increment database-specific column type.  If you set the setting value to false, it will cause Envers to use a Hibernate-based named sequence configured as REVISION_GENERATOR. n    n    n        n            Show  n            n                        n    n    n    n                nn       Chris Cranfordn added a comment  - 11\/Oct\/2016 04:58 AM                       As I see the default generated envers scheme uses an auto incremented column for revision ID (REVINFO.REV). I assume it would also be possible to use database sequences for that field right?  n When the configuration setting  org.hibernate.envers.use_revision_entity_with_native_id  is  true  (the default for backward compatibility), then Envers will use an auto-increment database-specific column type.  If you set the setting value to  false , it will cause Envers to use a Hibernate-based named sequence configured as  REVISION_GENERATOR .              n        n    n"}]}},{"OGM-1185":{"info":{"issue_title":"Improve documentation about inheritance","issue_key":"OGM-1185","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.3.Final,                                            5.1.0.Beta1","issue_labels":"5.0.3.Final,                                            5.1.0.Beta1","issue_description":"The documentation about inheritance is misleading, it states: The various inheritance strategies are not supported by Hibernate OGM, only the table per concrete class strategy is used. This is not so much a limitation but rather an acknowledgment of the dynamic nature of NoSQL schemas. If you feel the need to support other strategies, let us know (see Section 1.2, \u201cHow to contribute\u201d). Simply do not use @Inheritance nor @DiscriminatorColumn.  True is, Inheritance works except for the JOINED type. We should clarify this.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1185?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2387":{"info":{"issue_title":"Configurable dynamic mapping settings","issue_key":"HSEARCH-2387","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.6.0.Beta3","issue_component":"5.6.0.Beta3","issue_labels":"5.6.0.Beta3","issue_description":"At the moment org.hibernate.search.elasticsearch.impl.ElasticsearchIndexManager#createIndexMappings dynamic setting is set to strinct and there is no way to change it (apart from setting elasticsearch.index_schema_management_strategy=NONE (which was default for 5.6.0.Beta2) and then dynamic setting defaults  to true, which what i need).  I think it whould be benefitial to have all options available for dynamic mappings\r\n https:\/\/www.elastic.co\/guide\/en\/elasticsearch\/guide\/current\/dynamic-mapping.html .  Thanks,\r\n Alex  &#8212;\r\n Note (Yoann Rodi\u00e8re): Some tests have been disabled because of this lack of support. Please search for this ticket's code (HSEARCH-2387) in the source and re-enabled them when this issue has been fixed.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2387?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84867","commnet_date":"2016-10-10T03:06:59-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 10\/Oct\/2016 03:06 AM    n        n        Hi Alex, thanks for the feedback! Seems a reasonable request. Would you be able to tell us more about your use case? n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 10\/Oct\/2016 03:06 AM                      Hi Alex, thanks for the feedback! Seems a reasonable request. Would you be able to tell us more about your use case?              n        n    n"},{"commnet_id":"comment-84874","commnet_date":"2016-10-10T16:13:20-0700","commnet_user":"Alex Laptseu","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Alex Laptseun added a comment  - 10\/Oct\/2016 16:13 PM    n        n        Hi Sanne,\r\nnthanks for quick reply. \r\nnWe are trying to move away from Infinispan indexes storage to ES thus I am migrating to 5.6.0.Beta3.nnExample of entities:nnrn@Entityrn@Tablern@Indexedrnpublic  class Record {rnrn @IndexedEmbedded(prefix=<span class=\"code-quote\">\"customField_\"<\/span>, includeEmbeddedObjectId = <span class=\"code-keyword\">true<\/span>)rn <span class=\"code-keyword\">private<\/span> Set&lt;RecordTypeCustomFieldValue&gt; customFieldValues;rn....rn}rnrn@Entityrn@Tablernpublic  class RecordTypeCustomFieldValue{rn .....rn}rnnnnUpon the first application startup when no indexes and mappings exists at ES side yet org.hibernate.search.elasticsearch.impl.ElasticsearchIndexManager#createIndexMappings is triggered because default schema management strategy is set to org.hibernate.search.elasticsearch.cfg.IndexSchemaManagementStrategy#CREATE so it creates mappings with strict parameter. nnThen I perform full reindexing:nnrnFullTextSession fullTextSession = Search.getFullTextSession(session);rn      fullTextSession.createIndexer(rn                                    .....rn                                    Record.class,rn                                    ....rn                                    RecordCheckListCustomFieldValue.class,rn                                     ...)rn                     .cacheMode(IGNORE)rn                     .purgeAllOnStart(true )rn                     .optimizeAfterPurge(true )rn                     .optimizeOnFinish(true )rn                     .threadsToLoadObjects(loaderThreads)rn                     .typesToIndexInParallel(indexerThreads)rn                     .start();rnnnnWhen index for the Record type is created it fails because it doesn't know about RecordCheckListCustomFieldValue data type.nnHope that will help.nnThanks,\r\nnAlex n    n    n        n            Show  n            n                        n    n    n    n                nn       Alex Laptseun added a comment  - 10\/Oct\/2016 16:13 PM                      Hi Sanne, nthanks for quick reply.  nWe are trying to move away from Infinispan indexes storage to ES thus I am migrating to 5.6.0.Beta3. nn Example of entities: n  n rn@Entityrn@Tablern@Indexedrn public  class Record {rnrn @IndexedEmbedded(prefix= \"customField_\" , includeEmbeddedObjectId =  true )rn  private  Set&lt;RecordTypeCustomFieldValue&gt; customFieldValues;rn....rn}rnrn@Entityrn@Tablern public  class RecordTypeCustomFieldValue{rn .....rn}rn n  nn Upon the first application startup when no indexes and mappings exists at ES side yet org.hibernate.search.elasticsearch.impl.ElasticsearchIndexManager#createIndexMappings is triggered because default schema management strategy is set to org.hibernate.search.elasticsearch.cfg.IndexSchemaManagementStrategy#CREATE so it creates mappings with  strict  parameter.  nn Then I perform full reindexing: n  n rnFullTextSession fullTextSession = Search.getFullTextSession(session);rn      fullTextSession.createIndexer(rn                                    .....rn                                    Record.class,rn                                    ....rn                                    RecordCheckListCustomFieldValue.class,rn                                     ...)rn                     .cacheMode(IGNORE)rn                     .purgeAllOnStart( true )rn                     .optimizeAfterPurge( true )rn                     .optimizeOnFinish( true )rn                     .threadsToLoadObjects(loaderThreads)rn                     .typesToIndexInParallel(indexerThreads)rn                     .start();rn n  nn When index for the Record type is created it fails because it doesn't know about RecordCheckListCustomFieldValue data type. nn Hope that will help. nn Thanks, nAlex              n        n    n"},{"commnet_id":"comment-84916","commnet_date":"2016-10-13T01:35:54-0700","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 13\/Oct\/2016 01:35 AM    n        n        Hi Alex Laptseu,nnTo be honest, full support for IndexedEmbeddeds on Elasticsearch is still work in progress (n    n                n        n            n            HSEARCH-2397n        n                                                    Resolved n             n). Does your issue disappear when you drop the  prefix=\"customField_\", in your @IndexedEmbedded annotation?\r\nnIf so, you probably won't need a dynamic mapping once we fully support IndexedEmbeddeds (which will be the case in the 5.6 release).nnIf not, would you mind sharing the full stacktrace with the error message from Elasticsearch?nnNote that I don't mean to dismiss your proposal. Allowing users to configure the \"dynamic\" attribute is probably useful, but I'd like to make sure the need for this feature doesn't stem from bugs, which we'd rather fix first.nnThanks,\r\nnYoann n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 13\/Oct\/2016 01:35 AM                      Hi  Alex Laptseu , nn To be honest, full support for IndexedEmbeddeds on Elasticsearch is still work in progress (n     n                 n         n             n            HSEARCH-2397n         n                                                     Resolved n             n). Does your issue disappear when you drop the   prefix=\"customField_\",  in your @IndexedEmbedded annotation? nIf so, you probably won't need a dynamic mapping once we fully support IndexedEmbeddeds (which will be the case in the 5.6 release). nn If not, would you mind sharing the full stacktrace with the error message from Elasticsearch? nn Note that I don't mean to dismiss your proposal. Allowing users to configure the \"dynamic\" attribute is probably useful, but I'd like to make sure the need for this feature doesn't stem from bugs, which we'd rather fix first. nn Thanks, nYoann              n        n    n"},{"commnet_id":"comment-84952","commnet_date":"2016-10-16T23:12:03-0700","commnet_user":"Alex Laptseu","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Alex Laptseun added a comment  - 16\/Oct\/2016 23:12 PM    n        n        Hi Yoan,nnThe issue disappeared when i removed prefix=\"customField_\", in my @IndexedEmbedded annotation.nnDo you know when 5.6 will be released?nnDoesn't look like beta3 is fully production ready at this point, so we would probably wait for 5.6 final release....nnThanks,\r\nnAlex n    n    n        n            Show  n            n                        n    n    n    n                nn       Alex Laptseun added a comment  - 16\/Oct\/2016 23:12 PM                      Hi Yoan, nn The issue disappeared when i removed prefix=\"customField_\", in my @IndexedEmbedded annotation. nn Do you know when 5.6 will be released? nn Doesn't look like beta3 is fully production ready at this point, so we would probably wait for 5.6 final release.... nn Thanks, nAlex              n        n    n"},{"commnet_id":"comment-85004","commnet_date":"2016-10-17T06:43:24-0700","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 17\/Oct\/2016 06:43 AM    n        n        Hi Alex Laptseu,nnWe're currently aiming at publishing a candidate release by the end of the month. Then the time to the release will mostly depend on the feedback from the community.nnBe aware, though, that even when the release will be out, it will sport experimental Elasticsearch integration. Full support is more likely to come with Hibernate Search 6.0, which has no expected release date yet. You can refer to the roadmap for details about the content of each version: http:\/\/hibernate.org\/search\/roadmap\/nnCheers,\r\nnYoann n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 17\/Oct\/2016 06:43 AM                      Hi  Alex Laptseu , nn We're currently aiming at publishing a candidate release by the end of the month. Then the time to the release will mostly depend on the feedback from the community. nn Be aware, though, that even when the release will be out, it will sport  experimental  Elasticsearch integration. Full support is more likely to come with Hibernate Search 6.0, which has no expected release date yet. You can refer to the roadmap for details about the content of each version:  http:\/\/hibernate.org\/search\/roadmap\/  nn Cheers, nYoann              n        n    n"}]}},{"HHH-11163":{"info":{"issue_title":"Please add &lt;property name=&quot;hibernate.manytoone.default&quot; value=&quot;eager&quot; \/&gt; for JPA","issue_key":"HHH-11163","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.2.3","issue_component":"5.2.3","issue_labels":"5.2.3","issue_description":"Many developers forget or don't realize ManyToOne in JPA is eager resulting in many N table joins where none of them are really useful.  I loved the old hibernate that defaulted everything to lazy.  Can we have a property to override the JPA way of doing it?  Something like \r\n &lt;property name=\"hibernate.manytoone.default\" value=\"eager\" \/&gt; for JPA  A great article on why...\r\n https:\/\/vladmihalcea.com\/2014\/12\/15\/eager-fetching-is-a-code-smell\/","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11163?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11162":{"info":{"issue_title":"Support callbacks defined on superclasses of an applied entity-listener","issue_key":"HHH-11162","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"This is a request to support looking for callbacks on the superclasses of an applied entity-listener.  E.g.:     class MyListenerBase {      @PrePersist      public  void prePersistCallback(Object  theEntity) {          ...      }  }    class MyListenerSub extends  MyListenerBase {      @PreRemove      public  void preRemoveCallback(Object  theEntity) {          ...      }  }    @Entity  @EntityListeners(MyListenerSub.class)  class MyEntity {      ...  }     We need to be careful in dealing with overrides though.  E.g.:     class MyListenerBase {      @PrePersist      public  void prePersistCallback(Object  theEntity) {          ...      }  }    class MyListenerSub extends  MyListenerBase {      @Override      @PrePersist      public  void prePersistCallback(Object  theEntity) {          ...      }  }    @Entity  @EntityListeners(MyListenerSub.class)  class MyEntity {      ...  }     Or even:     class MyListenerBase {      @PrePersist      public  void prePersistCallback(Object  theEntity) {          ...      }  }    class MyListenerSub extends  MyListenerBase {      @Override      public  void prePersistCallback(Object  theEntity) {          ...      }  }    @Entity  @EntityListeners(MyListenerSub.class)  class MyEntity {      ...  }      Original description  Overview  I have an abstract class that declares a listener method with @PostPersist (among others).  I have a subclass that extends the abstract class.  The subclass is registered by either an annotated entity or as the default listener class.  Issue  The annotated method is never called because it seems CallbackBuilderLegacyImpl only looks for annotated methods in the subclass.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11162?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84893","commnet_date":"2016-10-11T09:18:00-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 11\/Oct\/2016 09:18 AM    n        n        That's not the way specs work.  As an implementor of a spec you are not required to implement everything that is not disallowed by the spec.  Even the fact that we are using double negatives ought to be a tip-off   I mean to take that to the logical extreme, the JPA spec does not say I cannot delete all of your data from the database on a flush; so can I do that too?  The spec does not disallow it..nnBased on what I think you want (since you know, you never provided any kind of illustration of what you mean exactly) you want to have inheritance within your entity-listener impls.  An entity-listener is distinctly different from an \"entity callback\"; the former defines lifecycle callbacks on a dedicated listener class, whereas the latter defines those lifecycle callbacks on the entity itself.  So as a counterpoint, JPA does in fact explicitly (and in great detail) document how \"entity callbacks\" are to be resolved up the entity's hierarchy.  That's how a spec works.nnAnd you can't call it a bug.  A bug, by definition, is something that does not work as advertised.  Nowhere in the Hibernate documentation, nor even in the JPA spec itself, is this documented to work as you think it should work.  You don't like the behavior, but that does not make it a bug.nnAnd I even agree it would be nice to support that.  Still not a bug  n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 11\/Oct\/2016 09:18 AM                      That's not the way specs work.  As an implementor of a spec you are not required to implement everything that is not disallowed by the spec.  Even the fact that we are using double negatives ought to be a tip-off    I mean to take that to the logical extreme, the JPA spec does not say I cannot delete all of your data from the database on a flush; so can I do that too?  The spec does not disallow it.. nn Based on what I think you want (since you know, you never provided any kind of illustration of what you mean exactly) you want to have inheritance within your entity-listener impls.  An entity-listener is distinctly different from an \"entity callback\"; the former defines lifecycle callbacks on a dedicated listener class, whereas the latter defines those lifecycle callbacks on the entity itself.  So as a counterpoint, JPA does in fact explicitly (and in great detail) document how \"entity callbacks\" are to be resolved up the entity's hierarchy.  That's how a spec works. nn And you can't call it a bug.  A bug, by definition, is something that does not work as advertised.  Nowhere in the Hibernate documentation, nor even in the JPA spec itself, is this documented to work as you think it should work.  You don't  like  the behavior, but that does not make it a bug. nn And I even agree it would be nice to support that.  Still not a bug                n        n    n"},{"commnet_id":"comment-84895","commnet_date":"2016-10-11T09:28:32-0700","commnet_user":"Steven Spungin","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Steven Spunginn added a comment  - 11\/Oct\/2016 09:28 AM     - edited  n        n        It seems to me a reasonable assumption that the resolution of the entity listener annotation in the entities would be identical to the resolution of the listener annotations within the listener classes.nnUse Case: nnnrnabstract  class AbstractListener {rn@PostPersist void onPostPersist(<span class=\"code-object\">Object<\/span> o){rn      Broadcaster.broadcast(getTopic(), o);rn}rnprotected  abstract  String  getTopic();rn}rn}rnrnclass MyListener extends  AbstractListener {rn<span class=\"code-keyword\">protected<\/span> <span class=\"code-object\">String<\/span> getTopic(){rn<span class=\"code-keyword\">return<\/span> <span class=\"code-quote\">\"my\/listener\"<\/span>;rn}rn}rnrnclass MyOtherListener extends  AbstractListener {rn<span class=\"code-keyword\">protected<\/span> <span class=\"code-object\">String<\/span> getTopic(){rn<span class=\"code-keyword\">return<\/span> <span class=\"code-quote\">\"my\/otherlistener\"<\/span>;rn}rn}rnnnnIt also seems, after looking at the code, that the listener lookups in both cases could be optimized a bit.nnSo feature it is! n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Steven Spunginn added a comment  - 11\/Oct\/2016 09:28 AM     - edited                    It seems to me a reasonable assumption that the resolution of the entity listener annotation in the entities would be identical to the resolution of the listener annotations within the listener classes. nn Use Case:  nn  n rn abstract  class AbstractListener {rn@PostPersist void onPostPersist( Object  o){rn      Broadcaster.broadcast(getTopic(), o);rn}rn protected   abstract   String  getTopic();rn}rn}rnrnclass MyListener  extends  AbstractListener {rn protected   String  getTopic(){rn return   \"my\/listener\" ;rn}rn}rnrnclass MyOtherListener  extends  AbstractListener {rn protected   String  getTopic(){rn return   \"my\/otherlistener\" ;rn}rn}rn n  nn It also seems, after looking at the code, that the listener lookups in both cases could be optimized a bit. nn So feature it is!              n        n    n"},{"commnet_id":"comment-84896","commnet_date":"2016-10-11T09:30:44-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 11\/Oct\/2016 09:30 AM    n        n        Specs and assumptions... 'nuff said  n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 11\/Oct\/2016 09:30 AM                      Specs and assumptions... 'nuff said                n        n    n"},{"commnet_id":"comment-84897","commnet_date":"2016-10-11T09:31:43-0700","commnet_user":"Steven Spungin","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steven Spunginn added a comment  - 11\/Oct\/2016 09:31 AM    n        n        So is it against spec by adding this feature? n    n    n        n            Show  n            n                        n    n    n    n                nn       Steven Spunginn added a comment  - 11\/Oct\/2016 09:31 AM                      So is it against spec by adding this  feature ?              n        n    n"},{"commnet_id":"comment-84898","commnet_date":"2016-10-11T09:57:59-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 11\/Oct\/2016 09:57 AM    n        n        Nope.  A spec provider can always provide extensions.  n n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 11\/Oct\/2016 09:57 AM                      Nope.  A spec provider can always provide extensions.   n             n        n    n"}]}},{"HV-1124":{"info":{"issue_title":"Add integration test for javax.money validation on WildFly","issue_key":"HV-1124","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.4-next,                                            6.0-next","issue_labels":"5.4-next,                                            6.0-next","issue_description":"I don't think there is a module for javax.money coming with the application server, but it should be possible to apply validation to monetary ammounts when providing the API and Moneta as part of the deployment.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1124?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84832","commnet_date":"2016-10-07T08:12:38-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 07\/Oct\/2016 08:12 AM    n        n        Hey Willi Schu00F6nborn, would you be interested in tackling this one? n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 07\/Oct\/2016 08:12 AM                      Hey  Willi Schu00F6nborn , would you be interested in tackling this one?              n        n    n"},{"commnet_id":"comment-87803","commnet_date":"2016-12-21T01:53:16-0800","commnet_user":"Guillaume Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Guillaume Smetn added a comment  - 21\/Dec\/2016 01:53 AM    n        n        Due to licensing issues with the javax.money API, we won't be able to distribute a module in our WF patch. Thus we can only have the modules in our integration tests and have an optional dependency in our module. n    n    n        n            Show  n            n                        n    n    n    n                nn       Guillaume Smetn added a comment  - 21\/Dec\/2016 01:53 AM                      Due to licensing issues with the javax.money API, we won't be able to distribute a module in our WF patch. Thus we can only have the modules in our integration tests and have an optional dependency in our module.              n        n    n"}]}},{"HV-1123":{"info":{"issue_title":"Set up japicmp tooling to create API\/SPI change reports","issue_key":"HV-1123","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.3.0.Final","issue_labels":"5.3.0.Final","issue_description":"Replaces the previous Clirr plug-in. Can just be copied from HSEARCH.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1123?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1122":{"info":{"issue_title":"Explore constraints based on Lambda expressions","issue_key":"HV-1122","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"6.0-next","issue_labels":"6.0-next","issue_description":"This is for prototyping the idea around Lamba-based constraints from                                                          BVAL-515                                                              Open                .","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1122?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1121":{"info":{"issue_title":"Validation error path generation for TYPE_USE annotation","issue_key":"HV-1121","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.2.4.Final","issue_component":"5.2.4.Final","issue_labels":"5.2.4.Final","issue_description":"Given the attached sample project, I would like map the errors in an object like     errors: [    [\"beans\" , \"1\" , \"value\" ],    [\"strings\" , \"2\" ]  ]     As in my sample, my approach at the moment is by navigating the violation path (http:\/\/docs.oracle.com\/javaee\/7\/api\/javax\/validation\/ConstraintViolation.html#getPropertyPath--) which works perfectly for the first case, but fails for the second (I cannot find a way to retrieve the index of the failing object). I think the reason is in the implementation of javax.validation.Path.PropertyNode in hibernate-validator, which retrieves the index from the parent node. In my case, the failing object is a leaf, thus this approach cannot work.  Discussion started on SoF: http:\/\/stackoverflow.com\/questions\/39872625\/type-use-annotation-in-hibernate-validator","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1121?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1182":{"info":{"issue_title":"Upgrade Neo4j to version 3.0.6","issue_key":"OGM-1182","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0.Alpha1","issue_labels":"5.1.0.Alpha1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1182?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1120":{"info":{"issue_title":"Remove deprecated ignoreAnnotations() method","issue_key":"HV-1120","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"6.0-next","issue_labels":"6.0-next","issue_description":"The single method on AnnotationProcessingOptions is deprecated, hence the entire type can go away.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1120?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1119":{"info":{"issue_title":"Verify that annotation parameters on method\/constructor parameters are valid","issue_key":"HV-1119","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.4.0.Beta1","issue_labels":"5.4.0.Beta1","issue_description":"Need to extend functionality added in                                                          HV-270                                                              Closed                 onto method\/constructor parameters.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1119?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2378":{"info":{"issue_title":"Support @DateBridge resolution for java.time types","issue_key":"HSEARCH-2378","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.x","issue_labels":"5.x","issue_description":"Currently @DateBridge resolution is only supported for java.util.Date and java.util.Calendar.  We should extend it to the java.time field bridges for which it makes sense (and refresh the @DateBridge comment).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2378?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-85527","commnet_date":"2016-11-04T04:09:27-0700","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 04\/Nov\/2016 04:09 AM    n        n        Two remarks:nn 1. we probably should use a different annotation, because @DateBridge is not supported on java.util.Calendar: there's another annotation, @CalendarBridge. So either we go on adding one annotation per type or we deprecate the old ones and add a generic annotation.\r\nn 2. we might want to revisit how @DateBridge @CalendarBridge annotations are structured. In particular, the \"encoding\" parameter, when set to \"numeric\", implies lossy data storage: zone ID \/ offset information is not stored in a simple timestamp from epoch. This is the kind of things that, if we really want to keep them, should be at least documented or trigger exceptions when bootstrapping. n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 04\/Nov\/2016 04:09 AM                      Two remarks: nn  1. we probably should use a different annotation, because  @DateBridge  is  not  supported on  java.util.Calendar : there's another annotation,  @CalendarBridge . So either we go on adding one annotation per type or we deprecate the old ones and add a generic annotation. n 2. we might want to revisit how  @DateBridge   @CalendarBridge  annotations are structured. In particular, the \"encoding\" parameter, when set to \"numeric\", implies lossy data storage: zone ID \/ offset information is not stored in a simple timestamp from epoch. This is the kind of things that, if we really want to keep them, should be at least documented or trigger exceptions when bootstrapping.              n        n    n"},{"commnet_id":"comment-85528","commnet_date":"2016-11-04T04:21:13-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 04\/Nov\/2016 04:21 AM    n        n        Let's limit it to the java.time types which make sense to have a \"resolution\" option. Is there any?nnI'm challenging this as I'd expect that if you're only interested in a \"month\" resolution, you'd use java.time.Month, etc..nnSomeone able to make an example of something being stored in the database as something quite precise (like java.time.Instant) but then want it indexed in a more coarse precision? n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 04\/Nov\/2016 04:21 AM                      Let's limit it to the  java.time  types which make sense to have a \"resolution\" option. Is there any? nn I'm challenging this as I'd expect that if you're only interested in a \"month\" resolution, you'd use  java.time.Month , etc.. nn Someone able to make an example of something being stored in the database as something quite precise (like  java.time.Instant ) but then want it indexed in a more coarse precision?              n        n    n"},{"commnet_id":"comment-85537","commnet_date":"2016-11-04T05:54:25-0700","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 04\/Nov\/2016 05:54 AM    n        n        Someone able to make an example of something being stored in the database as something quite precise (like java.time.Instant) but then want it indexed in a more coarse precision?nnSanne Grinovero Yes, it happens. For instance I have an Instant on my business object representing the date\/time it was created, but I want to query by day of creation (so, a LocalDate or OffsetDate). Typically the second-precision is only useful when displaying the data (well, not \"useful\", but let's say \"nice\"), not when searching: end users generally don't have a specific millisecond in mind when searching.\r\nnI guess we could also instruct application developpers to use range queries in that case. It would have been quite hard to do with the old-time java time library (because you have to find the instant at the beginning of the day and the instant at the end of the day, which requires some boilerplate code), but it's probably a one-liner with java.time. n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 04\/Nov\/2016 05:54 AM                       Someone able to make an example of something being stored in the database as something quite precise (like java.time.Instant) but then want it indexed in a more coarse precision?  nn  Sanne Grinovero  Yes, it happens. For instance I have an Instant on my business object representing the date\/time it was created, but I want to query by day of creation (so, a  LocalDate  or  OffsetDate ). Typically the second-precision is only useful when displaying the data (well, not \"useful\", but let's say \"nice\"), not when searching: end users generally don't have a specific millisecond in mind when searching. nI guess we could also instruct application developpers to use range queries in that case. It would have been quite hard to do with the old-time java time library (because you have to find the instant at the beginning of the day and the instant at the end of the day, which requires some boilerplate code), but it's probably a one-liner with  java.time .              n        n    n"},{"commnet_id":"comment-85540","commnet_date":"2016-11-04T06:00:13-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 04\/Nov\/2016 06:00 AM    n        n        Yes I'm aware of that use case but I'm wondering if we can keep things simpler, both for us and users (there are benefits about not having to know about more annotations).nnSo for example, having your example in mind, it wouldn't be hard for the user to add an additional, ad-hoc transient field having a lower precision type. Not suggesting that this issue is invalid, but wondering if we can agree that it's low priority: I'd rather move it to 5.x or even 6 n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 04\/Nov\/2016 06:00 AM                      Yes I'm aware of that use case but I'm wondering if we can keep things simpler, both for us and users (there are benefits about not having to know about more annotations). nn So for example, having your example in mind, it wouldn't be hard for the user to add an additional, ad-hoc transient field having a lower precision type. Not suggesting that this issue is invalid, but wondering if we can agree that it's low priority: I'd rather move it to 5.x or even 6              n        n    n"},{"commnet_id":"comment-85543","commnet_date":"2016-11-04T06:07:48-0700","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 04\/Nov\/2016 06:07 AM    n        n        Sure, that's not blocking. It's not specifically related to ES anyway, and the java time bridges have been introduced in 5.5.0.CR1: n    n                n        n            n            HSEARCH-1947n        n                                                    Closed n             n n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 04\/Nov\/2016 06:07 AM                      Sure, that's not blocking. It's not specifically related to ES anyway, and the java time bridges have been introduced in 5.5.0.CR1: n     n                 n         n             n            HSEARCH-1947n         n                                                     Closed n             n              n        n    n"},{"commnet_id":"comment-85563","commnet_date":"2016-11-04T07:35:59-0700","commnet_user":"Guillaume Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Guillaume Smetn added a comment  - 04\/Nov\/2016 07:35 AM    n        n        Is it really so much work (haven't taken a look at it at all)? I don't think we need to support all java.time but I think the resolution feature is necessary when you work with Instant or ZonedDateTime and OffsetDateTime.nnA lot of users are using them now instead of Date and frankly, searching on dates is not usable without the resolution. nnTake for instance a creation date or an order date: you want to keep the exact timestamp in your database but when you search on it, you only search the items\/orders for a given day.nnYes, the user can work around it but I'm worried it might give a bad taste of \"old library\" to see that what you can do with Date, you can't do it with Instant or Zoned\/OffsetDateTime. n    n    n        n            Show  n            n                        n    n    n    n                nn       Guillaume Smetn added a comment  - 04\/Nov\/2016 07:35 AM                      Is it really so much work (haven't taken a look at it at all)? I don't think we need to support all java.time but I think the resolution feature is necessary when you work with Instant or ZonedDateTime and OffsetDateTime. nn A lot of users are using them now instead of Date and frankly, searching on dates is not usable without the resolution.  nn Take for instance a creation date or an order date: you want to keep the exact timestamp in your database but when you search on it, you only search the items\/orders for a given day. nn Yes, the user can work around it but I'm worried it might give a bad taste of \"old library\" to see that what you can do with Date, you can't do it with Instant or Zoned\/OffsetDateTime.              n        n    n"},{"commnet_id":"comment-85566","commnet_date":"2016-11-04T09:16:07-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 04\/Nov\/2016 09:16 AM    n        n        Ok, fair enough, but to ship 5.6 we need to stop adding things to the wishlist. I'll re-flag it version 5.x : if anyone wants to do it we can merge it of course. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 04\/Nov\/2016 09:16 AM                      Ok, fair enough, but to ship 5.6 we need to stop adding things to the wishlist. I'll re-flag it version 5.x : if anyone wants to do it we can merge it of course.              n        n    n"}]}},{"HV-1118":{"info":{"issue_title":"Adapt default ParameterNameProvider to adhere to BV 2.0 rules","issue_key":"HV-1118","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"6.0-next","issue_labels":"6.0-next","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1118?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11154":{"info":{"issue_title":"Better determination of implicit TransactionCoordnatorBuilder in JPA bootstrap","issue_key":"HHH-11154","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6.0.0.Alpha1","issue_labels":"6.0.0.Alpha1","issue_description":"This is a task to improve the determination of the TransactionCoordnatorBuilder to use when one is not explicitly defined.  The series of if-checks done in EntityManagerFactoryBuilderImpl#applyJdbcConnectionProperties ought to contribute to that determination:  \tif javax.persistence.jtaDataSource is specified, assume the JTA TransactionCoordnatorBuilder \telse, assume the non-JTA TransactionCoordnatorBuilder    So potentially have EntityManagerFactoryBuilderImpl#applyJdbcConnectionProperties return the Class&lt;? extends TransactionCoordnatorBuilder&gt;&gt; to use implicitly, which we can pass along to EntityManagerFactoryBuilderImpl#applyTransactionProperties","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11154?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84777","commnet_date":"2016-10-05T14:09:16-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 05\/Oct\/2016 14:09 PM    n        n        I have tentative scheduled this for 5.2.  IMO if we are going to address this in 5.2 we should address it in 5.0 and 5.1 as well.nnI also think that re-enabling the logging of org.hibernate.internal.CoreMessageLogger#autoFlushWillNotWork should only be done in conjunction with this fix. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 05\/Oct\/2016 14:09 PM                      I have tentative scheduled this for 5.2.  IMO if we are going to address this in 5.2 we should address it in 5.0 and 5.1 as well. nn I also think that re-enabling the logging of  org.hibernate.internal.CoreMessageLogger#autoFlushWillNotWork  should only be done in conjunction with this fix.              n        n    n"}]}},{"HHH-11153":{"info":{"issue_title":"Rename published groupId from org.hibernate to org.hibernate.orm","issue_key":"HHH-11153","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6.0.0.Alpha1","issue_labels":"6.0.0.Alpha1","issue_description":"I think this just makes sense in terms of grouping.    But there is also a practical aspect: I would like to start publishing directly to the Sonatype OSS repo rather than publishing through JBoss Nexus and waiting on a scheduled sync.  Renaming the group facilitates removing those artifacts from the sync script.  Andrea Boriero Already has a proof-of-concept for this @ https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1259","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11153?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11152":{"info":{"issue_title":"ByteBuddy BytecodeProvider ","issue_key":"HHH-11152","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.5","issue_labels":"5.2.5","issue_description":"Look at either moving to ByteBuddy as the backing for BytecodeProvider, or as an alternative backing to Javassist.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11152?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-85468","commnet_date":"2016-11-01T08:39:54-0700","commnet_user":"Luis Barreiro","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Luis Barreiron added a comment  - 01\/Nov\/2016 08:39 AM    n        n        Yes, I was mentioning 'Class' and 'Field' in an abstract way ... I'm fine with any encapsulation we decide to go with. n    n    n        n            Show  n            n                        n    n    n    n                nn       Luis Barreiron added a comment  - 01\/Nov\/2016 08:39 AM                      Yes, I was mentioning 'Class' and 'Field' in an abstract way ... I'm fine with any encapsulation we decide to go with.              n        n    n"},{"commnet_id":"comment-85469","commnet_date":"2016-11-01T08:52:26-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 01\/Nov\/2016 08:52 AM    n        n        Rafael Winterhalter What can I and\/or Luis Barreiro help with at this point?  If you want you can take a crack at designing this Class\/Field\/Attribute API and retrofitting EnhancementContext; or Luis Barreiro or I can. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 01\/Nov\/2016 08:52 AM                       Rafael Winterhalter  What can I and\/or  Luis Barreiro  help with at this point?  If you want you can take a crack at designing this Class\/Field\/Attribute API and retrofitting  EnhancementContext ; or  Luis Barreiro  or I can.              n        n    n"},{"commnet_id":"comment-85471","commnet_date":"2016-11-01T09:38:28-0700","commnet_user":"Rafael Winterhalter","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Rafael Winterhaltern added a comment  - 01\/Nov\/2016 09:38 AM    n        n        Hi, my appologies. I am a bit overwhelmed with work at the moment. I would try to build some base components which can then be put together to represent the actual logic. I would start to port a few functions of the Enhancer and then post it. If you at that point could help me with porting the rest, this would be much appreciated. I think once I layed out the approach, it becomes obvious how to implement the logic. I only need to do a few bits first to allow the \"in-bytecode-replacements\" of remapping field access to method access. n    n    n        n            Show  n            n                        n    n    n    n                nn       Rafael Winterhaltern added a comment  - 01\/Nov\/2016 09:38 AM                      Hi, my appologies. I am a bit overwhelmed with work at the moment. I would try to build some base components which can then be put together to represent the actual logic. I would start to port a few functions of the Enhancer and then post it. If you at that point could help me with porting the rest, this would be much appreciated. I think once I layed out the approach, it becomes obvious how to implement the logic. I only need to do a few bits first to allow the \"in-bytecode-replacements\" of remapping field access to method access.              n        n    n"},{"commnet_id":"comment-85515","commnet_date":"2016-11-03T09:40:17-0700","commnet_user":"Rafael Winterhalter","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Rafael Winterhaltern added a comment  - 03\/Nov\/2016 09:40 AM     - edited  n        n        I found some hours and once I got started, implementing the Enhancer was pretty much straight forward: https:\/\/github.com\/raphw\/hibernate-ormnnThere is however still one chunk missing. The part where field writing is substituted comes with a tail of different more advanced enhancements which I did not port yet. One challenge is that Byte Buddy uses compiled code as a template and can therefore not determine method names dynamically. This might make some parts difficult to port. n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Rafael Winterhaltern added a comment  - 03\/Nov\/2016 09:40 AM     - edited                    I found some hours and once I got started, implementing the Enhancer was pretty much straight forward:  https:\/\/github.com\/raphw\/hibernate-orm  nn There is however still one chunk missing. The part where field writing is substituted comes with a tail of different more advanced enhancements which I did not port yet. One challenge is that Byte Buddy uses compiled code as a template and can therefore not determine method names dynamically. This might make some parts difficult to port.              n        n    n"},{"commnet_id":"comment-86115","commnet_date":"2016-11-16T14:10:41-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 16\/Nov\/2016 14:10 PM    n        n        Applied upstream to master (5.2).  Reverted the \"make bytebuddy the default BytecodeProvider\" piece for 5.2.  We will go that route for 6.0 (see the linked issue). n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 16\/Nov\/2016 14:10 PM                      Applied upstream to master (5.2).  Reverted the \"make bytebuddy the default BytecodeProvider\" piece for 5.2.  We will go that route for 6.0 (see the linked issue).              n        n    n"}]}},{"HSEARCH-2375":{"info":{"issue_title":"Document the supported Elasticsearch versions in the reference documentation","issue_key":"HSEARCH-2375","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.6.0.Beta2","issue_component":"5.6.0.Beta2","issue_labels":"5.6.0.Beta2","issue_description":"I couldn't find this piece of information in the reference documentation.  As for the wording, we might not want to say \"supported versions\", because it's still a technical preview, but we might at least state what versions are expected to work.  A version range should be given, i.e. the oldest version expected to work and the newest tested version.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2375?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1116":{"info":{"issue_title":"Add support for javax.money","issue_key":"HV-1116","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.4.0.Beta1","issue_labels":"5.4.0.Beta1","issue_description":"Having constraints and validators for javax.money as an integral part of HV would be a great value-add for validation users.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1116?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2374":{"info":{"issue_title":"Make the default value of hibernate.search.default.elasticsearch.index_schema_management_strategy less confusing","issue_key":"HSEARCH-2374","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.6.0.Beta2","issue_component":"5.6.0.Beta2","issue_labels":"5.6.0.Beta2","issue_description":"The default value for hibernate.search.*.elasticsearch.index_schema_management_strategy is NONE, which means an application using an Elasticsearch backend will not work out-of-the box, because it will not create indexes automatically as it did when using a local Lucene backend.  Two solutions:    \tEither we document this default (ostensibly) in the reference documentation \tOr we change it to something harmless that would create missing indexes without dropping or altering any previously existing content.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2374?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11151":{"info":{"issue_title":"Update Getting Started guide to Hibernate 5.2","issue_key":"HHH-11151","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.2.3","issue_component":"5.2.3","issue_labels":"5.2.3","issue_description":"The getting started guide should be updated to Hibernate 5.2. Now it references 4.3.  Also, Hibernate 5.2 Quick Start guide still references hibernate-java8 and hibernate-entitymanager.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11151?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11148":{"info":{"issue_title":"Migrate HikariCP from Java 1.6 to Java 1.8 ","issue_key":"HHH-11148","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.2.3","issue_component":"5.2.3","issue_labels":"5.2.3","issue_description":"Currently, we are using:   \"com.zaxxer:HikariCP-java6:2.3.9\"     This is a Java 1.6 dependency which does not implement on top of JDBC 4.1 (Java 1.7) and JDBC 4.2 (Java 1.8).  Since Hibernate ORM 5.2 already uses Java 1.8, it's time to upgrade to the default HikariCP version which is based on Java 1.8:   \"com.zaxxer:HikariCP:2.5.1\"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11148?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11147":{"info":{"issue_title":"Allow enhanced entities to be returned in a completely uninitialized state","issue_key":"HHH-11147","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.2.2 ,                                            5.0.11","issue_component":"5.2.2 ,                                            5.0.11","issue_labels":"5.2.2","issue_description":"When EntityManager#getReference is called to obtain reference to an entity, currently what happens is:  \tIf the entity is proxied we will load no state and the uninitialized entity reference is returned \tIf the entity is enhanced we load its non-lazy state immediately.    This is a request to allow the enhanced entity to be returned without even its non-lazy state yet loaded   Original description  When using bytecode enhanced entities EntityManager.getReference does not seem to return a proxy but a fully initialized entity just like EntityManager.find.\r\n The example project comes with two maven profiles, the default activated one does enhancement. You can disable enhancement with the profile no-enhancement to see how it succeeds with non-enhanced entities.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11147?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84932","commnet_date":"2016-10-13T08:15:24-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 13\/Oct\/2016 08:15 AM    n        n        We could certainly consider adding such a feature.  But this is not a bug if that is the basis for this report.  That is simply not how bytecode enhancement works in Hibernate today. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 13\/Oct\/2016 08:15 AM                      We could certainly consider adding such a feature.  But this is not a bug if that is the basis for this report.  That is simply not how bytecode enhancement works in Hibernate today.              n        n    n"},{"commnet_id":"comment-84933","commnet_date":"2016-10-13T08:25:52-0700","commnet_user":"Christian Beikov","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Christian Beikovn added a comment  - 13\/Oct\/2016 08:25 AM    n        n        Ok, well then it's a feature request I guess. I'd expect that enhanced entities behave the same as non-enhanced entities regarding the lazyness of loading state from the dbms. Is that reasonable? There apparently is logic in place for handling lazyness of bytecode enhanced entities via LazyToOne(NO_PROXY) which as far as I understood would make to-one relations lazy in case of bytecode enhanced entities. I don't understand how that differs from making an entity lazy in general or am I missing something? n    n    n        n            Show  n            n                        n    n    n    n                nn       Christian Beikovn added a comment  - 13\/Oct\/2016 08:25 AM                      Ok, well then it's a feature request I guess. I'd expect that enhanced entities behave the same as non-enhanced entities regarding the lazyness of loading state from the dbms. Is that reasonable? There apparently is logic in place for handling lazyness of bytecode enhanced entities via  LazyToOne(NO_PROXY)  which as far as I understood would make to-one relations lazy in case of bytecode enhanced entities. I don't understand how that differs from making an entity lazy in general or am I missing something?              n        n    n"},{"commnet_id":"comment-84934","commnet_date":"2016-10-13T09:07:22-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 13\/Oct\/2016 09:07 AM    n        n        Yes you are missing something.  Here is my reply on that email thread to Luis...nnnTake a step back...  Let's use an old stand-by as an example:nnclass Order nUnknown macro: {n    ...n    @ManyToOnen    Customer customer;n}  nnThere are 2 ways to handle `Order#customer` being lazy behaviorally:nntWith Hibernate's default proxy approach, when the Order is loaded we take the `#customer` FK value and build a Customer proxy from it.  That generated Customer proxy now controls its own initializationntWith bytecode enhancement (assuming !NO_PROXY), when the Order is loaded we do not select any lazy state (`#customer` included).  Later when the application accesses `#customer` we select the `#customer` FK and use that to build a Customer proxy.  Essentially we have double laziness.  And the creation of the proxy here is nothing more than a performance hit.nnnnThis is why NO_PROXY came about initially.  Like so many things in Hibernate, bytecode enhancement was initially \"bolted on\" rather than deeply integrated.  We started down the path of deeper integration in this new bytecode enhancement and in many ways we ought to look at this an an opportunity to \"fix things\".  This is why I suggested that we ought to consider handling this automatically.  There is never a time that generating a proxy for a lazy to-one attribute is going to make sense when the container (Order) is bytecode enhanced for laziness.nnnnThis brings up another consideration.  IIUC ATM we issue 2 different selects here in the \"bytecode enhanced lazy to-one\" approach:\r\nnLoads the FK value (select o.customer_id from orders o where o.id = ?)\r\nnLoads the related state (select ... from customers c where c.id = ?)\r\nnWe really ought to investigate combining those into one with a join.nnPut as simply as I can... the proxy approach is Class based whereas the enhancement approach is attribute based.  In the bytecode approach we handle the laziness of attributes at the attribute level, never at the class level. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 13\/Oct\/2016 09:07 AM                      Yes you are missing something.  Here is my reply on that email thread to Luis... nn n Take a step back...  Let's use an old stand-by as an example: nn class Order  n  Unknown macro: {n    ...n    @ManyToOnen    Customer customer;n}   nn There are 2 ways to handle `Order#customer` being lazy behaviorally: n nt With Hibernate's default proxy approach, when the Order is loaded we take the `#customer` FK value and build a Customer proxy from it.  That generated Customer proxy now controls its own initialization nt With bytecode enhancement (assuming !NO_PROXY), when the Order is loaded we do not select any lazy state (`#customer` included).  Later when the application accesses `#customer` we select the `#customer` FK and use that to build a Customer proxy.  Essentially we have double laziness.  And the creation of the proxy here is nothing more than a performance hit. n nnn This is why NO_PROXY came about initially.  Like so many things in Hibernate, bytecode enhancement was initially \"bolted on\" rather than deeply integrated.  We started down the path of deeper integration in this new bytecode enhancement and in many ways we ought to look at this an an opportunity to \"fix things\".  This is why I suggested that we ought to consider handling this automatically.  There is never a time that generating a proxy for a lazy to-one attribute is going to make sense when the container (Order) is bytecode enhanced for laziness. nn nn This brings up another consideration.  IIUC ATM we issue 2 different selects here in the \"bytecode enhanced lazy to-one\" approach: nLoads the FK value (select o.customer_id from orders o where o.id = ?) nLoads the related state (select ... from customers c where c.id = ?) nWe really ought to investigate combining those into one with a join.  nn Put as simply as I can... the proxy approach is Class based whereas the enhancement approach is attribute based.  In the bytecode approach we handle the laziness of attributes at the attribute level, never at the class level.              n        n    n"},{"commnet_id":"comment-84937","commnet_date":"2016-10-13T09:25:17-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 13\/Oct\/2016 09:25 AM    n        n        Guess my Order -&gt; Customer psuedo model did not come through.  But you get the gist n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 13\/Oct\/2016 09:25 AM                      Guess my Order -&gt; Customer psuedo model did not come through.  But you get the gist              n        n    n"},{"commnet_id":"comment-85497","commnet_date":"2016-11-02T22:04:48-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 02\/Nov\/2016 22:04 PM    n        n        I've created n    n                n        n            n            HHH-11223n        n                                                    Open n             n  combine the SQL for initializing byte-code enhanced lazy-to-one into a single statement. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 02\/Nov\/2016 22:04 PM                      I've created n     n                 n         n             n            HHH-11223n         n                                                     Open n             n  combine the SQL for initializing byte-code enhanced lazy-to-one into a single statement.              n        n    n"}]}},{"OGM-1181":{"info":{"issue_title":"Replace separate association management methods by upsertTupleWithAssociations() for Infinispan","issue_key":"OGM-1181","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"infinispan","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1181?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1180":{"info":{"issue_title":"Replace separate association management methods by upsertTupleWithAssociations() for Ehcache","issue_key":"OGM-1180","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"ehcache","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1180?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1179":{"info":{"issue_title":"Replace separate association management methods by upsertTupleWithAssociations() for Neo4j","issue_key":"OGM-1179","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.1-next","issue_labels":"5.1-next","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1179?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2370":{"info":{"issue_title":"Document how to use QueryDescriptor","issue_key":"HSEARCH-2370","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.6.0.Beta2","issue_component":"5.6.0.Beta2","issue_labels":"5.6.0.Beta2","issue_description":"QueryDescriptor (returned by ElasticsearchQueries in particular) may prove confusing.  We should ensure there's a clear documentation about how to use this class (i.e. org.hibernate.search.FullTextSession.createFullTextQuery(QueryDescriptor, Class&lt;?&gt;...)), and that everywhere we return such an object, we add a link pointing to this documentation.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2370?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84717","commnet_date":"2016-10-03T04:11:09-0700","commnet_user":"Gustavo Fernandes","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gustavo Fernandesn added a comment  - 03\/Oct\/2016 04:11 AM    n        n        As explained in n    n                n        n            n            HSEARCH-2367n        n                                                    Closed n             n, using FullTextSession is not applicable. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gustavo Fernandesn added a comment  - 03\/Oct\/2016 04:11 AM                      As explained in n     n                 n         n             n            HSEARCH-2367n         n                                                     Closed n             n, using  FullTextSession  is not applicable.              n        n    n"},{"commnet_id":"comment-84719","commnet_date":"2016-10-03T04:45:59-0700","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 03\/Oct\/2016 04:45 AM    n        n        Gustavo Fernandes Right. I updated the description.nnI'm keeping this ticket, though, since the documentation may not be clear enough; I should at least check this. n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 03\/Oct\/2016 04:45 AM                       Gustavo Fernandes  Right. I updated the description. nn I'm keeping this ticket, though, since the documentation may not be clear enough; I should at least check this.              n        n    n"}]}},{"OGM-1178":{"info":{"issue_title":"Check whether ORM statistics are useful for OGM","issue_key":"OGM-1178","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"Maybe something to play with for Vlad Mihalcea (or anyone else): are the ORM statistics working (and meaningful) when using OGM with let's say the MongoDB backend? Of course we don't run SQL queries, but they may show up as \"native queries\" or so.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1178?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1112":{"info":{"issue_title":"ValidationMessages for Slovak","issue_key":"HV-1112","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"5.3.0.CR1","issue_component":"5.3.0.CR1","issue_labels":"5.3.0.CR1","issue_description":"I wrote ValidationMessages_sk.properties for Slovak language.\r\n Please, merge this on next version.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1112?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2366":{"info":{"issue_title":"Add a CLI Elasticsearch mapping export tool","issue_key":"HSEARCH-2366","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.6.0.Beta2","issue_component":"5.6.0.Beta2","issue_labels":"5.6.0.Beta2","issue_description":"The tool would allow to export a Hibernate Search-generated mapping so that users may compare it to their existing Elasticsearch mapping.  Work has been initiated as part of                                                          HSEARCH-2260                                                              Closed                , but some major changes may be needed, so this will have to be part of a major release.   Work in progress available here: https:\/\/github.com\/yrodiere\/hibernate-search\/tree\/HSEARCH-2260-clitool  The main issue was that such a tool should not have to connect to an Elasticsearch instance: we just want it to export the schema based on a configuration and a set of jars. Yet HSearch's metamodel creation and index manager creation\/startup seem intertwined, and we cannot execute one without the other. So in order for the CLI tool to exist, we need to bring some changes to HSearch's startup process.\r\n See there for more details about the issue: https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2260?focusedCommentId=84220&amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-84220","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2366?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11143":{"info":{"issue_title":"Log a warning if @Cache \/ @Cacheable specified on non-root entities","issue_key":"HHH-11143","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"4.2.21 ,                                            5.2.2 ,                                            5.0.11 ,                                            5.1.2","issue_component":"4.2.21 ,                                            5.2.2 ,                                            5.0.11 ,                                            5.1.2","issue_labels":"4.2.21","issue_description":"It is not valid to specify @Cache or @Cacheable on non-root entities within an inheritance hierarchy. A warning should be logged if this found to be true.\r\n See also                                                          HHH-11142                                                              Closed                .","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11143?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11142":{"info":{"issue_title":"Document supported use\/implications of @Cache \/ @Cacheable","issue_key":"HHH-11142","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"4.2.21 ,                                            5.0.9 ,                                            5.2.2 ,                                            5.1.2","issue_component":"4.2.21 ,                                            5.0.9 ,                                            5.2.2 ,                                            5.1.2","issue_labels":"4.2.21","issue_description":"Hibernate permits enabling \/ disabling caching at the hierarchy level rather than on a per entity level for performance reasons. This means that @Cache (as noted) is valid on \"a root entity [in an inheritance hierarchy] or a collection. The same is true when using javax.persistence.Cacheable.  Please add comments detailing the permitted use of @Cache \/ @Cacheable and the implications with regard to cache structure\/content somewhere in the section on caching in the User Guide.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11142?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84721","commnet_date":"2016-10-03T05:20:43-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 03\/Oct\/2016 05:20 AM    n        n        Gail Badner, You should migrate this to 5.1 and 5.0 as well. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 03\/Oct\/2016 05:20 AM                       Gail Badner , You should migrate this to 5.1 and 5.0 as well.              n        n    n"},{"commnet_id":"comment-84949","commnet_date":"2016-10-14T17:20:17-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 14\/Oct\/2016 17:20 PM    n        n        Backported to 5.1 and 5.0 branches as well. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 14\/Oct\/2016 17:20 PM                      Backported to 5.1 and 5.0 branches as well.              n        n    n"}]}},{"HV-1111":{"info":{"issue_title":"Allow reference to types in JavaDoc without FQN ","issue_key":"HV-1111","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"6.0-next","issue_labels":"6.0-next","issue_description":"Currently we always refer to types using their FQN in JavaDoc, which makes the docs harder to read. JavaDoc can work with imports, though, too. We already do this in OGM (requires some adaption of CS rules).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1111?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84766","commnet_date":"2016-10-05T06:54:36-0700","commnet_user":"Guillaume Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Guillaume Smetn added a comment  - 05\/Oct\/2016 06:54 AM    n        n        Gunnar Morling it already works as the processJavadoc option of the UnusedImports rule is true by default.nnIt doesn't sound recommended though:nnOptionally: it is referenced in Javadoc comments. This check is on by default, but it is considered bad practice to introduce a compile time dependency for documentation purposes only. As an example, the import java.util.Date would be considered referenced with the Javadoc comment nUnknown macro: {@link Date}  n. The alternative to avoid introducing a compile time dependency would be to write the Javadoc comment as nUnknown macro: {@link java.util.Date}  n.nnI close the issue, feel free to use imports when you see fit. n    n    n        n            Show  n            n                        n    n    n    n                nn       Guillaume Smetn added a comment  - 05\/Oct\/2016 06:54 AM                       Gunnar Morling  it already works as the processJavadoc option of the UnusedImports rule is true by default. nn It doesn't sound recommended though: n n Optionally: it is referenced in Javadoc comments. This check is on by default, but it is considered bad practice to introduce a compile time dependency for documentation purposes only. As an example, the import java.util.Date would be considered referenced with the Javadoc comment  n  Unknown macro: {@link Date}   n . The alternative to avoid introducing a compile time dependency would be to write the Javadoc comment as  n  Unknown macro: {@link java.util.Date}   n .  nn I close the issue, feel free to use imports when you see fit.              n        n    n"}]}},{"HSEARCH-2364":{"info":{"issue_title":"Consider introducing a fully asynchronous indexing option","issue_key":"HSEARCH-2364","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6","issue_labels":"6","issue_description":"As highlighted but the use case here:  \thttp:\/\/stackoverflow.com\/questions\/39273444\/asynchronous-indexing-by-hibernate-search-hs-after-transaction-commit\/39766800#39766800    Our \"async\" worker is delegating to a background thread the write-to-index aspect, but it still has to gather all data in the application thread synchronously.  This is not the first time such a thing is asked, and we might be able to batch some operations in the background work? For example we have plans to have the MassIndexer hinted on how to optimally load associations for a given type, the same hints could be applied here.  It could be in in all effects implemented by simply feeding the queue of an always available MassIndexer.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2364?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2362":{"info":{"issue_title":"Auto-recover from timeout during scroll on an Elasticsearch resultset","issue_key":"HSEARCH-2362","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.7","issue_labels":"5.7","issue_description":"The current implementation loads a page of results from the remote query, but when fetching additional pages these might result in an exception when the remote query has expired and garbage collected.  I'm wondering if we should re-incarnate the query again, then scroll to the requested page.\r\n There are two downsides:  \tif the user could avoid the remote query to go in timeout that's obviously more efficient \tthe scroll result might not be accurate, e.g. if the index has changed in the meantime there might be gaps or duplicates.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2362?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84604","commnet_date":"2016-09-28T09:31:55-0700","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 28\/Sep\/2016 09:31 AM    n        n        I think that's a good idea, but we definitely should provide a configuration option to users so that they can disable this if they'd prefer a timeout than inaccurate data.nnStill, two questions would remain:nnntwould the default be \"enbaled\" or \"disabled\"? This is important as this configuration option would probably seem quite obscure.ntwould this be a query-level configuration option, or an application-level one?nn n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 28\/Sep\/2016 09:31 AM                      I think that's a good idea, but we definitely should provide a configuration option to users so that they can disable this if they'd prefer a timeout than inaccurate data. nn Still, two questions would remain: nn nt would the default be \"enbaled\" or \"disabled\"? This is important as this configuration option would probably seem quite obscure. nt would this be a query-level configuration option, or an application-level one? n n             n        n    n"},{"commnet_id":"comment-84607","commnet_date":"2016-09-28T13:41:14-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 28\/Sep\/2016 13:41 PM    n        n        Right this should be an option, and I think it should be an explicit opt-in.nnI'm torn about which one should be the default.\r\nnI think the default should be the current behaviour, as it is the only one guaranteeing correctness and at worst brings the matter to the user's attention rather than introducing subtle issues with the results.nnOn the other hand, we could avoid some trouble by simply logging a WARN every time we need to re-incarnate a query automatically, that might avoid some exceptions to people (would they only find out in production?) and probably still get some attention. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 28\/Sep\/2016 13:41 PM                      Right this should be an option, and I think it should be an explicit opt-in. nn I'm torn about which one should be the default. nI think the default should be the current behaviour, as it is the only one guaranteeing correctness and at worst brings the matter to the user's attention rather than introducing subtle issues with the results. nn On the other hand, we could avoid some trouble by simply logging a WARN every time we need to re-incarnate a query automatically, that might avoid some exceptions to people (would they only find out in production?) and probably still get some attention.              n        n    n"}]}},{"HV-1110":{"info":{"issue_title":"Additional TYPE_USE related cleanup","issue_key":"HV-1110","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"6.0-next","issue_labels":"6.0-next","issue_description":"Now that JDK8 is our minimum target and our standard constraints support TYPE_USE, we can remove the precautions we took with TYPE_USE.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1110?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2361":{"info":{"issue_title":"Make sure Elasticsearch related configuration properties are parsed and validated at boot time","issue_key":"HSEARCH-2361","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.7","issue_labels":"5.7","issue_description":"Some configuration properties related to Elasticsearch are being parsed \"on demand\".  For example:  \torg.hibernate.search.elasticsearch.impl.ElasticsearchHSQueryImpl.IndexSearcher.getScrollTimeout() \torg.hibernate.search.elasticsearch.impl.ElasticsearchHSQueryImpl.IndexSearcher.getScrollFetchSize() \torg.hibernate.search.elasticsearch.impl.ElasticsearchHSQueryImpl.IndexSearcher.getScrollBacktrackingWindowSize()    These should be parsed upfront both to ensure validation at boot time, and for performance reasons to reuse the already produced values.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2361?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2360":{"info":{"issue_title":"Elasticsearch queries should use source filtering","issue_key":"HSEARCH-2360","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"5.6.0.Beta2","issue_component":"5.6.0.Beta2","issue_labels":"5.6.0.Beta2","issue_description":"See https:\/\/www.elastic.co\/guide\/en\/elasticsearch\/reference\/current\/search-request-source-filtering.html  I think not using source filtering may involve unnecessary high network bandwidth usage when querying indices containing large documents.  We could probably disable the _source attribute altogether most of the time.  If we've got some time, we also may use more fine-grained source filtering when the \"SOURCE\" projection is not requested, but only a stored field is asked for.  (As explained in                                                          HSEARCH-2358                                                              Closed                , we must use \"_source\" when retrieving stored field values)","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2360?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1108":{"info":{"issue_title":"Add Repeatable to NON_COMPOSING_CONSTRAINT_ANNOTATIONS","issue_key":"HV-1108","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"6.0-next","issue_labels":"6.0-next","issue_description":"ConstraintDescriptorImpl contains a list of NON_COMPOSING_CONSTRAINT_ANNOTATIONS which are frequently on constraints and have no chance to be a composing constraint.  We should add @Repeatable to this list now that it's going to be part of most constraints.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1108?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2359":{"info":{"issue_title":"Checkstyle: stricter ParenPad rule","issue_key":"HSEARCH-2359","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta3","issue_labels":"5.6.0.Beta3","issue_description":"Our checkstyle ParenPad rule does not conform with our formatting rules, it needs to take into account more token types.  Unfortunately, it's it not possible to enable for METHOD_CALL due to this bug: https:\/\/github.com\/checkstyle\/checkstyle\/issues\/3048 .","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2359?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11136":{"info":{"issue_title":"Reduce memory consumption caused by Method.getParameterTypes()","issue_key":"HHH-11136","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"5.0.11","issue_component":"5.0.11","issue_labels":"5.0.11","issue_description":"Hey,  As of Java 8 there is the possibilty to call Method.getParameterCount(), which is a much more efficient variant in case just the parameter count is needed. Method.getParameterTypes() clones the underlying parameters and therefore creates unnecessary pressure on the heap in such cases.  I revised all places to use the new method.  Cheers,\r\n Christoph","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11136?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84505","commnet_date":"2016-09-27T13:49:34-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 27\/Sep\/2016 13:49 PM    n        n        Fixed in master. hibernate-core in 5.1 and 5.0 require 1.6 source compatibility, so this could not be applied to those branches. n n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 27\/Sep\/2016 13:49 PM                      Fixed in master. hibernate-core in 5.1 and 5.0 require 1.6 source compatibility, so this could not be applied to those branches.  n             n        n    n"}]}},{"HHH-11135":{"info":{"issue_title":"TableGenerator.registerExportables should be optional","issue_key":"HHH-11135","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Critical","issue_affects_version":"Won&#39;t Fix","issue_fix_version":"5.2.0","issue_component":"5.2.0","issue_labels":"5.2.0","issue_description":"Currently TableGenerator must be initialized by calling both configure and registerExportables.\r\n This is OK when using annotations to automatically create your Identifiers for you, but occasionally, you need to subclass your own TableGenerator (for example to add a prefix to the PK). Configure is easy to use takes intuitive parameters. registerExportables is impossible to use, taking some 'Database' object as a parameter. Also registerExportables is only used on rare occasion when we need to mutate database models. If one manages ones own DDLs (not everyone grants root privs to their java apps) and also manually generates an ID, TableGenerator is unusable.  Suggested Solution:\r\n Please initialize critical class variables in the configure method, as intuition would suggest:\r\n Add these 3 assignments to the end of the configure method:\r\n selectQuery = buildSelectQuery( jdbcEnvironment.getDialect() );\r\n updateQuery = buildUpdateQuery();\r\n insertQuery = buildInsertQuery();","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11135?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-86540","commnet_date":"2016-11-28T22:17:26-0800","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 28\/Nov\/2016 22:17 PM    n        n        The IDENTITY is a much better option because it uses soft locks. There's nothing wrong with IDENTITY for a MySQL perspective. It's just how Hibernate uses the identifier that leads to disabling JDBC inserts for this identifier generator type. But, I plan on investigating if we could optimize this in the near future, when I'll have some spare time.nnOn the other hand, TABLE generator uses row-level locks, and it requires an additional Tx to be issued whenever an identifier value needs to be calculated. This puts pressure on the DB transaction log and on the connection pool as well. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 28\/Nov\/2016 22:17 PM                      The IDENTITY is a much better option because it uses soft locks. There's nothing wrong with IDENTITY for a MySQL perspective. It's just how Hibernate uses the identifier that leads to disabling JDBC inserts for this identifier generator type. But, I plan on investigating if we could optimize this in the near future, when I'll have some spare time. nn On the other hand, TABLE generator uses row-level locks, and it requires an additional Tx to be issued whenever an identifier value needs to be calculated. This puts pressure on the DB transaction log and on the connection pool as well.              n        n    n"},{"commnet_id":"comment-86542","commnet_date":"2016-11-28T22:59:33-0800","commnet_user":"Charles Federspiel","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Charles Federspieln added a comment  - 28\/Nov\/2016 22:59 PM    n        n        IDENTITY and AUTO INCREMENT apply to numeric IDs, my intent is generate a varchar ID by prefixing a String onto the generated number. SEQUENCE (and thus your example) is not available to me since I'm using mysql. System is low volume with a single application accessing the DB, so scaling is not one of my concerns. Alternatively, I could adapt your example, creating my own IdentifierGenerator, but I would end up re-writing the TableGenerator class.\r\nnCan we move forward with adding the build statement calls to configure method? n    n    n        n            Show  n            n                        n    n    n    n                nn       Charles Federspieln added a comment  - 28\/Nov\/2016 22:59 PM                      IDENTITY and AUTO INCREMENT apply to numeric IDs, my intent is generate a varchar ID by prefixing a String onto the generated number. SEQUENCE (and thus your example) is not available to me since I'm using mysql. System is low volume with a single application accessing the DB, so scaling is not one of my concerns. Alternatively, I could adapt your example, creating my own IdentifierGenerator, but I would end up re-writing the TableGenerator class. nCan we move forward with adding the build statement calls to configure method?              n        n    n"},{"commnet_id":"comment-86543","commnet_date":"2016-11-28T23:10:58-0800","commnet_user":"Charles Federspiel","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Charles Federspieln added a comment  - 28\/Nov\/2016 23:10 PM    n        n        So I would have separate Identity table and Domain Object table both with the same number of rows, and Identity table would only contain numbers and the Object table would by keyed by my prefixed IDs? n    n    n        n            Show  n            n                        n    n    n    n                nn       Charles Federspieln added a comment  - 28\/Nov\/2016 23:10 PM                      So I would have separate Identity table and Domain Object table both with the same number of rows, and Identity table would only contain numbers and the Object table would by keyed by my prefixed IDs?              n        n    n"},{"commnet_id":"comment-86547","commnet_date":"2016-11-28T23:40:02-0800","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 28\/Nov\/2016 23:40 PM    n        n        If scaling is not an issue for you, then you can just use the TABLE generator. I told you about the scaling issue because I wanted you to be aware of it. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 28\/Nov\/2016 23:40 PM                      If scaling is not an issue for you, then you can just use the TABLE generator. I told you about the scaling issue because I wanted you to be aware of it.              n        n    n"},{"commnet_id":"comment-86609","commnet_date":"2016-11-29T12:29:27-0800","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 29\/Nov\/2016 12:29 PM    n        n        It's been clarified what the OP wants, and it could use the TableGenerator without needing to call the registerExportables method. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 29\/Nov\/2016 12:29 PM                      It's been clarified what the OP wants, and it could use the TableGenerator without needing to call the registerExportables method.              n        n    n"}]}},{"HHH-11132":{"info":{"issue_title":"Add a Performance Tuning and Best Practices chapter","issue_key":"HHH-11132","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.3","issue_labels":"5.2.3","issue_description":"The current User Guide goes through a great variety of features that Hibernate has to offer. However, we need a dedicated chapter to help the user pick those features that deliver the best performance for a data access layer.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11132?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84600","commnet_date":"2016-09-28T02:39:56-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 28\/Sep\/2016 02:39 AM    n        n        Gail Badner, you might want to backport this to 5.1 and 5.0 too. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 28\/Sep\/2016 02:39 AM                       Gail Badner , you might want to backport this to 5.1 and 5.0 too.              n        n    n"}]}},{"HHH-11127":{"info":{"issue_title":"Confused batch processing doc example","issue_key":"HHH-11127","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"5.1.2","issue_component":"5.1.2","issue_labels":"5.1.2","issue_description":"Hi, I am sorry if I am mistaken, but don't you think there is a bit confused behaviour in \r\n Batch Processing section - https:\/\/docs.jboss.org\/hibernate\/orm\/4.0\/devguide\/en-US\/html\/ch04.html (4.1. Batch inserts) or in previous or current hibernate doc versions.\r\n  for (int i = 0; i &lt; 100; i++) {\r\n             System.out.println(\"Save new object \" + i);\r\n             if (i % 20 == 0)  {                  System.out.println(\"flush and clear \" + i);              }\r\n        }\r\n Save new object 0\r\n flush and clear 0\r\n Save new object (1-20)\r\n flush and clear 20\r\n Save new object (21-40)\r\n flush and clear 40\r\n Save new object (41-60)\r\n flush and clear 60\r\n Save new object (61-80)\r\n flush and clear 80\r\n Save new object (81-99)\r\n \r\n and as you can see that first flush is occurred when first row has been saved,\r\n cause when i=0  (i % 20 == 0) -&gt; true. As for me it should be:\r\n int batchSize = 0;\r\n  for (int i = 0; i &lt; 100; i++) {\r\n             System.out.println(\"Save new object \" + i);\r\n             if (++batchSize % 20 == 0) {                 System.out.println(\"flush and clear \" + i);             }         }\r\n Save new object (0-19)\r\n flush and clear 19\r\n Save new object (20-39)\r\n flush and clear 39\r\n Save new object (40-59)\r\n flush and clear 59\r\n Save new object (60-79)\r\n flush and clear 79\r\n Save new object (80-99)  Here we see that first flush is occurred exactly after 20 rows have been saved. \r\n This result many people expect and this example is clearer than first one.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11127?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84859","commnet_date":"2016-10-10T02:17:11-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 10\/Oct\/2016 02:17 AM    n        n        Fixed in the new User Guide, not in the 4.x Developer Guide which was indicated by the OP.nnGail Badner, you might want to backport this to 5.1 and 5.0. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 10\/Oct\/2016 02:17 AM                      Fixed in the new User Guide, not in the 4.x Developer Guide which was indicated by the OP. nn  Gail Badner , you might want to backport this to 5.1 and 5.0.              n        n    n"}]}},{"HSEARCH-2357":{"info":{"issue_title":"Make FieldBridge in Es tests implement MetadataProvidingFieldBridge","issue_key":"HSEARCH-2357","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Rejected","issue_fix_version":"None","issue_component":"None","issue_labels":"elasticsearch","issue_description":"We documented that people needs to implement MetadataProvidingFieldBridge when working with Elasticsearch so we might as well be consistent with it in our tests.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2357?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1107":{"info":{"issue_title":"Checkstyle: stricter ParenPad rule","issue_key":"HV-1107","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.4.0.Beta1","issue_labels":"5.4.0.Beta1","issue_description":"Our checkstyle ParenPad rule does not conform with our formatting rules, it needs to take into account more token types.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1107?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1177":{"info":{"issue_title":"Track changes in ORM 6","issue_key":"OGM-1177","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"We should look into ORM 6 changes and see how it plays out for OGM:   \tType system changes \tNative query support","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1177?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11124":{"info":{"issue_title":"OneToOne level 2 caching limitation","issue_key":"HHH-11124","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"4.2.21 ,                                            5.0.11 ,                                            5.1.2","issue_component":"4.2.21 ,                                            5.0.11 ,                                            5.1.2","issue_labels":"4.2.21","issue_description":"When OneToOne associations are marked with @Cache, the caching mechanism is not able to fully support them.  When two entities A and B have a OneToOne, bi-directional association where A has an @JoinColumn reference to the @Id of B and where both A and B have been cached and the association navigated from both directions (A.getB() and B.getA() methods were called), calling either A.getB() or B.getA() results in database queries to initialize the association (in the new session) from B to A because the level 2 cache relies on primary key lookup and has no support for lookup of an entity whose foreign key references a given primary key value.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11124?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1105":{"info":{"issue_title":"Revisit shared state managed by ValidatorFactoryImpl","issue_key":"HV-1105","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"We have a synchronized map and a non-final field. Can we avoid those?","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1105?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2354":{"info":{"issue_title":"Allow customization of date format","issue_key":"HSEARCH-2354","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.7","issue_labels":"5.7","issue_description":"See the list of supported formats: https:\/\/www.elastic.co\/guide\/en\/elasticsearch\/reference\/current\/mapping-date-format.html#strict-date-time  Would be a nice improvement to let users customize the format.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2354?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11119":{"info":{"issue_title":"Improve performance of StringHelper.qualify() and StringHelper.unqualify()","issue_key":"HHH-11119","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.3","issue_labels":"5.2.3","issue_description":"Hey,  the two mentioned methods use String.lastIndexOf(String) instead of the optimized single-char version.     Benchmark Mode Cnt Score Error Units   MyBenchmark.testLastIndexOfChar thrpt 20 219650148,267 \u00b1 923186,686 ops\/s   MyBenchmark.testLastIndexOfString thrpt 20 132171791,867 \u00b1 666131,435 ops\/s      Cheers,\r\n Christoph","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11119?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11118":{"info":{"issue_title":"Add NaturalIdStatistics (replacing NaturalIdCacheStatistics)","issue_key":"HHH-11118","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"Deprecate NaturalIdCacheStatistics in favor of this new NaturalIdStatistics contract:       \/**   * Exposes a series of metrics regarding the resolution of a natural-id   * to its corresponding identifier.  This involves metrics about the   * execution of the SQL to perform the resolution, as well as metrics about   * the caching of that resolutin (if  enabled).   *   * @author Steve Ebersole   *\/  public  interface  NaturalIdStatistics {  \t\/**  \t * If second-level caching is enabled, returns the number of times  \t * Hibernate has looked for  a resolution in the cache and found  \t * it (cache hit).  Returns -1 if  caching is disabled.  \t *   \t * @return  The number of second-level cache hits. or -1  \t *\/  \tlong  getCacheHitCount();    \t\/**  \t * If second-level caching is enabled, returns the number of times  \t * Hibernate has looked for  a resolution in the cache and not found  \t * it (cache miss).  Returns -1 if  caching is disabled.  \t *  \t * @return  The number of second-level cache misses. or -1  \t *\/  \tlong  getCacheMissCount();    \t\/**  \t * If second-level caching is enabled, returns the number of times  \t * Hibernate has stored a resolution into the cache.  Returns -1   \t * if  caching is disabled.  \t *  \t * @return  The number of second-level cache puts. or -1  \t *\/  \tlong  getCachePutCount();    \t\/**  \t * How many times has Hibernate had to execute the SQL for   \t * looking up the {@code NaturalId-&gt;Id} mapping for  this   \t * entity type?  \t * &lt;p\/&gt;  \t * This is generally indicative of a corresponding {@link #getCacheMissCount()}  \t * and a corresponding {@link #getCachePutCount()}.  \t *  \t * @return  The number of time that query has been executed.  \t *\/  \tlong  getQueryExecutionCount();    \t\/**  \t * When we have had to execute the SQL query ({@link #getQueryExecutionCount()}),  \t * how long  has it taken on average?  \t *  \t * @return  The average execution time for  the {@code NaturalId-&gt;Id} query?  \t *\/  \tlong  getQueryExecutionAvgTime();    \t\/**  \t * When we have had to execute the {@code NaturalId-&gt;Id} query,  \t * what is the longest amount of time it has taken (in milliseconds)?  \t *  \t * @return  The longest execution time for  the {@code NaturalId-&gt;Id} query?  \t *\/  \tlong  getQueryExecutionMaxTime();    \t\/**  \t * When we have had to execute the {@code NaturalId-&gt;Id} query,  \t * what is the least amount of time it has taken (in milliseconds)?  \t *  \t * @return  The smallest execution time for  the {@code NaturalId-&gt;Id} query?  \t *\/  \tlong  getQueryExecutionMinTime();  }","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11118?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11116":{"info":{"issue_title":"Improve the JPA bootstrapping section in the User Guide","issue_key":"HHH-11116","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.3,                                            5.1.3,                                            5.0.12","issue_labels":"5.2.3,                                            5.1.3,                                            5.0.12","issue_description":"The JPA bootstrapping section does not offer an example of how the `persistence.xml` should be used.  On the other hand, it mentions a way to bootstrap without the `persistence.xml`, which relies on an internal class that might change in future. That needs to be addressed as well.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11116?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84180","commnet_date":"2016-09-20T06:59:54-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 20\/Sep\/2016 06:59 AM    n        n        Gail Badner, you might want to backport this to 5.1 and 5.0. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 20\/Sep\/2016 06:59 AM                       Gail Badner , you might want to backport this to 5.1 and 5.0.              n        n    n"},{"commnet_id":"comment-84311","commnet_date":"2016-09-23T19:23:28-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 23\/Sep\/2016 19:23 PM    n        n        Fixed in 5.1 and 5.0 as well. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 23\/Sep\/2016 19:23 PM                      Fixed in 5.1 and 5.0 as well.              n        n    n"}]}},{"HHH-11115":{"info":{"issue_title":"Criteria system extensions","issue_key":"HHH-11115","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6.0.0.Alpha1","issue_labels":"6.0.0.Alpha1","issue_description":"Decide what specific extensions to the JPA Criteria system we want.  Part of this is expanding org.hibernate.query.criteria.HibernateCriteriaBuilder.  Especially consider extensions we support in HQL, such as:  \tnested dynamic-instantiation \tlimit\/offset declaration as part of the query, including sub-queries \torder-by declaration as part of sub-queries \tsupport for nested paths \taliased fetch joins \tunmapped polymorphic queries     Be sure any extensions are covered by `StrictJpaComplianceViolation`","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11115?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1175":{"info":{"issue_title":"Make use of UDTs for Cassandra","issue_key":"OGM-1175","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"UDTs (user-defined types) may be a nice mapping for embeddables.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1175?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1103":{"info":{"issue_title":"Remove remaining pre-Java-8 code","issue_key":"HV-1103","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"6.0-next","issue_labels":"6.0-next","issue_description":"We still have some switches depending on the Java version. These are not needed any longer now that we require Java 8.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1103?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11113":{"info":{"issue_title":"Consider DropWizard Metrics integration","issue_key":"HHH-11113","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"Initially this grow out of a discussion about Hibernate Statistics originally, although I wonder if there is a larger discussion here for any JmxService capability&#91;1&#93; .  The original discussion was specific to publishing stats through DropWizard (DW) rather than Statistics as its own end point.  &#91;1&#93;   Vlad Mihalcea does DW support configuration in addition to metric collection (ala JMX)?","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11113?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84143","commnet_date":"2016-09-19T06:55:28-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 19\/Sep\/2016 06:55 AM    n        n        For JMX, Dropwizard Metrics only provides a JMX Reporter. Basically, it allows you to export all the Metrics data via JMX, but that's just it. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 19\/Sep\/2016 06:55 AM                      For JMX, Dropwizard Metrics only provides a JMX Reporter. Basically, it allows you to export all the Metrics data via JMX, but that's just it.              n        n    n"},{"commnet_id":"comment-84158","commnet_date":"2016-09-19T09:20:28-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 19\/Sep\/2016 09:20 AM    n        n        Another aspect to consider is whether we want a general stat\/metric publishing SPI and allow for easily hooking in alternates (Dropwizard being one such alternate). n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 19\/Sep\/2016 09:20 AM                      Another aspect to consider is whether we want a general stat\/metric publishing SPI and allow for easily hooking in alternates (Dropwizard being one such alternate).              n        n    n"},{"commnet_id":"comment-84181","commnet_date":"2016-09-20T07:14:40-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 20\/Sep\/2016 07:14 AM    n        n        I did reach out to the Hawkular team also about this.  It is a possibility that pushing metrics to DW may be enough to have Hawkular \"pick them up\".  Otherwise, if we want to support Hawkular we will need to go the \"split module\" route and find resources for implementing that SPI for Hawkular.  It would seem to me DW is higher priority though. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 20\/Sep\/2016 07:14 AM                      I did reach out to the Hawkular team also about this.  It is a possibility that pushing metrics to DW may be enough to have Hawkular \"pick them up\".  Otherwise, if we want to support Hawkular we will need to go the \"split module\" route and find resources for implementing that SPI for Hawkular.  It would seem to me DW is higher priority though.              n        n    n"}]}},{"HHH-11110":{"info":{"issue_title":"Allow TypeContributor to contribute ParameterizedType, DynamicParameterizedType","issue_key":"HHH-11110","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.2.2","issue_component":"5.2.2","issue_labels":"5.2.2","issue_description":"It is pretty handy to be able to use configurable user types, but current contract of TypeContributions accepts already instantiated user types, so if those ones implement ParameterizedType or DynamicParameterizedType the corresponding setParameterValues(Properties) is not called.  Possible solutions    \tAllow TypeContributions to accept type classes among the type instances and then use this classes as factories in an ordinary way (just like ParameterizedTypes work right now) \tAllow  TypeContributions to accept type factories among the type instances and then use this factories to create new types for every unique set of parameters.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11110?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1172":{"info":{"issue_title":"Decide whether to default the package name in ISPN Remote or not","issue_key":"OGM-1172","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.1-next","issue_labels":"5.1-next","issue_description":"Should it be derived from the PU name if available?","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1172?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11108":{"info":{"issue_title":"Add test to prove that @Basic( fetch = FetchType.LAZY ) really works as expected","issue_key":"HHH-11108","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.2.2","issue_component":"5.2.2","issue_labels":"5.2.2","issue_description":"Apparently, we don't have an integration test that counts the number of queries to be executed when we use the @Basic( fetch = FetchType.LAZY ) optimization.   This new test is going to reside in the documentation folder, and it will use the Gradle bytecode enhancer plugin as well. The test must count the number of statements that are executed and also validate the content of the underlying SQL query.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11108?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84091","commnet_date":"2016-09-15T09:17:52-0700","commnet_user":"Andrei Ivanov","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Andrei Ivanovn added a comment  - 15\/Sep\/2016 09:17 AM    n        n        Now do a test for @Basic( fetch = FetchType.LAZY ) inside an @Embeddable  n    n    n        n            Show  n            n                        n    n    n    n                nn       Andrei Ivanovn added a comment  - 15\/Sep\/2016 09:17 AM                      Now do a test for  @Basic( fetch = FetchType.LAZY )  inside an  @Embeddable                 n        n    n"}]}},{"HSEARCH-2349":{"info":{"issue_title":"PrefixQuery Apache Lucene query type is not automatically translated to json  ","issue_key":"HSEARCH-2349","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.6.0.Beta2","issue_component":"5.6.0.Beta2","issue_labels":"5.6.0.Beta2","issue_description":"Would nice to have org.apache.lucene.search.PrefixQuery\r\n automatically translated to elasticsearch json request. Currently it's not supported.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2349?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84064","commnet_date":"2016-09-14T04:14:21-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 14\/Sep\/2016 04:14 AM    n        n        Thanks for reporting it! n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 14\/Sep\/2016 04:14 AM                      Thanks for reporting it!              n        n    n"}]}},{"HSEARCH-2348":{"info":{"issue_title":"Improve logging for elasticsearch integration","issue_key":"HSEARCH-2348","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.6.0.Beta2","issue_component":"5.6.0.Beta2","issue_labels":"5.6.0.Beta2","issue_description":"Keen to see translated(from Apache Lucene queries) json search requests to elasticsearch (hibernate-search-backend-elasticsearch-5.6.0.Alpha3) currently they are not logged","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2348?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84063","commnet_date":"2016-09-14T04:13:10-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 14\/Sep\/2016 04:13 AM    n        n        Good idea! Scheduling for the next milestone. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 14\/Sep\/2016 04:13 AM                      Good idea! Scheduling for the next milestone.              n        n    n"}]}},{"HV-1099":{"info":{"issue_title":"Support quoted local part and extend tests around @Email constraint","issue_key":"HV-1099","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.4.0.Beta1","issue_labels":"5.4.0.Beta1","issue_description":"The Wikipedia page on e-mail addresses contains many examples of valid and invalid e-mail addresses. We should add some of these examples to the test suite.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1099?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84061","commnet_date":"2016-09-14T00:50:50-0700","commnet_user":"Guillaume Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Guillaume Smetn added a comment  - 14\/Sep\/2016 00:50 AM    n        n        FYI, we don't support quoted local parts atm. n    n    n        n            Show  n            n                        n    n    n    n                nn       Guillaume Smetn added a comment  - 14\/Sep\/2016 00:50 AM                      FYI, we don't support quoted local parts atm.              n        n    n"},{"commnet_id":"comment-84062","commnet_date":"2016-09-14T01:04:03-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 14\/Sep\/2016 01:04 AM    n        n        Ah, may be a good thing to do then  n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 14\/Sep\/2016 01:04 AM                      Ah, may be a good thing to do then                n        n    n"},{"commnet_id":"comment-84102","commnet_date":"2016-09-16T00:03:37-0700","commnet_user":"Marko Bekhta","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Marko Bekhtan added a comment  - 16\/Sep\/2016 00:03 AM    n        n        I'll look into this one. It seems that the regex should be updated in EmailValidator to allow some of the valid cases to pass.  n    n    n        n            Show  n            n                        n    n    n    n                nn       Marko Bekhtan added a comment  - 16\/Sep\/2016 00:03 AM                      I'll look into this one. It seems that the regex should be updated in EmailValidator to allow some of the valid cases to pass.               n        n    n"},{"commnet_id":"comment-84110","commnet_date":"2016-09-16T03:30:20-0700","commnet_user":"Marko Bekhta","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Marko Bekhtan added a comment  - 16\/Sep\/2016 03:30 AM    n        n        Here's a pull request for it - request n    n    n        n            Show  n            n                        n    n    n    n                nn       Marko Bekhtan added a comment  - 16\/Sep\/2016 03:30 AM                      Here's a pull request for it -  request               n        n    n"}]}},{"HHH-11104":{"info":{"issue_title":"Split ResultTransformer into TupleTransformer and ResultListTransformer","issue_key":"HHH-11104","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"6.0.0.Alpha1","issue_labels":"6.0.0.Alpha1","issue_description":"Usages of ResultTransformer were deprecated in 5.2.  For 6.0 let's develop the better way to apply this idea, splitting this into 2 distinct functional contracts: TupleTransformer and ResultListTransformer.  There is some uncertainty we need to clarify with regards to how TupleTransformer and RowTransformer play together when the query is \"typed\".  The \"highest level\" of transformation is the type defined for a TypedQuery which defines the type of the individual \"rows\" returned by the Query to the user.  This resultType may be:  \tObject[].class to indicate that an Object[] should be the row type (so-called \"pass thru\" transformer). \tTuple.class which indicates that the results should be wrapped in a JPA Tuple \tSome other value which indicates the expected row type.  This is limited to cases where either: \t \t\tthe query defined a single \"select expression\" and the resultType names the type of that selection \t\tthe user supplied a TupleTransformer and the resultType names that TupleTransformer return type. \t \t    For example:    \/\/ case  1 - implicit   session.createQuery( \"select a.name, a.dateOfBirth, a.sex from Animal\"  )...    \/\/ case  1 - explicit   session.createQuery( \"select a.name, a.dateOfBirth, a.sex from Animal\" , Object [].class )...    \/\/ case  2 (a)   session.createQuery( \"select a.name, a.dateOfBirth, a.sex from Animal\" , Tuple.class )...    \/\/ case  2 (b)   session.createQuery( \"select a.name as name, a.dateOfBirth as dob, a.sex as sex from Animal\" , Tuple.class )...    \/\/ case  of 3.1   session.createQuery( \"select a.name from Animal\" , String .class )...    \/\/ case  of 3.2   session.createQuery( \"select a.name, a.dateOfBirth, a.sex from Animal\" , DTO.class )          .setTupleTransformer( new  TupleTransformer&lt;DTO&gt;() {...} )...      Some that we specifically need to decide on:    \/\/ IMO either:   \/\/     1) this  is invalid, or    \/\/     2) the Tuple construction needs to be the last applied - and we have a problem wrt who gets to \"consume\"    \/\/         the aliases : the Tuple or the TupleTransformer?  The end result in that case  would be a List of Tuples whose   \/\/         only value would be the DTO.    session.createQuery( \"select a.name as name, a.dateOfBirth as dob, a.sex as sex from Animal\" , Tuple.class )          .setTupleTransformer( new  TupleTransformer&lt;DTO&gt;() {...} )...    \/\/ we could allow this  too - essentially our TupleTransformer is creating the JPA Tuple in some custom way   \/\/     although I am not a fan of checking the type parameters to know the difference  between this  and the   \/\/     case  above; perhaps a \"special\"  contract like `interface  TupleBuilder extends  TupleTransformer` to indicate   \/\/     that we are building the Tuple   session.createQuery( \"select a.name as name, a.dateOfBirth as dob, a.sex as sex from Animal\" , Tuple.class )          .setTupleTransformer( new  TupleTransformer&lt;Tuple&gt;() {...} )...","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11104?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84055","commnet_date":"2016-09-13T18:53:05-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 13\/Sep\/2016 18:53 PM    n        n        I'm pretty happy with the way this is defined atm.  See org.hibernate.query.internal.ConcreteSqmSelectQueryPlan#determineRowTransformer -&gt; https:\/\/github.com\/sebersole\/hibernate-core\/blob\/wip\/6.0\/hibernate-core\/src\/main\/java\/org\/hibernate\/query\/internal\/ConcreteSqmSelectQueryPlan.java#L65nnLet's use that as a starting point for any additional discussions n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 13\/Sep\/2016 18:53 PM                      I'm pretty happy with the way this is defined atm.  See  org.hibernate.query.internal.ConcreteSqmSelectQueryPlan#determineRowTransformer  -&gt;  https:\/\/github.com\/sebersole\/hibernate-core\/blob\/wip\/6.0\/hibernate-core\/src\/main\/java\/org\/hibernate\/query\/internal\/ConcreteSqmSelectQueryPlan.java#L65  nn Let's use that as a starting point for any additional discussions              n        n    n"}]}},{"HSEARCH-2345":{"info":{"issue_title":"Support for parallel searchers","issue_key":"HSEARCH-2345","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"engine","issue_description":"Lucene has support to pass in an ExecutorService to the IndexReader in order to do searches in parallel across segments.  Currently when sharding is used, query performance is O&#40;n&#41; where n is the number of IndexManagers involved.  The caveat is that the ExecutorService only is used to certain methods from IndexReader, and also it is not suitable to all cases: it will trade latency for throughput, so ideally this should be configurable.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2345?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84046","commnet_date":"2016-09-13T12:07:58-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 13\/Sep\/2016 12:07 PM    n        n        In some cases we do query multiple indexes even w\/o sharding, but I'm skeptical on this being effectively useful in practice in the case of Hibernate Search as one usually expects a server side application running several queries in parallel.nnAre you needing this to implement any specific feature in Infinispan? n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 13\/Sep\/2016 12:07 PM                      In some cases we do query multiple indexes even w\/o sharding, but I'm skeptical on this being effectively useful in practice in the case of Hibernate Search as one usually expects a server side application running several queries in parallel. nn Are you needing this to implement any specific feature in Infinispan?              n        n    n"},{"commnet_id":"comment-84048","commnet_date":"2016-09-13T12:51:15-0700","commnet_user":"Gustavo Fernandes","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gustavo Fernandesn added a comment  - 13\/Sep\/2016 12:51 PM    n        n        nnn In some cases we do query multiple indexes even w\/o shardingnnnnnnAre the segments queried in parallel or sequentially when querying multiple indexes?nnnnn but I'm skeptical on this being effectively useful in practicennnnnnThere's a discussion on https:\/\/issues.apache.org\/jira\/browse\/LUCENE-5299 with some numbers.nnnnn Are you needing this to implement any specific feature in Infinispan?nnnnnnNot necessarily, I was experimenting with the AffinityIndexManager which is heavily sharded and was wondering if the parallelisation would help\r\nnto improve query performance, since it gets severely impacted with the number of shards.nnnnn n    n    n        n            Show  n            n                        n    n    n    n                nn       Gustavo Fernandesn added a comment  - 13\/Sep\/2016 12:51 PM                      n  n n  In some cases we do query multiple indexes even w\/o sharding n n  n nnn Are the segments queried in parallel or sequentially when querying multiple indexes? nn n  n n  but I'm skeptical on this being effectively useful in practice n n  n nnn There's a discussion on  https:\/\/issues.apache.org\/jira\/browse\/LUCENE-5299  with some numbers. nn n  n n  Are you needing this to implement any specific feature in Infinispan? n n  n nnn Not necessarily, I was experimenting with the AffinityIndexManager which is heavily sharded and was wondering if the parallelisation would help nto improve query performance, since it gets severely impacted with the number of shards. nnnnn             n        n    n"},{"commnet_id":"comment-84052","commnet_date":"2016-09-13T14:24:53-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Sanne Grinoveron added a comment  - 13\/Sep\/2016 14:24 PM     - edited  n        n        Are the segments queried in parallel or sequentially when querying multiple indexes?nSequential.nnThis seems actually quite simple to implement. I expect we'd have a single ExecutorService started during boot of the SearchIntegrator, and pass this to each org.apache.lucene.search.IndexSearcher constructor.\r\nnOr would you expect to have multiple ExecutorService instances, like a dedicated one for each sharded index? I think not as ultimately you have the same CPU to limit\/share.nnA nice side-effect is that people would be able to limit how many CPU cores at maximum they would dedicate to query execution; this would require some configuration properties to set the initial constraints of the ExecutorService but I guess people would likely want to be able to manage these parameters over some mbean as well.nnIn the case of Infinispan I suspect you'd want multiple caches to share the same ExecutorService, which implies having multiple SearchIntegrator instances share one, so you'd want this executor to be provided by an injectable org.hibernate.search.engine.service.spi.Service. n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Sanne Grinoveron added a comment  - 13\/Sep\/2016 14:24 PM     - edited                     Are the segments queried in parallel or sequentially when querying multiple indexes?  n Sequential. nn This seems actually quite simple to implement. I expect we'd have a single ExecutorService started during boot of the  SearchIntegrator , and pass this to each  org.apache.lucene.search.IndexSearcher  constructor. nOr would you expect to have multiple  ExecutorService  instances, like a dedicated one for each sharded index? I think not as ultimately you have the same CPU to limit\/share. nn A nice side-effect is that people would be able to limit how many CPU cores at maximum they would dedicate to query execution; this would require some configuration properties to set the initial constraints of the  ExecutorService  but I guess people would likely want to be able to manage these parameters over some mbean as well. nn In the case of Infinispan I suspect you'd want multiple caches to share the same  ExecutorService , which implies having multiple  SearchIntegrator  instances share one, so you'd want this executor to be provided by an injectable  org.hibernate.search.engine.service.spi.Service .              n        n    n"},{"commnet_id":"comment-84060","commnet_date":"2016-09-14T00:23:47-0700","commnet_user":"Gustavo Fernandes","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gustavo Fernandesn added a comment  - 14\/Sep\/2016 00:23 AM    n        n        nnn This seems actually quite simple to implementnnnnnnMy thoughts initially, except that as I wrote earlier even if you construct the IndexReader with an ExecutorService, it is not used in all cases, so need to check the feasibility.nnnnn Or would you expect to have multiple ExecutorService instances, like a dedicated one for each sharded index?nnnnnnOne per SearchIntegrator IMOnnnnn In the case of Infinispan I suspect you'd want multiple caches to share the same ExecutorService, which implies having multiple SearchIntegrator instances share onennnnnnThis could be a possible evolutionn n    n    n        n            Show  n            n                        n    n    n    n                nn       Gustavo Fernandesn added a comment  - 14\/Sep\/2016 00:23 AM                      n  n n  This seems actually quite simple to implement n n  n nnn My thoughts initially, except that as I wrote earlier even if you construct the  IndexReader  with an  ExecutorService , it is not used in all cases, so need to check the feasibility. nn n  n n  Or would you expect to have multiple ExecutorService instances, like a dedicated one for each sharded index? n n  n nnn One per SearchIntegrator IMO nn n  n n  In the case of Infinispan I suspect you'd want multiple caches to share the same ExecutorService, which implies having multiple SearchIntegrator instances share one n n  n nnn This could be a possible evolution n             n        n    n"}]}},{"OGM-1171":{"info":{"issue_title":"Implement JP-QL support for Infinispan Remote","issue_key":"OGM-1171","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"infinispan","issue_description":"Add support for a JP-QL to Infinispan DSL query converter to support a subset of JP-QL.\r\n Note that I do not mean exposing native Infinispan queries, simply exposing JP-QL query via session.createQuery(...).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1171?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84037","commnet_date":"2016-09-13T05:50:32-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 13\/Sep\/2016 05:50 AM    n        n        Implement BaseQueryParserService and all that follows. n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 13\/Sep\/2016 05:50 AM                      Implement  BaseQueryParserService  and all that follows.              n        n    n"}]}},{"OGM-1170":{"info":{"issue_title":"Infinispan Remote dialect could create the Remote Cache(s) it needs automatically","issue_key":"OGM-1170","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.1-next","issue_labels":"5.1-next","issue_description":"This is not possible with the current target Infinispan version (nor any released Infinispan version) but it could be implemented soon; the mailing list thread: http:\/\/lists.jboss.org\/pipermail\/infinispan-dev\/2016-September\/016864.html","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1170?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84035","commnet_date":"2016-09-13T05:33:43-0700","commnet_user":"Davide D&#39;Alto","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Davide D&#39;Alton added a comment  - 13\/Sep\/2016 05:33 AM    n        n        Is there a jira open for this on the Infinispan issue tracker? n    n    n        n            Show  n            n                        n    n    n    n                nn       Davide D&#39;Alton added a comment  - 13\/Sep\/2016 05:33 AM                      Is there a jira open for this on the Infinispan issue tracker?              n        n    n"},{"commnet_id":"comment-84036","commnet_date":"2016-09-13T05:43:27-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 13\/Sep\/2016 05:43 AM    n        n        No. So far it's a discussed proposal, not everyone is on board with having this feature as \"admin operations\" are security sensitive, so some argue that the client shouldn't have such capability, or that it should be reserved to an ad-hoc admin-client tool.nnI think it's a major usability issue for OGM, so depending on how the conversation evolves we might want to drive the admin-client directly, or drop this. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 13\/Sep\/2016 05:43 AM                      No. So far it's a discussed proposal, not everyone is on board with having this feature as \"admin operations\" are security sensitive, so some argue that the client shouldn't have such capability, or that it should be reserved to an ad-hoc admin-client tool. nn I think it's a major usability issue for OGM, so depending on how the conversation evolves we might want to drive the admin-client directly, or drop this.              n        n    n"}]}},{"OGM-1168":{"info":{"issue_title":"Get the Infinispan Remote dialect to support storing of unordered Bags","issue_key":"OGM-1168","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.1-next","issue_labels":"5.1-next","issue_description":"My initial implementation of the Hot Rod based dialect doesn't support storing of unordered bags, as I followed the example from the Cassandra dialect which stated in a comment that it is not possible to persist such objects in a key\/value store as there is lack of a key definition.  Emmanuel Bernard suggested that this could actually be done by adding a surrogate UUID to the row key: https:\/\/github.com\/hibernate\/hibernate-ogm\/pull\/766#issuecomment-246623915  I think that could work, and in addition if we were to support embedding collections - like storing all entries of the Bag in the same row key - this should also not be a problem.  I actually think that Bags should be stored as an embedded collection by default, and possibly as only mapping option, so to avoid the UUID overhead.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1168?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84033","commnet_date":"2016-09-13T04:35:31-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 13\/Sep\/2016 04:35 AM    n        n        Why is UUID an overhead? Not the generation of it, right? Is that the load of all rows? Isn't it the same problem for Set? n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 13\/Sep\/2016 04:35 AM                      Why is UUID an overhead? Not the generation of it, right? Is that the load of all rows? Isn't it the same problem for  Set ?              n        n    n"},{"commnet_id":"comment-84034","commnet_date":"2016-09-13T05:17:22-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 13\/Sep\/2016 05:17 AM    n        n        Why is UUID an overhead? Not the generation of it, right?nI was thinking about the generation indeed: it needs entropy.nnIs that the load of all rows? nSorry I didn't understand this question.nnIsn't it the same problem for Set?nIn a set, the tuple representing all columns represents the primary key as it's unique.nnBut I think the more important thought is that if you have a Bag, ORM will need to load all elements anyway so there's no benefit at all in mapping such elements on separate \"rows\". So we could make it mandatory to store such a collection as an embedded collection (like I think a user would store a bag in Protobuf..) and not give the option of separation. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 13\/Sep\/2016 05:17 AM                       Why is UUID an overhead? Not the generation of it, right?  n I was thinking about the generation indeed: it needs entropy. nn  Is that the load of all rows?   n Sorry I didn't understand this question. nn  Isn't it the same problem for Set?  n In a set, the tuple representing all columns represents the primary key as it's unique. nn But I think the more important thought is that if you have a Bag, ORM will need to load all elements anyway so there's no benefit at all in mapping such elements on separate \"rows\". So we could make it mandatory to store such a collection as an embedded collection (like I think a user would store a bag in Protobuf..) and not give the option of separation.              n        n    n"},{"commnet_id":"comment-84044","commnet_date":"2016-09-13T08:24:50-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 13\/Sep\/2016 08:24 AM    n        n        right but it feels weird that half of my collections are done in fashion X and the other half imposes fashion Y. n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 13\/Sep\/2016 08:24 AM                      right but it feels weird that half of my collections are done in fashion X and the other half imposes fashion Y.              n        n    n"}]}},{"OGM-1167":{"info":{"issue_title":"Support Firebase Datastore","issue_key":"OGM-1167","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"I've been looking around for an O(R\/G\/D)M for use with Firebase, and having found none, it seems like a framework as complete as Hibernate ought to have one.  I'll be taking a look at working on it myself, but I have yet to find any good documentation for adding datastores to Hibernate, and any help would be appreciated.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1167?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11098":{"info":{"issue_title":"Attributeconverter converttoEntityAttribute and convertToDatabaseColumn code is called within a query.list() call -&gt; slow","issue_key":"HHH-11098","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.1.1","issue_component":"5.1.1","issue_labels":"5.1.1","issue_description":"I am not sure if this not really is a bug.\r\n StandardCacheEntryImpl calls TypeHelper.disassemble which causes the freshly converted (converttoEntityAttribute) attribute again to be converted the other way round (convertToDatabaseColumn). If this conversion is slow this is a problem. This is processed within one query.list() call. It would be nice if there was a way to suppress this forward and backward conversion that slows processing down a lot.   It ends up to be in AttributeConverterMutabilityPlan.deepCopyNotNull(). There I can see the convertToDatabaseColumn() method to be called immediately followed by a call to converttoEntityAttribute(). If I somehow could switch this off my application would be several orders of magnitude faster. What is this for?:  public class AttributeConverterMutabilityPlanImpl&lt;T&gt; extends MutableMutabilityPlan&lt;T&gt; {\r\n \tprivate final AttributeConverter attributeConverter;  \tpublic AttributeConverterMutabilityPlanImpl(AttributeConverter attributeConverter)  {  \t\tthis.attributeConverter = attributeConverter;  \t}  \t@Override\r\n \t@SuppressWarnings(\"unchecked\")\r\n \tprotected T deepCopyNotNull(T value)  {  \t\treturn (T) attributeConverter.convertToEntityAttribute( attributeConverter.convertToDatabaseColumn( value ) );  \t} }  Here is the relevant part of the stacktrace:  AttributeConverterMutabilityPlanImpl&lt;T&gt;.deepCopyNotNull(T) line: 29\t\r\n AttributeConverterMutabilityPlanImpl&lt;T&gt;(MutableMutabilityPlan&lt;T&gt;).deepCopy(T) line: 35\t\r\n AttributeConverterMutabilityPlanImpl&lt;T&gt;(MutableMutabilityPlan&lt;T&gt;).disassemble(T) line: 24\t\r\n AttributeConverterTypeAdapter&lt;T&gt;(AbstractStandardBasicType&lt;T&gt;).disassemble(Object, SessionImplementor, Object) line: 284\t\r\n TypeHelper.disassemble(Object[], Type[], boolean[], SessionImplementor, Object) line: 129\t\r\n StandardCacheEntryImpl.&lt;init&gt;(Object[], EntityPersister, Object, SessionImplementor, Object) line: 55\t\r\n AbstractEntityPersister$StandardCacheEntryHelper.buildCacheEntry(Object, Object[], Object, SessionImplementor) line: 5216\t\r\n SingleTableEntityPersister(AbstractEntityPersister).buildCacheEntry(Object, Object[], Object, SessionImplementor) line: 4227\t\r\n TwoPhaseLoad.doInitializeEntity(Object, EntityEntry, boolean, SessionImplementor, PreLoadEvent) line: 182\t\r\n TwoPhaseLoad.initializeEntity(Object, boolean, SessionImplementor, PreLoadEvent) line: 125\t\r\n QueryLoader(Loader).initializeEntitiesAndCollections(List, Object, SessionImplementor, boolean, List&lt;AfterLoadAction&gt;) line: 1139\t\r\n QueryLoader(Loader).processResultSet(ResultSet, QueryParameters, SessionImplementor, boolean, ResultTransformer, int, List&lt;AfterLoadAction&gt;) line: 998\t\r\n QueryLoader(Loader).doQuery(SessionImplementor, QueryParameters, boolean, ResultTransformer) line: 936\t\r\n QueryLoader(Loader).doQueryAndInitializeNonLazyCollections(SessionImplementor, QueryParameters, boolean, ResultTransformer) line: 342\t\r\n QueryLoader(Loader).doList(SessionImplementor, QueryParameters, ResultTransformer) line: 2622\t\r\n QueryLoader(Loader).listUsingQueryCache(SessionImplementor, QueryParameters, Set&lt;Serializable&gt;, Type[]) line: 2464\t\r\n QueryLoader(Loader).list(SessionImplementor, QueryParameters, Set&lt;Serializable&gt;, Type[]) line: 2426\t\r\n QueryLoader.list(SessionImplementor, QueryParameters) line: 501\t\r\n QueryTranslatorImpl.list(SessionImplementor, QueryParameters) line: 371\t\r\n HQLQueryPlan.performList(QueryParameters, SessionImplementor) line: 216\t\r\n SessionImpl.list(String, QueryParameters) line: 1339\t\r\n QueryImpl.list() line: 87\t   Here is a test that shows the issue in the behavior.:  package org.hibernate.test.converter;  import java.beans.XMLDecoder;\r\n import java.beans.XMLEncoder;\r\n import java.io.ByteArrayInputStream;\r\n import java.io.ByteArrayOutputStream;\r\n import java.io.IOException;\r\n import java.util.HashMap;\r\n import java.util.List;\r\n import java.util.Map;  import javax.persistence.AttributeConverter;\r\n import javax.persistence.Convert;\r\n import javax.persistence.Converter;\r\n import javax.persistence.Entity;\r\n import javax.persistence.Id;\r\n import javax.persistence.Lob;\r\n import javax.persistence.Table;  import org.hibernate.Session;\r\n import org.hibernate.cfg.Configuration;\r\n import org.hibernate.cfg.Environment;\r\n import org.hibernate.query.Query;\r\n import org.hibernate.testing.junit4.BaseCoreFunctionalTestCase;\r\n import org.junit.Test;  import static org.junit.Assert.assertEquals;  \/**  \tTest to check the number of attributeconverter calls on a simple save and list\r\n  * \t@author Carsten Hammer\r\n  *\/\r\n public class AttributeConverterLobTest extends BaseCoreFunctionalTestCase {\r\n \t@Override\r\n \tprotected Class&lt;?&gt;[] getAnnotatedClasses()  Unknown macro: {\t\treturn new Class[] { EntityImpl.class };\t}      \t@Override\r\n \tpublic void configure(Configuration cfg)  {  \t\tsuper.configure( cfg );  \t\tcfg.setProperty( Environment.USE_SECOND_LEVEL_CACHE, \"true\" );  \t\tcfg.setProperty( Environment.GENERATE_STATISTICS, \"true\" );  \t}  \t@Test\r\n \tpublic void testMappingAttributeWithLobAndAttributeConverter()  {  \t\tSession session = openSession();  \t\tsession.beginTransaction();  \t\tEntityImpl object = new EntityImpl();  \t\tobject.status=new HashMap&lt;&gt;();  \t\tobject.status.put( \"asdf\", Integer.valueOf( 6 ) );  \t\tobject.status.put( \"key\", \"table\" );  \t\tobject.id=1;  \t\tsession.save( object );  \t\tsession.getTransaction().commit();  \t\tsession.close();  \t\t\/**  \t\t * What? Why the hell 2 and not 1?  \t\t *\/  \t\tassertEquals(2,ConverterImpl.todatabasecounter);  \t\t\/**  \t\t * Why a from database conversion at all?  \t\t *\/  \t\tassertEquals(1,ConverterImpl.fromdatabasecounter);  \t\t  \t\tsession = openSession();  \t\tsession.beginTransaction();  \t\tQuery&lt;EntityImpl&gt; createQuery = session.createQuery( \"select e from EntityImpl e\", EntityImpl.class );  \t\tList&lt;EntityImpl&gt; resultList = createQuery.getResultList();  \t\tassertEquals(1,resultList.size());  \t\tsession.getTransaction().commit();  \t\tsession.close();  \t\t\/**  \t\t * Why again a to database conversion? These conversions are very expensive and should only be done if really needed..  \t\t *\/  \t\tassertEquals(3,ConverterImpl.todatabasecounter);  \t\tassertEquals(3,ConverterImpl.fromdatabasecounter);  \t\tassertEquals(\"table\",resultList.get(0 ).status.get( \"key\" ));  \t\tassertEquals(3,ConverterImpl.fromdatabasecounter);  \t}  \t@Converter\r\n \tpublic static class ConverterImpl implements AttributeConverter&lt;Map, byte[]&gt; {\r\n \t\tpublic static int todatabasecounter=0;\r\n \t\tpublic static int fromdatabasecounter=0;\r\n \t\t@Override\r\n \t\tpublic byte[] convertToDatabaseColumn(Map map) {\r\n \t\t\ttodatabasecounter++;\r\n \t\t\tByteArrayOutputStream out=new ByteArrayOutputStream();\r\n \t\t\ttry(XMLEncoder encoder=new XMLEncoder(out)) {  \t\t\t\tencoder.writeObject( map );  \t\t\t} \t\t\treturn out.toByteArray();\r\n \t\t}  \t\t@Override\r\n \t\tpublic Map convertToEntityAttribute(byte[] dbData) {\r\n \t\t\tfromdatabasecounter++;\r\n \t\t\ttry(ByteArrayInputStream in=new ByteArrayInputStream(dbData)) {  \t\t\t\tXMLDecoder decoder=new XMLDecoder(in);  \t\t\t\treturn (Map) decoder.readObject();  \t\t\t} \t\t\tcatch (IOException e)  {  \t\t\t\treturn null;  \t\t\t} \t\t}\r\n \t}  \t@Entity(name = \"EntityImpl\")\r\n \t@Table( name = \"EntityImpl\" )\r\n \tpublic static class EntityImpl  {  \t\t@Id  \t\tprivate Integer id;    \t\t@Lob  \t\t@Convert(converter = ConverterImpl.class)  \t\tprivate Map status;  \t} }","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11098?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84108","commnet_date":"2016-09-16T02:08:03-0700","commnet_user":"Carsten Hammer","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Carsten Hammern added a comment  - 16\/Sep\/2016 02:08 AM    n        n        I applied some changes to my junit test code in the pull request that shows that the attributeconverter is called in in both directions without taking the second level cache into account it seems. Hope that my expectation (and therefore the junit test) is not too stupid. This is what I currently see although I think my real problem is something else - maybe what you point me to. \r\nnI am still investigating. I wished there would be some way to get information from hibernate why and when it decides to do the conversions\/update, a log setting or aop trick, something like this. If not only the entitys equals\/hashCode methods are taken into account but also the entities properties equals\/hashCode method this is something that I was not aware of. \r\nnThank you so far! n    n    n        n            Show  n            n                        n    n    n    n                nn       Carsten Hammern added a comment  - 16\/Sep\/2016 02:08 AM                      I applied some changes to my junit test code in the pull request that shows that the attributeconverter is called in in both directions without taking the second level cache into account it seems. Hope that my expectation (and therefore the junit test) is not too stupid. This is what I currently see although I think my real problem is something else - maybe what you point me to.  nI am still investigating. I wished there would be some way to get information from hibernate why and when it decides to do the conversions\/update, a log setting or aop trick, something like this. If not only the entitys equals\/hashCode methods are taken into account but also the entities properties equals\/hashCode method this is something that I was not aware of.  nThank you so far!              n        n    n"},{"commnet_id":"comment-84141","commnet_date":"2016-09-19T06:26:28-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 19\/Sep\/2016 06:26 AM    n        n        I mean it seems kind of obvious that Hibernate would determine dirtiness based on the individual state, rather than #equals on the entity itself... n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 19\/Sep\/2016 06:26 AM                      I mean it seems kind of obvious that Hibernate would determine dirtiness based on the individual state, rather than  #equals  on the entity itself...              n        n    n"},{"commnet_id":"comment-84142","commnet_date":"2016-09-19T06:53:54-0700","commnet_user":"Carsten Hammer","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Carsten Hammern added a comment  - 19\/Sep\/2016 06:53 AM    n        n        Yes, what can I say - you are right, should be obvious, sometimes I do not see obvious things. I guess as as soon as I understand why the attributeconverter has to be called in both directions in the junit test I will think it is obvious too.  n    n    n        n            Show  n            n                        n    n    n    n                nn       Carsten Hammern added a comment  - 19\/Sep\/2016 06:53 AM                      Yes, what can I say - you are right, should be obvious, sometimes I do not see obvious things. I guess as as soon as I understand why the attributeconverter has to be called in both directions in the junit test I will think it is obvious too.               n        n    n"},{"commnet_id":"comment-84191","commnet_date":"2016-09-20T23:23:42-0700","commnet_user":"Carsten Hammer","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Carsten Hammern added a comment  - 20\/Sep\/2016 23:23 PM    n        n        It seems AvailableSettings.USE_DIRECT_REFERENCE_CACHE_ENTRIES=true causes the entity to be used as reference in the cache. Seems not to help in this case because this case is about a field of the entity and not the entity itself. Would it be theoretically possible to implement something similar for the field\/attributeconverter to get rid of the attribute conversions when reusing objects from cache? Otherwise I have a lot of javatypedescriptors to implement. n    n    n        n            Show  n            n                        n    n    n    n                nn       Carsten Hammern added a comment  - 20\/Sep\/2016 23:23 PM                      It seems AvailableSettings.USE_DIRECT_REFERENCE_CACHE_ENTRIES=true causes the entity to be used as reference in the cache. Seems not to help in this case because this case is about a field of the entity and not the entity itself. Would it be theoretically possible to implement something similar for the field\/attributeconverter to get rid of the attribute conversions when reusing objects from cache? Otherwise I have a lot of javatypedescriptors to implement.              n        n    n"},{"commnet_id":"comment-84628","commnet_date":"2016-09-29T09:18:30-0700","commnet_user":"Carsten Hammer","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Carsten Hammern added a comment  - 29\/Sep\/2016 09:18 AM    n        n        Steve explained in n    n                n        n            n            HHH-10818n        n                                                    Closed n             n that the junit tests I created for this issue at https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1547 are wrong. I do not understand why. Can anybody who lives on this planet explain why?  n    n    n        n            Show  n            n                        n    n    n    n                nn       Carsten Hammern added a comment  - 29\/Sep\/2016 09:18 AM                      Steve explained in n     n                 n         n             n            HHH-10818n         n                                                     Closed n             n that the junit tests I created for this issue at  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1547  are wrong. I do not understand why. Can anybody who lives on this planet explain why?                n        n    n"}]}},{"HHH-11093":{"info":{"issue_title":"Provide ability to toggle orderBy creation when entity fields are @OrderBy annotated","issue_key":"HHH-11093","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"hibernate-core","issue_description":"When I use a criteria and then join entities that have properties with an @OrderBy annotation, Hibernate always creates an order by clause for this property. This leads to issues on MS SQL Server as order by properies also need to be included when distinct projections are used:   com.microsoft.sqlserver.jdbc.SQLServerException: ORDER BY items must appear in the select list if SELECT DISTINCT is specified.     Especially when the criteria object is assembled dynamically, the ability to manipulate the distinct projection is often not provided, so the idea is to be able to temporarily disable @OrderBys in some conditions.  Thanks in advance for an answer.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11093?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-83944","commnet_date":"2016-09-10T08:26:27-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 10\/Sep\/2016 08:26 AM    n        n        Is the ordered collection fetched?  If so, I do not think it would be correct to simply drop the order. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 10\/Sep\/2016 08:26 AM                      Is the ordered collection fetched?  If so, I do not think it would be correct to simply drop the order.              n        n    n"},{"commnet_id":"comment-84059","commnet_date":"2016-09-13T23:35:03-0700","commnet_user":"Niko Wittenbeck","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Niko Wittenbeckn added a comment  - 13\/Sep\/2016 23:35 PM    n        n        Yes, it is fetched in a projected distinct query as it is required to apply some additional restriction, it is not used on an object level. This is the reason why I'm asking for a toggle as automatically adding the order by in all cases increases the complexity when I want to provide cross db compatibility. The only approach I can currently use is to use a @Sort annotation instead of @OrderBy, but of course I'd prefer not to have an inmemory sort. n    n    n        n            Show  n            n                        n    n    n    n                nn       Niko Wittenbeckn added a comment  - 13\/Sep\/2016 23:35 PM                      Yes, it is fetched in a projected distinct query as it is required to apply some additional restriction, it is not used on an object level. This is the reason why I'm asking for a toggle as automatically adding the order by in all cases increases the complexity when I want to provide cross db compatibility. The only approach I can currently use is to use a @Sort annotation instead of @OrderBy, but of course I'd prefer not to have an inmemory sort.              n        n    n"},{"commnet_id":"comment-84068","commnet_date":"2016-09-14T06:21:34-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 14\/Sep\/2016 06:21 AM    n        n        That \"does not compute\"   Either you fetch it:nnnrn\/\/ the collection is fetched (selected) and available to the app - it HAS TO BE ordered per your configrn session.createQuery( \"select root from RootThing root join fetch root.children\"  )...rnnnnor you don't:nnnrn\/\/ the collection is not fetched (selected) - so the order-by should not be appliedrn session.createQuery( \"select root from RootThing root join root.children\"  )...rnnnnIIRC there was a problem in the legacy Criteria API where any join was fetched.  Maybe that is what you are seeing? n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 14\/Sep\/2016 06:21 AM                      That \"does not compute\"    Either you fetch it: nn  n rn \/\/ the collection is fetched (selected) and available to the app - it HAS TO BE ordered per your configrn session.createQuery(  \"select root from RootThing root join fetch root.children\"  )...rn n  nn or you don't: nn  n rn \/\/ the collection is not fetched (selected) - so the order-by should not be appliedrn session.createQuery(  \"select root from RootThing root join root.children\"  )...rn n  nn IIRC there was a problem in the legacy Criteria API where any join was fetched.  Maybe that is what you are seeing?              n        n    n"},{"commnet_id":"comment-84100","commnet_date":"2016-09-15T21:32:50-0700","commnet_user":"Niko Wittenbeck","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Niko Wittenbeckn added a comment  - 15\/Sep\/2016 21:32 PM     - edited  n        n        Basically I'm assembling a grid that is requested by some UI. The basic grid criteria isnnrnsession.createCriteria(Entity.class).createCriteria(\"tags\" ).add(Restrictions.in(\"id\" , &lt;some ids&gt;)rnnnthe entity.getTags() has the @OrderBy annotation, causing the order by statement to be always appended to the query.nnTo render a grid, we use this basic criteria for several queries. To prequery security and to know what the user is able to effectively see, an Projections.distinct(Projections.id()) is being applied to that query by default. So this approach does not work for SQL Server as the \"ORDER BY items must appear in the select list if SELECT DISTINCT is specified.\" is then thrown. In other DB dialects, such as MySQL, this approach is working fine. So I currently have the following solutions.\r\nna) Redesign the subcriteria by using a sub query\r\nnb) Change @OrderBy to e.g. @SortNaturalnnAs this is a query to just extract IDs, I think it is valid case to be able to explicitely turn off the automatic @OrderBy Generation to maintain cross DB compatibility, even though it is of course correct in probably 99% of all other cases.nnAnother valid case (at least for me) where it might be useful to control this behaviour is when the same tag related property is supplied from the frontend as an order by parameter which basically then forces me to precheck my entity if that provided order field is not included as an @OrderBy property in the corresponding relationshop as adding the same order by twice also causes SQL server to fail. n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Niko Wittenbeckn added a comment  - 15\/Sep\/2016 21:32 PM     - edited                    Basically I'm assembling a grid that is requested by some UI. The basic grid criteria is n  n rnsession.createCriteria(Entity.class).createCriteria( \"tags\" ).add(Restrictions.in( \"id\" , &lt;some ids&gt;)rn n  n the entity.getTags() has the @OrderBy annotation, causing the order by statement to be always appended to the query. nn To render a grid, we use this basic criteria for several queries. To prequery security and to know what the user is able to effectively see, an Projections.distinct(Projections.id()) is being applied to that query by default. So this approach does not work for SQL Server as the \"ORDER BY items must appear in the select list if SELECT DISTINCT is specified.\" is then thrown. In other DB dialects, such as MySQL, this approach is working fine. So I currently have the following solutions. na) Redesign the subcriteria by using a sub query nb) Change @OrderBy to e.g. @SortNatural nn As this is a query to just extract IDs, I think it is valid case to be able to explicitely turn off the automatic @OrderBy Generation to maintain cross DB compatibility, even though it is of course correct in probably 99% of all other cases. nn Another valid case (at least for me) where it might be useful to control this behaviour is when the same tag related property is supplied from the frontend as an order by parameter which basically then forces me to precheck my entity if that provided order field is not included as an @OrderBy property in the corresponding relationshop as adding the same order by twice also causes SQL server to fail.              n        n    n"}]}},{"HHH-11090":{"info":{"issue_title":"Map entity by its unique keys in PersistenceContext when loading from database or second-level cache","issue_key":"HHH-11090","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"hibernate-core","issue_description":"Given the following entities:     \t@Entity  \t@Table(name = \"person\" )  \t@Cacheable  \tstatic  class Person {  \t\t@Id  \t\t@GeneratedValue  \t\tprivate  long  id;    \t\t@OneToOne  \t\t@Fetch(FetchMode.SELECT)  \t\tprivate  Passport passport;  \t}    \t@Entity  \t@Table(name = \"passport\" )  \t@Cacheable  \tstatic  class Passport {  \t\t@Id  \t\t@GeneratedValue  \t\tprivate  long  id;    \t\t@OneToOne(mappedBy = \"passport\" )  \t\t@Fetch(FetchMode.SELECT)  \t\tprivate  Person person;  \t}     When a Person is loaded from the database or second-level cache, Person#passport is eagerly loaded. Currently, when the Passport entity is loaded, Hibernate loads Passport#person by unique ID from the database, even though the associated Person is already in the persistence context. The problem is that, currently, Person is only accessible from the persistence context by ID, not by unique ID.  If Hibernate adds Person to the persistence context mapped by the unique key (via PersistenceContext#addEntity(EntityUniqueKey euk, Object entity)) when it is being hydrated or assembled, then loading Person  by the unique ID from the database can be avoided. Instead, EntityType#loadByUniqueKey will successfully lookup Person by unique key via PersistenceContext#getEntity(EntityUniqueKey euk).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11090?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-83939","commnet_date":"2016-09-09T02:09:24-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 09\/Sep\/2016 02:09 AM    n        n        EntityType#loadByUniqueKey looks up the entity by EntityUniqueKey via PersistenceContext#getEntity(EntityUniqueKey).nnIf it is not present, then the entity gets loaded by its unique ID from the database. If the result is non-null, it should be mapped by its unique ID via PersistenceContext#addEntity( EntityUniqueKey, Object).nnFor example:nn{{@Entity\r\nnpublic class Lens n{rnt...rnt@ManyToOne()rnt@JoinColumn(name=\"`frame_fk`\", referencedColumnName = \"name\")rntprivate Frame frame;rn}nn@Entity\r\nnpublic class Frame n{rnt...rnt@OneToMany( mappedBy = \"frame\" )rntprivate Set&lt;Lens&gt; lenses;rnt@Column(unique=true)rntprivate String name;rn}n}}nnWithout the proposed fix, when Frame#lenses is initialized, the same Frame will be loaded by name for each Lens in the Frame#lenses. With the fix, Frame will be loaded by name only once.n n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 09\/Sep\/2016 02:09 AM                       EntityType#loadByUniqueKey  looks up the entity by  EntityUniqueKey  via  PersistenceContext#getEntity(EntityUniqueKey) . nn If it is not present, then the entity gets loaded by its unique ID from the database. If the result is non-null, it should be mapped by its unique ID via  PersistenceContext#addEntity( EntityUniqueKey, Object) . nn For example: nn {{@Entity npublic class Lens  n{rnt...rnt@ManyToOne()rnt@JoinColumn(name=\"`frame_fk`\", referencedColumnName = \"name\")rntprivate Frame frame;rn}nn @Entity npublic class Frame  n{rnt...rnt@OneToMany( mappedBy = \"frame\" )rntprivate Set&lt;Lens&gt; lenses;rnt@Column(unique=true)rntprivate String name;rn}n }} nn Without the proposed fix, when Frame#lenses is initialized, the same Frame will be loaded by name for each Lens in the Frame#lenses. With the fix, Frame will be loaded by name only once. n             n        n    n"},{"commnet_id":"comment-83940","commnet_date":"2016-09-09T02:44:36-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 09\/Sep\/2016 02:44 AM    n        n        My main concern is that StatefulPersistenceContext#entitiesByUniqueKey could get huge if there are lots of entities with lots of unique IDs.nnAlso, these unique IDs are mutable, so they can become obsolete and just take up space.nnI also wonder if entities should also be stashed by natural IDs as well. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 09\/Sep\/2016 02:44 AM                      My main concern is that StatefulPersistenceContext#entitiesByUniqueKey could get huge if there are lots of entities with lots of unique IDs. nn Also, these unique IDs are mutable, so they can become obsolete and just take up space. nn I also wonder if entities should also be stashed by natural IDs as well.              n        n    n"}]}},{"HHH-11089":{"info":{"issue_title":"Naming Strategy Does not affect the user-specified index\/foreign-key names","issue_key":"HHH-11089","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.0.9","issue_component":"5.0.9","issue_labels":"5.0.9","issue_description":"Hello,  I have the following entity:     @Entity  @Table(uniqueConstraints = @UniqueConstraint(name = \"my_longer_than_30_symbols_name\" , columnNames = { \"category_pk\" , \"id\"  }))  public  class ProductEntity {    }     Now it all works good with Mysql and PostgreSQL but Oracle has this limit about 30 characters for columns, tables, indexes, foreign keys, etc. I tried specifying my own OraclePhysicalNamingStrategy and OracleImplicitNamingStrategy and the @UniqueConstraint's name is passed to my strategy so I can shrink it - BUT ONLY if I haven't specified explicit name.  The problem now is I have a platform with ~ 200 entities and relations where I have specified index names everywhere and I can't just delete them.   The same thing happens with @JoinColumn and @ForeignKey. As soon as I specify name for the foreign key it is no longer passed to the naming strategy so I cannot shrink it. But If I leave it like this:    @JoinColumn(foreignKey = @ForeignKey)     then it is auto-generated and it is passed to the naming strategy where I can shrink it.  The discussion about this issue is here:  http:\/\/stackoverflow.com\/questions\/38565495\/how-to-handle-the-ora-00972-identifier-is-too-long-exception-with-hibernate-5-a\/","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11089?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84214","commnet_date":"2016-09-21T08:53:03-0700","commnet_user":"Petar Tahchiev","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Petar Tahchievn added a comment  - 21\/Sep\/2016 08:53 AM    n        n        I just created a pull-request for this: https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1564 n    n    n        n            Show  n            n                        n    n    n    n                nn       Petar Tahchievn added a comment  - 21\/Sep\/2016 08:53 AM                      I just created a pull-request for this:  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1564               n        n    n"},{"commnet_id":"comment-84755","commnet_date":"2016-10-04T11:50:19-0700","commnet_user":"Petar Tahchiev","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Petar Tahchievn added a comment  - 04\/Oct\/2016 11:50 AM     - edited  n        n        After discussing this with @mih_vlad I think it would be best if you guys create a `ConstraintNamingStrategy` because what he told me is that `PhysicalNamingStrategy` deals only with database objects like column, table, schema, etc. I felt it was a blocking bug, because it actually blocks people to use hibernate and Oracle database, but now I think it requires a new feature, so I am thus changing this from a *bug* to *improvement* n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Petar Tahchievn added a comment  - 04\/Oct\/2016 11:50 AM     - edited                    After discussing this with @mih_vlad I think it would be best if you guys create a `ConstraintNamingStrategy` because what he told me is that `PhysicalNamingStrategy` deals only with database objects like column, table, schema, etc. I felt it was a blocking bug, because it actually blocks people to use hibernate and Oracle database, but now I think it requires a new feature, so I am thus changing this from a * bug * to * improvement *              n        n    n"},{"commnet_id":"comment-86501","commnet_date":"2016-11-25T12:04:17-0800","commnet_user":"Petar Tahchiev","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Petar Tahchievn added a comment  - 25\/Nov\/2016 12:04 PM    n        n        Any updates here? This issue really prevents anyone with long database table names from using Oracle database  n    n    n        n            Show  n            n                        n    n    n    n                nn       Petar Tahchievn added a comment  - 25\/Nov\/2016 12:04 PM                      Any updates here? This issue really prevents anyone with long database table names from using Oracle database                n        n    n"}]}},{"HSEARCH-2341":{"info":{"issue_title":"simplify the configuration for dynamic analyser selection; allow to use existing analysers (e.g. EnglishAnalyzer)","issue_key":"HSEARCH-2341","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"analyzer","issue_description":"strategy for determining analyser based on the contents of the entity:  public interface AnalyzerProvider  {      Analyzer getAnalyzerForIndexedEntity(Object entity);  }","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2341?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-83731","commnet_date":"2016-09-06T07:09:48-0700","commnet_user":"Leon Pennings","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Leon Penningsn added a comment  - 06\/Sep\/2016 07:09 AM    n        n        That would still make it necessary to define all possible language analyzers in the entity.\r\nnWhy not just add a strategy where the entity is passed and an Analyzer is returned, so each entity can have it's own analyzer. n    n    n        n            Show  n            n                        n    n    n    n                nn       Leon Penningsn added a comment  - 06\/Sep\/2016 07:09 AM                      That would still make it necessary to define all possible language analyzers in the entity. nWhy not just add a strategy where the entity is passed and an Analyzer is returned, so each entity can have it's own analyzer.              n        n    n"}]}},{"HSEARCH-2340":{"info":{"issue_title":"Support for sharing resources among different Index Managers","issue_key":"HSEARCH-2340","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.7","issue_labels":"5.7","issue_description":"Current the index backends are divided in two categories: sync and async.\r\n Sync involves keeping a dedicated thread to apply changesets to the index, while async involves an executor to apply changes plus a periodic commit thread.  Threading above are maintained on a per index manager basis, meaning the resource usage grows linearly as the number of index managers grows.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2340?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2339":{"info":{"issue_title":"Support for on demand initialization of backend resources","issue_key":"HSEARCH-2339","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.6.0.Beta1","issue_component":"5.6.0.Beta1","issue_labels":"5.6.0.Beta1","issue_description":"Currently an indexing backend eagerly starts all resources such as thread pools, executors, index writers and readers.  There are cases where those resources are not needed, for example when using a high number of index managers in a dynamic sharding setup: in this scenario, only a few Index Managers could be used to write to index, while all of them are used to query.   Ideally, all IndexManagers should start in \"read only\" mode, as soon as the first IndexWork arrives it should start all the backend resources.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2339?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1098":{"info":{"issue_title":"Adapt test.policy file of TCK runner for reading &quot;validation.provider&quot; property","issue_key":"HV-1098","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.3.0.Final","issue_labels":"5.3.0.Final","issue_description":"In some cases TCK code accesses the system property \"validation.provider\" (in org.hibernate.beanvalidation.tck.util.TestUtil.instantiateValidationProviderUnderTest()) if there is a BV API frame on the callstack (this happens if this code is triggered through a custom provider resolver, e.g. in org.hibernate.beanvalidation.tck.tests.bootstrap.ValidationProviderTest.testFirstMatchingValidationProviderResolverIsReturned(). As the TCK doesn't use privileged actions, the BV API JAR need to have the permission for reading that property, too.  It's not quite clear to why I'm seeing this issue only now (tests started to fail with a permission exception), as the TCK code hasn't changed in this regard. The fix seems logical to me, I just would have the problem expected to appear already before.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1098?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11082":{"info":{"issue_title":"Log the failing SQL when the batched execution throws a RuntimeException (e.g. StaleStateException)","issue_key":"HHH-11082","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.3","issue_labels":"5.2.3","issue_description":"Currently, when using batched updates and Hibernate detects stale state (e.g. data row concurrently deleted or deleted by JPQL executed with NO_FLUSH), failing SQL is not logged. However, when SQLException occurs, the failing SQL is logged (and that's so much convenient!).  Please have SQL logged when execution fails with other exceptions (like StaleStateException) too.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11082?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-83535","commnet_date":"2016-09-02T14:56:32-0700","commnet_user":"Piotr Findeisen","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Piotr Findeisenn added a comment  - 02\/Sep\/2016 14:56 PM    n        n        PR https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1544 n    n    n        n            Show  n            n                        n    n    n    n                nn       Piotr Findeisenn added a comment  - 02\/Sep\/2016 14:56 PM                      PR  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1544               n        n    n"},{"commnet_id":"comment-83630","commnet_date":"2016-09-05T06:44:07-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 05\/Sep\/2016 06:44 AM    n        n        Applied PR after adding one more unit test. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 05\/Sep\/2016 06:44 AM                      Applied PR after adding one more unit test.              n        n    n"},{"commnet_id":"comment-83931","commnet_date":"2016-09-08T06:11:15-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 08\/Sep\/2016 06:11 AM    n        n        Gail Badner You might be interested in backporting the abortBatch() call whenever we catch a RuntimeException as well. This issue might affect 5.0 and 5.1 as well, and statements are released only when the Tx is rolled back, as opposed to when the exception is first caught within BatchingBatch. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 08\/Sep\/2016 06:11 AM                       Gail Badner  You might be interested in backporting the abortBatch() call whenever we catch a RuntimeException as well. This issue might affect 5.0 and 5.1 as well, and statements are released only when the Tx is rolled back, as opposed to when the exception is first caught within  BatchingBatch .              n        n    n"}]}},{"HHH-11079":{"info":{"issue_title":"PostgresPlus additional features support","issue_key":"HHH-11079","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.2.2","issue_component":"5.2.2","issue_labels":"5.2.2","issue_description":"Additional supported features of PostgresPlus Dialect","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11079?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1156":{"info":{"issue_title":"Reduce calls to associationPersister.flushToDatastore() upon collection changes","issue_key":"OGM-1156","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"core","issue_description":"Collection changes are handled by ORM CollectionUpdateAction as three calls to CollectionPersister.deleteRows, CollectionPersister.updateRows, CollectionPersister.insertRows. And this regardless whether the collection has to lead to row deletion, udpate or inserts.  Because *Rows are implemented as      AssociationPersister p = getAssociationPersister(...);  ...  p.flushToDatastore();     We literally do three AssociationPersister flushes per collection changes. This problem will be mitigated by operation grouping and association tuple caching (Guillaume Smet).  But should we make it cleaner at the higher level ? I would prefer that but it might not be practical.\r\n CollectionUpdateAction is pure ORM and OGMCollectionPersister is ours to change. since the action does the three successive calls, we can't really cleanly solve it except by not calling ap.flushToDatastore in insertRows. It feels asymmetrical and unclean as well as error prone if in the future calls to *Rows are dissociated.  This is a reference to trigger a quick thinking and make a decision.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1156?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-83730","commnet_date":"2016-09-06T04:49:37-0700","commnet_user":"Guillaume Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Guillaume Smetn added a comment  - 06\/Sep\/2016 04:49 AM    n        n        Yes, I thought about it when I first noticed that. I didn't find an elegant way to improve the situation so I let it alone. n    n    n        n            Show  n            n                        n    n    n    n                nn       Guillaume Smetn added a comment  - 06\/Sep\/2016 04:49 AM                      Yes, I thought about it when I first noticed that. I didn't find an elegant way to improve the situation so I let it alone.              n        n    n"}]}},{"HV-1096":{"info":{"issue_title":"ValidationMessages for Russian","issue_key":"HV-1096","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"5.3.0.Alpha1","issue_component":"5.3.0.Alpha1","issue_labels":"5.3.0.Alpha1","issue_description":"I wrote ValidationMessages_ru.properties for Russian.\r\n Please, merge this file on next version.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1096?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-83445","commnet_date":"2016-09-01T08:28:29-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 01\/Sep\/2016 08:28 AM    n        n        Hi, thanks a lot for providing these translations! Could you sign the JBoss Contributor License Agreement, please? it's a small web app living at http:\/\/cla.jboss.org\/. Then we can add this to next week's 5.3 CR1 release. Thanks! n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 01\/Sep\/2016 08:28 AM                      Hi, thanks a lot for providing these translations! Could you sign the JBoss Contributor License Agreement, please? it's a small web app living at  http:\/\/cla.jboss.org\/ . Then we can add this to next week's 5.3 CR1 release. Thanks!              n        n    n"},{"commnet_id":"comment-83530","commnet_date":"2016-09-02T02:04:42-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 02\/Sep\/2016 02:04 AM    n        n        Added it; thanks again, Andrey Derevyanko! n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 02\/Sep\/2016 02:04 AM                      Added it; thanks again,  Andrey Derevyanko !              n        n    n"},{"commnet_id":"comment-83536","commnet_date":"2016-09-03T02:41:54-0700","commnet_user":"Andrey Derevyanko","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Andrey Derevyankon added a comment  - 03\/Sep\/2016 02:41 AM    n        n        Thank you, @Gunnar Morling! n    n    n        n            Show  n            n                        n    n    n    n                nn       Andrey Derevyankon added a comment  - 03\/Sep\/2016 02:41 AM                      Thank you, @Gunnar Morling!              n        n    n"}]}},{"OGM-1155":{"info":{"issue_title":"Consider adding an option to avoid DuplicateInsertPreventionStrategy.LOOK_UP extra lookup","issue_key":"OGM-1155","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"Some dialects natively detect an insertion of an already existing entry.  For the others we do an extra get to make sure the data is not present. We should offer the option to avoid that check entirely and let the user take the responsibility of only inserting things that are new.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1155?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-83370","commnet_date":"2016-08-31T07:15:36-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 31\/Aug\/2016 07:15 AM    n        n        The idea behind NATIVE is to not do any additional checks. Instead a dialect would just raise a TupleAlreadyExistsException when issuing a write causing a duplicate-key-exception of sorts. So that's pretty much what you describe. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 31\/Aug\/2016 07:15 AM                      The idea behind  NATIVE  is to not do any additional checks. Instead a dialect would just raise a  TupleAlreadyExistsException  when issuing a write causing a duplicate-key-exception of sorts. So that's pretty much what you describe.              n        n    n"},{"commnet_id":"comment-83376","commnet_date":"2016-08-31T09:07:45-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 31\/Aug\/2016 09:07 AM    n        n        yes but it cannot be set by the user, only the dialect implementor. n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 31\/Aug\/2016 09:07 AM                      yes but it cannot be set by the user, only the dialect implementor.              n        n    n"}]}},{"HV-1095":{"info":{"issue_title":"Provide module ZIP file for easily upgrading Hibernate Validator in a WildFly instance","issue_key":"HV-1095","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.4.0.Beta1","issue_labels":"5.4.0.Beta1","issue_description":"Similar to the one built for ORM, this should add a new HV alongside the container-provided one, allowing to use the new one by means of specifying a module dependency.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1095?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84184","commnet_date":"2016-09-20T08:39:42-0700","commnet_user":"Marko Bekhta","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Marko Bekhtan added a comment  - 20\/Sep\/2016 08:39 AM    n        n        &#91;~ gunnar.morling&#93;  should the issue be assigned to someone for review when a pull request is sent ? n    n    n        n            Show  n            n                        n    n    n    n                nn       Marko Bekhtan added a comment  - 20\/Sep\/2016 08:39 AM                       &#91;~ gunnar.morling&#93;  should the issue be assigned to someone for review when a pull request is sent ?              n        n    n"},{"commnet_id":"comment-84189","commnet_date":"2016-09-20T11:30:06-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 20\/Sep\/2016 11:30 AM    n        n        No, we leave it assigned to the one implementing the feature. Sometimes we assign the pending PRs (in GitHub) though so that others know that someone is about to review it. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 20\/Sep\/2016 11:30 AM                      No, we leave it assigned to the one implementing the feature. Sometimes we assign the pending PRs (in GitHub) though so that others know that someone is about to review it.              n        n    n"},{"commnet_id":"comment-84210","commnet_date":"2016-09-21T08:19:26-0700","commnet_user":"Marko Bekhta","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Marko Bekhtan added a comment  - 21\/Sep\/2016 08:19 AM    n        n        Gunnar Morling so after creating module zip and using it for integration module rather than replacing embedded in wildfly the tests are failing and are not using the added modules. nnafter looking and trying different things I've found out that if in all other modules we replace the dependencies from things like nnrn&lt;module name=\"org.hibernate.validator\" \/&gt;rnnntonnrn&lt;module name=\"org.hibernate.validator\"  slot=\"SomeVersionGoesHere\" \/&gt;rnnnthe test start to pass and other modules are using the 'updated' HV module. nnThe question is - would it be a correct solution to add back a groovy script and change the logic in it to go through all of the modules that depend on HV and add this part to them:nnrnslot=\"SomeVersionGoesHere\" rnn n    n    n        n            Show  n            n                        n    n    n    n                nn       Marko Bekhtan added a comment  - 21\/Sep\/2016 08:19 AM                       Gunnar Morling  so after creating module zip and using it for integration module rather than replacing embedded in wildfly the tests are failing and are not using the added modules.  nn after looking and trying different things I've found out that if in all other modules we replace the dependencies from things like  n  n rn&lt;module name= \"org.hibernate.validator\" \/&gt;rn n  n to n  n rn&lt;module name= \"org.hibernate.validator\"  slot= \"SomeVersionGoesHere\" \/&gt;rn n  n the test start to pass and other modules are using the 'updated' HV module.  nn The question is - would it be a correct solution to add back a groovy script and change the logic in it to go through all of the modules that depend on HV and add this part to them: n  n rnslot= \"SomeVersionGoesHere\" rn n               n        n    n"},{"commnet_id":"comment-84217","commnet_date":"2016-09-21T23:50:00-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 21\/Sep\/2016 23:50 PM    n        n        Marko Bekhta What are these other modules which depend on HV? n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 21\/Sep\/2016 23:50 PM                       Marko Bekhta  What are these other modules which depend on HV?              n        n    n"},{"commnet_id":"comment-84218","commnet_date":"2016-09-22T00:38:57-0700","commnet_user":"Marko Bekhta","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Marko Bekhtan added a comment  - 22\/Sep\/2016 00:38 AM    n        n        Gunnar Morling\r\nnhere's a script for replacement, and in file paths you can see modules that depend on HV nnrnprintln \"[INFO] ------------------------------------------------------------------------\" ;rnprintln \"[INFO] UPDATING SLOT VALUE FOR BEAN VALIDATION IN MODULE.XML FILES            \" ;rnprintln \"[INFO] ------------------------------------------------------------------------\" ;rnrndef processFileInplace(file, Closure processText) {rn    def text = file.textrn    file.write( processText( text ) )rn}rnrndef hvModuleList = [rn        new  File( project.properties['wildflyTargetDir'], 'modules\/system\/layers\/base\/org\/jboss\/as\/connector\/main\/module.xml' ),rn        new  File( project.properties['wildflyTargetDir'], 'modules\/system\/layers\/base\/org\/jboss\/as\/jpa\/main\/module.xml' ),rn        new  File( project.properties['wildflyTargetDir'], 'modules\/system\/layers\/base\/org\/jboss\/ironjacamar\/impl\/main\/module.xml' ),rn        new  File( project.properties['wildflyTargetDir'], 'modules\/system\/layers\/base\/org\/jboss\/ironjacamar\/jdbcadapters\/main\/module.xml' ),rn        new  File( project.properties['wildflyTargetDir'], 'modules\/system\/layers\/base\/org\/jboss\/resteasy\/resteasy-jaxrs\/main\/module.xml' ),rn        new  File( project.properties['wildflyTargetDir'], 'modules\/system\/layers\/base\/org\/jboss\/resteasy\/resteasy-validator-provider-11\/main\/module.xml' ),rn        new  File( project.properties['wildflyTargetDir'], 'modules\/system\/layers\/base\/org\/wildfly\/extension\/bean-validation\/main\/module.xml' ),rn]rndef hvCdiModuleList = [rn        new  File( project.properties['wildflyTargetDir'], 'modules\/system\/layers\/base\/org\/jboss\/as\/weld\/main\/module.xml' )rn]rnrndef slotName = ' slot=\"' + project.version + '\"  'rnrnhvModuleList.each{ f -&gt;rn    processFileInplace( f ) { text -&gt;rn        println \"[INFO] Added HV slot in \"  + f.absolutePath;rn        text.replaceAll( \/&lt;module name=\"org.hibernate.validator\" \/, '&lt;module name=\"org.hibernate.validator\" ' + slotName )rn    }rn};rnrnhvCdiModuleList.each{ f -&gt;rn    processFileInplace( f ) { text -&gt;rn        println \"[INFO] Added HV CDI slot in \"  + f.absolutePath;rn        text.replaceAll( \/&lt;module name=\"org.hibernate.validator.cdi\" \/, '&lt;module name=\"org.hibernate.validator.cdi\" ' + slotName )rn    }rn};rnprintln \"[INFO] ------------------------------------------------------------------------\" ;rnnnnBut in the end it didn't help  when I run the clean build the test failed anyway. So it seems there was something else changed as well when the test passed.  n    n    n        n            Show  n            n                        n    n    n    n                nn       Marko Bekhtan added a comment  - 22\/Sep\/2016 00:38 AM                       Gunnar Morling  nhere's a script for replacement, and in file paths you can see modules that depend on HV  n  n rnprintln  \"[INFO] ------------------------------------------------------------------------\" ;rnprintln  \"[INFO] UPDATING SLOT VALUE FOR BEAN VALIDATION IN MODULE.XML FILES            \" ;rnprintln  \"[INFO] ------------------------------------------------------------------------\" ;rnrndef processFileInplace(file, Closure processText) {rn    def text = file.textrn    file.write( processText( text ) )rn}rnrndef hvModuleList = [rn         new  File( project.properties['wildflyTargetDir'], 'modules\/system\/layers\/base\/org\/jboss\/as\/connector\/main\/module.xml' ),rn         new  File( project.properties['wildflyTargetDir'], 'modules\/system\/layers\/base\/org\/jboss\/as\/jpa\/main\/module.xml' ),rn         new  File( project.properties['wildflyTargetDir'], 'modules\/system\/layers\/base\/org\/jboss\/ironjacamar\/impl\/main\/module.xml' ),rn         new  File( project.properties['wildflyTargetDir'], 'modules\/system\/layers\/base\/org\/jboss\/ironjacamar\/jdbcadapters\/main\/module.xml' ),rn         new  File( project.properties['wildflyTargetDir'], 'modules\/system\/layers\/base\/org\/jboss\/resteasy\/resteasy-jaxrs\/main\/module.xml' ),rn         new  File( project.properties['wildflyTargetDir'], 'modules\/system\/layers\/base\/org\/jboss\/resteasy\/resteasy-validator-provider-11\/main\/module.xml' ),rn         new  File( project.properties['wildflyTargetDir'], 'modules\/system\/layers\/base\/org\/wildfly\/extension\/bean-validation\/main\/module.xml' ),rn]rndef hvCdiModuleList = [rn         new  File( project.properties['wildflyTargetDir'], 'modules\/system\/layers\/base\/org\/jboss\/as\/weld\/main\/module.xml' )rn]rnrndef slotName = ' slot= \"' + project.version + '\"  'rnrnhvModuleList.each{ f -&gt;rn    processFileInplace( f ) { text -&gt;rn        println  \"[INFO] Added HV slot in \"  + f.absolutePath;rn        text.replaceAll( \/&lt;module name= \"org.hibernate.validator\" \/, '&lt;module name= \"org.hibernate.validator\" ' + slotName )rn    }rn};rnrnhvCdiModuleList.each{ f -&gt;rn    processFileInplace( f ) { text -&gt;rn        println  \"[INFO] Added HV CDI slot in \"  + f.absolutePath;rn        text.replaceAll( \/&lt;module name= \"org.hibernate.validator.cdi\" \/, '&lt;module name= \"org.hibernate.validator.cdi\" ' + slotName )rn    }rn};rnprintln  \"[INFO] ------------------------------------------------------------------------\" ;rn n  nn But in the end it didn't help   when I run the clean build the test failed anyway. So it seems there was something else changed as well when the test passed.               n        n    n"},{"commnet_id":"comment-84222","commnet_date":"2016-09-22T04:08:25-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 22\/Sep\/2016 04:08 AM    n        n        Marko Bekhta Going to take a look. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 22\/Sep\/2016 04:08 AM                       Marko Bekhta  Going to take a look.              n        n    n"},{"commnet_id":"comment-84224","commnet_date":"2016-09-22T05:14:59-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 22\/Sep\/2016 05:14 AM    n        n        Ok, so the issue is that the dependencies added for the new HV modules (engine + CDI) lacked the import=true statement. This caused their META-INF\/services\/... files not be exposed (by default they are not exported), causing the 6.0 portable extension not to be picked up (in turn causing injection of @Inject Validator to fail) and also causing HV not to be found as a BV provider. I'm going to send an update shortly. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 22\/Sep\/2016 05:14 AM                      Ok, so the issue is that the dependencies added for the new HV modules (engine + CDI) lacked the  import=true  statement. This caused their  META-INF\/services\/...  files not be exposed (by default they are not exported), causing the 6.0 portable extension not to be picked up (in turn causing injection of  @Inject Validator  to fail) and also causing HV not to be found as a BV provider. I'm going to send an update shortly.              n        n    n"}]}},{"OGM-1154":{"info":{"issue_title":"Be extra aggressive on getTuple cache within a flush","issue_key":"OGM-1154","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.1","issue_labels":"5.1","issue_description":"In OgmEntityPersister.update, we do an explicit getTuple call without going to the OgmEntityExtraState cache in some \"sensitive\" situations like optimistic locking check for backends that don't support atomic compare and update. Same for insert to check the presence or not of the object in the datastore.\r\n I imagine other areas don't use the cache as well (see                                                          OGM-1153                                                              Open                ).  In the \"sensitive\" situations, we need to be a bit less aggressive and consider valid a cache entry that has been loaded during the same flush.\r\n One option is to add to a cache entry, the (to be defined) flush uuid \/ unique identifier or even an object reference. If the cache entry has been loaded by the same flush, use the cached entry, otherwise for a getTuple call.  See GridDialectOperationInvocationForOneToOneTest and the extra getTuple that could be avoided.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1154?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-83368","commnet_date":"2016-08-31T07:13:20-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 31\/Aug\/2016 07:13 AM    n        n        Same for getAssociation caching once in place. n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 31\/Aug\/2016 07:13 AM                      Same for  getAssociation  caching once in place.              n        n    n"}]}},{"OGM-1153":{"info":{"issue_title":"Review all getTuple and insertOrUpdate tuple calls to make sure we always use and refresh EntityExtraState","issue_key":"OGM-1153","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.1","issue_labels":"5.1","issue_description":"It seems the use of OgmEntityExtraState and its storage of Tuple is  1. underused and could be used in more places (to be confirmed)\r\n 2. not refreshed upon every tuple updates  Same for the soon to be provided association cache by Guillaume Smet","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1153?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1152":{"info":{"issue_title":"Improve GridDialectOperationInvocationsTest for associations","issue_key":"OGM-1152","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Blocker","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.1-next","issue_labels":"5.1-next","issue_description":"GridDialectOperationInvocationsTest does only check the GridDialect invocations for non associations.\r\n We need to expand it with association tests:   \tone to one \tmany to one \tone to many \tmany to many    Here the idea to detect whether the driving engine is doing the expected number of calls and not too many conceptually. And track evolution over time.  This is orthogonal to potential tests that check how many explicit calls to the datastore the dialect is doing,","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1152?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-83364","commnet_date":"2016-08-31T06:46:40-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 31\/Aug\/2016 06:46 AM    n        n        needs to test persist, merge, remote\r\nnneeds to test manual ids and generated idsnnCheck also RedisPerformanceTest ~ line 84 when the gd daughter is removed and how many getTuple calls are made. n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 31\/Aug\/2016 06:46 AM                      needs to test persist, merge, remote nneeds to test manual ids and generated ids nn Check also RedisPerformanceTest ~ line 84 when the gd daughter is removed and how many  getTuple  calls are made.              n        n    n"}]}},{"HHH-11074":{"info":{"issue_title":"Add method setTimeout for DetachedCriteria","issue_key":"HHH-11074","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.10 ,                                            5.2.2 ,                                            5.1.1","issue_component":"5.0.10 ,                                            5.2.2 ,                                            5.1.1","issue_labels":"5.0.10","issue_description":"DetachedCriteria should add method setTimeout like Criteria","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11074?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-83380","commnet_date":"2016-08-31T17:12:40-0700","commnet_user":"zhouyanming","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       zhouyanmingn added a comment  - 31\/Aug\/2016 17:12 PM    n        n        It should backport to 5.1.x and 5.0.x even 4.3.x. n    n    n        n            Show  n            n                        n    n    n    n                nn       zhouyanmingn added a comment  - 31\/Aug\/2016 17:12 PM                      It should backport to 5.1.x and 5.0.x even 4.3.x.              n        n    n"}]}},{"HHH-11070":{"info":{"issue_title":"Add the full Hibernate ORM version to the User Guide title","issue_key":"HHH-11070","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.2.2","issue_component":"5.2.2","issue_labels":"5.2.2","issue_description":"The User Guide now uses a major.minor version. We should use the full version instead.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11070?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-83239","commnet_date":"2016-08-30T00:06:31-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 30\/Aug\/2016 00:06 AM    n        n        Gail Badner, You might want to back for this to 5.0 and 5.1 n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 30\/Aug\/2016 00:06 AM                       Gail Badner , You might want to back for this to 5.0 and 5.1              n        n    n"},{"commnet_id":"comment-84099","commnet_date":"2016-09-15T15:49:10-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 15\/Sep\/2016 15:49 PM    n        n        Vlad Mihalcea, I tried backporting to 5.1, but I'm getting a conflict. I thought I knew how to resolve it but when I tried to build it, I got:nnA problem occurred evaluating project ':documentation'.\r\nn&gt; Could not find property 'hibernateMajorMinorVersion' on root project 'hibernate-orm-HHH-redo-again-again'.nnCan you take a look? n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 15\/Sep\/2016 15:49 PM                       Vlad Mihalcea , I tried backporting to 5.1, but I'm getting a conflict. I thought I knew how to resolve it but when I tried to build it, I got: nn A problem occurred evaluating project ':documentation'. n&gt; Could not find property 'hibernateMajorMinorVersion' on root project 'hibernate-orm-HHH-redo-again-again'. nn Can you take a look?              n        n    n"},{"commnet_id":"comment-84109","commnet_date":"2016-09-16T02:12:26-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 16\/Sep\/2016 02:12 AM    n        n        Sure. I created a Pull Request for the 5.1 branch. You can merge it after reviewing it. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 16\/Sep\/2016 02:12 AM                      Sure. I created a  Pull Request  for the 5.1 branch. You can merge it after reviewing it.              n        n    n"}]}},{"HHH-11069":{"info":{"issue_title":"Improve documentation regarding GenerationType.AUTO","issue_key":"HHH-11069","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.2.2","issue_component":"5.2.2","issue_labels":"5.2.2","issue_description":"According to this forum question, the GenerationType.AUTO is not clear enough. This needs to be improved.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11069?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-83233","commnet_date":"2016-08-29T07:31:03-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 29\/Aug\/2016 07:31 AM    n        n        Gail Badner You might want to backport this one to 5.1 and 5.0 too. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 29\/Aug\/2016 07:31 AM                       Gail Badner  You might want to backport this one to 5.1 and 5.0 too.              n        n    n"},{"commnet_id":"comment-84098","commnet_date":"2016-09-15T15:05:19-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 15\/Sep\/2016 15:05 PM    n        n        Fixed in 5.1 and 5.0 branches as well. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 15\/Sep\/2016 15:05 PM                      Fixed in 5.1 and 5.0 branches as well.              n        n    n"}]}},{"HHH-11066":{"info":{"issue_title":"Documentation regarding the reason @Filter is not supported with @Cache for collections","issue_key":"HHH-11066","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"4.2.21 ,                                            5.0.10","issue_component":"4.2.21 ,                                            5.0.10","issue_labels":"4.2.21","issue_description":"HHH-7186                                                              Closed                 was rejected as it was potentially problematic.  It would be useful to document the issues surrounding the combination of filtered collections and caching.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11066?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84921","commnet_date":"2016-10-13T05:03:23-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 13\/Oct\/2016 05:03 AM    n        n        Gail Badner, this could be backported to 5.1 and 5.0. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 13\/Oct\/2016 05:03 AM                       Gail Badner , this could be backported to 5.1 and 5.0.              n        n    n"}]}},{"OGM-1150":{"info":{"issue_title":"Upgrade to WildFly 10.1.0.Final for tests","issue_key":"OGM-1150","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0.Alpha1","issue_labels":"5.1.0.Alpha1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1150?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2334":{"info":{"issue_title":"ToElasticsearch.fromLuceneQuery does not support BoostQuery and possibly other query types introduced in Lucene 5.0","issue_key":"HSEARCH-2334","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Duplicate","issue_fix_version":"5.6.0.Beta1","issue_component":"5.6.0.Beta1","issue_labels":"5.6.0.Beta1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2334?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-82934","commnet_date":"2016-08-23T03:29:59-0700","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 23\/Aug\/2016 03:29 AM    n        n        Sanne Grinovero , Guillaume Smet, can you confirm it's something we should fix for 5.6.0?\r\nnIt's not really an issue when using the QueryBuilder, which still use the deprecated Query.setBoost, but problems will arise for users who build queries on their own (or maybe using a QueryParser). n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 23\/Aug\/2016 03:29 AM                       Sanne Grinovero  ,  Guillaume Smet , can you confirm it's something we should fix for 5.6.0? nIt's not really an issue when using the  QueryBuilder , which still use the deprecated  Query.setBoost , but problems will arise for users who build queries on their own (or maybe using a QueryParser).              n        n    n"},{"commnet_id":"comment-82936","commnet_date":"2016-08-23T03:40:45-0700","commnet_user":"Guillaume Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Guillaume Smetn added a comment  - 23\/Aug\/2016 03:40 AM    n        n        Yeah for now we limited our work to the queries built by the DSL. We expect people not using the DSL to build native queries instead.nnAs for BoostQuery, I remember vaguely it was not so simple either to replace our usage of setBoost or to interpret it correctly in the translator but I don't remember the specifics.nnSee this issue I created a while ago which is related to that: https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2137 .nnFWIW, we can't do anything for a lot of Lucene queries. See the issue I opened here at Lucene: https:\/\/issues.apache.org\/jira\/browse\/LUCENE-7058 . My patch got committed in Lucene 6 so we might revisit that later. n    n    n        n            Show  n            n                        n    n    n    n                nn       Guillaume Smetn added a comment  - 23\/Aug\/2016 03:40 AM                      Yeah for now we limited our work to the queries built by the DSL. We expect people not using the DSL to build native queries instead. nn As for  BoostQuery , I remember vaguely it was not so simple either to replace our usage of  setBoost  or to interpret it correctly in the translator but I don't remember the specifics. nn See this issue I created a while ago which is related to that:  https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2137  . nn FWIW, we can't do anything for a lot of Lucene queries. See the issue I opened here at Lucene:  https:\/\/issues.apache.org\/jira\/browse\/LUCENE-7058  . My patch got committed in Lucene 6 so we might revisit that later.              n        n    n"},{"commnet_id":"comment-82938","commnet_date":"2016-08-23T03:47:33-0700","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 23\/Aug\/2016 03:47 AM    n        n        Ok, thanks for the explanation.\r\nnI'm a bit puzzled about the timeline, though: if we wait for 6.0, it'll probably be useless to spend time on that anyway, since we'll try not to rely on Lucene's API anymore (especially for the QueryBuilder, or its newer equivalent), which means ToElasticsearch.fromLuceneQuery will probably be removed or at least deprecated... Am I wrong? n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 23\/Aug\/2016 03:47 AM                      Ok, thanks for the explanation. nI'm a bit puzzled about the timeline, though: if we wait for 6.0, it'll probably be useless to spend time on that anyway, since we'll try not to rely on Lucene's API anymore (especially for the QueryBuilder, or its newer equivalent), which means  ToElasticsearch.fromLuceneQuery  will probably be removed or at least deprecated... Am I wrong?              n        n    n"},{"commnet_id":"comment-82943","commnet_date":"2016-08-23T06:33:30-0700","commnet_user":"Guillaume Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Guillaume Smetn added a comment  - 23\/Aug\/2016 06:33 AM    n        n        nAm I wrong?nnNot really. The fact is that we won't update to Lucene 6 until HS 6. So we won't be able to translate a lot of queries until then. That's not really our choice.nnPersonally, I still think it might be interesting to keep - and complete - ToElasticsearch.fromLuceneQuery for migrating quickly an app from HS-Lucene to HS-Elasticsearch. Not having to migrate all the (not so) specific Lucene queries would be nice. It won't be perfect but could allow to migrate quickly in most cases. n    n    n        n            Show  n            n                        n    n    n    n                nn       Guillaume Smetn added a comment  - 23\/Aug\/2016 06:33 AM                      n Am I wrong?  nn Not really. The fact is that we won't update to Lucene 6 until HS 6. So we won't be able to translate a lot of queries until then. That's not really our choice. nn Personally, I still think it might be interesting to keep - and complete -  ToElasticsearch.fromLuceneQuery  for migrating quickly an app from HS-Lucene to HS-Elasticsearch. Not having to migrate all the (not so) specific Lucene queries would be nice. It won't be perfect but could allow to migrate quickly in most cases.              n        n    n"},{"commnet_id":"comment-82944","commnet_date":"2016-08-23T06:54:25-0700","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 23\/Aug\/2016 06:54 AM    n        n        Ok, I understand. Anyway, this ticket is a duplicate. I'm closing it. n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 23\/Aug\/2016 06:54 AM                      Ok, I understand. Anyway, this ticket is a duplicate. I'm closing it.              n        n    n"}]}},{"HV-1087":{"info":{"issue_title":"Update all outdated links to java.sun.com","issue_key":"HV-1087","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.4.0.Beta1","issue_labels":"5.4.0.Beta1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1087?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1086":{"info":{"issue_title":"Update Maven dependencies and align with WildFly 10.1.0.Final","issue_key":"HV-1086","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.3.0.CR1","issue_labels":"5.3.0.CR1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1086?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-83365","commnet_date":"2016-08-31T07:04:05-0700","commnet_user":"Guillaume Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Guillaume Smetn added a comment  - 31\/Aug\/2016 07:04 AM    n        n        Backported in https:\/\/github.com\/hibernate\/hibernate-validator\/pull\/498 . n    n    n        n            Show  n            n                        n    n    n    n                nn       Guillaume Smetn added a comment  - 31\/Aug\/2016 07:04 AM                      Backported in  https:\/\/github.com\/hibernate\/hibernate-validator\/pull\/498  .              n        n    n"}]}},{"HV-1085":{"info":{"issue_title":"Raise BV to 2.0.0-SNAPSHOT and Java baseline to version 8","issue_key":"HV-1085","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"6.0-next","issue_labels":"6.0-next","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1085?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2333":{"info":{"issue_title":"There&#39;s no straightforward way to execute backend-independent queries from the engine module","issue_key":"HSEARCH-2333","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta2","issue_labels":"5.6.0.Beta2","issue_description":"Sometimes, mainly in tests, it may be useful to be able to execute queries in a backend-independent way.\r\n However, the mechanic that enables that is located in the ORM module, more precisely here: https:\/\/github.com\/hibernate\/hibernate-search\/blob\/a62de30245f726361c1566d91a62c618b6446999\/orm\/src\/main\/java\/org\/hibernate\/search\/impl\/FullTextSessionImpl.java#L75\r\n Since the relevant SPIs are located in the engine module, it feels like it's a feature of the engine module and hence the code using the SPIs should be located there. Then it would be possible to expose a way for other modules to create a QueryDescriptor in a transparent way, without knowing about the backend or manipulating services (that may or may not exist).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2333?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2332":{"info":{"issue_title":"Offer better support for onMissingValue().use(Object) in the sort DSL","issue_key":"HSEARCH-2332","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.6.0.Alpha2","issue_component":"5.6.0.Alpha2","issue_labels":"5.6.0.Alpha2","issue_description":"Providing a replacement for missing values in the sort DSL currently has two limitations:   1. One can only use it with numeric values, because org.apache.lucene.search.SortField.setMissingValue(Object) does not accept replacements for String values, and a SortField is what we return ultimately.\r\n  2. Field bridges are ignored, because:  \tField bridges cannot convert an object to a numeric value (the most they can do is provide a String value by implementing StringBridge), but {org.apache.lucene.search.SortField.setMissingValue(Object) excepts numeric values for numeric fields, and a SortField is what we return ultimately. Note that setMissingValue won't break right away, but org.apache.lucene.search.SortField.getComparator(int, int) (called before sorting) will. \tString values are irrelevant (see 1. above)    These limitations should go away when dropping the reliance on the Lucene API in HS 6.0. Allowing to use field bridges on numeric fields might require some more work, though.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2332?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1084":{"info":{"issue_title":"Move XML namespace to jcp.org from jboss.org","issue_key":"HV-1084","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"6.0-next","issue_labels":"6.0-next","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1084?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11060":{"info":{"issue_title":"Postgis dialect uses Postgresql 8.2 dialect, support newer versions","issue_key":"HHH-11060","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Duplicate","issue_fix_version":"5.0.0.Final ,                                            5.2.2","issue_component":"5.0.0.Final ,                                            5.2.2","issue_labels":"5.0.0.Final","issue_description":"Currently, org.hibernate.spatial.dialect.postgis.PostgisDialect is defined as extending org.hibernate.dialect.PostgreSQL82Dialect, forcing users to create a copy of the dialect if features from PostgreSQL 8.2+ are required.  The Dialect could either be changed to extend org.hibernate.dialect.PostgreSQL94Dialect or several Postgis dialects for different PostgreSQL versions could be created. It would however be a good idea to not duplicate the definition of the spatial functions which do not change between the PostgreSQL versions.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11060?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11059":{"info":{"issue_title":"Improve documentation for JTA configuration in user guide and 5.0 migration guide","issue_key":"HHH-11059","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.11,                                            5.1.2,                                            5.2.3","issue_labels":"5.0.11,                                            5.1.2,                                            5.2.3","issue_description":"The section about JTA configuration in the 5.0, 5.1, and 5.2 user guides and the 5.0 migration guide do not explicitly state that native Hibernate (non-JPA) applications must have the property setting, hibernate.transaction.coordinator_class=jta.  The default for native Hibernate applications is hibernate.transaction.coordinator_class=jdbc, which will cause problems with JTA resources.  JPA applications do not need to set hibernate.transaction.coordinator_class, because Hibernate will automatically use the proper transaction coordinator based on the transaction type for the persistence unit.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11059?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-83046","commnet_date":"2016-08-24T17:17:36-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 24\/Aug\/2016 17:17 PM    n        n        Fixed in master, 5.1, and 5.0 branches. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 24\/Aug\/2016 17:17 PM                      Fixed in master, 5.1, and 5.0 branches.              n        n    n"}]}},{"HSEARCH-2331":{"info":{"issue_title":"Enable creating a QueryBuilder with a multi-entity scope","issue_key":"HSEARCH-2331","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.6.0.Beta1","issue_component":"5.6.0.Beta1","issue_labels":"5.6.0.Beta1","issue_description":"From                                                          HSEARCH-1872                                                              Closed                 comments:   When querying multiple indices [hence multiple entities] at once, it may happen that some field we're sorting on is absent from one of the indices. In that case, ElasticSearch requires that type information be provided.\r\n So in that case, we may have to retrieve type information from the metamodel. Problem: the QueryBuilder, from which we start building the sort, is only aware of one entity we're working on. This might be something to fix, because queries built this way may (and will) still be ran against multiple indices.\r\n So, let's say the user is querying two indices: A(fields: z, a1, a2), B (fields: z, b1, b2), and he wants to sort on z, then a1, then b1. The user won't be able to build his sort with the QueryBuilder, since whichever entity he chooses to bind his QueryBuilder to, there would be some missing type information at some point (for either the a1 field or the b1 field).  The idea would be to enable creation of a QueryBuilder with a scope covering multiple entities. When retrieving metadata, this builder would try retrieving from the first entity, then (if not found) fall back to the second, and so on.\r\n We would implicitly consider that if a field exists on one entity, on every other entity of the scope the metadata for this field are the same or the field doesn't exist.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2331?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2329":{"info":{"issue_title":"Provide support for more distance units","issue_key":"HSEARCH-2329","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"5.6.0.Beta1","issue_component":"5.6.0.Beta1","issue_labels":"5.6.0.Beta1","issue_description":"The Unit enum has only one value so far: KM.\r\n It's a bit pointless as it is. Maybe we could extend it with at least \"M\"\/\"METER\"?","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2329?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2327":{"info":{"issue_title":"Provide a way to select the unit to use in distance projections","issue_key":"HSEARCH-2327","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.6.0.Beta1","issue_component":"5.6.0.Beta1","issue_labels":"5.6.0.Beta1","issue_description":"Currently the unit seems to be:   \tkilometers for Lucene (see https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1872?focusedCommentId=82458&amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-82458 , the line starting with \"Should we keep in(Unit)\") \tto be determined for Elasticsearch (see                                                           HSEARCH-2326                                                              Closed                 )    We should at least support the metric system units (which seems to be the default in both backends). Don't know if imperial system units support would be useful. Maybe we should see what Elasticsearch does in this regard.  The customization support should be added either:   \tonly for the Elasticsearch backend \tor for both the Elasticsearch backend and the Lucene backend.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2327?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11047":{"info":{"issue_title":"ValidityAuditStrategy: End Revision Timestamp not stored for join tables.","issue_key":"HHH-11047","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.0.10 ,                                            5.2.2 ,                                            5.1.1","issue_component":"5.0.10 ,                                            5.2.2 ,                                            5.1.1","issue_labels":"5.0.10","issue_description":"As a follow-up to                                                          HHH-9062                                                              Open                , its useful to use the REVEND_TSTMP field as part of a partitioning scheme applied to audit tables.  Join Tables currently do not offer a way to be partitioned by using the REVEND_TSTMP field as it isn't included in the table.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11047?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11042":{"info":{"issue_title":"Cannot count distinct on SQL Server on embedded ids","issue_key":"HHH-11042","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.0.10 ,                                            5.2.0 ,                                            5.2.1 ,                                            5.2.2","issue_component":"5.0.10 ,                                            5.2.0 ,                                            5.2.1 ,                                            5.2.2","issue_labels":"5.0.10","issue_description":"Regardless of having supportsTupleDistinctCounts returning false on the selected dialect, Hibernate tries to do a COUNT(DISTINCT col1_, col2_) when counting entities with an embedded id and the JDBC driver throws a Incorrect syntax near ',' exception.  I suppose this is a limitation of SQL Server, but in my opinion this should not throw an exception and also it should be somehow possible to instruct the dialect to replace the COUNT(DISTINCT col1_, col2_) syntax with a COUNT(DISTINCT CHECKSUM(col1_, col2_)) which may work even in SQL Server.  This was initially discussed within                                                          HHH-7165                                                              Closed                .","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11042?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-83043","commnet_date":"2016-08-24T15:29:46-0700","commnet_user":"Christian Beikov","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Christian Beikovn added a comment  - 24\/Aug\/2016 15:29 PM    n        n        Hmm, if any column has a NULL value, it can't be equal to anything. Concatenating null should make the expression null according to SQL. MSSQL is weird...\r\nnThe following counts nulls distinctly, hope that this is the solution.\r\nncount(distinct case when col1 is null or col2 is null then null else col1 || '0' || col2 end) + count(case when col1 is null or col2 is null then 1 end) n    n    n        n            Show  n            n                        n    n    n    n                nn       Christian Beikovn added a comment  - 24\/Aug\/2016 15:29 PM                      Hmm, if any column has a NULL value, it can't be equal to anything. Concatenating null should make the expression null according to SQL. MSSQL is weird... nThe following counts nulls distinctly, hope that this is the solution. n count(distinct case when col1 is null or col2 is null then null else col1 || '0' || col2 end) + count(case when col1 is null or col2 is null then 1 end)               n        n    n"},{"commnet_id":"comment-83432","commnet_date":"2016-09-01T02:24:12-0700","commnet_user":"Christian Beikov","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Christian Beikovn added a comment  - 01\/Sep\/2016 02:24 AM    n        n        Could you maybe tell me if that new query does the job? I really think this is a good general purpose workaround for that limitation. Maybe even other databases that don't support that could benefit from that. DB2 for example also doesn't support tuple distinct counts and I guess there are even more. n    n    n        n            Show  n            n                        n    n    n    n                nn       Christian Beikovn added a comment  - 01\/Sep\/2016 02:24 AM                      Could you maybe tell me if that new query does the job? I really think this is a good general purpose workaround for that limitation. Maybe even other databases that don't support that could benefit from that. DB2 for example also doesn't support tuple distinct counts and I guess there are even more.              n        n    n"},{"commnet_id":"comment-83435","commnet_date":"2016-09-01T02:39:36-0700","commnet_user":"Giovanni Lovato","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Giovanni Lovaton added a comment  - 01\/Sep\/2016 02:39 AM    n        n        Thank you Christian, I've just tested the query and it works! I had to use CONCAT(col1, '0', col2) since the double pipe inside COUNT throws a syntax error. n    n    n        n            Show  n            n                        n    n    n    n                nn       Giovanni Lovaton added a comment  - 01\/Sep\/2016 02:39 AM                      Thank you Christian, I've just tested the query and it works! I had to use  CONCAT(col1, '0', col2)  since the double pipe inside  COUNT  throws a syntax error.              n        n    n"},{"commnet_id":"comment-83437","commnet_date":"2016-09-01T02:48:33-0700","commnet_user":"Christian Beikov","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Christian Beikovn added a comment  - 01\/Sep\/2016 02:48 AM    n        n        Thanks, I'll try to bring that up on the mailing list and see how this might be integratable into the core. n    n    n        n            Show  n            n                        n    n    n    n                nn       Christian Beikovn added a comment  - 01\/Sep\/2016 02:48 AM                      Thanks, I'll try to bring that up on the mailing list and see how this might be integratable into the core.              n        n    n"},{"commnet_id":"comment-84192","commnet_date":"2016-09-21T00:03:13-0700","commnet_user":"Christian Beikov","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Christian Beikovn added a comment  - 21\/Sep\/2016 00:03 AM    n        n        Ok so I just implemented this myself and noticed that counting nulls as different values is not ANSI compliant.\r\nnThe ANSI compliant way of encoding would be:nnnrncount(distinct coalesce(nullif(coalesce(col1 || '', '0'), ''), '01') || '0' || coalesce(nullif(coalesce(col2 || '', '0'), ''), '02'))rnnnnNote that the columns are concatenated with an empty string to get implicit conversion. NULL is encoded as '0' and empty strings are encoded as '0' + element number.\r\nnThis should produce collision free strings as long as the column values don't contain the '0' character. n    n    n        n            Show  n            n                        n    n    n    n                nn       Christian Beikovn added a comment  - 21\/Sep\/2016 00:03 AM                      Ok so I just implemented this myself and noticed that counting nulls as different values is not ANSI compliant. nThe ANSI compliant way of encoding would be: nn  n rncount(distinct coalesce(nullif(coalesce(col1 || '', '0'), ''), '01') || '0' || coalesce(nullif(coalesce(col2 || '', '0'), ''), '02'))rn n  nn Note that the columns are concatenated with an empty string to get implicit conversion. NULL is encoded as '0' and empty strings are encoded as '0' + element number. nThis should produce collision free strings as long as the column values don't contain the '0' character.              n        n    n"}]}},{"HV-1083":{"info":{"issue_title":"Properly ignore hibernate-noorm-release-scripts directory in the build","issue_key":"HV-1083","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.3.0.CR1","issue_labels":"5.3.0.CR1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1083?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1146":{"info":{"issue_title":"Properly ignore hibernate-noorm-release-scripts directory in the build","issue_key":"OGM-1146","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.2.Final,                                            5.1.0.Alpha1","issue_labels":"5.0.2.Final,                                            5.1.0.Alpha1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1146?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2323":{"info":{"issue_title":"Properly ignore hibernate-noorm-release-scripts directory in the build","issue_key":"HSEARCH-2323","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta2","issue_labels":"5.6.0.Beta2","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2323?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11040":{"info":{"issue_title":"ClassCastException: Using a region shared by entity caching on a collection cache","issue_key":"HHH-11040","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Duplicate","issue_fix_version":"5.1.0","issue_component":"5.1.0","issue_labels":"5.1.0","issue_description":"If a region is specified as both an Entity region (class level) and a Collection region (on a @OneToMany association) then it will result in a ClassCastException on startup.  I originally used the same region name because I believed that they would pull from the same cache.          \/\/ shares a region with the collection cache   @Cache(region=\"com.test.EntityA\" )  public  class EntityA {      }    public  class EntityB {    \/\/ Shares a region     @Cache(region=\"com.test.EntityA\" )    public  List&lt;EntityA&gt; getEntities() {       return  entities;    }  }        Caused by: java.lang.ClassCastException: org.hibernate.cache.ehcache.internal.nonstop.NonstopAwareEntityRegionAccessStrategy cannot be cast to org.hibernate.cache.spi.access.CollectionRegionAccessStrategy\r\n \tat org.hibernate.internal.SessionFactoryImpl.determineCollectionRegionAccessStrategy(SessionFactoryImpl.java:624)\r\n \tat org.hibernate.internal.SessionFactoryImpl.&lt;init&gt;(SessionFactoryImpl.java:389)\r\n \tat org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:465)\r\n \tat org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:708)\r\n \tat org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:724)\r\n \tat org.springframework.orm.hibernate4.LocalSessionFactoryBuilder.buildSessionFactory(LocalSessionFactoryBuilder.java:372)\r\n \tat org.springframework.orm.hibernate4.LocalSessionFactoryBean.buildSessionFactory(LocalSessionFactoryBean.java:454)\r\n \tat org.springframework.orm.hibernate4.LocalSessionFactoryBean.afterPropertiesSet(LocalSessionFactoryBean.java:439)\r\n \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1637)\r\n \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1574)\r\n \t... 59 more}}","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11040?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-82441","commnet_date":"2016-08-11T13:05:26-0700","commnet_user":"John Strickler","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       John Stricklern added a comment  - 11\/Aug\/2016 13:05 PM    n        n        Possible solution?\r\nnI believe that SessionFactoryImpl#determineCollectionRegionAccessStrategy should pull and cast from cacheAccessStrategiesMap as RegionAccessStrategy.  Then check if the accessStrategy is an instanceof CollectionRegionAccessStrategy. n    n    n        n            Show  n            n                        n    n    n    n                nn       John Stricklern added a comment  - 11\/Aug\/2016 13:05 PM                       Possible solution?  nI believe that SessionFactoryImpl#determineCollectionRegionAccessStrategy should pull and cast from cacheAccessStrategiesMap as RegionAccessStrategy.  Then check if the accessStrategy is an instanceof CollectionRegionAccessStrategy.              n        n    n"}]}},{"HV-1082":{"info":{"issue_title":"Upgrade maven-jdocbook-plugin and pressgang to generate valid HTML5 documentation","issue_key":"HV-1082","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.3.0.CR1","issue_labels":"5.3.0.CR1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1082?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2321":{"info":{"issue_title":"Upgrade maven-jdocbook-plugin and pressgang to generate valid HTML5 documentation","issue_key":"HSEARCH-2321","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta2","issue_labels":"5.6.0.Beta2","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2321?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1145":{"info":{"issue_title":"Upgrade maven-jdocbook-plugin and pressgang to generate valid HTML5 documentation","issue_key":"OGM-1145","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0.Alpha1","issue_labels":"5.1.0.Alpha1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1145?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1081":{"info":{"issue_title":"Reuse the release scripts of OGM to automatize the release process","issue_key":"HV-1081","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.3.0.CR1","issue_labels":"5.3.0.CR1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1081?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-82935","commnet_date":"2016-08-23T03:33:46-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 23\/Aug\/2016 03:33 AM    n        n        Guillaume Smet Is there anything left to be done here or can we resolve it? n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 23\/Aug\/2016 03:33 AM                       Guillaume Smet  Is there anything left to be done here or can we resolve it?              n        n    n"},{"commnet_id":"comment-82937","commnet_date":"2016-08-23T03:42:57-0700","commnet_user":"Guillaume Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Guillaume Smetn added a comment  - 23\/Aug\/2016 03:42 AM    n        n        It's more a reminder that we need to test them before the release.nnYou can close it if you want. n    n    n        n            Show  n            n                        n    n    n    n                nn       Guillaume Smetn added a comment  - 23\/Aug\/2016 03:42 AM                      It's more a reminder that we need to test them before the release. nn You can close it if you want.              n        n    n"}]}},{"OGM-1144":{"info":{"issue_title":"Make release scripts more generic","issue_key":"OGM-1144","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0.Alpha1","issue_labels":"5.1.0.Alpha1","issue_description":"The idea is to be able to use mostly the same script to release OGM, Validator and Search.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1144?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2320":{"info":{"issue_title":"Add more specific sorts to the sort DSL","issue_key":"HSEARCH-2320","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.6.0.Beta1","issue_component":"5.6.0.Beta1","issue_labels":"5.6.0.Beta1","issue_description":"In                                                          HSEARCH-1872                                                              Closed                , a sort DSL is being introduced. This DSL will have to be extended with elements that were excluded from the initial work (caution, some ideas are yet to be validated):   \ta withComparator() method for building a sort that will use a java.util.Comparator \ta treatMultiValuedAs(mode) method for instructions about how multi-valued fields should be sorted. \ta byNative() method for injecting implementation-dependent sorts inside a DSL-built sort (such as a JSON string for ElasticSearch, or a SortField for a local Lucene index) \ta onMissingValue() method for distance sort (at least first\/last as for field sorts, or even substitue value if possible) \ta withComputeMethod() method for distance sort \ta byDistanceFromSpatialQuery(Query) method for distance sort    Emmanuel Bernard had started working on some of these subjects, and this work had to be reverted in order to reduce the scope. Please find tags for those reverts below. The idea is that if you revert the reverts, you'll end up with a start of an implementation.   \thttps:\/\/github.com\/yrodiere\/hibernate-search\/releases\/tag\/HSEARCH-2320-distance-withComputeMethod-torevert \thttps:\/\/github.com\/yrodiere\/hibernate-search\/releases\/tag\/HSEARCH-2320-withComparator-torevert \thttps:\/\/github.com\/yrodiere\/hibernate-search\/releases\/tag\/HSEARCH-2320-distance-onMissingValue-torevert \thttps:\/\/github.com\/yrodiere\/hibernate-search\/releases\/tag\/HSEARCH-2320-treatMultiValuedAs-torevert \thttps:\/\/github.com\/yrodiere\/hibernate-search\/releases\/tag\/HSEARCH-2320-distance-byDistanceFromSpatialQuery-torevert    See                                                          HSEARCH-1872                                                              Closed                 for hints on use cases (they might not all be defined).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2320?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1143":{"info":{"issue_title":"Rename readme.md to README.md for consistency with other projects","issue_key":"OGM-1143","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.2.Final,                                            5.1.0.Alpha1","issue_labels":"5.0.2.Final,                                            5.1.0.Alpha1","issue_description":"It's very minor but as the plan is to share the release scripts, we might as well be consistent.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1143?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11034":{"info":{"issue_title":"Query.stream() Javadoc should specify whether the resulting Stream contains resources","issue_key":"HHH-11034","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"5.2.2","issue_component":"5.2.2","issue_labels":"5.2.2","issue_description":"The new Hibernate 5.2 Query.stream() method doesn't say anything about whether we should close the stream after consumption:\r\n https:\/\/docs.jboss.org\/hibernate\/orm\/5.2\/javadocs\/org\/hibernate\/query\/Query.html#stream--  The expectation may well be that Stream simply wraps a JDBC ResultSet and performs all actions lazily, rather than materialising the entire result set at once. Of course, a lazy, resourceful Stream would be hard to implement in Hibernate, with all the eager \/ lazy loading semantics. I thus assume that it is just convenience for calling list().stream(). But I think it's still worth mentioning in the Javadoc.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11034?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-85481","commnet_date":"2016-11-02T03:27:16-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 02\/Nov\/2016 03:27 AM    n        n        Added clarifications in the User Guide, and suggest to explicitly close the Stream and the ScrollableResults, although Hibernate can take care of that at the end of the currently running transaction. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 02\/Nov\/2016 03:27 AM                      Added clarifications in the User Guide, and suggest to explicitly close the Stream and the ScrollableResults, although Hibernate can take care of that at the end of the currently running transaction.              n        n    n"}]}},{"HHH-11032":{"info":{"issue_title":"Improve performance of PersistentBag.equalsSnapshot","issue_key":"HHH-11032","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"4.3.0.Final ,                                            4.3.11 ,                                            5.2.2","issue_component":"4.3.0.Final ,                                            4.3.11 ,                                            5.2.2","issue_labels":"4.3.0.Final","issue_description":"When persistent Lists get bigger, the PersistentBag.equalsSnapshot becomes significantly slows down Hibernate queries (with FlushMode.AUTO).  The implementation of this method calls countOccurrences and that calls ComponentType.isSame  N*(2N) times where N is number of items in a collection. Since isSame uses reflection, it's quite slow.  I think there is quite simple optimization that can be made here. I will prepare a contribution for this.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11032?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-86949","commnet_date":"2016-12-04T16:10:58-0800","commnet_user":"Luis Barreiro","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Luis Barreiron added a comment  - 04\/Dec\/2016 16:10 PM    n        n        I have done some benchmarking on both the existing and proposed implementations. I'm assuming similar (and relatively expensive) cost of calling type.isEqual() and type.isSame(). The numbers are representative of the performance, not necessarily accurate in absolute value.nnThere are 4 modes:  nnntThe first element is differentnnrnBenchmark                   (mode)  (size)   Mode  Cnt    Score    Error   UnitsrnrnHHH11032_Benchmark.testNew   first       2  thrpt   10  325.121 u00B1  6.414  ops\/msrnHHH11032_Benchmark.testNew   first       5  thrpt   10  198.692 u00B1  4.588  ops\/msrnHHH11032_Benchmark.testNew   first      10  thrpt   10  120.185 u00B1  2.880  ops\/msrnHHH11032_Benchmark.testNew   first      20  thrpt   10   59.662 u00B1  3.143  ops\/msrnHHH11032_Benchmark.testNew   first      50  thrpt   10   22.539 u00B1  1.968  ops\/msrnHHH11032_Benchmark.testNew   first     100  thrpt   10   12.465 u00B1  0.324  ops\/msrnrnHHH11032_Benchmark.testOld   first       2  thrpt   10  745.874 u00B1  7.762  ops\/msrnHHH11032_Benchmark.testOld   first       5  thrpt   10  379.287 u00B1  2.116  ops\/msrnHHH11032_Benchmark.testOld   first      10  thrpt   10  207.899 u00B1  1.403  ops\/msrnHHH11032_Benchmark.testOld   first      20  thrpt   10  109.731 u00B1  0.771  ops\/msrnHHH11032_Benchmark.testOld   first      50  thrpt   10   45.035 u00B1  0.535  ops\/msrnHHH11032_Benchmark.testOld   first     100  thrpt   10   22.362 u00B1  0.797  ops\/msrnnnnnnntThe last element is differentnnrnBenchmark                   (mode)  (size)   Mode  Cnt    Score    Error   UnitsrnrnHHH11032_Benchmark.testNew    last       2  thrpt   10  155.873 u00B1 17.143  ops\/msrnHHH11032_Benchmark.testNew    last       5  thrpt   10   93.876 u00B1 19.417  ops\/msrnHHH11032_Benchmark.testNew    last      10  thrpt   10   57.240 u00B1  7.766  ops\/msrnHHH11032_Benchmark.testNew    last      20  thrpt   10   27.272 u00B1  0.600  ops\/msrnHHH11032_Benchmark.testNew    last      50  thrpt   10   10.676 u00B1  0.420  ops\/msrnHHH11032_Benchmark.testNew    last     100  thrpt   10    5.321 u00B1  0.077  ops\/msrnrnHHH11032_Benchmark.testOld    last       2  thrpt   10  250.605 u00B1  1.968  ops\/msrnHHH11032_Benchmark.testOld    last       5  thrpt   10   63.690 u00B1  0.511  ops\/msrnHHH11032_Benchmark.testOld    last      10  thrpt   10   19.064 u00B1  0.112  ops\/msrnHHH11032_Benchmark.testOld    last      20  thrpt   10    5.243 u00B1  0.038  ops\/msrnHHH11032_Benchmark.testOld    last      50  thrpt   10    0.888 u00B1  0.010  ops\/msrnHHH11032_Benchmark.testOld    last     100  thrpt   10    0.224 u00B1  0.006  ops\/msrnnnnnnntAn element at a random position is differentnnrnBenchmark                   (mode)  (size)   Mode  Cnt    Score    Error   UnitsrnrnHHH11032_Benchmark.testNew  random       2  thrpt   10  278.647 u00B1  3.813  ops\/msrnHHH11032_Benchmark.testNew  random       5  thrpt   10  137.615 u00B1  2.528  ops\/msrnHHH11032_Benchmark.testNew  random      10  thrpt   10   72.389 u00B1  4.548  ops\/msrnHHH11032_Benchmark.testNew  random      20  thrpt   10   38.398 u00B1  1.224  ops\/msrnHHH11032_Benchmark.testNew  random      50  thrpt   10   14.115 u00B1  1.850  ops\/msrnHHH11032_Benchmark.testNew  random     100  thrpt   10    6.146 u00B1  1.180  ops\/msrnrnHHH11032_Benchmark.testOld  random       2  thrpt   10  497.130 u00B1  3.263  ops\/msrnHHH11032_Benchmark.testOld  random       5  thrpt   10  127.096 u00B1  0.704  ops\/msrnHHH11032_Benchmark.testOld  random      10  thrpt   10   37.861 u00B1  0.511  ops\/msrnHHH11032_Benchmark.testOld  random      20  thrpt   10   10.433 u00B1  0.388  ops\/msrnHHH11032_Benchmark.testOld  random      50  thrpt   10    1.775 u00B1  0.035  ops\/msrnHHH11032_Benchmark.testOld  random     100  thrpt   10    0.443 u00B1  0.019  ops\/msrnnnnnnntThe bags have the same contentnnrnBenchmark                   (mode)  (size)   Mode  Cnt    Score    Error   UnitsrnrnHHH11032_Benchmark.testNew    same       2  thrpt   10  307.966 u00B1 44.114  ops\/msrnHHH11032_Benchmark.testNew    same       5  thrpt   10  136.391 u00B1  8.138  ops\/msrnHHH11032_Benchmark.testNew    same      10  thrpt   10   59.131 u00B1  6.298  ops\/msrnHHH11032_Benchmark.testNew    same      20  thrpt   10   27.064 u00B1  4.161  ops\/msrnHHH11032_Benchmark.testNew    same      50  thrpt   10   10.694 u00B1  0.453  ops\/msrnHHH11032_Benchmark.testNew    same     100  thrpt   10    5.150 u00B1  0.166  ops\/msrnrnHHH11032_Benchmark.testOld    same       2  thrpt   10  461.776 u00B1 25.431  ops\/msrnHHH11032_Benchmark.testOld    same       5  thrpt   10   88.911 u00B1  4.896  ops\/msrnHHH11032_Benchmark.testOld    same      10  thrpt   10   22.991 u00B1  0.236  ops\/msrnHHH11032_Benchmark.testOld    same      20  thrpt   10    5.770 u00B1  0.043  ops\/msrnHHH11032_Benchmark.testOld    same      50  thrpt   10    0.919 u00B1  0.004  ops\/msrnHHH11032_Benchmark.testOld    same     100  thrpt   10    0.230 u00B1  0.002  ops\/msrnnnnnnThe first two cases represent the best \/ worse cases for the old algorithm and the last two are more representative of the 'real world' scenarios. For bags of 5 or more elements the new algorithm performs better. Apart from benchmarking, the difference in performance for small bags won't be noticeable, while for bags with hundreds of elements is significant.nnI did modify Filip Nguyen code sightly (mostly formatting) so that I can be merged right away &#8211; https:\/\/github.com\/barreiro\/hibernate-orm\/commits\/HHH-11032   n    n    n        n            Show  n            n                        n    n    n    n                nn       Luis Barreiron added a comment  - 04\/Dec\/2016 16:10 PM                      I have done some benchmarking on both the existing and proposed implementations. I'm assuming similar (and relatively expensive) cost of calling type.isEqual() and type.isSame(). The numbers are representative of the performance, not necessarily accurate in absolute value. nn There are 4 modes:   nn nt The first element is differentn  n rnBenchmark                   (mode)  (size)   Mode  Cnt    Score    Error   UnitsrnrnHHH11032_Benchmark.testNew   first       2  thrpt   10  325.121 u00B1  6.414  ops\/msrnHHH11032_Benchmark.testNew   first       5  thrpt   10  198.692 u00B1  4.588  ops\/msrnHHH11032_Benchmark.testNew   first      10  thrpt   10  120.185 u00B1  2.880  ops\/msrnHHH11032_Benchmark.testNew   first      20  thrpt   10   59.662 u00B1  3.143  ops\/msrnHHH11032_Benchmark.testNew   first      50  thrpt   10   22.539 u00B1  1.968  ops\/msrnHHH11032_Benchmark.testNew   first     100  thrpt   10   12.465 u00B1  0.324  ops\/msrnrnHHH11032_Benchmark.testOld   first       2  thrpt   10  745.874 u00B1  7.762  ops\/msrnHHH11032_Benchmark.testOld   first       5  thrpt   10  379.287 u00B1  2.116  ops\/msrnHHH11032_Benchmark.testOld   first      10  thrpt   10  207.899 u00B1  1.403  ops\/msrnHHH11032_Benchmark.testOld   first      20  thrpt   10  109.731 u00B1  0.771  ops\/msrnHHH11032_Benchmark.testOld   first      50  thrpt   10   45.035 u00B1  0.535  ops\/msrnHHH11032_Benchmark.testOld   first     100  thrpt   10   22.362 u00B1  0.797  ops\/msrn n   n nnn nt The last element is differentn  n rnBenchmark                   (mode)  (size)   Mode  Cnt    Score    Error   UnitsrnrnHHH11032_Benchmark.testNew    last       2  thrpt   10  155.873 u00B1 17.143  ops\/msrnHHH11032_Benchmark.testNew    last       5  thrpt   10   93.876 u00B1 19.417  ops\/msrnHHH11032_Benchmark.testNew    last      10  thrpt   10   57.240 u00B1  7.766  ops\/msrnHHH11032_Benchmark.testNew    last      20  thrpt   10   27.272 u00B1  0.600  ops\/msrnHHH11032_Benchmark.testNew    last      50  thrpt   10   10.676 u00B1  0.420  ops\/msrnHHH11032_Benchmark.testNew    last     100  thrpt   10    5.321 u00B1  0.077  ops\/msrnrnHHH11032_Benchmark.testOld    last       2  thrpt   10  250.605 u00B1  1.968  ops\/msrnHHH11032_Benchmark.testOld    last       5  thrpt   10   63.690 u00B1  0.511  ops\/msrnHHH11032_Benchmark.testOld    last      10  thrpt   10   19.064 u00B1  0.112  ops\/msrnHHH11032_Benchmark.testOld    last      20  thrpt   10    5.243 u00B1  0.038  ops\/msrnHHH11032_Benchmark.testOld    last      50  thrpt   10    0.888 u00B1  0.010  ops\/msrnHHH11032_Benchmark.testOld    last     100  thrpt   10    0.224 u00B1  0.006  ops\/msrn n   n nnn nt An element at a random position is differentn  n rnBenchmark                   (mode)  (size)   Mode  Cnt    Score    Error   UnitsrnrnHHH11032_Benchmark.testNew  random       2  thrpt   10  278.647 u00B1  3.813  ops\/msrnHHH11032_Benchmark.testNew  random       5  thrpt   10  137.615 u00B1  2.528  ops\/msrnHHH11032_Benchmark.testNew  random      10  thrpt   10   72.389 u00B1  4.548  ops\/msrnHHH11032_Benchmark.testNew  random      20  thrpt   10   38.398 u00B1  1.224  ops\/msrnHHH11032_Benchmark.testNew  random      50  thrpt   10   14.115 u00B1  1.850  ops\/msrnHHH11032_Benchmark.testNew  random     100  thrpt   10    6.146 u00B1  1.180  ops\/msrnrnHHH11032_Benchmark.testOld  random       2  thrpt   10  497.130 u00B1  3.263  ops\/msrnHHH11032_Benchmark.testOld  random       5  thrpt   10  127.096 u00B1  0.704  ops\/msrnHHH11032_Benchmark.testOld  random      10  thrpt   10   37.861 u00B1  0.511  ops\/msrnHHH11032_Benchmark.testOld  random      20  thrpt   10   10.433 u00B1  0.388  ops\/msrnHHH11032_Benchmark.testOld  random      50  thrpt   10    1.775 u00B1  0.035  ops\/msrnHHH11032_Benchmark.testOld  random     100  thrpt   10    0.443 u00B1  0.019  ops\/msrn n   n nnn nt The bags have the same contentn  n rnBenchmark                   (mode)  (size)   Mode  Cnt    Score    Error   UnitsrnrnHHH11032_Benchmark.testNew    same       2  thrpt   10  307.966 u00B1 44.114  ops\/msrnHHH11032_Benchmark.testNew    same       5  thrpt   10  136.391 u00B1  8.138  ops\/msrnHHH11032_Benchmark.testNew    same      10  thrpt   10   59.131 u00B1  6.298  ops\/msrnHHH11032_Benchmark.testNew    same      20  thrpt   10   27.064 u00B1  4.161  ops\/msrnHHH11032_Benchmark.testNew    same      50  thrpt   10   10.694 u00B1  0.453  ops\/msrnHHH11032_Benchmark.testNew    same     100  thrpt   10    5.150 u00B1  0.166  ops\/msrnrnHHH11032_Benchmark.testOld    same       2  thrpt   10  461.776 u00B1 25.431  ops\/msrnHHH11032_Benchmark.testOld    same       5  thrpt   10   88.911 u00B1  4.896  ops\/msrnHHH11032_Benchmark.testOld    same      10  thrpt   10   22.991 u00B1  0.236  ops\/msrnHHH11032_Benchmark.testOld    same      20  thrpt   10    5.770 u00B1  0.043  ops\/msrnHHH11032_Benchmark.testOld    same      50  thrpt   10    0.919 u00B1  0.004  ops\/msrnHHH11032_Benchmark.testOld    same     100  thrpt   10    0.230 u00B1  0.002  ops\/msrn n   n nnn The first two cases represent the best \/ worse cases for the old algorithm and the last two are more representative of the 'real world' scenarios. For bags of 5 or more elements the new algorithm performs better. Apart from benchmarking, the difference in performance for small bags won't be noticeable, while for bags with hundreds of elements is significant. nn I did modify  Filip Nguyen  code sightly (mostly formatting) so that I can be merged right away &#8211;  https:\/\/github.com\/barreiro\/hibernate-orm\/commits\/HHH-11032                 n        n    n"}]}},{"OGM-1142":{"info":{"issue_title":"Upgrade Neo4j to 3.0.4","issue_key":"OGM-1142","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0.Alpha1","issue_labels":"5.1.0.Alpha1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1142?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1141":{"info":{"issue_title":"Upgrade MongoDB driver to 3.3.0 and MongoDB to 3.2.8","issue_key":"OGM-1141","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.2.Final,                                            5.1.0.Alpha1","issue_labels":"5.0.2.Final,                                            5.1.0.Alpha1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1141?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1140":{"info":{"issue_title":"Upgrade Ehcache to 2.6.11","issue_key":"OGM-1140","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0.Alpha1","issue_labels":"5.1.0.Alpha1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1140?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1138":{"info":{"issue_title":"Reorganize the version properties of the bom for more clarity","issue_key":"OGM-1138","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0.Alpha1","issue_labels":"5.1.0.Alpha1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1138?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1137":{"info":{"issue_title":"Upgrade Lettuce to 4.2.1.Final","issue_key":"OGM-1137","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0.Alpha1","issue_labels":"5.1.0.Alpha1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1137?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-82430","commnet_date":"2016-08-11T02:12:08-0700","commnet_user":"Mark Paluch","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Mark Paluchn added a comment  - 11\/Aug\/2016 02:12 AM    n        n        Hint: I scheduled Lettuce 4.2.2 for Aug, 19 n    n    n        n            Show  n            n                        n    n    n    n                nn       Mark Paluchn added a comment  - 11\/Aug\/2016 02:12 AM                      Hint: I scheduled  Lettuce 4.2.2  for Aug, 19              n        n    n"}]}},{"OGM-1134":{"info":{"issue_title":"Use https for links to docs.jboss.org","issue_key":"OGM-1134","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0.Alpha1","issue_labels":"5.1.0.Alpha1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1134?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1133":{"info":{"issue_title":"Update Cassandra driver to 3.1.0","issue_key":"OGM-1133","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0.Alpha1","issue_labels":"5.1.0.Alpha1","issue_description":"When we upgraded the Cassandra driver to 3.0.2, our test suite became really slower due to the time spent in establishing the connection to the Cassandra cluster.  We did mitigate the issue in a few other commits but it did not solve the root of the problem.  Updating to the version 3.1.0 of the driver seem to fix the issue.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1133?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1132":{"info":{"issue_title":"Document that we only support ordinal parameters for Cassandra native queries for now","issue_key":"OGM-1132","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.2.Final,                                            5.1.0.Alpha1","issue_labels":"5.0.2.Final,                                            5.1.0.Alpha1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1132?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11027":{"info":{"issue_title":"Document the PASS_DISTINCT_THROUGH Query Hint","issue_key":"HHH-11027","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.2.2","issue_component":"5.2.2","issue_labels":"5.2.2","issue_description":"The latest User Guide version does not include this Query Hint, so we need to address this.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11027?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11019":{"info":{"issue_title":"Extend DelayedPostInsertIdentifier support to include checks for FlushMode (EXTENDED PC)","issue_key":"HHH-11019","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6.0.0.Alpha1","issue_labels":"6.0.0.Alpha1","issue_description":"Today Hibernate does not actually \"understand\" even what an EXTENDED PC is... WF\/Jipijapa handles that and converts it into Hibernate's terms.  PersistenceContextType really boils down to 2 things for Hibernate...\r\n 1) what is the Session FlushMode\r\n 2) should I automatically close the Session after transaction completion  An EXTENDED PC, to Hibernate, would behave like:  \tFlushMode#MANUAL \tfalse (do not automatically close)    I think the most appropriate solution is to simply add a FlushMode check in AbstractSaveEventListener#performSaveOrReplicate when deciding shouldDelayIdentityInserts.  Specifically, any FlushMode \"less than\" AUTO should delay the IDENTITY inserts if possible.  Something like:     boolean  shouldDelayIdentityInserts = !requiresImmediateIdAccess &amp;&amp; ( !inTxn || source.getHibernateFlushMode().lessThan( AUTO ) );","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11019?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-82153","commnet_date":"2016-08-03T12:38:43-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 03\/Aug\/2016 12:38 PM    n        n        Based on my proposed changes (PR), I temporarily added the following #main:nnrnt\/**rnt * Here just to temporarily and easily show the outcomes rnt *\/rntpublic  static  void main(String ... args) {rntt<span class=\"code-object\">System<\/span>.out.println( <span class=\"code-quote\">\"requiresImmediateIdAccess = <span class=\"code-keyword\">false<\/span> ...\"<\/span> );rnttdecide( <span class=\"code-keyword\">false<\/span>, <span class=\"code-keyword\">true<\/span>, MANUAL );rnttdecide( <span class=\"code-keyword\">false<\/span>, <span class=\"code-keyword\">false<\/span>, MANUAL );rnttdecide( <span class=\"code-keyword\">false<\/span>, <span class=\"code-keyword\">true<\/span>, AUTO );rnttdecide( <span class=\"code-keyword\">false<\/span>, <span class=\"code-keyword\">false<\/span>, AUTO );rnttdecide( <span class=\"code-keyword\">false<\/span>, <span class=\"code-keyword\">true<\/span>, ALWAYS );rnttdecide( <span class=\"code-keyword\">false<\/span>, <span class=\"code-keyword\">false<\/span>, ALWAYS );rnrntt<span class=\"code-object\">System<\/span>.out.println( <span class=\"code-quote\">\"requiresImmediateIdAccess = <span class=\"code-keyword\">true<\/span> ...\"<\/span> );rnttdecide( <span class=\"code-keyword\">true<\/span>, <span class=\"code-keyword\">true<\/span>, MANUAL );rnttdecide( <span class=\"code-keyword\">true<\/span>, <span class=\"code-keyword\">false<\/span>, MANUAL );rnttdecide( <span class=\"code-keyword\">true<\/span>, <span class=\"code-keyword\">true<\/span>, AUTO );rnttdecide( <span class=\"code-keyword\">true<\/span>, <span class=\"code-keyword\">false<\/span>, AUTO );rnttdecide( <span class=\"code-keyword\">true<\/span>, <span class=\"code-keyword\">true<\/span>, ALWAYS );rnttdecide( <span class=\"code-keyword\">true<\/span>, <span class=\"code-keyword\">false<\/span>, ALWAYS );rnt}rnrntprivate  static  void decide(boolean  requiresImmediateIdAccess, boolean  inTxn, FlushMode flushMode) {rntt<span class=\"code-comment\">\/\/ `requiresImmediateIdAccess` indicates whether the calling context requires access to thern<\/span>tt<span class=\"code-comment\">\/\/ real identifier value immediately upon <span class=\"code-keyword\">return<\/span> from <span class=\"code-keyword\">this<\/span> call.  E.g., a method call likern<\/span>tt<span class=\"code-comment\">\/\/ Session#save requires immediate access to the real id (because it is defined to <span class=\"code-keyword\">return<\/span> thatrn<\/span>tt<span class=\"code-comment\">\/\/ as its <span class=\"code-keyword\">return<\/span> value), whereas a method like EntityManager#persist does notrn<\/span>rntt<span class=\"code-comment\">\/\/ `inTxn` - indicates whether we are currently in a transactionrn<\/span>rntt<span class=\"code-comment\">\/\/ `flushMode` represents the Session FlushMode, <span class=\"code-keyword\">for<\/span> an <span class=\"code-quote\">\"EXTENDED PC\"<\/span> <span class=\"code-keyword\">this<\/span> would be MANUALrn<\/span>rntt<span class=\"code-comment\">\/\/ the outcomern<\/span>tt<span class=\"code-object\">boolean<\/span> shouldDelayIdentityInserts = shouldDelayIdentityInserts( requiresImmediateIdAccess, inTxn, flushMode );rntt<span class=\"code-object\">System<\/span>.out.printf(rntttt<span class=\"code-quote\">\"shouldDelayIdentityInserts (requiresImmediateIdAccess=%s, inTxn=%s, flushMode=%s) = %s\"<\/span>,rnttttrequiresImmediateIdAccess,rnttttinTxn,rnttttflushMode.name(),rnttttshouldDelayIdentityInsertsrntt);rntt<span class=\"code-object\">System<\/span>.out.println();rnt}rnnnnwhich produces the following output:nnrequiresImmediateIdAccess=false ...rnshouldDelayIdentityInserts (requiresImmediateIdAccess=false, inTxn=true, flushMode=MANUAL) = truernshouldDelayIdentityInserts (requiresImmediateIdAccess=false, inTxn=false, flushMode=MANUAL) = truernshouldDelayIdentityInserts (requiresImmediateIdAccess=false, inTxn=true, flushMode=AUTO) = falsernshouldDelayIdentityInserts (requiresImmediateIdAccess=false, inTxn=false, flushMode=AUTO) = truernshouldDelayIdentityInserts (requiresImmediateIdAccess=false, inTxn=true, flushMode=ALWAYS) = falsernshouldDelayIdentityInserts (requiresImmediateIdAccess=false, inTxn=false, flushMode=ALWAYS) = truernrequiresImmediateIdAccess=true ...rnshouldDelayIdentityInserts (requiresImmediateIdAccess=true, inTxn=true, flushMode=MANUAL) = falsernshouldDelayIdentityInserts (requiresImmediateIdAccess=true, inTxn=false, flushMode=MANUAL) = falsernshouldDelayIdentityInserts (requiresImmediateIdAccess=true, inTxn=true, flushMode=AUTO) = falsernshouldDelayIdentityInserts (requiresImmediateIdAccess=true, inTxn=false, flushMode=AUTO) = falsernshouldDelayIdentityInserts (requiresImmediateIdAccess=true, inTxn=true, flushMode=ALWAYS) = falsernshouldDelayIdentityInserts (requiresImmediateIdAccess=true, inTxn=false, flushMode=ALWAYS) = falsernnnnWhich all seem like correct resolutions for shouldDelayIdentityInserts. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 03\/Aug\/2016 12:38 PM                      Based on my proposed changes (PR), I temporarily added the following  #main : n  n rnt\/**rnt * Here just to temporarily and easily show the outcomes rnt *\/rnt public   static  void main( String ... args) {rntt System .out.println(  \"requiresImmediateIdAccess =  false  ...\"  );rnttdecide(  false ,  true , MANUAL );rnttdecide(  false ,  false , MANUAL );rnttdecide(  false ,  true , AUTO );rnttdecide(  false ,  false , AUTO );rnttdecide(  false ,  true , ALWAYS );rnttdecide(  false ,  false , ALWAYS );rnrntt System .out.println(  \"requiresImmediateIdAccess =  true  ...\"  );rnttdecide(  true ,  true , MANUAL );rnttdecide(  true ,  false , MANUAL );rnttdecide(  true ,  true , AUTO );rnttdecide(  true ,  false , AUTO );rnttdecide(  true ,  true , ALWAYS );rnttdecide(  true ,  false , ALWAYS );rnt}rnrnt private   static  void decide( boolean  requiresImmediateIdAccess,  boolean  inTxn, FlushMode flushMode) {rntt \/\/ `requiresImmediateIdAccess` indicates whether the calling context requires access to thern tt \/\/ real identifier value immediately upon  return  from  this  call.  E.g., a method call likern tt \/\/ Session#save requires immediate access to the real id (because it is defined to  return  thatrn tt \/\/ as its  return  value), whereas a method like EntityManager#persist does notrn rntt \/\/ `inTxn` - indicates whether we are currently in a transactionrn rntt \/\/ `flushMode` represents the Session FlushMode,  for  an  \"EXTENDED PC\"   this  would be MANUALrn rntt \/\/ the outcomern tt boolean  shouldDelayIdentityInserts = shouldDelayIdentityInserts( requiresImmediateIdAccess, inTxn, flushMode );rntt System .out.printf(rntttt \"shouldDelayIdentityInserts (requiresImmediateIdAccess=%s, inTxn=%s, flushMode=%s) = %s\" ,rnttttrequiresImmediateIdAccess,rnttttinTxn,rnttttflushMode.name(),rnttttshouldDelayIdentityInsertsrntt);rntt System .out.println();rnt}rn n  nn which produces the following output: n  n requiresImmediateIdAccess=false ...rnshouldDelayIdentityInserts (requiresImmediateIdAccess=false, inTxn=true, flushMode=MANUAL) = truernshouldDelayIdentityInserts (requiresImmediateIdAccess=false, inTxn=false, flushMode=MANUAL) = truernshouldDelayIdentityInserts (requiresImmediateIdAccess=false, inTxn=true, flushMode=AUTO) = falsernshouldDelayIdentityInserts (requiresImmediateIdAccess=false, inTxn=false, flushMode=AUTO) = truernshouldDelayIdentityInserts (requiresImmediateIdAccess=false, inTxn=true, flushMode=ALWAYS) = falsernshouldDelayIdentityInserts (requiresImmediateIdAccess=false, inTxn=false, flushMode=ALWAYS) = truernrequiresImmediateIdAccess=true ...rnshouldDelayIdentityInserts (requiresImmediateIdAccess=true, inTxn=true, flushMode=MANUAL) = falsernshouldDelayIdentityInserts (requiresImmediateIdAccess=true, inTxn=false, flushMode=MANUAL) = falsernshouldDelayIdentityInserts (requiresImmediateIdAccess=true, inTxn=true, flushMode=AUTO) = falsernshouldDelayIdentityInserts (requiresImmediateIdAccess=true, inTxn=false, flushMode=AUTO) = falsernshouldDelayIdentityInserts (requiresImmediateIdAccess=true, inTxn=true, flushMode=ALWAYS) = falsernshouldDelayIdentityInserts (requiresImmediateIdAccess=true, inTxn=false, flushMode=ALWAYS) = falsern n  nn Which all seem like correct resolutions for  shouldDelayIdentityInserts .              n        n    n"},{"commnet_id":"comment-82154","commnet_date":"2016-08-03T12:45:08-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 03\/Aug\/2016 12:45 PM    n        n        Scott Marlow I do not know how exactly WF implements EXTENDED PC support specific to each underlying provider.  But I am just saying that Hibernate ORM does not even understand the idea of an EXTENDED PC; it just understands that its PC (Session) has been set to a certain FlushMode and that it has been set to autoClose or not.nnThis Jira is about extending support for delaying IDENTITY insertions to cases where we recognize that the Session FlushMode is set to MANUAL (or COMMIT).  That would happen to catch cases where some container (WF e.g.) implementing EXTENDED PC support via delegation to Hibernate. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 03\/Aug\/2016 12:45 PM                       Scott Marlow  I do not know how exactly WF implements EXTENDED PC support specific to each underlying provider.  But I am just saying that Hibernate ORM does not even understand the idea of an EXTENDED PC; it just understands that its PC (Session) has been set to a certain FlushMode and that it has been set to autoClose or not. nn This Jira is about extending support for delaying IDENTITY insertions to cases where we recognize that the Session FlushMode is set to MANUAL (or COMMIT).  That would happen to catch cases where some container (WF e.g.) implementing EXTENDED PC support via delegation to Hibernate.              n        n    n"},{"commnet_id":"comment-82155","commnet_date":"2016-08-03T14:09:07-0700","commnet_user":"Scott Marlow","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Scott Marlown added a comment  - 03\/Aug\/2016 14:09 PM     - edited  n        n        Does WF need to do anything to take advantage of this jira? n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Scott Marlown added a comment  - 03\/Aug\/2016 14:09 PM     - edited                    Does WF need to do anything to take advantage of this jira?              n        n    n"},{"commnet_id":"comment-82163","commnet_date":"2016-08-04T01:56:04-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 04\/Aug\/2016 01:56 AM    n        n        Scott Marlow This is a Hibernate-internal optimization related to delaying the insert for entities that use the IDENTITY generators. Wildfly will benefit from this enhancement automatically, and I don't think you should change anything. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 04\/Aug\/2016 01:56 AM                       Scott Marlow  This is a Hibernate-internal optimization related to delaying the insert for entities that use the IDENTITY generators. Wildfly will benefit from this enhancement automatically, and I don't think you should change anything.              n        n    n"},{"commnet_id":"comment-82240","commnet_date":"2016-08-09T01:29:30-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 09\/Aug\/2016 01:29 AM    n        n        Hi Steve Ebersole,nnI committed the tests. I wonder why do we want to fix this in 6.0? I think we can fix it in 5.2.3.  n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 09\/Aug\/2016 01:29 AM                      Hi  Steve Ebersole , nn I committed  the tests . I wonder why do we want to fix this in 6.0? I think we can fix it in 5.2.3.               n        n    n"}]}},{"HSEARCH-2318":{"info":{"issue_title":"Improve error messages on BytemanHelper","issue_key":"HSEARCH-2318","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta2","issue_labels":"5.6.0.Beta2","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2318?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11017":{"info":{"issue_title":"Migrate Integration Guide to AsciiDoctor","issue_key":"HHH-11017","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.2.1","issue_component":"5.2.1","issue_labels":"5.2.1","issue_description":"Currently, the only DocBook documentation that needs to be ported to AsciiDoctor is the Integration Guide. After this migration, we can remove all the DocBook rendering and speed up documentation Gradle tasks.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11017?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-82137","commnet_date":"2016-08-03T03:54:11-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Vlad Mihalcean added a comment  - 03\/Aug\/2016 03:54 AM     - edited  n        n        Got rid of any DocBook processing. Gail Badner, let me know if you want to apply this change on 5.1 and 5.0 too. n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Vlad Mihalcean added a comment  - 03\/Aug\/2016 03:54 AM     - edited                    Got rid of any DocBook processing.  Gail Badner , let me know if you want to apply this change on 5.1 and 5.0 too.              n        n    n"}]}},{"HHH-11014":{"info":{"issue_title":"Switch to native identifier strategy even when using the new identifier generators","issue_key":"HHH-11014","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.2.1","issue_component":"5.2.1","issue_labels":"5.2.1","issue_description":"Currently, if the hibernate.id.new_generator_mappings is set to false, @GeneratedValue(strategy = GenerationType.AUTO) is mapped to native. If this property is true (which is the deafult value in 5.x), the @GeneratedValue(strategy = GenerationType.AUTO) is always mapped to SequenceStyleGenerator.  For this reason, on any database that does not support sequences natively (e.g. MySQL) we are going to use the TABLE generator instead of IDENTITY.  However, TABLE generator, although more portable, uses a separate transaction every time a value is being fetched from the database. In fact, even if the IDENTITY disables JDBC batch updates and the TABLE generator uses the pooled optimizer, the IDENTITY still scales better.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11014?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11008":{"info":{"issue_title":"Remove the necessity to manually map the IndexColumn\/OrderColumn property in reference entity.","issue_key":"HHH-11008","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"5.2.1","issue_component":"5.2.1","issue_labels":"5.2.1","issue_description":"When using an @IndexColumn or @OrderColumn on a @OneToMany relation, it's crucial that an additional property be manually added to the referenced entity model to hold the index\/order column value.    It seems reasonable to think that this field could be added implicitly by Envers such that we could reduce the following mapping:    \/\/ EntityA   @OneToMany  @JoinColumn(name = \"other_id\" )  @OrderColumn(name = \"position\" )  @AuditMappedBy(mappedBy=\"other\" , positionMappedBy=\"position\" )  \/\/ EntityB   @Column(name = \"position\" , insertable = false , updatable = false )  private  Integer  position;  @ManyToOne  @JoinColumn(name = \"other_id\" )    to    \/\/ EntityA   @OneToMany  @JoinColumn(name = \"other_id\" )  @OrderColumn  @AuditMappedBy(mappedBy=\"other\" )  \/\/ EntityB   @ManyToOne  @JoinColumn(name = \"other_id\" )","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11008?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11007":{"info":{"issue_title":"The distributed modules for WildFly are missing Hibernate Envers test case support.","issue_key":"HHH-11007","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.3","issue_labels":"5.2.3","issue_description":"We should probably package this as well, as pointed out in the comments on http:\/\/in.relation.to\/2016\/07\/07\/updating-hibernate-orm-in-wildfly\/","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11007?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-81853","commnet_date":"2016-07-29T16:21:35-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 29\/Jul\/2016 16:21 PM    n        n        Sanne Grinovero, which version(s) does this affect? n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 29\/Jul\/2016 16:21 PM                       Sanne Grinovero , which version(s) does this affect?              n        n    n"},{"commnet_id":"comment-81931","commnet_date":"2016-08-01T02:41:58-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 01\/Aug\/2016 02:41 AM    n        n        Gail Badner I'm inclined to consider this as a request for enhancement, so I wouldn't consider this to affect any specific version.nnWe didn't include Envers in the modules zip file which is being released since version 5.2.1 of Hibernate ORM. You want me to state it's affecting 5.2.1 ? Such modules didn't exist at all before 5.2.1. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 01\/Aug\/2016 02:41 AM                       Gail Badner  I'm inclined to consider this as a request for enhancement, so I wouldn't consider this to affect any specific version. nn We didn't include Envers in the modules zip file which is being released since version 5.2.1 of Hibernate ORM. You want me to state it's affecting 5.2.1 ? Such modules didn't exist at all before 5.2.1.              n        n    n"}]}},{"HHH-11002":{"info":{"issue_title":"Add documentation section about Filter and FilterDef","issue_key":"HHH-11002","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.1.0 ,                                            5.0.9 ,                                            5.2.1","issue_component":"5.1.0 ,                                            5.0.9 ,                                            5.2.1","issue_labels":"5.1.0","issue_description":"Looks like we are missing the Filer and FilterDef section in the new User Guide.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11002?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-11000":{"info":{"issue_title":"Fix the port stealing issue between Arquillian and NVidia Windows driver","issue_key":"HHH-11000","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.2.2","issue_component":"5.2.2","issue_labels":"5.2.2","issue_description":"Nvidia Network service is using the same port (e.g. 9990) that Arquillian is using for management. This issue can be replicated when running the hibernate-orm-modules tests on Windows.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-11000?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-81735","commnet_date":"2016-07-27T07:59:21-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 27\/Jul\/2016 07:59 AM    n        n        Add a port allocation offset of 137, because 10127 should not be allocated to any protocol. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 27\/Jul\/2016 07:59 AM                      Add a port allocation offset of 137, because 10127 should not be allocated to any protocol.              n        n    n"}]}},{"HHH-10999":{"info":{"issue_title":"Arrays datatype support via java.sql.Array","issue_key":"HHH-10999","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.2.0","issue_component":"5.2.0","issue_labels":"5.2.0","issue_description":"I am working on the issue and have some promising results so far with single-dimensional arrays and no changes to the core. It comes as a new component.  It's nearly ready for submission, but I need to test more data types, and also test it on HyperSQL, which seems to be the only other database that supports them. H2 supports arrays as well, but requires that we use PreparedStatement.setObject, instead of Connection.createArrayOf and PreparedStatement.setArray.  Random-dimensional arrays would require core changes.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10999?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84644","commnet_date":"2016-09-30T01:04:46-0700","commnet_user":"Christian Beikov","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Christian Beikovn added a comment  - 30\/Sep\/2016 01:04 AM    n        n        Looks great. I am looking forward to see this merged into the core! Maybe you could also implement some kind of \"emulation\" for DBs that don't support arrays natively? I was thinking about using XML or JSON types of those DBs as storage types. Especially XML has good support wrt. aggregation and unnesting which is rather important when having arrays. n    n    n        n            Show  n            n                        n    n    n    n                nn       Christian Beikovn added a comment  - 30\/Sep\/2016 01:04 AM                      Looks great. I am looking forward to see this merged into the core! Maybe you could also implement some kind of \"emulation\" for DBs that don't support arrays natively? I was thinking about using XML or JSON types of those DBs as storage types. Especially XML has good support wrt. aggregation and unnesting which is rather important when having arrays.              n        n    n"},{"commnet_id":"comment-84704","commnet_date":"2016-09-30T07:45:19-0700","commnet_user":"Jordan","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Jordann added a comment  - 30\/Sep\/2016 07:45 AM    n        n        Emulation would be easiest with JSON types, however there is no interface to distinguish between printing\/reading a type as a JSON string or XML string. StringRepresentableType is too ambiguous in which way it's supposed to be used, and it can't be relied on for either as it's currently implemented.\r\nnAnd there is currently no method of passing persistence-context-specific property values to the type contributor, so controlling that choice through a setting would be impossible while it's a standalone plugin.nnHowever, emulation would imply using `setString`, rather than `setArray` and not using any part of this as it is with the current PR.nnI'll post an update to the PR detailing what I think needs more work, so as not to lose track. n    n    n        n            Show  n            n                        n    n    n    n                nn       Jordann added a comment  - 30\/Sep\/2016 07:45 AM                      Emulation would be easiest with JSON types, however there is no interface to distinguish between printing\/reading a type as a JSON string or XML string. StringRepresentableType is too ambiguous in which way it's supposed to be used, and it can't be relied on for either as it's currently implemented. nAnd there is currently no method of passing persistence-context-specific property values to the type contributor, so controlling that choice through a setting would be impossible while it's a standalone plugin. nn However, emulation would imply using `setString`, rather than `setArray` and not using any part of this as it is with the current PR. nn I'll post an update to the PR detailing what I think needs more work, so as not to lose track.              n        n    n"}]}},{"HHH-10996":{"info":{"issue_title":"The cleanupTestData utility has issues with link tables","issue_key":"HHH-10996","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.2.1","issue_component":"5.2.1","issue_labels":"5.2.1","issue_description":"Because of HHH-5529, the current cleanupTestData utility does not work when the entity in question have any associations that use link tables (e.g. @ElementCollection, unidirectional @OneToMany, etc).  However, when removing each element using the Session, the link tables are cleared properly.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10996?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-81732","commnet_date":"2016-07-27T06:14:55-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 27\/Jul\/2016 06:14 AM    n        n        Fixed and tested. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 27\/Jul\/2016 06:14 AM                      Fixed and tested.              n        n    n"}]}},{"HHH-10995":{"info":{"issue_title":"Improve Firebird (2.5\/3.0) dialect support","issue_key":"HHH-10995","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"hibernate-core","issue_description":"Firebird 2.5 and 3.0 added features that are currently not supported by the org.hibernate.dialect.FirebirdDialect  I am willing to spend time to define a Firebird25Dialect and a Firebird30Dialect","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10995?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1128":{"info":{"issue_title":"Upgrade to Infinispan 8.2.3.Final","issue_key":"OGM-1128","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0.Alpha1","issue_labels":"5.1.0.Alpha1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1128?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10992":{"info":{"issue_title":"Add support for module\/system\/domain-specific managed entity models for Hibernate Integrators.","issue_key":"HHH-10992","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6.0.0.Alpha1","issue_labels":"6.0.0.Alpha1","issue_description":"It has become evident with integrations with Hibernate Search and Hibernate Envers that there are domain specific entity models that ideally would be useful to be module\/system\/domain -scoped to these integrations rather than be exposing them as a part of the user-scoped domain model.  A few ideas of brainstorming are:  For example, providing an @Hidden annotation that allows an entity model to be identified as something which isn't part of the user-scoped domain model.  There are other alternatives for providing mappings such as JAXB or manually providing the mapping model to Hibernate in which we'd need to add support for these new system-scoped models.  For cases where the class may not be on the Hibernate ClassLoader, such as WildFly, we'd also need to provide a way for the class to be provided to Hibernate directly.  And lastly, we'd need to provide a way for these module\/system\/domain -scoped models to be queryable by their respective domains at runtime, while protecting them from normal user queries.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10992?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10984":{"info":{"issue_title":"Have multiLoad not return (unflushed) DELETED entities","issue_key":"HHH-10984","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.2.1","issue_component":"5.2.1","issue_labels":"5.2.1","issue_description":"The crux of the initial report was to say that locally deleted entities (an entity that has been passed to Session#delete, but not yet flushed) should not be returned.   It turns out that really this user wants the behavior of Session#get, while multiLoad was initially designed to operate like Session#load.  I can see 3 distinct behaviors that we may want to expose:  \tthe plural form of Session#load\/IdentifierLoadAccess#getReference - maybe #getReferences? \tthe plural form of Session#get\/IdentifierLoadAccess#load - maybe #loadEntities? \ta hybrid form where: \t \t\t \t \t    So we will offer both semantics via distinct methods:  \tMultiIdentifierLoadAccess#multiLoad - will work      Initially multipleLoad behaved more like Session#load\/IdentifierLoadAccess#getReference, meaning:  \tproxies could be created for return \tentities that are in DELETED (deleted, but not yet flushed) would be returned.    The request here specifically is to make sure that the second point does not happen.   Original report   When using session.byMulipleIds(SimpleEntity.class).multipleLoad(ids); I got a few problems.  1. multiLoad 's sessionCheckingEnabled option default value should be true.  If one of ids which managed entity by session should not be included in multiLoad query's 'in' condition.      SimpleEntity third = session.byId( SimpleEntity.class ).load( 3 );  List&lt;SimpleEntity&gt; list = session.byMultipleIds(SimpleEntity.class)                                      .multiLoad( Arrays.asList(1 , 2 , 3 ));  assertEquals( 3, list.size() );      id \"3\" is already loaded in session that i expect query include only another ids  \"2\", \"3\" ; like session.byId(SimpleEntity.class).load(1);\r\n But default value of sessionCheckingEnable is false that query include all ids even \"1\".\r\n It is more efficient i think.  If some of one wants to execute query include all ids like REFRESH it would be better.\r\n session.byMultipleIds(SimpleEntity.class).enableSessionCheck(false).multiLoad( Arrays.asList(1 , 2 , 3 );  I fixed it in this Pull-Request commit\r\n https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1489\/commits\/2bed426a82c6db4551e96b5fe5a23e3284ca6bfd   2. Fix in multiLoad bugs with non flushed entities both side of sessionCheckingEnable true and false  When sessionCheckingEnabled is true, DynamicBatchingEntityLoaderBuilder will check if some of ids are managed entities from session then they will exclude for query.\r\n But, below test will be failed.      @Test  public  void testBasicMultiLoadWithManagedButRemovedAndChecking() {  \tSession session = openSession();  \tsession.getTransaction().begin();  \tSimpleEntity third = session.byId( SimpleEntity.class ).load( 3 );  \tsession.remove(third);  \tList&lt;SimpleEntity&gt; list = session.byMultipleIds(SimpleEntity.class).enableSessionCheck(true )                         .multiLoad( ids(56) );  \t\/\/ removed entity excluded in results   \tassertEquals( 55, list.size() );  \tsession.getTransaction().commit();  \tsession.close();  }      removed but non flushed entity will be founded by \r\n DynamicBatchingEntityLoaderBuilder that it will be excluded in query but included in results.\r\n I think it is a kind of bug. removed and non flushed entity should be excluded query and results.\r\n So DynamicBatchingEntityLoaderBuilder need to check if managedEntity marked DELETED or GONE.  When sessionCheckingEnabled is false, DynamicBatchingEntityLoaderBuilder should flush non flushed entity queries for consistence query results like executing HQL. (depends on FlushMode)\r\n Below test will be failed.       @Test  public  void testBasicMultiLoadWithNonFlushedAndNoChecking() {  \tSession session = openSession();  \tsession.getTransaction().begin();  \tsession.save( new  SimpleEntity( 100, \"Entity #\"  + 100 ) );  \tInteger [] ids = { 1, 2, 3, 100 };  \tList&lt;SimpleEntity&gt; list = session.byMultipleIds(SimpleEntity.class).enableSessionCheck(false )                        .multiLoad( ids );  \t\/\/ should include saved(non-flushed) entities in results depends on FlushMode   \tassertEquals( 4, list.size() );  \tsession.getTransaction().commit();  \tsession.close();  }      ids \"1\", \"2\", \"3\" are persisted but non managed entities, and id \"100\" saved before executing mulgiLoad(). id \"100\" of entity is managed in session but non flushed.\r\n When executing multiLoad() then results size is only 3 exclude \"100\". It is weird result with AutoFlush mode. If i use HQL query session will flush before executing query then result will correct.\r\n As a result, I think if sessionCheckingEnabled is false session flushed before executing multiLoad().  I fixed it in Pull-Request commit\r\n https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1489\/commits\/3d671af35fc65e0182b498a3520f6eb8aa125beb  3. Enhance multiLoad test case  When sessionCheckingEnabled is true that managed entities put in first position of results.\r\n But current both of test case tested by first entity and assert with first position of results.\r\n Given entity for right test will be another position of entity  I fixed it in Pull-Request commit\r\n https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1489\/commits\/2745fc6017cd03d31377ef8e315087031c5ef23d  It would be nice, if either these things apply in hibernate-orm\r\n Thanks.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10984?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-81586","commnet_date":"2016-07-23T16:39:46-0700","commnet_user":"Myeonghyeon-Lee","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Myeonghyeon-Leen added a comment  - 23\/Jul\/2016 16:39 PM     - edited  n        n        @Steve Ebersole\r\nnOk I understand what you said \"working as designed\" \r\nnThank you for that full explanation.\r\nnI'll wait other guys opinion. nn1. assuming we want to support both, is that through separate methods? Or as an option? If an option, which is the default? nn-&gt; option is a alternative way to support it. \r\nnsession.byMultipleIds.synchronizationEnabled(true).multiLoad(ids);nnn n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Myeonghyeon-Leen added a comment  - 23\/Jul\/2016 16:39 PM     - edited                    @Steve Ebersole nOk I understand what you said \"working as designed\"  nThank you for that full explanation. nI'll wait other guys opinion.   nn 1. assuming we want to support both, is that through separate methods? Or as an option? If an option, which is the default?  nn -&gt; option is a alternative way to support it.  n session.byMultipleIds.synchronizationEnabled(true).multiLoad(ids);  nnn             n        n    n"},{"commnet_id":"comment-81631","commnet_date":"2016-07-25T04:45:02-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 25\/Jul\/2016 04:45 AM    n        n        The slight inconvenience is that Session#load means IdentifierLoadAccess#getReference (i.e get a proxy possibly) whereas Session#get means IdentifierLoadAccess#load (i.e get the object).nnBut aside from that naming inconvenience, I would align the behavior of multiLoad with IdentifierLoadAccess#load's behavior of not returning the deleted entity.\r\nnDo we need a method for both? Sanne Grinovero might have the use case better in mind, I don't see a good one. If we do, I'd vote for a separate method getReferences. n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 25\/Jul\/2016 04:45 AM                      The slight inconvenience is that  Session#load  means  IdentifierLoadAccess#getReference  (i.e get a proxy possibly) whereas  Session#get  means  IdentifierLoadAccess#load  (i.e get the object). nn But aside from that naming inconvenience, I would align the behavior of  multiLoad  with  IdentifierLoadAccess#load 's behavior of not returning the deleted entity. nDo we need a method for both?  Sanne Grinovero  might have the use case better in mind, I don't see a good one. If we do, I'd vote for a separate method  getReferences .              n        n    n"},{"commnet_id":"comment-81633","commnet_date":"2016-07-25T07:28:07-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 25\/Jul\/2016 07:28 AM    n        n        So that leaves an open question...  should multiLoad behave like completely like Session#get\/IdentifierLoadAccess#load (change in behavior)?  Or should it operate like Session#load\/IdentifierLoadAccess#getReference (which is what it does today), just filtering out DELETED results? n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 25\/Jul\/2016 07:28 AM                      So that leaves an open question...  should multiLoad behave like completely like  Session#get \/ IdentifierLoadAccess#load  (change in behavior)?  Or should it operate like  Session#load \/ IdentifierLoadAccess#getReference  (which is what it does today), just filtering out DELETED results?              n        n    n"},{"commnet_id":"comment-81646","commnet_date":"2016-07-25T19:14:03-0700","commnet_user":"Myeonghyeon-Lee","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Myeonghyeon-Leen added a comment  - 25\/Jul\/2016 19:14 PM    n        n        It is more clear what is the point to concern it. \r\nn(I got rejecting reason of sessionCheckingEnabled default value.)nnI expected filtering out DELETED results like IdentifierLoadAccess#load since method name.\r\nnI agree with separating method too. It would be more clear. n n    n    n        n            Show  n            n                        n    n    n    n                nn       Myeonghyeon-Leen added a comment  - 25\/Jul\/2016 19:14 PM                      It is more clear what is the point to concern it.  n(I got rejecting reason of sessionCheckingEnabled default value.) nn I expected filtering out DELETED results like IdentifierLoadAccess#load since method name. nI agree with separating method too. It would be more clear.   n             n        n    n"},{"commnet_id":"comment-81669","commnet_date":"2016-07-26T09:32:26-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 26\/Jul\/2016 09:32 AM    n        n        See the discussion on n    n                n        n            n            HHH-10617n        n                                                    Closed n             n n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 26\/Jul\/2016 09:32 AM                      See the discussion on n     n                 n         n             n            HHH-10617n         n                                                     Closed n             n              n        n    n"}]}},{"OGM-1124":{"info":{"issue_title":"Update doc server metadata on release","issue_key":"OGM-1124","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0.Alpha1","issue_labels":"5.1.0.Alpha1","issue_description":"When we release a new version, we need to:  \tpush the metadata and the outdated content JS to the doc before pushing it to the doc server \tupdate the \/stable\/ symlink if it is a new stable \tupdate the outdated content descriptor if it is a new stable","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1124?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10980":{"info":{"issue_title":"Implement CriteriaQueryImpl.toString()","issue_key":"HHH-10980","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"Some APM-Tools support monitoring of JPA queries.\r\n Some of them do this in a JPA-vendor-neutral way by using toString() to identify the CriteriaQuery.  Hibernate currently just gives e.g.:\r\n org.hibernate.jpa.ciretia.CriteriaQueryImpl@1b123asdf)  A nice string representation maybe of the JPQL string or string representations of all nodes in the Query-AST or something completely different would be nice.\r\n Not only for APM but also for debugging","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10980?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-82171","commnet_date":"2016-08-04T08:22:03-0700","commnet_user":"Emeric Vernat","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emeric Vernatn added a comment  - 04\/Aug\/2016 08:22 AM    n        n        Transforming a crtieria to a SQL String (without parameter values) seems possible in order to implement CriteriaQueryImpl.toString(). See for example:\r\nnhttp:\/\/stackoverflow.com\/questions\/554481\/how-to-get-sql-from-hibernate-criteria-api-not-for-loggingnnOtherwise transforming a criteria to a JPQL String seems also possible but probably requires more code.\r\nnFor Query-AST as String, I don't know. n    n    n        n            Show  n            n                        n    n    n    n                nn       Emeric Vernatn added a comment  - 04\/Aug\/2016 08:22 AM                      Transforming a crtieria to a SQL String (without parameter values) seems possible in order to implement CriteriaQueryImpl.toString(). See for example: n http:\/\/stackoverflow.com\/questions\/554481\/how-to-get-sql-from-hibernate-criteria-api-not-for-logging  nn Otherwise transforming a criteria to a JPQL String seems also possible but probably requires more code. nFor Query-AST as String, I don't know.              n        n    n"},{"commnet_id":"comment-85112","commnet_date":"2016-10-23T15:08:51-0700","commnet_user":"Emeric Vernat","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emeric Vernatn added a comment  - 23\/Oct\/2016 15:08 PM    n        n        This page may help:\r\nnhttps:\/\/antoniogoncalves.org\/2012\/05\/24\/how-to-get-the-jpqlsql-string-from-a-criteriaquery-in-jpa\/nnBut we still need a JPA-vendor-neutral way which implements toString() in org.hibernate.jpa.ciretia.CriteriaQueryImpl n    n    n        n            Show  n            n                        n    n    n    n                nn       Emeric Vernatn added a comment  - 23\/Oct\/2016 15:08 PM                      This page may help: n https:\/\/antoniogoncalves.org\/2012\/05\/24\/how-to-get-the-jpqlsql-string-from-a-criteriaquery-in-jpa\/  nn But we still need a JPA-vendor-neutral way which implements toString() in org.hibernate.jpa.ciretia.CriteriaQueryImpl              n        n    n"}]}},{"HSEARCH-2313":{"info":{"issue_title":"Drop the experimental flag of More Like This queries","issue_key":"HSEARCH-2313","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta4,                                            5.7.0.Beta1","issue_labels":"5.6.0.Beta4,                                            5.7.0.Beta1","issue_description":"Any reason it remains experimental except FUD?","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2313?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10975":{"info":{"issue_title":"Improve support for same table name differing schemas for audit tables.","issue_key":"HHH-10975","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.2.1","issue_component":"5.2.1","issue_labels":"5.2.1","issue_description":"It is sometimes a desired practice to place the Envers audit tables in a separate schema from the Hibernate entity model tables.    Such a setup can be easily realized by either providing the default_catalog_name or the default_schema_name configuration property for Envers.    The problem is when the user decides to eliminate the default tables for the audit table prefix and\/or suffix to force the Enver's schema table names to be identical to those in the main ORM schema.  Doing so causes a DuplicateMappingException to occur.  The work around solution to have the same table names in both schemas but differing entity registrations with ORM is a bit tedious and requires that the default prefix \/ suffix logic continue to be used (e.g. appending _AUD as a suffix), but then explicitly setting the audit table names on the entities using @AuditTable annotation.  It would be better if we could streamline this configuration so that we avoid the exception and simultaneously avoid having to be as explicit with the @AuditTable usage.  See http:\/\/stackoverflow.com\/a\/38386021\/1572269 for details.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10975?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2312":{"info":{"issue_title":"Do not require the lucene-backward-codecs dependency","issue_key":"HSEARCH-2312","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta2","issue_labels":"5.6.0.Beta2","issue_description":"There is no reason to mandate the lucene-backward-codecs dependency.  We do package it as a private dependency in the JBoss Modules, as otherwise it would be hard to let Lucene load it from users classpath but we don't need it as a dependency of the hibernate-search-engine Maven artifact.  I could flag it as \"optional\" but since we don't need it at compile time either - which is the purpose of the optional flag - I'll just remove the dependency.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2312?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10972":{"info":{"issue_title":"Use UTF-8 charset for reading files for initializing the database (javax.persistence.sql-load-script-source scripts)","issue_key":"HHH-10972","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.1.0 ,                                            5.0.9 ,                                            5.2.1","issue_component":"5.1.0 ,                                            5.0.9 ,                                            5.2.1","issue_labels":"5.1.0","issue_description":"One of the WildFly users reports in this forum thread https:\/\/developer.jboss.org\/thread\/271498 that the application runs into an issue trying to populate data in a database via the database initialization scripts configured via javax.persistence.sql-load-script-source property, for UTF-8 charset content.  Reading the JPA spec, there's no specific mention of what encoding is expected\/supported for such files, so I don't think this is a bug, but I think supporting UTF-8 (apparently the JPA provider in GlassFish does) for such files would make sense.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10972?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-81351","commnet_date":"2016-07-20T00:47:42-0700","commnet_user":"jaikiran","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       jaikirann added a comment  - 20\/Jul\/2016 00:47 AM    n        n        Sent a pull request https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1486 n    n    n        n            Show  n            n                        n    n    n    n                nn       jaikirann added a comment  - 20\/Jul\/2016 00:47 AM                      Sent a pull request  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1486               n        n    n"},{"commnet_id":"comment-81538","commnet_date":"2016-07-21T06:18:09-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 21\/Jul\/2016 06:18 AM    n        n        We have discussed this internally, and we should add a configuration property which tells the encoding of the underlying script files. In the absence of such setting, the default JVM setting will be used. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 21\/Jul\/2016 06:18 AM                      We have discussed this internally, and we should add a configuration property which tells the encoding of the underlying script files. In the absence of such setting, the default JVM setting will be used.              n        n    n"},{"commnet_id":"comment-84085","commnet_date":"2016-09-15T02:32:18-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 15\/Sep\/2016 02:32 AM    n        n        Gail Badner, you might be interested in this issue for 5.0 and 5.1 n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 15\/Sep\/2016 02:32 AM                       Gail Badner , you might be interested in this issue for 5.0 and 5.1              n        n    n"}]}},{"HHH-10971":{"info":{"issue_title":"Document flush operation order","issue_key":"HHH-10971","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.10,                                            5.2.2,                                            5.1.1","issue_labels":"5.0.10,                                            5.2.2,                                            5.1.1","issue_description":"The flush operation order is not documented in the new User Guide.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10971?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10966":{"info":{"issue_title":"Document @DiscriminatorValue NULL and NOT_NULL options","issue_key":"HHH-10966","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.1.0 ,                                            5.0.9 ,                                            5.2.1","issue_component":"5.1.0 ,                                            5.0.9 ,                                            5.2.1","issue_labels":"5.1.0","issue_description":"As described in this forum post, we should document these options which are only obvious if studying the source code.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10966?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10965":{"info":{"issue_title":"Add new Query Hint to avoid passing DISTINCT from entity queries to SQL statements","issue_key":"HHH-10965","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"5.2.1","issue_component":"5.2.1","issue_labels":"5.2.1","issue_description":"This issue has been documented on the mailing list.   Basically, the reason for this enhancement can be summarized as follows:  In JPQL\/HQL, the DISTINCT keyword is meant to avoid returning the same\r\n parent entities when JOIN FETCHING parents with child associations.\r\n JPA backs it up too:  The DISTINCT keyword is used to specify that duplicate values must be\r\n eliminated from the query result.  However, I see that the DISTINCT is applied on the SQL statement as well.  Why is it so? Is there any reason why we would want such a behaviour?\r\n The problem is that an unnecessary DISTINCT might affect the execution plan as explained in this post.  The distinct keyword in the SQL query is alarming because most databases\r\n will actually filter duplicate records. Only a few databases recognize that\r\n the primary keys guarantees uniqueness in that case anyway.  Should we provide a Query hint like HINT_DISTINCT_SQL which when explicitly\r\n set, the JPQL DISTINCT keyword generates a DISTINCT keyword on the SQL\r\n statement-level as well. Without the hint set explicitly, we should not pass the DISTINCT to the SQL\r\n statement.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10965?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-82037","commnet_date":"2016-08-02T07:50:45-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 02\/Aug\/2016 07:50 AM    n        n        Applied PR upstream. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 02\/Aug\/2016 07:50 AM                      Applied  PR  upstream.              n        n    n"},{"commnet_id":"comment-82178","commnet_date":"2016-08-04T21:58:04-0700","commnet_user":"Niko Wittenbeck","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Niko Wittenbeckn added a comment  - 04\/Aug\/2016 21:58 PM    n        n        Does this change also affect criteria and projections? My use case is that based on some external conditions, I want to disable the already applied distinct projection on a column of a predefined criteria. n    n    n        n            Show  n            n                        n    n    n    n                nn       Niko Wittenbeckn added a comment  - 04\/Aug\/2016 21:58 PM                      Does this change also affect criteria and projections? My use case is that based on some external conditions, I want to disable the already applied distinct projection on a column of a predefined criteria.              n        n    n"},{"commnet_id":"comment-82179","commnet_date":"2016-08-04T22:09:03-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 04\/Aug\/2016 22:09 PM    n        n        For Criteria API, it should work exactly the same, although I haven't tested it. For legacy Criteria, it would require adding a new method. However, the legacy Criteria is deprecated and 6.0 is going to add a way to improve Criteria API beyond the JPA spec so that we can get the best of both worlds. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 04\/Aug\/2016 22:09 PM                      For Criteria API, it should work exactly the same, although I haven't tested it. For legacy Criteria, it would require adding a new method. However, the legacy Criteria is deprecated and 6.0 is going to add a way to improve Criteria API beyond the JPA spec so that we can get the best of both worlds.              n        n    n"},{"commnet_id":"comment-82180","commnet_date":"2016-08-04T22:13:30-0700","commnet_user":"Niko Wittenbeck","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Niko Wittenbeckn added a comment  - 04\/Aug\/2016 22:13 PM    n        n        Sounds good. Any details on the changes in 6.0 that I can check so I can evaluate the impact on our applications? n    n    n        n            Show  n            n                        n    n    n    n                nn       Niko Wittenbeckn added a comment  - 04\/Aug\/2016 22:13 PM                      Sounds good. Any details on the changes in 6.0 that I can check so I can evaluate the impact on our applications?              n        n    n"},{"commnet_id":"comment-82181","commnet_date":"2016-08-04T22:36:44-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 04\/Aug\/2016 22:36 PM    n        n        For the moment, it's very much dependent on SQM. The Criteria API extension will come after SQM is ready. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 04\/Aug\/2016 22:36 PM                      For the moment, it's very much dependent on  SQM . The Criteria API extension will come after SQM is ready.              n        n    n"},{"commnet_id":"comment-82184","commnet_date":"2016-08-05T04:56:42-0700","commnet_user":"John Ament","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       John Amentn added a comment  - 05\/Aug\/2016 04:56 AM    n        n        Going through http:\/\/docs.jboss.org\/hibernate\/orm\/5.2\/userguide\/html_single\/Hibernate_User_Guide.html I can't find any reference to this.  I'm assuming that instead of writing in my JPQLnnrn    select distinct f from Flerp f join fetch f.somethingrnnnI can just use this hint? n    n    n        n            Show  n            n                        n    n    n    n                nn       John Amentn added a comment  - 05\/Aug\/2016 04:56 AM                      Going through  http:\/\/docs.jboss.org\/hibernate\/orm\/5.2\/userguide\/html_single\/Hibernate_User_Guide.html  I can't find any reference to this.  I'm assuming that instead of writing in my JPQL n  n rn    select distinct f from Flerp f join fetch f.somethingrn n  n I can just use this hint?              n        n    n"},{"commnet_id":"comment-82185","commnet_date":"2016-08-05T05:04:42-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 05\/Aug\/2016 05:04 AM    n        n        Hi John Ament,nnI'll update the docs next week. Meanwhile, you can read everything you need to know from this blog post.nnVlad n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 05\/Aug\/2016 05:04 AM                      Hi  John Ament , nn I'll update the docs next week. Meanwhile, you can read everything you need to know from  this blog post . nn Vlad              n        n    n"},{"commnet_id":"comment-82186","commnet_date":"2016-08-05T05:06:02-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 05\/Aug\/2016 05:06 AM    n        n        Basically, you need to provide the following Query Hint:nnnrnList&lt;Person&gt; authors = entityManager.createQuery(rn    \"select distinct p \"  +rn    \"from Person p \"  +rn    \"left join fetch p.books\" , Person.class)rn.setHint( QueryHints.HINT_PASS_DISTINCT_THROUGH, false  )rn.getResultList();rnn n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 05\/Aug\/2016 05:06 AM                      Basically, you need to provide the following Query Hint: nn  n rnList&lt;Person&gt; authors = entityManager.createQuery(rn     \"select distinct p \"  +rn     \"from Person p \"  +rn     \"left join fetch p.books\" , Person.class)rn.setHint( QueryHints.HINT_PASS_DISTINCT_THROUGH,  false  )rn.getResultList();rn n               n        n    n"}]}},{"HHH-10962":{"info":{"issue_title":"Shift support for &quot;collection filtering&quot; to Java 8 Streams","issue_key":"HHH-10962","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6.0.0.Alpha1","issue_labels":"6.0.0.Alpha1","issue_description":"Historically Hibernate allowed \"filtering\" a collection through a special form of Query accessible via Session#createFilter.  I would like to shift this to instead leverage Java 8 streaming.  There are a 2 main reasons for this:  \tFirst and foremost it is a more natural idiom given Java 8's introduction of streaming APIs \tSecondly the Query API based filtering adds crazy requirements on the Query grammars and translators which I'd like to clean up.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10962?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1120":{"info":{"issue_title":"Avoid calls to cluster.connect()","issue_key":"OGM-1120","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0.Alpha1","issue_labels":"5.1.0.Alpha1","issue_description":"Calls to cluster.connect() are slow so we might as well avoid them if they are not needed.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1120?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1119":{"info":{"issue_title":"Improve JPA related test cases to avoid initializing a new EntityManagerFactory for each test","issue_key":"OGM-1119","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0.Alpha1","issue_labels":"5.1.0.Alpha1","issue_description":"For the SessionFactory case, we have OgmTestCase and OgmTestRunner which avoids creating a new SessionFactory for each test method.  As for JPA related tests, we only have JpaTestCase which initializes a new EntityManagerFactory for each test method.  This is especially problematic for Cassandra as connecting to the cluster is very slow so reconnecting to the cluster for each test method costs us a lot of time.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1119?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10954":{"info":{"issue_title":"Integrate SQM into Hibernate ORM","issue_key":"HHH-10954","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6.0.0.Alpha1","issue_labels":"6.0.0.Alpha1","issue_description":"Continue the work (started in the hibernate-orm-sqm-poc proof-of-concept branch) of integrating SQM into Hibernate ORM for HQL, JPQL and Criteria interpretation.  This is the main thrust of 6.0 development.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10954?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10949":{"info":{"issue_title":"Upgrade Infinispan to 8.2.3.Final","issue_key":"HHH-10949","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.2","issue_labels":"5.2.2","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10949?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-81666","commnet_date":"2016-07-26T07:57:56-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 26\/Jul\/2016 07:57 AM    n        n        PR applied upstream. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 26\/Jul\/2016 07:57 AM                      PR applied upstream.              n        n    n"}]}},{"HHH-10947":{"info":{"issue_title":"Add @Repeatable to Hibernate-owned annotations","issue_key":"HHH-10947","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.2","issue_labels":"5.2.2","issue_description":"Now that we've moved to Java 8, introduce @Repeatable to applicable Hibernate-owned annotations.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10947?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-80834","commnet_date":"2016-07-11T09:57:53-0700","commnet_user":"Brett Meyer","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Brett Meyern added a comment  - 11\/Jul\/2016 09:57 AM    n        n        Steve Ebersole: For this one, I'm updating o.h.annotations.  Thoughts on doing so in our JPA API as well? n    n    n        n            Show  n            n                        n    n    n    n                nn       Brett Meyern added a comment  - 11\/Jul\/2016 09:57 AM                       Steve Ebersole : For this one, I'm updating o.h.annotations.  Thoughts on doing so in our JPA API as well?              n        n    n"}]}},{"HHH-10946":{"info":{"issue_title":"Add utility to detect connection leaks during testing","issue_key":"HHH-10946","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.2","issue_labels":"5.2.2","issue_description":"There are many tests that leak connections, and that's the reason why we cannot run the test suite on a PostgreSQL which is limited to only 30 connections only.  To find out the tests that leak connections, we need an utility to assist us.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10946?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10945":{"info":{"issue_title":"Move TransactionUtil from documentation to hibernate-testing","issue_key":"HHH-10945","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.2","issue_labels":"5.2.2","issue_description":"The documentation module has a TransactionUtil class which offers automatic Session and transaction management. This way, it's much easier to make sure that connections don't leak.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10945?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10943":{"info":{"issue_title":"Driver Manager Connection Pool should close leaked connections upon shutting down","issue_key":"HHH-10943","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.2","issue_labels":"5.2.2","issue_description":"DriverManagerConnectionProviderImpl uses PooledConnections behind the scenes to pool connections, but it only tracks the available connections and not all connections that have been created from the start.  We need to track all connections so that, when we shut down the pool, even the connections that are currently being in use are properly closed as well. Currently, only the unllocated connections are being closed.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10943?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10941":{"info":{"issue_title":"Add support for user-defined column names in audit tables.","issue_key":"HHH-10941","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"4.3.11 ,                                            5.2.1","issue_component":"4.3.11 ,                                            5.2.1","issue_labels":"4.3.11","issue_description":"Users are able to customize the names of the revision entity table, the various audit and join tables, including suffix and prefixes; however there is no way to override the default naming strategy used for column names.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10941?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-82731","commnet_date":"2016-08-17T06:40:36-0700","commnet_user":"Chris Cranford","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Chris Cranfordn added a comment  - 17\/Aug\/2016 06:40 AM    n        n        Stackoverflow discussion: http:\/\/stackoverflow.com\/questions\/38274365\/hibernateenvers-custom-column-name n    n    n        n            Show  n            n                        n    n    n    n                nn       Chris Cranfordn added a comment  - 17\/Aug\/2016 06:40 AM                      Stackoverflow discussion:  http:\/\/stackoverflow.com\/questions\/38274365\/hibernateenvers-custom-column-name               n        n    n"}]}},{"HHH-10936":{"info":{"issue_title":"@ManyToOne mapped by a composite natural key should be added to persistenceContext&#39;s entitiesByUniqueKey map","issue_key":"HHH-10936","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Rejected","issue_fix_version":"5.2.1","issue_component":"5.2.1","issue_labels":"5.2.1","issue_description":"@Entity  public  class Parent implements  Serializable {  \tprivate  static  final  long  serialVersionUID = 1L;    \t@Id  \tprivate  Integer  id;  \tprivate  Integer  code;  \tprivate  Integer  item;  }         @Entity  public  class Child implements  Serializable{  \t  \tprivate  static  final  long  serialVersionUID = 1L;    \t@Id  \tprivate  Integer  id;  \t  \t@ManyToOne(fetch=FetchType.LAZY)  \t@JoinColumns({  \t\t@JoinColumn(name=\"prop_code\" , referencedColumnName=\"code\" ),  \t\t@JoinColumn(name=\"prop_item\" , referencedColumnName=\"item\" )  \t})  \tprivate  Parent property;  }     When i load two different childs in the same session, and both reference the same parent, 4 queries are fired, 2 for the childs and 2 for the (same) parent.  In that case there should be only 3 queries, two for the childs, and one for the parent, as i believe the parent should be added to the persistenceContext entitiesByUniqueKey  map after it is retrieved from the database for the first time.  If my assumptions are correct, a NAIVE fix would be to call persister.addEntity(euk, result) somewhere inside EntityType.loadByUniqueKey.   I've tried this already in a fork, and although it fixed the issue, when running the full suite of tests with H2, a (seemingly) unrelated test (org.hibernate.jpa.test.lock.LockTest.testContendedPessimisticLock) broke on cleanup, so since im extremelly new to Hibernate i have no idea of the side effects of my \"fix\".","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10936?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-81559","commnet_date":"2016-07-22T04:57:50-0700","commnet_user":"Joao Carlos Heringer Moreira","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Joao Carlos Heringer Moreiran added a comment  - 22\/Jul\/2016 04:57 AM    n        n        Hi!\r\nnAny opinion on this ? n    n    n        n            Show  n            n                        n    n    n    n                nn       Joao Carlos Heringer Moreiran added a comment  - 22\/Jul\/2016 04:57 AM                      Hi! nAny opinion on this ?              n        n    n"},{"commnet_id":"comment-83152","commnet_date":"2016-08-26T05:48:05-0700","commnet_user":"Joao Carlos Heringer Moreira","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Joao Carlos Heringer Moreiran added a comment  - 26\/Aug\/2016 05:48 AM    n        n        Hi!\r\nnDid anyone consider this ? n    n    n        n            Show  n            n                        n    n    n    n                nn       Joao Carlos Heringer Moreiran added a comment  - 26\/Aug\/2016 05:48 AM                      Hi! nDid anyone consider this ?              n        n    n"},{"commnet_id":"comment-83165","commnet_date":"2016-08-26T13:24:11-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 26\/Aug\/2016 13:24 PM    n        n        Parent does not have a unique ID, so it cannot be added to persistenceContext's entitiesByUniqueKey.nnChild has a non-unique many-to-one, as you mention that more than one Child can have the same parent. Since Child#parent is non-unique, it cannot be added to persistenceContext's entitiesByUniqueKey either.n n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 26\/Aug\/2016 13:24 PM                      Parent does not have a unique ID, so it cannot be added to persistenceContext's entitiesByUniqueKey. nn Child has a non-unique many-to-one, as you mention that more than one Child can have the same parent. Since Child#parent is non-unique, it cannot be added to persistenceContext's entitiesByUniqueKey either. n             n        n    n"}]}},{"HHH-10935":{"info":{"issue_title":"IDs should no longer be required to implement Serializable","issue_key":"HHH-10935","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6.0.0.Alpha1","issue_labels":"6.0.0.Alpha1","issue_description":"The main idea is to no longer need to implement Serializable for composite keys, i.e. avoid to complain at boot time with messages like:  &gt; org.hibernate.MappingException: Composite-id class must implement Serializable:...  We might also want to relax some APIs which accept only Serializable to for an ID, such as load(Class, Serializable id), however that's less valuable as the user's code wouldn't compile (so there are no surprises at boot time).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10935?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10934":{"info":{"issue_title":"Preventing duplicate ForeignKey generation ","issue_key":"HHH-10934","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.2.7","issue_component":"5.2.7","issue_labels":"5.2.7","issue_description":"When hbm2ddl.auto is set to update all tables and keys are checked to see if changes are needed. The algorith by which the names of the foreign keys are generated changed the last couple of versions. Now the update thinks the foreign keys don't exist and creates them again.  By changing findMatchingForeignKey in SchemaMigratorImpl to check the actual reference and fields that could be a lot smarter. So don't purely match on keyname but instead on the field and the referenced table with the referenced field.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10934?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-80546","commnet_date":"2016-07-06T10:47:37-0700","commnet_user":"Milo van der Zee","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Milo van der Zeen added a comment  - 06\/Jul\/2016 10:47 AM    n        n        And also add some debug info to the steps done during updating the schema. n    n    n        n            Show  n            n                        n    n    n    n                nn       Milo van der Zeen added a comment  - 06\/Jul\/2016 10:47 AM                      And also add some debug info to the steps done during updating the schema.              n        n    n"},{"commnet_id":"comment-87804","commnet_date":"2016-12-21T04:06:53-0800","commnet_user":"Milo van der Zee","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Milo van der Zeen added a comment  - 21\/Dec\/2016 04:06 AM     - edited  n        n        Replace the existing method findMatchingForeignKey() with the following codennrnprivate  ForeignKeyInformation findMatchingForeignKey(ForeignKey foreignKey, TableInformation tableInformation) {rnt<span class=\"code-keyword\">if<\/span> (foreignKey.getName() == <span class=\"code-keyword\">null<\/span>) {rntt<span class=\"code-keyword\">return<\/span> <span class=\"code-keyword\">null<\/span>;rnt}rnrnt\/*rnt * Find existing keys based on referencing column and referencedTablernt *\/rntString  referencingColumn = foreignKey.getColumn(0).getName();rntString  referencedTableName = foreignKey.getReferencedTable().getName();rntIterable&lt;ForeignKeyInformation&gt; existingForeignKeys = tableInformation.getForeignKeys();rntfor  (ForeignKeyInformation existingKey : existingForeignKeys) {rnttIterable&lt;ColumnReferenceMapping&gt; columnReferenceMappings = existingKey.getColumnReferenceMappings();rntt<span class=\"code-keyword\">for<\/span> (ColumnReferenceMapping mapping : columnReferenceMappings) {rnttt<span class=\"code-object\">String<\/span> existingReferencingColumn = mapping.getReferencingColumnMetadata().getColumnIdentifier().getText();rnttt<span class=\"code-object\">String<\/span> existingReferencedTableName = mapping.getReferencedColumnMetadata().getContainingTableInformation().getName().getTableName().getCanonicalName();rnttt<span class=\"code-keyword\">if<\/span> (referencingColumn.equals(existingReferencingColumn) &amp;&amp; referencedTableName.equals(existingReferencedTableName)) {rntttt<span class=\"code-keyword\">return<\/span> existingKey;rnttt}rntt}rnt}rnrnt\/\/ If not yet found check based on key namern treturn  tableInformation.getForeignKey(Identifier.toIdentifier(foreignKey.getName()));rn}rnnnnOr the Java8 way:nnnrnprivate  ForeignKeyInformation findMatchingForeignKey(ForeignKey foreignKey, TableInformation tableInformation) {rntlog.debug(<span class=\"code-quote\">\"findMatchingForeignKey\"<\/span>);rnt<span class=\"code-keyword\">if<\/span> (foreignKey.getName() == <span class=\"code-keyword\">null<\/span>) <span class=\"code-keyword\">return<\/span> <span class=\"code-keyword\">null<\/span>;rnrnt\/*rnt * Find existing keys based on referencing column and referencedTablernt *\/rnt<span class=\"code-object\">String<\/span> referencingColumn = foreignKey.getColumn(0).getName();rnt<span class=\"code-object\">String<\/span> referencedTableName = foreignKey.getReferencedTable().getName();rntPredicate&lt;ColumnReferenceMapping&gt; mappingPredicate = m -&gt; referencingColumn.equals(m.getReferencingColumnMetadata().getColumnIdentifier().getText())rnttt&amp;&amp; referencedTableName.equals(m.getReferencedColumnMetadata().getContainingTableInformation().getName().getTableName().getCanonicalName());rnt<span class=\"code-keyword\">for<\/span> (ForeignKeyInformation existingKey : tableInformation.getForeignKeys()) {rntt<span class=\"code-object\">boolean<\/span> found = StreamSupport.stream(existingKey.getColumnReferenceMappings().spliterator(), <span class=\"code-keyword\">false<\/span>).anyMatch(mappingPredicate);rntt<span class=\"code-keyword\">if<\/span> (found) <span class=\"code-keyword\">return<\/span> existingKey;rnt}rnrnt\/\/ If not yet found check based on key namern treturn  tableInformation.getForeignKey(Identifier.toIdentifier(foreignKey.getName()));rn}rnnnnAnd when the calling function is also changed (it does not use the returned key):nnnrnprivate  boolean  checkForExistingForeignKey(ForeignKey foreignKey, TableInformation tableInformation) {rnt<span class=\"code-keyword\">if<\/span> (foreignKey.getName() == <span class=\"code-keyword\">null<\/span>) <span class=\"code-keyword\">return<\/span> <span class=\"code-keyword\">false<\/span>;rnrnt\/*rnt * Find existing keys based on referencing column and referencedTablernt *\/rnt<span class=\"code-object\">String<\/span> referencingColumn = foreignKey.getColumn(0).getName();rnt<span class=\"code-object\">String<\/span> referencedTableName = foreignKey.getReferencedTable().getName();rntPredicate&lt;ColumnReferenceMapping&gt; mappingPredicate = m -&gt; referencingColumn.equals(m.getReferencingColumnMetadata().getColumnIdentifier().getText())rnttt&amp;&amp; referencedTableName.equals(m.getReferencedColumnMetadata().getContainingTableInformation().getName().getTableName().getCanonicalName());rnt<span class=\"code-object\">boolean<\/span> found = StreamSupport.stream(tableInformation.getForeignKeys().spliterator(), <span class=\"code-keyword\">false<\/span>)rnttt.flatMap(key -&gt; StreamSupport.stream(key.getColumnReferenceMappings().spliterator(), <span class=\"code-keyword\">false<\/span>)).anyMatch(mappingPredicate);rnt<span class=\"code-keyword\">if<\/span> (found) <span class=\"code-keyword\">return<\/span> <span class=\"code-keyword\">true<\/span>;rnrnt<span class=\"code-comment\">\/\/ If not yet found check based on key namern<\/span>t<span class=\"code-keyword\">return<\/span> tableInformation.getForeignKey(Identifier.toIdentifier(foreignKey.getName())) != <span class=\"code-keyword\">null<\/span>;rn}rnn n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Milo van der Zeen added a comment  - 21\/Dec\/2016 04:06 AM     - edited                    Replace the existing method  findMatchingForeignKey()  with the following code n  n rn private  ForeignKeyInformation findMatchingForeignKey(ForeignKey foreignKey, TableInformation tableInformation) {rnt if  (foreignKey.getName() ==  null ) {rntt return   null ;rnt}rnrnt\/*rnt * Find existing keys based on referencing column and referencedTablernt *\/rnt String  referencingColumn = foreignKey.getColumn(0).getName();rnt String  referencedTableName = foreignKey.getReferencedTable().getName();rntIterable&lt;ForeignKeyInformation&gt; existingForeignKeys = tableInformation.getForeignKeys();rnt for  (ForeignKeyInformation existingKey : existingForeignKeys) {rnttIterable&lt;ColumnReferenceMapping&gt; columnReferenceMappings = existingKey.getColumnReferenceMappings();rntt for  (ColumnReferenceMapping mapping : columnReferenceMappings) {rnttt String  existingReferencingColumn = mapping.getReferencingColumnMetadata().getColumnIdentifier().getText();rnttt String  existingReferencedTableName = mapping.getReferencedColumnMetadata().getContainingTableInformation().getName().getTableName().getCanonicalName();rnttt if  (referencingColumn.equals(existingReferencingColumn) &amp;&amp; referencedTableName.equals(existingReferencedTableName)) {rntttt return  existingKey;rnttt}rntt}rnt}rnrnt \/\/ If not yet found check based on key namern t return  tableInformation.getForeignKey(Identifier.toIdentifier(foreignKey.getName()));rn}rn n  nn Or the Java8 way: nn  n rn private  ForeignKeyInformation findMatchingForeignKey(ForeignKey foreignKey, TableInformation tableInformation) {rntlog.debug( \"findMatchingForeignKey\" );rnt if  (foreignKey.getName() ==  null )  return   null ;rnrnt\/*rnt * Find existing keys based on referencing column and referencedTablernt *\/rnt String  referencingColumn = foreignKey.getColumn(0).getName();rnt String  referencedTableName = foreignKey.getReferencedTable().getName();rntPredicate&lt;ColumnReferenceMapping&gt; mappingPredicate = m -&gt; referencingColumn.equals(m.getReferencingColumnMetadata().getColumnIdentifier().getText())rnttt&amp;&amp; referencedTableName.equals(m.getReferencedColumnMetadata().getContainingTableInformation().getName().getTableName().getCanonicalName());rnt for  (ForeignKeyInformation existingKey : tableInformation.getForeignKeys()) {rntt boolean  found = StreamSupport.stream(existingKey.getColumnReferenceMappings().spliterator(),  false ).anyMatch(mappingPredicate);rntt if  (found)  return  existingKey;rnt}rnrnt \/\/ If not yet found check based on key namern t return  tableInformation.getForeignKey(Identifier.toIdentifier(foreignKey.getName()));rn}rn n  nn And when the calling function is also changed (it does not use the returned key): nn  n rn private   boolean  checkForExistingForeignKey(ForeignKey foreignKey, TableInformation tableInformation) {rnt if  (foreignKey.getName() ==  null )  return   false ;rnrnt\/*rnt * Find existing keys based on referencing column and referencedTablernt *\/rnt String  referencingColumn = foreignKey.getColumn(0).getName();rnt String  referencedTableName = foreignKey.getReferencedTable().getName();rntPredicate&lt;ColumnReferenceMapping&gt; mappingPredicate = m -&gt; referencingColumn.equals(m.getReferencingColumnMetadata().getColumnIdentifier().getText())rnttt&amp;&amp; referencedTableName.equals(m.getReferencedColumnMetadata().getContainingTableInformation().getName().getTableName().getCanonicalName());rnt boolean  found = StreamSupport.stream(tableInformation.getForeignKeys().spliterator(),  false )rnttt.flatMap(key -&gt; StreamSupport.stream(key.getColumnReferenceMappings().spliterator(),  false )).anyMatch(mappingPredicate);rnt if  (found)  return   true ;rnrnt \/\/ If not yet found check based on key namern t return  tableInformation.getForeignKey(Identifier.toIdentifier(foreignKey.getName())) !=  null ;rn}rn n               n        n    n"},{"commnet_id":"comment-88103","commnet_date":"2016-12-27T15:54:20-0800","commnet_user":"Milo van der Zee","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Milo van der Zeen added a comment  - 27\/Dec\/2016 15:54 PM    n        n        In 5.2.6 the class changed to AbstractSchemaMigrator.java n    n    n        n            Show  n            n                        n    n    n    n                nn       Milo van der Zeen added a comment  - 27\/Dec\/2016 15:54 PM                      In 5.2.6 the class changed to AbstractSchemaMigrator.java              n        n    n"},{"commnet_id":"comment-88105","commnet_date":"2016-12-28T03:47:45-0800","commnet_user":"Milo van der Zee","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Milo van der Zeen added a comment  - 28\/Dec\/2016 03:47 AM    n        n        'gradle compile test' done and all tests pass. At least in folder hibernate-core. Did not test it for all but that doesn't seem necessary to me... n    n    n        n            Show  n            n                        n    n    n    n                nn       Milo van der Zeen added a comment  - 28\/Dec\/2016 03:47 AM                      'gradle compile test' done and all tests pass. At least in folder hibernate-core. Did not test it for all but that doesn't seem necessary to me...              n        n    n"}]}},{"HHH-10933":{"info":{"issue_title":"Include Blueprint\/OSGi registry discussion in &quot;Hibernate Integrations Guide&quot;","issue_key":"HHH-10933","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10933?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-80541","commnet_date":"2016-07-06T08:07:59-0700","commnet_user":"Brett Meyer","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Brett Meyern added a comment  - 06\/Jul\/2016 08:07 AM    n        n        CC Steve Ebersole.  It would be helpful if we ensure any new service registrations support the OSGi route. n    n    n        n            Show  n            n                        n    n    n    n                nn       Brett Meyern added a comment  - 06\/Jul\/2016 08:07 AM                      CC  Steve Ebersole .  It would be helpful if we ensure any new service registrations support the OSGi route.              n        n    n"}]}},{"OGM-1116":{"info":{"issue_title":"Use same pattern for artifact id \/ classifier for Module ZIP as for HSEARCH and ORM","issue_key":"OGM-1116","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0.Alpha1","issue_labels":"5.1.0.Alpha1","issue_description":"HSEARCH and ORM use \"wildfly-&lt;VERSION&gt;-dist\" as a classifier, whereas OGM encodes that information in the artifact id. We should align with the approach from HSEARCH\/ORM.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1116?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10925":{"info":{"issue_title":"Add annotation to ignore specific tests based on audit strategy being used.","issue_key":"HHH-10925","issue_type":"New Feature","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"6.0.0.Alpha1","issue_labels":"6.0.0.Alpha1","issue_description":"Much like the hibernate-core's @RequiresDialect annotation, introduce a new annotation called @RequiresAuditStrategy that will ignore the test method unless the current execution's parameters are configured to use that specific strategy.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10925?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10924":{"info":{"issue_title":"Replace ConcurrentServiceBinding by ConcurrentHashMap","issue_key":"HHH-10924","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.2.1","issue_component":"5.2.1","issue_labels":"5.2.1","issue_description":"While looking through the source code of Hibernate I found the class ConcurrentServiceBinding. My first thought was: cool idea, maybe I can use something similar too. And the second thought was: is it really faster than IdentityHashMap or ConcurrentHashMap. To answer this question I have created small JMH tests. Here are the results from the execution of this tests on Intel Core i7 2 GHz:   # JMH 1.12 (released 78 days ago)  # VM version: JDK 1.8.0_92, VM 25.92-b14  # VM options: &lt;none&gt;  # Warmup: 10 iterations, 3 s each  # Measurement: 10 iterations, 3 s each  # Timeout: 10 min per iteration  # Threads: 1 thread, will synchronize iterations  # Benchmark mode: Average time, time\/op    Benchmark                                                                               Mode  Cnt   Score   Error  Units  ConcurrentServiceBindingBenchmark.baseConcurrentServiceBindingGetEventListenerRegistry  avgt  100  11.197 \u00b1 0.534  ns\/op  ConcurrentServiceBindingBenchmark.baseConcurrentServiceBindingGetJdbcServices           avgt  100   8.126 \u00b1 1.197  ns\/op  ConcurrentServiceBindingBenchmark.chmConcurrentServiceBindingGetEventListenerRegistry   avgt  100   6.594 \u00b1 0.023  ns\/op  ConcurrentServiceBindingBenchmark.chmConcurrentServiceBindingGetJdbcServices            avgt  100   6.589 \u00b1 0.025  ns\/op  ConcurrentServiceBindingBenchmark.ihmConcurrentServiceBindingGetEventListenerRegistry   avgt  100   6.206 \u00b1 0.005  ns\/op  ConcurrentServiceBindingBenchmark.ihmConcurrentServiceBindingGetJdbcServices            avgt  100   6.325 \u00b1 0.108  ns\/op     Same as above but with 10 threads:   # Threads: 10 threads, will synchronize iterations    Benchmark                                                                               Mode  Cnt   Score   Error  Units  ConcurrentServiceBindingBenchmark.baseConcurrentServiceBindingGetEventListenerRegistry  avgt  100  27.125 \u00b1 0.967  ns\/op  ConcurrentServiceBindingBenchmark.baseConcurrentServiceBindingGetJdbcServices           avgt  100  27.019 \u00b1 2.590  ns\/op  ConcurrentServiceBindingBenchmark.chmConcurrentServiceBindingGetEventListenerRegistry   avgt  100  18.367 \u00b1 0.507  ns\/op  ConcurrentServiceBindingBenchmark.chmConcurrentServiceBindingGetJdbcServices            avgt  100  17.919 \u00b1 0.403  ns\/op  ConcurrentServiceBindingBenchmark.ihmConcurrentServiceBindingGetEventListenerRegistry   avgt  100  17.049 \u00b1 0.315  ns\/op  ConcurrentServiceBindingBenchmark.ihmConcurrentServiceBindingGetJdbcServices            avgt  100  17.871 \u00b1 0.520  ns\/op     baseConcurrentServiceBindingXXX uses the current implementation of ConcurrentServiceBinding in Hibernate. chmConcurrentServiceBindingXXX uses ConcurrentHashMap and ihmConcurrentServiceBinding uses IdentityHashMap.  As you can see CHM based implementation is faster than the current implementation of ConcurrentServiceBinding. The IdentityHashMap based implementation is only slightly faster than the CHM based. Therefore I think it is not worth to maintain an extra class when CHM is good enough and suggest to replace ConcurrentServiceBinding by ConcurrentHashMap.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10924?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-81436","commnet_date":"2016-07-20T14:46:27-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Sanne Grinoveron added a comment  - 20\/Jul\/2016 14:46 PM     - edited  n        n        That's very interesting, thank you so much for investigating!nnNow for the real puzzle: I remember writing this with a JMH test to make sure the ConcurrentServiceBinding would be at worst of comparable efficiency (I'll explain below why) and back then my results were looking better. Not sure why I didn't merge my JMH tests too, my guess is I didn't want to fight Gradle but the point is that sadly my previous tests are lost now; I wish I could compare our JMH tests now.nnOne thing that I'd have done differently in your JMH tests is to not include the key used for the get() operation as a constant, but move it as a field of the state. I tried this change on your shared tests but my ConcurrentServiceBinding doesn't win yet so that's not it.nnSo to explain why I would have been happy enough to have a same-performance alternative implementation:nnin some larger benchmarks (not micro-benchmarks) I often see events like this when enabling -XX:+PrintCompilation :nnjava.util.concurrent.ConcurrentHashMap::get (162 bytes)   made not entrantnnWhen this is triggered, we revert to interpreted code for a while, until it's compiled again. Preventing this from happening seems not feasible, so my approach was to write an alternative implementation for this very hot point in Hibernate, as profiling had been highlighting \"Service lookup\" as a problematic point in terms of CPU usage. Admittedly I thought I could write a reasonably efficient alternative to CHM by taking advantage of the fact we only need concurrency on reads, and on identity keys.. to be fair this seemed to have produced good results, but we've tested only on a limited set of benchmarks.nnSo that's the story, but I can follow your suggestion and remove this if it's no longer of value: your data seems solid. I'd like to verify the impact on the \"made not entrant\" scenario though, and also it would be very interesting to investigate why it's slower... I guess the JVM will likely have strong ad-hoc optimisations and intrinsics to help the CHM implementation but since our requirements are simpler than the typical CHM usage it seems an interesting challenge.nnTo understand why the ConcurrentServiceBinding is not as efficient as I'd have hoped, I run this comparison using your JMH benchmark with different parameters, to use it multithreaded and with the \"-prof perfnorm\" output, getting this (summarized):nn   nnI'm definitely not an expert in reading this output, some help would be welcome \r\nnMy interpretation is that there are more loads, more stores (because of the recursion?) , many more branches (because we're walking a binary tree?), and generally way more instructions.nnMaybe we could polish the implementation to store all known hashcodes in an int[] so this can be scanned avoiding the recursion, some branches and the additional references which are caused by following the pointers around the tree.nnAlternatively.. yes I agree we could delete it and stick with the traditional CHM: I'm just annoyed by the \"made not reentrant\" and \"made zombie\" .. we could try to remove the custom map and eventually revert according to experience. I'll ask our performance team if they have time to test this..  n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Sanne Grinoveron added a comment  - 20\/Jul\/2016 14:46 PM     - edited                    That's very interesting, thank you so much for investigating! nn Now for the real puzzle: I remember writing this with a JMH test to make sure the  ConcurrentServiceBinding  would be at worst of comparable efficiency (I'll explain below why) and back then my results were looking better. Not sure why I didn't merge my JMH tests too, my guess is I didn't want to fight Gradle but the point is that sadly my previous tests are lost now; I wish I could compare our JMH tests now. nn One thing that I'd have done differently in your JMH tests is to not include the key used for the get() operation as a constant, but move it as a field of the state. I tried this change on your shared tests but my  ConcurrentServiceBinding  doesn't win yet so that's not it. nn So to explain why I would have been happy enough to have a same-performance alternative implementation: nn in some larger benchmarks (not micro-benchmarks) I often see events like this when enabling  -XX:+PrintCompilation  : nn  java.util.concurrent.ConcurrentHashMap::get (162 bytes)   made not entrant  nn When this is triggered, we revert to interpreted code for a while, until it's compiled again. Preventing this from happening seems not feasible, so my approach was to write an alternative implementation for this very hot point in Hibernate, as profiling had been highlighting \"Service lookup\" as a problematic point in terms of CPU usage. Admittedly I thought I could write a reasonably efficient alternative to CHM by taking advantage of the fact we only need concurrency on reads, and on identity keys.. to be fair this seemed to have produced good results, but we've tested only on a limited set of benchmarks. nn So that's the story, but I can follow your suggestion and remove this if it's no longer of value: your data seems solid. I'd like to verify the impact on the \"made not entrant\" scenario though, and also it would be very interesting to investigate why it's slower... I guess the JVM will likely have strong ad-hoc optimisations and intrinsics to help the CHM implementation but since our requirements are simpler than the typical CHM usage it seems an interesting challenge. nn To understand why the  ConcurrentServiceBinding  is not as efficient as I'd have hoped, I run this comparison using your JMH benchmark with different parameters, to use it multithreaded and with the \"-prof perfnorm\" output, getting this (summarized): nn       nn I'm definitely not an expert in reading this output, some help would be welcome   nMy interpretation is that there are more loads, more stores (because of the recursion?) , many more branches (because we're walking a binary tree?), and generally way more instructions. nn Maybe we could polish the implementation to store all known hashcodes in an  int[]  so this can be scanned avoiding the recursion, some branches and the additional references which are caused by following the pointers around the tree. nn Alternatively.. yes I agree we could delete it and stick with the traditional CHM: I'm just annoyed by the \"made not reentrant\" and \"made zombie\" .. we could try to remove the custom map and eventually revert according to experience. I'll ask our performance team if they have time to test this..               n        n    n"},{"commnet_id":"comment-81437","commnet_date":"2016-07-20T14:49:52-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 20\/Jul\/2016 14:49 PM    n        n        P.S. my table above was produced using the Throughput benchmark mode, so the higher the better (as opposing to the figures posted by Andrej, but both confirming that IHM seems the better one) n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 20\/Jul\/2016 14:49 PM                      P.S. my table above was produced using the  Throughput  benchmark mode, so the higher the better (as opposing to the figures posted by Andrej, but both confirming that IHM seems the better one)              n        n    n"},{"commnet_id":"comment-81635","commnet_date":"2016-07-25T07:57:50-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 25\/Jul\/2016 07:57 AM    n        n        Stu00E5le W. Pedersen, you might be interested in this issue as well. Do you think we should make this change and use the CHM instead of Sanne Grinovero implementation? n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 25\/Jul\/2016 07:57 AM                       Stu00E5le W. Pedersen , you might be interested in this issue as well. Do you think we should make this change and use the CHM instead of  Sanne Grinovero  implementation?              n        n    n"},{"commnet_id":"comment-82142","commnet_date":"2016-08-03T05:01:23-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 03\/Aug\/2016 05:01 AM    n        n        John O'Hara tested the CHM approach and indeed it seems the results are slightly better even with the more thorough benchmark they use in the middleware performance team.nnThanks Andrej Golovnin I'll apply your patch!nnI suspect we might want to improve this further, but let's do one improvement step at a time. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 03\/Aug\/2016 05:01 AM                       John O'Hara  tested the CHM approach and indeed it seems the results are slightly better even with the more thorough benchmark they use in the middleware performance team. nn Thanks  Andrej Golovnin  I'll apply your patch! nn I suspect we might want to improve this further, but let's do one improvement step at a time.              n        n    n"}]}},{"OGM-1115":{"info":{"issue_title":"The regexp used to identify primary key constraint violation is too strict","issue_key":"OGM-1115","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0.Alpha1","issue_labels":"5.1.0.Alpha1","issue_description":"This regexp was introduced in                                                          OGM-910                                                              Closed                 to differentiate between primary key constraint violations and unique indexes violation.  Looks like it was made a bit too strict as it doesn't work with MongoDB 3.2.7.  I will make it more permissive while keeping it sufficiently strong to avoid false positives.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1115?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10923":{"info":{"issue_title":"Upgrade CDI 1.1 and related dependencies to Final","issue_key":"HHH-10923","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.2","issue_labels":"5.2.2","issue_description":"Updates to some versions of (test) dependencies:   \tCDI API \tEJB API \tShrinkwrap \tWeld \tWeld Arquillian adapter","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10923?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-80330","commnet_date":"2016-07-04T02:16:09-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 04\/Jul\/2016 02:16 AM    n        n        Sent PR https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1464 n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 04\/Jul\/2016 02:16 AM                      Sent PR  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1464               n        n    n"},{"commnet_id":"comment-81663","commnet_date":"2016-07-26T05:39:31-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 26\/Jul\/2016 05:39 AM    n        n        Applied PR upstream. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 26\/Jul\/2016 05:39 AM                      Applied PR upstream.              n        n    n"}]}},{"HHH-10921":{"info":{"issue_title":"Support generated values via returning clause","issue_key":"HHH-10921","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"hibernate-core","issue_description":"EclipseLink offers @ReturningInsert and @ReturningUpdate and I think it would be nice if Hibernate did offer these annotations too. There are a lot of legacy applications that have triggers which generate values on columns and with these annotations one could express that these values should be returned into the entity either on insert or update.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10921?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10918":{"info":{"issue_title":"HQL - Allow query parameter in SELECT statement","issue_key":"HHH-10918","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"query-hql","issue_description":"HQL allows selection of constant values like SELECT 2016, f.bar FROM Foo AS f but sometimes its required to use SELECT :year, f.bar FROM Foo AS f because of separation of concern.  What if the parameter is a decimal, enum or else? As long its one of the hibernate types it should be possible to allow SELECT :year ....   This is usefull when having dynamic queries with optional group by statements which are mapped to a bean using transformer.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10918?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10911":{"info":{"issue_title":"Add partioning annotations with schema generation support","issue_key":"HHH-10911","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"hibernate-core","issue_description":"It would be great if one can also define partioning on entities as annotations. There is such a feature in eclipse link:  http:\/\/www.eclipse.org\/eclipselink\/documentation\/2.4\/jpa\/extensions\/a_partitioned.htm  I guess it might be the most common uses case beyond what is achievable with jpa annotations. From a testing\/operational view it is convient if the Hibernate schema generator comes close to the desired schema without many manual changes. This not only allows a simple first setup, but also allows it to be used as a reference schema to compare against Flyway\/Liquiebase\/... migrations to check for missing columns, indics, etc.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10911?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-80279","commnet_date":"2016-07-03T09:41:22-0700","commnet_user":"Christian Beikov","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Christian Beikovn added a comment  - 03\/Jul\/2016 09:41 AM    n        n        In the meantime you can implement your own dialect that returns a custom table exporter. That table exporter can then look up the entity class from the metamodel for the respective table and further look up annotations. So you can build that yourself if you need it right now. n    n    n        n            Show  n            n                        n    n    n    n                nn       Christian Beikovn added a comment  - 03\/Jul\/2016 09:41 AM                      In the meantime you can implement your own dialect that returns a custom table exporter. That table exporter can then look up the entity class from the metamodel for the respective table and further look up annotations. So you can build that yourself if you need it right now.              n        n    n"}]}},{"OGM-1111":{"info":{"issue_title":"Support the MassIndexer for Neo4j remote","issue_key":"OGM-1111","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0.Beta2","issue_labels":"5.1.0.Beta2","issue_description":"Currently, the MassIndexer support for Neo4j remote doesn't work as we try to extract a TransactionContext in forEachTuple while the TransactionContext is not available: we are not yet in a session.  This should be fixed as one of the advantages of using Neo4j remote is that we don't have any conflict between the Lucene versions of Search and the ones of Neo4j.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1111?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10905":{"info":{"issue_title":"NullPointerException when StatelessSession.get(Class, Serializable, LockMode) called with null LockMode, instead of defaulting to LockMode.NONE","issue_key":"HHH-10905","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"5.1.0 ,                                            5.0.9 ,                                            5.2.0","issue_component":"5.1.0 ,                                            5.0.9 ,                                            5.2.0","issue_labels":"5.1.0","issue_description":"When calling StatelessSession.get(Class, Serializable, LockMode) with a null LockMode argument, a NullPointerException is thrown from the following code path:    java.lang.NullPointerException  \tat org.hibernate.persister.entity.AbstractEntityPersister.load(AbstractEntityPersister.java:4004)  \tat org.hibernate.persister.entity.AbstractEntityPersister.load(AbstractEntityPersister.java:3989)  \tat org.hibernate.internal.StatelessSessionImpl.get(StatelessSessionImpl.java:182)  \tat org.hibernate.internal.StatelessSessionImpl.get(StatelessSessionImpl.java:170)     A self-contained demo is available in HHH-10905.zip , it's runnable with mvn clean test.  When the counterpart Session.get(Class&lt;T&gt;, Serializable, LockMode) is called with a null LockMode, it doesn't throw an exception (and works just fine).  It seems like the LockOptions instance in AbstractEntityPersister.getAppropriateLoader(LockOptions, SharedSessionContractImplementor) has different values for its lockMode field: LockMode.NONE in case of a stateful Session, and null in case of a StatelessSession. So getLoaders().get(null) returns a null UniqueEntityLoader, and attempting to call UniqueEntityLoader.load(Serializable, Object, SharedSessionContractImplementor, LockOptions) will throw the NullPointerException.  In case of a stateful Session, the LoadEvent(Serializable, String, Object, LockOptions, boolean, EventSource) constructor has the following code:    if  ( lockOptions.getLockMode() == null  ) {    lockOptions.setLockMode(DEFAULT_LOCK_MODE);  }    There is no similar default value check for the StatelessSession code path.  Maybe the StatelessSession should set the default LockMode.NONE lock mode when a null argument is passed? It would be more in line with the stateful Session, and would not throw NullPointerException.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10905?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10902":{"info":{"issue_title":"Remove BinaryType implementation of VersionType","issue_key":"HHH-10902","issue_type":"Remove Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6.0.0.Alpha1","issue_labels":"6.0.0.Alpha1","issue_description":"HHH-10413                                                              Closed                 deprecated VersionType method implementations in org.hibernate.type.BinaryType since BinaryType is no longer used for byte[] versions\/timestamps. RowVersionType is used instead.  BinaryType should no longer implement VersionType in 6.0.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10902?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10901":{"info":{"issue_title":"Introduce a SqlFunctionContributor","issue_key":"HHH-10901","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6.0.0.Alpha1","issue_labels":"6.0.0.Alpha1","issue_description":"Introduce a SqlFunctionContributor for the ability to augment the SqlFunctionRegistry","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10901?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10892":{"info":{"issue_title":"Skip attribute conversion if value is target type while binding value","issue_key":"HHH-10892","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Rejected","issue_fix_version":"4.3.11 ,                                            5.1.0 ,                                            5.2.0","issue_component":"4.3.11 ,                                            5.1.0 ,                                            5.2.0","issue_labels":"4.3.11","issue_description":"I have an AttributeConverter which convert Set&lt;String&gt; to comma separated string.    @Converter  public  class StringSetConverter implements  AttributeConverter&lt;Set&lt;String &gt;, String &gt; {    \tpublic  static  final  String  SEPARATOR = \",\" ;    \t@Override  \tpublic  String  convertToDatabaseColumn(Set&lt;String &gt; set) {  \t\tif  (set == null )  \t\t\treturn  null ;  \t\tif  (set.isEmpty())  \t\t\treturn  \"\";  \t\treturn  StringUtils.join(set.iterator(), SEPARATOR);  \t}    \t@Override  \tpublic  Set&lt;String &gt; convertToEntityAttribute(String  string) {  \t\tif  (string == null )  \t\t\treturn  null ;  \t\tSet&lt;String &gt; set = new  LinkedHashSet&lt;&gt;();  \t\tif  (StringUtils.isNotBlank(string))  \t\t\tset.addAll(Arrays.asList(string.split(SEPARATOR)));  \t\treturn  set;  \t}    }         @Entity  public  class Post implements  Serializable {            ...    \t@Convert(converter=StringSetConverter.class)  \tprivate  Set&lt;String &gt; tags = new  LinkedHashSet&lt;&gt;(0);    \tpublic  Set&lt;String &gt; getTags() {  \t\treturn  tags;  \t}    \tpublic  void setTags(Set&lt;String &gt; tags) {  \t\tthis .tags = tags;  \t}            ...    }     It's works with:    Restrictions.eq(\"tags\" , Collections.singleton(tag));     And I wish it works with:    Restrictions.eq(\"tags\" , tag); \/\/tag is target type already, shouldn't be converted      But it will throw ClassCastException:    Caused by: java.lang.ClassCastException: java.lang.String  cannot be cast  to java.util.Set          at org.ironrhino.core.hibernate.convert.StringSetConverter.convertToDatabaseColumn(StringSetConverter.java:1) ~[classes\/:?]          at org.hibernate.type.descriptor.converter.AttributeConverterSqlTypeDescriptorAdapter$1.bind(AttributeConverterSqlTypeDescriptorAdapter.java:78) ~[hibernate-core-5.1.0.  jar:5.1.0.Final]","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10892?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-80244","commnet_date":"2016-06-29T22:16:41-0700","commnet_user":"zhouyanming","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       zhouyanmingn added a comment  - 29\/Jun\/2016 22:16 PM    n        n        I have updated pull request#1452 [ https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1452] n    n    n        n            Show  n            n                        n    n    n    n                nn       zhouyanmingn added a comment  - 29\/Jun\/2016 22:16 PM                      I have updated pull request#1452 [  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1452 ]              n        n    n"},{"commnet_id":"comment-81632","commnet_date":"2016-07-25T07:23:37-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 25\/Jul\/2016 07:23 AM    n        n        This is not a correct behavior. If you ran all tests against your change proposal, you would find that some tests are failing because we might want to have converters like AttributeConverter&lt;Integer, Integer&gt;, in which case your change will no longer work.nnIn any query, you need to pass the actual type of the property in question. The reason why you get this issue is because you are not using the Converter as it was designed to be used. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 25\/Jul\/2016 07:23 AM                      This is not a correct behavior. If you ran all tests against your change proposal, you would find that some tests are failing because we might want to have converters like  AttributeConverter&lt;Integer, Integer&gt; , in which case your change will no longer work. nn In any query, you need to pass the actual type of the property in question. The reason why you get this issue is because you are not using the  Converter  as it was designed to be used.              n        n    n"},{"commnet_id":"comment-81870","commnet_date":"2016-07-31T17:15:48-0700","commnet_user":"zhouyanming","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       zhouyanmingn added a comment  - 31\/Jul\/2016 17:15 PM    n        n        You are right, and my request is reasonable too. here is my proposal, catching ClassCastException and skip conversion, it will not break current behaviour.nnrntttttObject  convertedValue;rnttttttry  {rnttttttconvertedValue = converter.convertToDatabaseColumn( value );rnttttt}rntttttcatch  (ClassCastException ce) {rnttttttconvertedValue = value;rnttttt}rntttttcatch  (PersistenceException pe) {rntttttt<span class=\"code-keyword\">throw<\/span> pe;rnttttt}rntttttcatch  (RuntimeException re) {rntttttt<span class=\"code-keyword\">throw<\/span> <span class=\"code-keyword\">new<\/span> PersistenceException( <span class=\"code-quote\">\"Error attempting to apply AttributeConverter\"<\/span>, re );rnttttt}rnn n    n    n        n            Show  n            n                        n    n    n    n                nn       zhouyanmingn added a comment  - 31\/Jul\/2016 17:15 PM                      You are right, and my request is reasonable too. here is my proposal, catching ClassCastException and skip conversion, it will not break current behaviour. n  n rnttttt Object  convertedValue;rnttttt try  {rnttttttconvertedValue = converter.convertToDatabaseColumn( value );rnttttt}rnttttt catch  (ClassCastException ce) {rnttttttconvertedValue = value;rnttttt}rnttttt catch  (PersistenceException pe) {rntttttt throw  pe;rnttttt}rnttttt catch  (RuntimeException re) {rntttttt throw   new  PersistenceException(  \"Error attempting to apply AttributeConverter\" , re );rnttttt}rn n               n        n    n"}]}},{"HHH-10887":{"info":{"issue_title":"Limit Joins on Inheritance when querying Collections","issue_key":"HHH-10887","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.1.0","issue_component":"5.1.0","issue_labels":"5.1.0","issue_description":"Hi,  I have been playing with collections for quite a while now and found 1 issue that I think would be a nice improvement (mind you I might just not be able to figure out how to use it correctly).   Problem description:\r\n Say you have a class Holder that colds a Collections of objects that are modelled with inheritance, it would be nice if you could limit the objects you want to have returned and hibernate realising that it is not necessary to join against that table.   In code:      @Entity      public  static  class Holder {          @Id          String  holderId = UUID.randomUUID().toString();          @OneToMany(cascade=CascadeType.ALL)          @JoinColumn(name=\"subclassID\" )          List&lt;A&gt; elements;      }        @Entity      @Inheritance(strategy=InheritanceType.JOINED)      public  static  class A {          @Id          String  pkey = UUID.randomUUID().toString();          String  type = \"a\" ;          String  subclassID;          @Override          public  String  toString() {              return  \"Class  A, pkey: \"  + pkey + \" Subclass \"  + subclassID;          }      }        @Entity      public  static  class B extends  A {          String  test;          String  type = \"b\" ;          @Override          public  String  toString() {              return  \"Class  B, pkey: \"  + pkey + \" Subclass \"  + subclassID + \" Test: \"  + test;          }      }        @Entity      public  static  class C extends  A {          String  ello;          String  type = \"c\" ;          @Override          public  String  toString() {              return  \"Class  C, pkey: \"  + pkey + \" Subclass \"  + subclassID + \" ello: \"  + ello;          }      }      So in this example, Holder holds objects of A, B and C. This works perfectly fine when reqesting via Entitymanager:      Holder find = em.find(Holder.class, \"hid\" );     Hibernate requests Holder and then resolves all the entities correctly. It joins all tables.   However, when executing:      em.createQuery(\"SELECT h FROM Holder h LEFT JOIN fetch h.elements e where TYPE(e) IN (B)\" , Holder.class);     EDIT: If i do not use the \"fetch\" keyword, regardless of whether or not i use eager fetching, it always fetches any type.. I have not figured out why  The query executes fine, it resolves all types that are in B, however it unnecessarily joins C as well. From the query it is clear, that no element that is in table C can ever be represented in the elements collection since the type has to be of type B. So for that, hibernate could recognise it. Considering that there can be X different classes, this could be a significant performance improvement.   I hope that all makes sense - I \"discovered\" this trying to make it work without joining all tables. I guess I could generate my own native query and only join what I need.   I also documented my attempts and observations on this stackoverflow:   http:\/\/stackoverflow.com\/questions\/37973603\/jpa-onetomany-collection-with-inheritance-limit-to-specific-subclass\/  I hope that all makes sense - please let me know if something is unclear (or if I am just missing the right info and this actually already works).   My current workaround is to use EMF and simply filter in code since it joins every table anyway and I don't want to write custom queries, but rather use the EM directly.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10887?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-80141","commnet_date":"2016-06-28T12:19:13-0700","commnet_user":"Christian Beikov","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Christian Beikovn added a comment  - 28\/Jun\/2016 12:19 PM    n        n        Have you tried something like the following yet? That would be the proper way from the JPA spec perspective, but I am not sure if Hibernate optimizes this to only join the necessary tables.nnnrnSELECT  h FROM  Holder h LEFT JOIN FETCH TREAT(h.elements AS B) ernn n    n    n        n            Show  n            n                        n    n    n    n                nn       Christian Beikovn added a comment  - 28\/Jun\/2016 12:19 PM                      Have you tried something like the following yet? That would be the proper way from the JPA spec perspective, but I am not sure if Hibernate optimizes this to only join the necessary tables. nn  n rn SELECT  h  FROM  Holder h LEFT JOIN FETCH TREAT(h.elements AS B) ern n               n        n    n"},{"commnet_id":"comment-80233","commnet_date":"2016-06-29T02:06:38-0700","commnet_user":"Artur Kronenberg","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Artur Kronenbergn added a comment  - 29\/Jun\/2016 02:06 AM    n        n        Hi Christian, thanks for your reply.nnI just ran a test with the above suggestion and got the following results:nn1. If I do not specify WHERE TYPE(E) = B, the query returns all results to me of all subclasses.\r\nn2. If I add the WHERE clause to the query, doing this (had to rewrite the test, so some of the properties might be different):nnnrnTypedQuery&lt;Holder&gt; q = em.createQuery(\"SELECT h from HibernateTest$Holder h LEFT JOIN FETCH TREAT (h.list AS HibernateTest$B) e where TYPE(e) = HibernateTest$B\" , Holder.class);rnnnnI do get the correct result, however I am still joining on all subclasses, like:nnnrnHibernate: select hibernatet0_.holderId as holderId1_3_0_, list1_.id as id1_0_1_, list1_.subclassId as subclass2_0_1_, list1_1_.prop2 as prop1_2_1_, list1_2_.prop1 as prop1_1_1_, case  when list1_1_.id is not null  then 1 when list1_2_.id is not null  then 2 when list1_.id is not null  then 0 end as clazz_1_, list1_.subclassId as subclass2_0_0__, list1_.id as id1_0_0__ from HibernateTest$Holder hibernatet0_ left outer  join HibernateTest$A list1_ on hibernatet0_.holderId=list1_.subclassId left outer  join HibernateTest$C list1_1_ on list1_.id=list1_1_.id left outer  join HibernateTest$B list1_2_ on list1_.id=list1_2_.id where case  when list1_1_.id is not null  then 1 when list1_2_.id is not null  then 2 when list1_.id is not null  then 0 end=2rnnnnSo, I believe the treat works very similar to the type query in the original post, however there is still a lot of joining going on. I think it might be a nice improvement to performance to optimise the behaviour of the inheritance queries.  n    n    n        n            Show  n            n                        n    n    n    n                nn       Artur Kronenbergn added a comment  - 29\/Jun\/2016 02:06 AM                      Hi Christian, thanks for your reply. nn I just ran a test with the above suggestion and got the following results: nn 1. If I do not specify WHERE TYPE(E) = B, the query returns all results to me of all subclasses. n2. If I add the WHERE clause to the query, doing this (had to rewrite the test, so some of the properties might be different): nn  n rnTypedQuery&lt;Holder&gt; q = em.createQuery( \"SELECT h from HibernateTest$Holder h LEFT JOIN FETCH TREAT (h.list AS HibernateTest$B) e where TYPE(e) = HibernateTest$B\" , Holder.class);rn n  nn I do get the correct result, however I am still joining on all subclasses, like: nn  n rnHibernate: select hibernatet0_.holderId as holderId1_3_0_, list1_.id as id1_0_1_, list1_.subclassId as subclass2_0_1_, list1_1_.prop2 as prop1_2_1_, list1_2_.prop1 as prop1_1_1_,  case  when list1_1_.id is not  null  then 1 when list1_2_.id is not  null  then 2 when list1_.id is not  null  then 0 end as clazz_1_, list1_.subclassId as subclass2_0_0__, list1_.id as id1_0_0__ from HibernateTest$Holder hibernatet0_ left  outer  join HibernateTest$A list1_ on hibernatet0_.holderId=list1_.subclassId left  outer  join HibernateTest$C list1_1_ on list1_.id=list1_1_.id left  outer  join HibernateTest$B list1_2_ on list1_.id=list1_2_.id where  case  when list1_1_.id is not  null  then 1 when list1_2_.id is not  null  then 2 when list1_.id is not  null  then 0 end=2rn n  nn So, I believe the treat works very similar to the type query in the original post, however there is still a lot of joining going on. I think it might be a nice improvement to performance to optimise the behaviour of the inheritance queries.               n        n    n"},{"commnet_id":"comment-80236","commnet_date":"2016-06-29T06:35:39-0700","commnet_user":"Christian Beikov","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Christian Beikovn added a comment  - 29\/Jun\/2016 06:35 AM    n        n        @Steve Ebersole: I think this is a violation of the JPA spec 4.4.9.nnnUse of the TREAT operator therefore also has the effect of filtering on the specified type (and its subtypes) as well as performing the downcast.rnnnnI would assume that the predicate in the where clause is not necessary to get the result Artur expects. Should we open a different issue for tracking that bug?\r\nnApart from that, the joining of all the subtype tables shouldn't be necessary. I think we had a talk once about this topic and you said that these transformations would be hard to do without SQM. Is that the case for this issue? n    n    n        n            Show  n            n                        n    n    n    n                nn       Christian Beikovn added a comment  - 29\/Jun\/2016 06:35 AM                      @Steve Ebersole: I think this is a violation of the JPA spec 4.4.9. nn  n Use of the TREAT operator therefore also has the effect of filtering on the specified type (and its subtypes) as well as performing the downcast.rn n  nn I would assume that the predicate in the where clause is not necessary to get the result Artur expects. Should we open a different issue for tracking that bug? nApart from that, the joining of all the subtype tables shouldn't be necessary. I think we had a talk once about this topic and you said that these transformations would be hard to do without SQM. Is that the case for this issue?              n        n    n"},{"commnet_id":"comment-80237","commnet_date":"2016-06-29T06:48:20-0700","commnet_user":"Artur Kronenberg","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Artur Kronenbergn added a comment  - 29\/Jun\/2016 06:48 AM    n        n        Hi,nnI thought I would add the output of my test in case I described it weirdly. nnHere is the code I run (without the where clause): nnnnnrnttTypedQuery&lt;Holder&gt; q = em.createQuery(\"SELECT h from HibernateTest$Holder h LEFT JOIN FETCH TREAT (h.list AS HibernateTest$B) e\" , Holder.class);rnttrnttList&lt;Holder&gt; resultList = q.getResultList();rnttrnttresultList.stream().flatMap( x-&gt; x.list.stream()).forEach(x -&gt; System .err.println(x.getClass().getName()));rnnnnnThis is the output I get (in full):nnnnrn14:45:04.766 [main] DEBUG o.h.h.i.QueryTranslatorFactoryInitiator - QueryTranslatorFactory : org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory@3a60c416rn14:45:04.766 [main] INFO  o.h.h.i.QueryTranslatorFactoryInitiator - HHH000397: Using ASTQueryTranslatorFactoryrn14:45:04.792 [main] DEBUG o.h.h.i.ast.QueryTranslatorImpl - parse() - HQL: SELECT h from test.pandaadb.HibernateTest$Holder h LEFT JOIN FETCH TREAT (h.list AS HibernateTest$B) ern14:45:04.796 [main] DEBUG o.h.hql.internal.ast.HqlParser - Registering discovered request to treat(h.list as HibernateTest$B)rn14:45:04.798 [main] DEBUG o.h.h.i.ast.QueryTranslatorImpl - --- HQL AST ---rn -[QUERY] Node: 'query'rn    -[SELECT_FROM] Node: 'SELECT_FROM'rn       +-[FROM] Node: 'from'rn       |  +-[RANGE] Node: 'RANGE'rn       |  |  +-[DOT] Node: '.'rn       |  |  |  +-[DOT] Node: '.'rn       |  |  |  |  +-[IDENT] Node: 'test'rn       |  |  |  |  -[IDENT] Node: 'pandaadb'rn       |  |  |  -[IDENT] Node: 'HibernateTest$Holder'rn       |  |  -[ALIAS] Node: 'h'rn       |  -[JOIN] Node: 'JOIN'rn       |     +-[LEFT] Node: 'LEFT'rn       |     +-[FETCH] Node: 'FETCH'rn       |     +-[DOT] Node: '.'rn       |     |  +-[IDENT] Node: 'h'rn       |     |  -[IDENT] Node: 'list'rn       |     -[ALIAS] Node: 'e'rn       -[SELECT] Node: 'SELECT'rn          -[IDENT] Node: 'h'rnrn14:45:04.799 [main] DEBUG o.h.hql.internal.ast.ErrorCounter - throwQueryException() : no errorsrn14:45:04.814 [main] DEBUG o.h.h.i.antlr.HqlSqlBaseWalker - select &lt;&lt; begin [level=1, statement=select]rn14:45:04.822 [main] DEBUG o.h.h.internal.ast.tree.FromElement - FromClause{level=1} : test.pandaadb.HibernateTest$Holder (h) -&gt; hibernatet0_rn14:45:04.823 [main] DEBUG o.h.h.i.ast.tree.FromReferenceNode - Resolved : h -&gt; hibernatet0_.holderIdrn14:45:04.824 [main] DEBUG o.h.hql.internal.ast.tree.DotNode - getDataType() : list -&gt; org.hibernate.type.BagType(test.pandaadb.HibernateTest$Holder.list)rn14:45:04.825 [main] DEBUG o.h.h.i.ast.tree.FromElementFactory - createEntityAssociation() : One to many - path = h.list role = test.pandaadb.HibernateTest$Holder.list associatedEntityName = test.pandaadb.HibernateTest$Arn14:45:04.826 [main] DEBUG o.h.h.internal.ast.tree.FromElement - FromClause{level=1} : test.pandaadb.HibernateTest$A (e) -&gt; list1_rn14:45:04.826 [main] DEBUG o.h.hql.internal.ast.tree.FromClause - addJoinByPathMap() : h.list -&gt; FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=e,role=<span class=\"code-keyword\">null<\/span>,tableName=HibernateTest$A,tableAlias=list1_,origin=HibernateTest$Holder hibernatet0_,columns={hibernatet0_.holderId ,className=test.pandaadb.HibernateTest$A}}rn14:45:04.826 [main] DEBUG o.h.hql.internal.ast.tree.DotNode - dereferenceCollection() : Created new  FROM element for  h.list : HibernateTest$A list1_rn14:45:04.826 [main] DEBUG o.h.h.i.ast.tree.FromReferenceNode - Resolved : h.list -&gt; .rn14:45:04.827 [main] DEBUG o.h.hql.internal.ast.HqlSqlWalker - createFromJoinElement() : -- join tree --rn -[JOIN_FRAGMENT] FromElement: 'HibernateTest$A list1_' FromElement{explicit,not a collection join,fetch join,fetch non-lazy properties,classAlias=e,role=test.pandaadb.HibernateTest$Holder.list,tableName=HibernateTest$A,tableAlias=list1_,origin=HibernateTest$Holder hibernatet0_,columns={hibernatet0_.holderId ,className=test.pandaadb.HibernateTest$A}}rnrn14:45:04.827 [main] DEBUG o.h.h.i.ast.tree.FromReferenceNode - Resolved : h -&gt; hibernatet0_.holderIdrn14:45:04.828 [main] DEBUG o.h.h.i.antlr.HqlSqlBaseWalker - select : finishing up [level=1, statement=select]rn14:45:04.828 [main] DEBUG o.h.hql.internal.ast.HqlSqlWalker - processQuery() :  ( SELECT ( {select clause} hibernatet0_.holderId ) ( FromClause{level=1} ( HibernateTest$Holder hibernatet0_ HibernateTest$A list1_ ) ) )rn14:45:04.832 [main] DEBUG o.h.h.i.ast.util.JoinProcessor - Using FROM fragment [HibernateTest$Holder hibernatet0_]rn14:45:04.832 [main] DEBUG o.h.h.i.ast.util.JoinProcessor - Using FROM fragment [left outer  join HibernateTest$A list1_ on hibernatet0_.holderId=list1_.subclassId left outer  join HibernateTest$C list1_1_ on list1_.id=list1_1_.id left outer  join HibernateTest$B list1_2_ on list1_.id=list1_2_.id]rn14:45:04.833 [main] DEBUG o.h.h.i.antlr.HqlSqlBaseWalker - select &gt;&gt; end [level=1, statement=select]rn14:45:04.833 [main] DEBUG o.h.h.i.ast.QueryTranslatorImpl - --- SQL AST ---rn -[SELECT] QueryNode: 'SELECT'  querySpaces (HibernateTest$Holder,HibernateTest$A)rn    +-[SELECT_CLAUSE] SelectClause: '{select clause}'rn    |  +-[ALIAS_REF] IdentNode: 'hibernatet0_.holderId as holderId1_3_0_' {alias=h, className=test.pandaadb.HibernateTest$Holder, tableAlias=hibernatet0_}rn    |  +-[SELECT_EXPR] SelectExpressionImpl: 'list1_.id as id1_0_1_' {FromElement{explicit,not a collection join,fetch join,fetch non-lazy properties,classAlias=e,role=test.pandaadb.HibernateTest$Holder.list,tableName=HibernateTest$A,tableAlias=list1_,origin=HibernateTest$Holder hibernatet0_,columns={hibernatet0_.holderId ,className=test.pandaadb.HibernateTest$A}}}rn    |  +-[SQL_TOKEN] SqlFragment: 'list1_.subclassId as subclass2_0_1_, list1_1_.prop2 as prop1_2_1_, list1_2_.prop1 as prop1_1_1_, case  when list1_1_.id is not null  then 1 when list1_2_.id is not null  then 2 when list1_.id is not null  then 0 end as clazz_1_'rn    |  -[SQL_TOKEN] SqlFragment: 'list1_.subclassId as subclass2_0_0__, list1_.id as id1_0_0__'rn    -[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=2, fromElements=2, fromElementByClassAlias=[e, h], fromElementByTableAlias=[hibernatet0_, list1_], fromElementsByPath=[h.list], collectionJoinFromElementsByPath=[], impliedElements=[]}rn       -[FROM_FRAGMENT] FromElement: 'HibernateTest$Holder hibernatet0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=h,role=<span class=\"code-keyword\">null<\/span>,tableName=HibernateTest$Holder,tableAlias=hibernatet0_,origin=<span class=\"code-keyword\">null<\/span>,columns={,className=test.pandaadb.HibernateTest$Holder}}rn          -[JOIN_FRAGMENT] FromElement: 'left outer  join HibernateTest$A list1_ on hibernatet0_.holderId=list1_.subclassId left outer  join HibernateTest$C list1_1_ on list1_.id=list1_1_.id left outer  join HibernateTest$B list1_2_ on list1_.id=list1_2_.id' FromElement{explicit,not a collection join,fetch join,fetch non-lazy properties,classAlias=e,role=test.pandaadb.HibernateTest$Holder.list,tableName=HibernateTest$A,tableAlias=list1_,origin=HibernateTest$Holder hibernatet0_,columns={hibernatet0_.holderId ,className=test.pandaadb.HibernateTest$A}}rnrn14:45:04.833 [main] DEBUG o.h.hql.internal.ast.ErrorCounter - throwQueryException() : no errorsrn14:45:04.838 [main] DEBUG o.h.h.i.ast.QueryTranslatorImpl - HQL: SELECT h from test.pandaadb.HibernateTest$Holder h LEFT JOIN FETCH TREAT (h.list AS HibernateTest$B) ern14:45:04.838 [main] DEBUG o.h.h.i.ast.QueryTranslatorImpl - SQL: select hibernatet0_.holderId as holderId1_3_0_, list1_.id as id1_0_1_, list1_.subclassId as subclass2_0_1_, list1_1_.prop2 as prop1_2_1_, list1_2_.prop1 as prop1_1_1_, case  when list1_1_.id is not null  then 1 when list1_2_.id is not null  then 2 when list1_.id is not null  then 0 end as clazz_1_, list1_.subclassId as subclass2_0_0__, list1_.id as id1_0_0__ from HibernateTest$Holder hibernatet0_ left outer  join HibernateTest$A list1_ on hibernatet0_.holderId=list1_.subclassId left outer  join HibernateTest$C list1_1_ on list1_.id=list1_1_.id left outer  join HibernateTest$B list1_2_ on list1_.id=list1_2_.idrn14:45:04.838 [main] DEBUG o.h.hql.internal.ast.ErrorCounter - throwQueryException() : no errorsrn14:45:04.846 [main] DEBUG org.hibernate.SQL - select hibernatet0_.holderId as holderId1_3_0_, list1_.id as id1_0_1_, list1_.subclassId as subclass2_0_1_, list1_1_.prop2 as prop1_2_1_, list1_2_.prop1 as prop1_1_1_, case  when list1_1_.id is not null  then 1 when list1_2_.id is not null  then 2 when list1_.id is not null  then 0 end as clazz_1_, list1_.subclassId as subclass2_0_0__, list1_.id as id1_0_0__ from HibernateTest$Holder hibernatet0_ left outer  join HibernateTest$A list1_ on hibernatet0_.holderId=list1_.subclassId left outer  join HibernateTest$C list1_1_ on list1_.id=list1_1_.id left outer  join HibernateTest$B list1_2_ on list1_.id=list1_2_.idrnHibernate: select hibernatet0_.holderId as holderId1_3_0_, list1_.id as id1_0_1_, list1_.subclassId as subclass2_0_1_, list1_1_.prop2 as prop1_2_1_, list1_2_.prop1 as prop1_1_1_, case  when list1_1_.id is not null  then 1 when list1_2_.id is not null  then 2 when list1_.id is not null  then 0 end as clazz_1_, list1_.subclassId as subclass2_0_0__, list1_.id as id1_0_0__ from HibernateTest$Holder hibernatet0_ left outer  join HibernateTest$A list1_ on hibernatet0_.holderId=list1_.subclassId left outer  join HibernateTest$C list1_1_ on list1_.id=list1_1_.id left outer  join HibernateTest$B list1_2_ on list1_.id=list1_2_.idrn14:45:04.848 [main] DEBUG org.hibernate.loader.Loader - Result set row: 0rn14:45:04.848 [main] DEBUG org.hibernate.loader.Loader - Result row: EntityKey[test.pandaadb.HibernateTest$Holder#cee5414c-6d12-4080-994c-eb2c8b2721c9], EntityKey[test.pandaadb.HibernateTest$A#69d1383a-3b88-4781-b894-03f226f40e52]rn14:45:04.848 [main] DEBUG org.hibernate.loader.Loader - Found row of collection: [test.pandaadb.HibernateTest$Holder.list#cee5414c-6d12-4080-994c-eb2c8b2721c9]rn14:45:04.848 [main] DEBUG org.hibernate.loader.Loader - Result set row: 1rn14:45:04.848 [main] DEBUG org.hibernate.loader.Loader - Result row: EntityKey[test.pandaadb.HibernateTest$Holder#cee5414c-6d12-4080-994c-eb2c8b2721c9], EntityKey[test.pandaadb.HibernateTest$A#26e18799-8fce-4e74-8236-bcbfad1d15ab]rn14:45:04.849 [main] DEBUG org.hibernate.loader.Loader - Found row of collection: [test.pandaadb.HibernateTest$Holder.list#cee5414c-6d12-4080-994c-eb2c8b2721c9]rn14:45:04.849 [main] DEBUG org.hibernate.loader.Loader - Result set row: 2rn14:45:04.849 [main] DEBUG org.hibernate.loader.Loader - Result row: EntityKey[test.pandaadb.HibernateTest$Holder#cee5414c-6d12-4080-994c-eb2c8b2721c9], EntityKey[test.pandaadb.HibernateTest$A#f9e43150-f1a3-4112-8059-2f785aa8d5d7]rn14:45:04.849 [main] DEBUG org.hibernate.loader.Loader - Found row of collection: [test.pandaadb.HibernateTest$Holder.list#cee5414c-6d12-4080-994c-eb2c8b2721c9]rn14:45:04.849 [main] DEBUG o.h.engine.internal.TwoPhaseLoad - Resolving associations for  [test.pandaadb.HibernateTest$Holder#cee5414c-6d12-4080-994c-eb2c8b2721c9]rn14:45:04.849 [main] DEBUG o.h.engine.internal.TwoPhaseLoad - Done materializing entity [test.pandaadb.HibernateTest$Holder#cee5414c-6d12-4080-994c-eb2c8b2721c9]rn14:45:04.849 [main] DEBUG o.h.engine.internal.TwoPhaseLoad - Resolving associations for  [test.pandaadb.HibernateTest$A#69d1383a-3b88-4781-b894-03f226f40e52]rn14:45:04.849 [main] DEBUG o.h.engine.internal.TwoPhaseLoad - Done materializing entity [test.pandaadb.HibernateTest$A#69d1383a-3b88-4781-b894-03f226f40e52]rn14:45:04.849 [main] DEBUG o.h.engine.internal.TwoPhaseLoad - Resolving associations for  [test.pandaadb.HibernateTest$B#26e18799-8fce-4e74-8236-bcbfad1d15ab]rn14:45:04.849 [main] DEBUG o.h.engine.internal.TwoPhaseLoad - Done materializing entity [test.pandaadb.HibernateTest$B#26e18799-8fce-4e74-8236-bcbfad1d15ab]rn14:45:04.849 [main] DEBUG o.h.engine.internal.TwoPhaseLoad - Resolving associations for  [test.pandaadb.HibernateTest$C#f9e43150-f1a3-4112-8059-2f785aa8d5d7]rn14:45:04.849 [main] DEBUG o.h.engine.internal.TwoPhaseLoad - Done materializing entity [test.pandaadb.HibernateTest$C#f9e43150-f1a3-4112-8059-2f785aa8d5d7]rn14:45:04.849 [main] DEBUG o.h.e.l.i.CollectionLoadContext - 1 collections were found in result set for  role: test.pandaadb.HibernateTest$Holder.listrn14:45:04.849 [main] DEBUG o.h.e.l.i.CollectionLoadContext - Collection fully initialized: [test.pandaadb.HibernateTest$Holder.list#cee5414c-6d12-4080-994c-eb2c8b2721c9]rn14:45:04.849 [main] DEBUG o.h.e.l.i.CollectionLoadContext - 1 collections initialized for  role: test.pandaadb.HibernateTest$Holder.listrntest.pandaadb.HibernateTest$Arntest.pandaadb.HibernateTest$Brntest.pandaadb.HibernateTest$Crntest.pandaadb.HibernateTest$Arntest.pandaadb.HibernateTest$Brntest.pandaadb.HibernateTest$Crntest.pandaadb.HibernateTest$Arntest.pandaadb.HibernateTest$Brntest.pandaadb.HibernateTest$CrnnnnI think the repetition of the objects is due to the nature of the join, however you can see that all objects regardless of the type defined are represented. nnvs, with the WHERE clause I get:nnnnrntest.pandaadb.HibernateTest$BrnnnnnRegards,nnArtur n    n    n        n            Show  n            n                        n    n    n    n                nn       Artur Kronenbergn added a comment  - 29\/Jun\/2016 06:48 AM                      Hi, nn I thought I would add the output of my test in case I described it weirdly.  nn Here is the code I run (without the where clause):  nnnn  n rnttTypedQuery&lt;Holder&gt; q = em.createQuery( \"SELECT h from HibernateTest$Holder h LEFT JOIN FETCH TREAT (h.list AS HibernateTest$B) e\" , Holder.class);rnttrnttList&lt;Holder&gt; resultList = q.getResultList();rnttrnttresultList.stream().flatMap( x-&gt; x.list.stream()).forEach(x -&gt;  System .err.println(x.getClass().getName()));rn n  nnn This is the output I get (in full): nnn  n rn14:45:04.766 [main] DEBUG o.h.h.i.QueryTranslatorFactoryInitiator - QueryTranslatorFactory : org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory@3a60c416rn14:45:04.766 [main] INFO  o.h.h.i.QueryTranslatorFactoryInitiator - HHH000397: Using ASTQueryTranslatorFactoryrn14:45:04.792 [main] DEBUG o.h.h.i.ast.QueryTranslatorImpl - parse() - HQL: SELECT h from test.pandaadb.HibernateTest$Holder h LEFT JOIN FETCH TREAT (h.list AS HibernateTest$B) ern14:45:04.796 [main] DEBUG o.h.hql.internal.ast.HqlParser - Registering discovered request to treat(h.list as HibernateTest$B)rn14:45:04.798 [main] DEBUG o.h.h.i.ast.QueryTranslatorImpl - --- HQL AST ---rn -[QUERY] Node: 'query'rn    -[SELECT_FROM] Node: 'SELECT_FROM'rn       +-[FROM] Node: 'from'rn       |  +-[RANGE] Node: 'RANGE'rn       |  |  +-[DOT] Node: '.'rn       |  |  |  +-[DOT] Node: '.'rn       |  |  |  |  +-[IDENT] Node: 'test'rn       |  |  |  |  -[IDENT] Node: 'pandaadb'rn       |  |  |  -[IDENT] Node: 'HibernateTest$Holder'rn       |  |  -[ALIAS] Node: 'h'rn       |  -[JOIN] Node: 'JOIN'rn       |     +-[LEFT] Node: 'LEFT'rn       |     +-[FETCH] Node: 'FETCH'rn       |     +-[DOT] Node: '.'rn       |     |  +-[IDENT] Node: 'h'rn       |     |  -[IDENT] Node: 'list'rn       |     -[ALIAS] Node: 'e'rn       -[SELECT] Node: 'SELECT'rn          -[IDENT] Node: 'h'rnrn14:45:04.799 [main] DEBUG o.h.hql.internal.ast.ErrorCounter - throwQueryException() : no errorsrn14:45:04.814 [main] DEBUG o.h.h.i.antlr.HqlSqlBaseWalker - select &lt;&lt; begin [level=1, statement=select]rn14:45:04.822 [main] DEBUG o.h.h.internal.ast.tree.FromElement - FromClause{level=1} : test.pandaadb.HibernateTest$Holder (h) -&gt; hibernatet0_rn14:45:04.823 [main] DEBUG o.h.h.i.ast.tree.FromReferenceNode - Resolved : h -&gt; hibernatet0_.holderIdrn14:45:04.824 [main] DEBUG o.h.hql.internal.ast.tree.DotNode - getDataType() : list -&gt; org.hibernate.type.BagType(test.pandaadb.HibernateTest$Holder.list)rn14:45:04.825 [main] DEBUG o.h.h.i.ast.tree.FromElementFactory - createEntityAssociation() : One to many - path = h.list role = test.pandaadb.HibernateTest$Holder.list associatedEntityName = test.pandaadb.HibernateTest$Arn14:45:04.826 [main] DEBUG o.h.h.internal.ast.tree.FromElement - FromClause{level=1} : test.pandaadb.HibernateTest$A (e) -&gt; list1_rn14:45:04.826 [main] DEBUG o.h.hql.internal.ast.tree.FromClause - addJoinByPathMap() : h.list -&gt; FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=e,role= null ,tableName=HibernateTest$A,tableAlias=list1_,origin=HibernateTest$Holder hibernatet0_,columns={hibernatet0_.holderId ,className=test.pandaadb.HibernateTest$A}}rn14:45:04.826 [main] DEBUG o.h.hql.internal.ast.tree.DotNode - dereferenceCollection() : Created  new  FROM element  for  h.list : HibernateTest$A list1_rn14:45:04.826 [main] DEBUG o.h.h.i.ast.tree.FromReferenceNode - Resolved : h.list -&gt; .rn14:45:04.827 [main] DEBUG o.h.hql.internal.ast.HqlSqlWalker - createFromJoinElement() : -- join tree --rn -[JOIN_FRAGMENT] FromElement: 'HibernateTest$A list1_' FromElement{explicit,not a collection join,fetch join,fetch non-lazy properties,classAlias=e,role=test.pandaadb.HibernateTest$Holder.list,tableName=HibernateTest$A,tableAlias=list1_,origin=HibernateTest$Holder hibernatet0_,columns={hibernatet0_.holderId ,className=test.pandaadb.HibernateTest$A}}rnrn14:45:04.827 [main] DEBUG o.h.h.i.ast.tree.FromReferenceNode - Resolved : h -&gt; hibernatet0_.holderIdrn14:45:04.828 [main] DEBUG o.h.h.i.antlr.HqlSqlBaseWalker - select : finishing up [level=1, statement=select]rn14:45:04.828 [main] DEBUG o.h.hql.internal.ast.HqlSqlWalker - processQuery() :  ( SELECT ( {select clause} hibernatet0_.holderId ) ( FromClause{level=1} ( HibernateTest$Holder hibernatet0_ HibernateTest$A list1_ ) ) )rn14:45:04.832 [main] DEBUG o.h.h.i.ast.util.JoinProcessor - Using FROM fragment [HibernateTest$Holder hibernatet0_]rn14:45:04.832 [main] DEBUG o.h.h.i.ast.util.JoinProcessor - Using FROM fragment [left  outer  join HibernateTest$A list1_ on hibernatet0_.holderId=list1_.subclassId left  outer  join HibernateTest$C list1_1_ on list1_.id=list1_1_.id left  outer  join HibernateTest$B list1_2_ on list1_.id=list1_2_.id]rn14:45:04.833 [main] DEBUG o.h.h.i.antlr.HqlSqlBaseWalker - select &gt;&gt; end [level=1, statement=select]rn14:45:04.833 [main] DEBUG o.h.h.i.ast.QueryTranslatorImpl - --- SQL AST ---rn -[SELECT] QueryNode: 'SELECT'  querySpaces (HibernateTest$Holder,HibernateTest$A)rn    +-[SELECT_CLAUSE] SelectClause: '{select clause}'rn    |  +-[ALIAS_REF] IdentNode: 'hibernatet0_.holderId as holderId1_3_0_' {alias=h, className=test.pandaadb.HibernateTest$Holder, tableAlias=hibernatet0_}rn    |  +-[SELECT_EXPR] SelectExpressionImpl: 'list1_.id as id1_0_1_' {FromElement{explicit,not a collection join,fetch join,fetch non-lazy properties,classAlias=e,role=test.pandaadb.HibernateTest$Holder.list,tableName=HibernateTest$A,tableAlias=list1_,origin=HibernateTest$Holder hibernatet0_,columns={hibernatet0_.holderId ,className=test.pandaadb.HibernateTest$A}}}rn    |  +-[SQL_TOKEN] SqlFragment: 'list1_.subclassId as subclass2_0_1_, list1_1_.prop2 as prop1_2_1_, list1_2_.prop1 as prop1_1_1_,  case  when list1_1_.id is not  null  then 1 when list1_2_.id is not  null  then 2 when list1_.id is not  null  then 0 end as clazz_1_'rn    |  -[SQL_TOKEN] SqlFragment: 'list1_.subclassId as subclass2_0_0__, list1_.id as id1_0_0__'rn    -[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=2, fromElements=2, fromElementByClassAlias=[e, h], fromElementByTableAlias=[hibernatet0_, list1_], fromElementsByPath=[h.list], collectionJoinFromElementsByPath=[], impliedElements=[]}rn       -[FROM_FRAGMENT] FromElement: 'HibernateTest$Holder hibernatet0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=h,role= null ,tableName=HibernateTest$Holder,tableAlias=hibernatet0_,origin= null ,columns={,className=test.pandaadb.HibernateTest$Holder}}rn          -[JOIN_FRAGMENT] FromElement: 'left  outer  join HibernateTest$A list1_ on hibernatet0_.holderId=list1_.subclassId left  outer  join HibernateTest$C list1_1_ on list1_.id=list1_1_.id left  outer  join HibernateTest$B list1_2_ on list1_.id=list1_2_.id' FromElement{explicit,not a collection join,fetch join,fetch non-lazy properties,classAlias=e,role=test.pandaadb.HibernateTest$Holder.list,tableName=HibernateTest$A,tableAlias=list1_,origin=HibernateTest$Holder hibernatet0_,columns={hibernatet0_.holderId ,className=test.pandaadb.HibernateTest$A}}rnrn14:45:04.833 [main] DEBUG o.h.hql.internal.ast.ErrorCounter - throwQueryException() : no errorsrn14:45:04.838 [main] DEBUG o.h.h.i.ast.QueryTranslatorImpl - HQL: SELECT h from test.pandaadb.HibernateTest$Holder h LEFT JOIN FETCH TREAT (h.list AS HibernateTest$B) ern14:45:04.838 [main] DEBUG o.h.h.i.ast.QueryTranslatorImpl - SQL: select hibernatet0_.holderId as holderId1_3_0_, list1_.id as id1_0_1_, list1_.subclassId as subclass2_0_1_, list1_1_.prop2 as prop1_2_1_, list1_2_.prop1 as prop1_1_1_,  case  when list1_1_.id is not  null  then 1 when list1_2_.id is not  null  then 2 when list1_.id is not  null  then 0 end as clazz_1_, list1_.subclassId as subclass2_0_0__, list1_.id as id1_0_0__ from HibernateTest$Holder hibernatet0_ left  outer  join HibernateTest$A list1_ on hibernatet0_.holderId=list1_.subclassId left  outer  join HibernateTest$C list1_1_ on list1_.id=list1_1_.id left  outer  join HibernateTest$B list1_2_ on list1_.id=list1_2_.idrn14:45:04.838 [main] DEBUG o.h.hql.internal.ast.ErrorCounter - throwQueryException() : no errorsrn14:45:04.846 [main] DEBUG org.hibernate.SQL - select hibernatet0_.holderId as holderId1_3_0_, list1_.id as id1_0_1_, list1_.subclassId as subclass2_0_1_, list1_1_.prop2 as prop1_2_1_, list1_2_.prop1 as prop1_1_1_,  case  when list1_1_.id is not  null  then 1 when list1_2_.id is not  null  then 2 when list1_.id is not  null  then 0 end as clazz_1_, list1_.subclassId as subclass2_0_0__, list1_.id as id1_0_0__ from HibernateTest$Holder hibernatet0_ left  outer  join HibernateTest$A list1_ on hibernatet0_.holderId=list1_.subclassId left  outer  join HibernateTest$C list1_1_ on list1_.id=list1_1_.id left  outer  join HibernateTest$B list1_2_ on list1_.id=list1_2_.idrnHibernate: select hibernatet0_.holderId as holderId1_3_0_, list1_.id as id1_0_1_, list1_.subclassId as subclass2_0_1_, list1_1_.prop2 as prop1_2_1_, list1_2_.prop1 as prop1_1_1_,  case  when list1_1_.id is not  null  then 1 when list1_2_.id is not  null  then 2 when list1_.id is not  null  then 0 end as clazz_1_, list1_.subclassId as subclass2_0_0__, list1_.id as id1_0_0__ from HibernateTest$Holder hibernatet0_ left  outer  join HibernateTest$A list1_ on hibernatet0_.holderId=list1_.subclassId left  outer  join HibernateTest$C list1_1_ on list1_.id=list1_1_.id left  outer  join HibernateTest$B list1_2_ on list1_.id=list1_2_.idrn14:45:04.848 [main] DEBUG org.hibernate.loader.Loader - Result set row: 0rn14:45:04.848 [main] DEBUG org.hibernate.loader.Loader - Result row: EntityKey[test.pandaadb.HibernateTest$Holder#cee5414c-6d12-4080-994c-eb2c8b2721c9], EntityKey[test.pandaadb.HibernateTest$A#69d1383a-3b88-4781-b894-03f226f40e52]rn14:45:04.848 [main] DEBUG org.hibernate.loader.Loader - Found row of collection: [test.pandaadb.HibernateTest$Holder.list#cee5414c-6d12-4080-994c-eb2c8b2721c9]rn14:45:04.848 [main] DEBUG org.hibernate.loader.Loader - Result set row: 1rn14:45:04.848 [main] DEBUG org.hibernate.loader.Loader - Result row: EntityKey[test.pandaadb.HibernateTest$Holder#cee5414c-6d12-4080-994c-eb2c8b2721c9], EntityKey[test.pandaadb.HibernateTest$A#26e18799-8fce-4e74-8236-bcbfad1d15ab]rn14:45:04.849 [main] DEBUG org.hibernate.loader.Loader - Found row of collection: [test.pandaadb.HibernateTest$Holder.list#cee5414c-6d12-4080-994c-eb2c8b2721c9]rn14:45:04.849 [main] DEBUG org.hibernate.loader.Loader - Result set row: 2rn14:45:04.849 [main] DEBUG org.hibernate.loader.Loader - Result row: EntityKey[test.pandaadb.HibernateTest$Holder#cee5414c-6d12-4080-994c-eb2c8b2721c9], EntityKey[test.pandaadb.HibernateTest$A#f9e43150-f1a3-4112-8059-2f785aa8d5d7]rn14:45:04.849 [main] DEBUG org.hibernate.loader.Loader - Found row of collection: [test.pandaadb.HibernateTest$Holder.list#cee5414c-6d12-4080-994c-eb2c8b2721c9]rn14:45:04.849 [main] DEBUG o.h.engine.internal.TwoPhaseLoad - Resolving associations  for  [test.pandaadb.HibernateTest$Holder#cee5414c-6d12-4080-994c-eb2c8b2721c9]rn14:45:04.849 [main] DEBUG o.h.engine.internal.TwoPhaseLoad - Done materializing entity [test.pandaadb.HibernateTest$Holder#cee5414c-6d12-4080-994c-eb2c8b2721c9]rn14:45:04.849 [main] DEBUG o.h.engine.internal.TwoPhaseLoad - Resolving associations  for  [test.pandaadb.HibernateTest$A#69d1383a-3b88-4781-b894-03f226f40e52]rn14:45:04.849 [main] DEBUG o.h.engine.internal.TwoPhaseLoad - Done materializing entity [test.pandaadb.HibernateTest$A#69d1383a-3b88-4781-b894-03f226f40e52]rn14:45:04.849 [main] DEBUG o.h.engine.internal.TwoPhaseLoad - Resolving associations  for  [test.pandaadb.HibernateTest$B#26e18799-8fce-4e74-8236-bcbfad1d15ab]rn14:45:04.849 [main] DEBUG o.h.engine.internal.TwoPhaseLoad - Done materializing entity [test.pandaadb.HibernateTest$B#26e18799-8fce-4e74-8236-bcbfad1d15ab]rn14:45:04.849 [main] DEBUG o.h.engine.internal.TwoPhaseLoad - Resolving associations  for  [test.pandaadb.HibernateTest$C#f9e43150-f1a3-4112-8059-2f785aa8d5d7]rn14:45:04.849 [main] DEBUG o.h.engine.internal.TwoPhaseLoad - Done materializing entity [test.pandaadb.HibernateTest$C#f9e43150-f1a3-4112-8059-2f785aa8d5d7]rn14:45:04.849 [main] DEBUG o.h.e.l.i.CollectionLoadContext - 1 collections were found in result set  for  role: test.pandaadb.HibernateTest$Holder.listrn14:45:04.849 [main] DEBUG o.h.e.l.i.CollectionLoadContext - Collection fully initialized: [test.pandaadb.HibernateTest$Holder.list#cee5414c-6d12-4080-994c-eb2c8b2721c9]rn14:45:04.849 [main] DEBUG o.h.e.l.i.CollectionLoadContext - 1 collections initialized  for  role: test.pandaadb.HibernateTest$Holder.listrntest.pandaadb.HibernateTest$Arntest.pandaadb.HibernateTest$Brntest.pandaadb.HibernateTest$Crntest.pandaadb.HibernateTest$Arntest.pandaadb.HibernateTest$Brntest.pandaadb.HibernateTest$Crntest.pandaadb.HibernateTest$Arntest.pandaadb.HibernateTest$Brntest.pandaadb.HibernateTest$Crn n  nn I think the repetition of the objects is due to the nature of the join, however you can see that all objects regardless of the type defined are represented.  nn vs, with the WHERE clause I get: nnn  n rntest.pandaadb.HibernateTest$Brn n  nnn Regards, nn Artur              n        n    n"}]}},{"HHH-10884":{"info":{"issue_title":"AbstractPathImpl NullPointerException","issue_key":"HHH-10884","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.1.0 ,                                            5.2.0","issue_component":"5.1.0 ,                                            5.2.0","issue_labels":"5.1.0","issue_description":"Line 123 shows:  AbstractPathImpl.java   \t\tSingularAttributePath&lt;Y&gt; path = (SingularAttributePath&lt;Y&gt;) resolveCachedAttributePath( attribute.getName() );     The assumption that attribute is not null might not be valid.  It would be helpful if an exception was thrown to indicate an unexpected null attribute.  Something like:  AbstractPathImpl.java   \tpublic  &lt;Y&gt; Path&lt;Y&gt; get(SingularAttribute&lt;? super  X, Y&gt; attribute) {  \t\tif  ( ! canBeDereferenced() ) {  \t\t\tthrow  illegalDereference();  \t\t}    \t\tif ( attribute == null  ) {  \t\t\tthrow  new  MissingAttributeException( \"SingularAttribute is null .\"  );  \t\t}    \t\tSingularAttributePath&lt;Y&gt; path = (SingularAttributePath&lt;Y&gt;) resolveCachedAttributePath( attribute.getName() );  \t\tif  ( path == null  ) {  \t\t\tpath = new  SingularAttributePath&lt;Y&gt;(  \t\t\t\t\tcriteriaBuilder(),  \t\t\t\t\tattribute.getJavaType(),  \t\t\t\t\tgetPathSourceForSubPaths(),  \t\t\t\t\tattribute  \t\t\t);  \t\t\tregisterAttributePath( attribute.getName(), path );  \t\t}  \t\treturn  path;  \t}     A more helpful message to assist with isolating the issue would be fantastic.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10884?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-79859","commnet_date":"2016-06-22T21:15:20-0700","commnet_user":"Dave Jarvis","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Dave Jarvisn added a comment  - 22\/Jun\/2016 21:15 PM    n        n        See also:nnnthttp:\/\/stackoverflow.com\/questions\/34823602\/hibernate-jpa-nullpointerexception-when-accessing-singularattribute-parameternthttp:\/\/stackoverflow.com\/questions\/3854687\/jpa-hibernate-static-metamodel-attributes-not-populated-nullpointerexception\/4892085#4892085nthttp:\/\/stackoverflow.com\/questions\/14554945\/nullpointerexception-at-org-hibernate-ejb-criteria-path-abstractpathimpl-getnthttps:\/\/forum.hibernate.org\/viewtopic.php?f=1&amp;t=1009869nn n    n    n        n            Show  n            n                        n    n    n    n                nn       Dave Jarvisn added a comment  - 22\/Jun\/2016 21:15 PM                      See also: nn nt  http:\/\/stackoverflow.com\/questions\/34823602\/hibernate-jpa-nullpointerexception-when-accessing-singularattribute-parameter  nt  http:\/\/stackoverflow.com\/questions\/3854687\/jpa-hibernate-static-metamodel-attributes-not-populated-nullpointerexception\/4892085#4892085  nt  http:\/\/stackoverflow.com\/questions\/14554945\/nullpointerexception-at-org-hibernate-ejb-criteria-path-abstractpathimpl-get  nt  https:\/\/forum.hibernate.org\/viewtopic.php?f=1&amp;t=1009869  n n             n        n    n"}]}},{"OGM-1102":{"info":{"issue_title":"Upgrade maven-jar-plugin to 3.0.1 to fix memory issues","issue_key":"OGM-1102","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.1.Final","issue_labels":"5.0.1.Final","issue_description":"maven-jar-plugin 3.0.0 introduced memory issues. I just had the problem with a Travis build on my fork.  We should upgrade to 3.0.1.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1102?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10883":{"info":{"issue_title":"Restore the Maven artifact hibernate-java8 as an empty placeholder","issue_key":"HHH-10883","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.1","issue_labels":"5.2.1","issue_description":"Similarly to https:\/\/hibernate.atlassian.net\/browse\/HHH-10823 it would make life easier for people migrating from 5.0 or 5.1 to similarly restore the hibernate-java8 artifact.  This is particularly useful for people needing to run the same build and\/or test matrixes on various versions of Hibernate ORM.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10883?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10880":{"info":{"issue_title":"Bad sql with composite keys","issue_key":"HHH-10880","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"4.3.11 ,                                            5.0.9 ,                                            5.2.0","issue_component":"4.3.11 ,                                            5.0.9 ,                                            5.2.0","issue_labels":"4.3.11","issue_description":"When we use composite keys the generated sql is incompatible in the majority of rdbms.  If i look at IdentCode.java i don't understand how it might works. The resolveAsAlias method is inadeguate for catch all the cases.  For example with composite keys the following jpql queries will fails:  select count(distinct e) form entity --&gt;(SQL) select count(distinct id_part1, id_part2 ) from entity  select e from entity where e exists (select ee from entity as ee) --&gt;(SQL) select id_part1, id_part2 from entity where (id_part1, id_part2) exists (select (id_part1, id_part2) from entity)  select e, count from entity e group by e (HHH-1615)","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10880?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1096":{"info":{"issue_title":"Compatibility with Java 9","issue_key":"OGM-1096","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.x","issue_labels":"5.x","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1096?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10877":{"info":{"issue_title":"Introduce a configuration option to allow out of transaction updates","issue_key":"HHH-10877","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.1","issue_labels":"5.2.1","issue_description":"With the \"native\" Session now being effectively an EntityManager, this now behaves in all effects like an EntityManager and this includes refusing to flush any update out of a transaction boundary. Such a \"strict\" check was previously only applied to users of the HEM module but now it applies to Session too because of the inheritance.  This is probably a good thing, although it might be a migration issue for users of the native Session API so it might be nice to introduce a property which would allow people to still shoot themselves in the feet if they highly wish for it.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10877?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-79739","commnet_date":"2016-06-21T11:59:59-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 21\/Jun\/2016 11:59 AM    n        n        Related: https:\/\/developer.jboss.org\/wiki\/Non-transactionalDataAccessAndTheAuto-commitMode n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 21\/Jun\/2016 11:59 AM                      Related:  https:\/\/developer.jboss.org\/wiki\/Non-transactionalDataAccessAndTheAuto-commitMode               n        n    n"},{"commnet_id":"comment-79741","commnet_date":"2016-06-21T12:47:10-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 21\/Jun\/2016 12:47 PM    n        n        Let's not mince words nnThis is most definitely a bad behavior.  We are temporarily adding a setting that continues to allow users to \"shoot themselves in the foot\" (as you mention) for 5.x.  This will revert to not allowing the behavior in 6.0 as well. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 21\/Jun\/2016 12:47 PM                      Let's not mince words   nn This is most definitely a bad behavior.  We are temporarily adding a setting that continues to allow users to \"shoot themselves in the foot\" (as you mention) for 5.x.  This will revert to not allowing the behavior in 6.0 as well.              n        n    n"},{"commnet_id":"comment-79830","commnet_date":"2016-06-22T01:33:25-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 22\/Jun\/2016 01:33 AM    n        n        +1 for having a setting. Can we emit a large red blinking warning if it is enabled  n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 22\/Jun\/2016 01:33 AM                      +1 for having a setting. Can we emit a large red blinking warning if it is enabled                n        n    n"},{"commnet_id":"comment-79832","commnet_date":"2016-06-22T01:45:59-0700","commnet_user":"Carsten Hammer","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Carsten Hammern added a comment  - 22\/Jun\/2016 01:45 AM    n        n        Would it be possible to log a warning including a stacktrace that allows to identify the location of the code that is doing this? The same would be useful for the \"enable_lazy_load_no_trans=true\" setting to investigate legacy code. n    n    n        n            Show  n            n                        n    n    n    n                nn       Carsten Hammern added a comment  - 22\/Jun\/2016 01:45 AM                      Would it be possible to log a warning including a stacktrace that allows to identify the location of the code that is doing this? The same would be useful for the \"enable_lazy_load_no_trans=true\" setting to investigate legacy code.              n        n    n"},{"commnet_id":"comment-79833","commnet_date":"2016-06-22T02:21:22-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 22\/Jun\/2016 02:21 AM    n        n        Steve Ebersole about the flag, assuming it is set to shoot me in the foot, will it also affect users that have bootstrapped Hibernate ORM via the JPA API ?nnI am asking because before, I think the behavior was:nnntlet out of tx flushes when Hibernate ORm was bootstrapped with the native APIs (e.g. Configuration)ntthrow the exception mandated by JPA when Hibernate ORM was bootstrapped via the Hibernate EM ways (pure JPA API or Ejb3Configuration etc)nnnnIt's not to alter the idea but more to get my head around it. n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 22\/Jun\/2016 02:21 AM                       Steve Ebersole  about the flag, assuming it is set to shoot me in the foot, will it also affect users that have bootstrapped Hibernate ORM via the JPA API ? nn I am asking because before, I think the behavior was: nn nt let out of tx flushes when Hibernate ORm was bootstrapped with the native APIs (e.g. Configuration) nt throw the exception mandated by JPA when Hibernate ORM was bootstrapped via the Hibernate EM ways (pure JPA API or Ejb3Configuration etc) n nnn It's not to alter the idea but more to get my head around it.              n        n    n"},{"commnet_id":"comment-80132","commnet_date":"2016-06-28T02:15:34-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 28\/Jun\/2016 02:15 AM    n        n        Two unit tests we have in Hibernate Search:nnthttps:\/\/github.com\/hibernate\/hibernate-search\/blob\/8a34744abf788838269597f0632facde974a927c\/orm\/src\/test\/java\/org\/hibernate\/search\/test\/engine\/LazyCollectionsUpdatingTest.javanthttps:\/\/github.com\/hibernate\/hibernate-search\/blob\/8a34744abf788838269597f0632facde974a927c\/orm\/src\/test\/java\/org\/hibernate\/search\/test\/engine\/TransactionTest.javannn n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 28\/Jun\/2016 02:15 AM                      Two unit tests we have in Hibernate Search: n nt  https:\/\/github.com\/hibernate\/hibernate-search\/blob\/8a34744abf788838269597f0632facde974a927c\/orm\/src\/test\/java\/org\/hibernate\/search\/test\/engine\/LazyCollectionsUpdatingTest.java  nt  https:\/\/github.com\/hibernate\/hibernate-search\/blob\/8a34744abf788838269597f0632facde974a927c\/orm\/src\/test\/java\/org\/hibernate\/search\/test\/engine\/TransactionTest.java  n nn             n        n    n"}]}},{"HV-1078":{"info":{"issue_title":"Update the CONTRIBUTING.md file","issue_key":"HV-1078","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.3.0.CR1","issue_labels":"5.3.0.CR1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1078?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1092":{"info":{"issue_title":"Add missing @Override annotation","issue_key":"OGM-1092","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0.Alpha1","issue_labels":"5.1.0.Alpha1","issue_description":"A bunch of @Override annotations are missing. The Checkstyle check is not really useful as it only throws an error if you are using the @inheritDoc tag and you don't have an @Override annotation.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1092?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2304":{"info":{"issue_title":"Add missing @Override annotation","issue_key":"HSEARCH-2304","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta2","issue_labels":"5.6.0.Beta2","issue_description":"A bunch of @Override annotations are missing. The Checkstyle check is not really useful as it only throws an error if you are using the @inheritDoc tag and you don't have an @Override annotation.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2304?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1077":{"info":{"issue_title":"Add missing @Override annotation","issue_key":"HV-1077","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.3.0.CR1","issue_labels":"5.3.0.CR1","issue_description":"A bunch of @Override annotations are missing. The Checkstyle check is not really useful as it only throws an error if you are using the @inheritDoc tag and you don't have an @Override annotation.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1077?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10872":{"info":{"issue_title":"pls update change log - connection handling release mode changed from &#39;hold&#39; to &#39;after transaction&#39;","issue_key":"HHH-10872","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Trivial","issue_affects_version":"Unresolved","issue_fix_version":"5.2.0","issue_component":"5.2.0","issue_labels":"5.2.0","issue_description":"The effective default for the connection handling mode was changed from DELAYED_ACQUISITION_AND_HOLD to DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION.  It may help other people migrating their projects to know about this change.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10872?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-81033","commnet_date":"2016-07-13T10:25:07-0700","commnet_user":"Dmytro Bondar","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Dmytro Bondarn added a comment  - 13\/Jul\/2016 10:25 AM    n        n        Hi! I want to fix this issue but have some questions. The effective default for the connection handling mode was changed when was solved issue n    n                n        n            n            HHH-10664n        n                                                    Closed n             n and changelog file has mentioned about that issuennntntnttTaskntntntn    n                n        n            n            HHH-10664n        n                                                    Closed n             n - Prep 5.2 feature branchnnnnIs file  changelog.txt generated automatically or manually? For fixing this problem should I add comment to that row, for examplennntn    n                n        n            n            HHH-10664n        n                                                    Closed n             n - Prep 5.2 feature branch (connection handling release mode changed from 'hold' to 'after transaction')nnnnor add the new record about this with a descriptionnnntn    n                n        n            n            HHH-10664n        n                                                    Closed n             n - Prep 5.2 feature branchntn    n                n        n            n            HHH-10872n        n                                                    Open n             n - Connection handling release mode changed from 'hold' to 'after transaction'nn n    n    n        n            Show  n            n                        n    n    n    n                nn       Dmytro Bondarn added a comment  - 13\/Jul\/2016 10:25 AM                      Hi! I want to fix this issue but have some questions. The effective default for the connection handling mode was changed when was solved issue n     n                 n         n             n            HHH-10664n         n                                                     Closed n             n and changelog file has mentioned about that issue nn nt nt ntt Task nt nt nt n     n                 n         n             n            HHH-10664n         n                                                     Closed n             n - Prep 5.2 feature branch n nnn Is file  changelog.txt generated automatically or manually? For fixing this problem should I add comment to that row, for example nn nt n     n                 n         n             n            HHH-10664n         n                                                     Closed n             n - Prep 5.2 feature branch (connection handling release mode changed from 'hold' to 'after transaction') n nnn or add the new record about this with a description nn nt n     n                 n         n             n            HHH-10664n         n                                                     Closed n             n - Prep 5.2 feature branch nt n     n                 n         n             n            HHH-10872n         n                                                     Open n             n - Connection handling release mode changed from 'hold' to 'after transaction' n n             n        n    n"}]}},{"HHH-10868":{"info":{"issue_title":"Allow non-null columns with default values and still set component to null","issue_key":"HHH-10868","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"hibernate-core","issue_description":"Currently if any column that is mapped by a component is non-null the component will be initialized.  Feature:  I would suggest to allow a column have an optional default value, and if the value equals the default value the component will be null. So even if column flag is not null but 0 the variable fooComp will still be null.  Component.xml    &lt;component name=\"fooComp\"  class=\"package .FooComp\" &gt;  \t&lt;property name=\"name\" \/&gt;          &lt;property name=\"flag\"  default =\"0\" \/&gt;  &lt;\/component&gt;     This makes it easier for other queries to check against flag or similar columns, since a cumbersome construct like COALESCE(flag, 0) = 1 is not required.   Example:  By default we make all our bit fields non-null, since null mostly indicates a three-way logic.  We had a table foo with two columns we wanted to map to a composite:  Foo.sql   test INT NOT NULL,  name VARCHAR(64) NULL,   flag BIT NOT NULL DEFAULT = 0     Foo.java   private  int  test;  private  FooComp fooComp;     FooComp.java   @NotBlank  private  String  name;  private  boolean  flag;     With the column flag being non nullable the component was always initialized, which was not desired. So we had to make it nullable, replicate default in queries using COALESCE(flag, 0) and add @NotNull to flag.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10868?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2301":{"info":{"issue_title":"CriteriaObjectInitializer is suboptimal when we query only one subtype of a hierarchy","issue_key":"HSEARCH-2301","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.5.3.Final ,                                            5.6.0.Beta1","issue_component":"5.5.3.Final ,                                            5.6.0.Beta1","issue_labels":"5.5.3.Final","issue_description":"This is a followup of this Stackoverflow question: http:\/\/stackoverflow.com\/questions\/37894280\/hibernate-search-mysql-error-too-many-joins-with-joined-inheritance-model .  When we query only one subtype of a hierarchy, CriteriaObjectInitializer creates a Criteria on the root type of the hierarchy while we could create a Criteria on the subtype only.  This would avoid a lot of joins when having a complex hierarchy.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2301?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1091":{"info":{"issue_title":"Clarify what needs to be done to do searches in the getting started guide","issue_key":"OGM-1091","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.0.0.Final","issue_component":"5.0.0.Final","issue_labels":"5.0.0.Final","issue_description":"By following the getting started guide I can create a very simple app that creates entities and finds them by ID.  What doesn't work is if I just try to search for them all.  Note that I converted employee entity to use OGM, but its based on your guide.       Caused by: org.hibernate.search.exception.SearchException: HSEARCH000278: Can't build query for  type 'org.swarmic.examples.jparest.Employee' which is neither indexed nor has any indexed sub-types.  \tat org.hibernate.search.query.dsl.impl.ConnectedQueryContextBuilder$HSearchEntityContext.&lt;init&gt;(ConnectedQueryContextBuilder.java:51)  \tat org.hibernate.search.query.dsl.impl.ConnectedQueryContextBuilder.forEntity(ConnectedQueryContextBuilder.java:37)  \tat org.hibernate.hql.lucene.internal.builder.predicate.LucenePredicateFactory.getRootPredicate(LucenePredicateFactory.java:77)  \tat org.hibernate.hql.ast.spi.SingleEntityQueryBuilder.setEntityType(SingleEntityQueryBuilder.java:76)  \tat org.hibernate.hql.ast.spi.SingleEntityQueryRendererDelegate.registerPersisterSpace(SingleEntityQueryRendererDelegate.java:117)  \tat org.hibernate.hql.ast.render.QueryRenderer.entityName(QueryRenderer.java:12331)  \tat org.hibernate.hql.ast.render.QueryRenderer.persisterSpaceRoot(QueryRenderer.java:3063)  \tat org.hibernate.hql.ast.render.QueryRenderer.persisterSpace(QueryRenderer.java:2955)  \tat org.hibernate.hql.ast.render.QueryRenderer.persisterSpaces(QueryRenderer.java:2892)  \tat org.hibernate.hql.ast.render.QueryRenderer.fromClause(QueryRenderer.java:2802)  \tat org.hibernate.hql.ast.render.QueryRenderer.selectFrom(QueryRenderer.java:2703)  \tat org.hibernate.hql.ast.render.QueryRenderer.querySpec(QueryRenderer.java:2181)  \tat org.hibernate.hql.ast.render.QueryRenderer.queryExpression(QueryRenderer.java:2105)  \tat org.hibernate.hql.ast.render.QueryRenderer.queryStatement(QueryRenderer.java:1744)  \tat org.hibernate.hql.ast.render.QueryRenderer.queryStatementSet(QueryRenderer.java:1657)  \tat org.hibernate.hql.ast.render.QueryRenderer.statement(QueryRenderer.java:653)  \tat org.hibernate.hql.ast.spi.QueryRendererProcessor.process(QueryRendererProcessor.java:51)  \tat org.hibernate.hql.QueryParser.parseQuery(QueryParser.java:82)  \tat org.hibernate.ogm.query.impl.FullTextSearchQueryTranslator.getLuceneQuery(FullTextSearchQueryTranslator.java:100)  \tat org.hibernate.ogm.query.impl.FullTextSearchQueryTranslator.list(FullTextSearchQueryTranslator.java:75)  \tat org.hibernate.engine.query.spi.HQLQueryPlan.performList(HQLQueryPlan.java:216)  \tat org.hibernate.internal.SessionImpl.list(SessionImpl.java:1326)  \tat org.hibernate.internal.QueryImpl.list(QueryImpl.java:87)  \tat org.hibernate.jpa.internal.QueryImpl.list(QueryImpl.java:606)  \tat org.hibernate.jpa.internal.QueryImpl.getResultList(QueryImpl.java:483)  \tat org.swarmic.examples.jparest.EmployeeService.getAll(EmployeeService.java:41)  \tat org.swarmic.examples.jparest.EmployeeService$Proxy$_$$_WeldClientProxy.getAll(Unknown Source)  \tat org.swarmic.examples.jparest.EmployeeRest.get(EmployeeRest.java:44)  \tat org.swarmic.examples.jparest.EmployeeRest$Proxy$_$$_WeldSubclass.get(Unknown Source)  \tat org.swarmic.examples.jparest.EmployeeRest$Proxy$_$$_WeldClientProxy.get(Unknown Source)  \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)  \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)  \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)  \tat java.lang.reflect.Method.invoke(Method.java:498)  \tat org.jboss.resteasy.core.MethodInjectorImpl.invoke(MethodInjectorImpl.java:137)  \tat org.jboss.resteasy.core.ResourceMethodInvoker.invokeOnTarget(ResourceMethodInvoker.java:296)  \tat org.jboss.resteasy.core.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:250)  \tat org.jboss.resteasy.core.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:237)  \tat org.jboss.resteasy.core.SynchronousDispatcher.invoke(SynchronousDispatcher.java:356)  \t... 27 more     I suspect there's additional setup required, but it would be great if the getting started guide explained this since doing arbitrary searches is a general use case.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1091?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-79839","commnet_date":"2016-06-22T06:02:21-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 22\/Jun\/2016 06:02 AM    n        n        If you say search, what exactly do you mean? A simple JPQL query? Or a full-text query via Hibernate Search? Or a native query? Nice idea to show that. Maybe you'd be interested in sending in a PR for it? n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 22\/Jun\/2016 06:02 AM                      If you say search, what exactly do you mean? A simple JPQL query? Or a full-text query via Hibernate Search? Or a native query? Nice idea to show that. Maybe you'd be interested in sending in a PR for it?              n        n    n"},{"commnet_id":"comment-79854","commnet_date":"2016-06-22T16:15:36-0700","commnet_user":"John Ament","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       John Amentn added a comment  - 22\/Jun\/2016 16:15 PM    n        n        I'm talking about any arbitrary JPQL query.  Its not clear from reading the getting started guide that you need hibernate search to do the query.  But all of those would be useful if not trivial, since inserting and retrieving an entry by id are not very useful features overall.nnUnfortunately, due to the LGPL license on the codebase, I cannot provide a PR for this.  Are your docs under a different license?  Doesn't appear so. n    n    n        n            Show  n            n                        n    n    n    n                nn       John Amentn added a comment  - 22\/Jun\/2016 16:15 PM                      I'm talking about any arbitrary JPQL query.  Its not clear from reading the getting started guide that you need hibernate search to do the query.  But all of those would be useful if not trivial, since inserting and retrieving an entry by id are not very useful features overall. nn Unfortunately, due to the LGPL license on the codebase, I cannot provide a PR for this.  Are your docs under a different license?  Doesn't appear so.              n        n    n"},{"commnet_id":"comment-79864","commnet_date":"2016-06-22T23:48:35-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 22\/Jun\/2016 23:48 PM    n        n        Ok, got you. It's discussed in more detail in the store-specific chapters, but having something short in the quick start would be nice indeed. Regarding the need for HSEARCH, that happens to be the case for Infinispan, i.e. here we translate JPQL queries into equivalent Lucene full-text queries (if possible), which is why you need @Field and friends. For other stores (specifically, MongoDB and Neo4j) we translate JPQL into their specific query language, meaning that no separate index maintained via Hibernate Search is needed.nnRegarding the license, as you say the entire project is under LGPL. If you don't mind, may I ask why it's stopping to contribute (it's perfectly alright if you don't want to disclose the reasons)? We might consider to put docs unter some CreativeCommons license. Emmanuel Bernard, any thoughts on that? n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 22\/Jun\/2016 23:48 PM                      Ok, got you. It's discussed in more detail in the store-specific chapters, but having something short in the quick start would be nice indeed. Regarding the need for HSEARCH, that happens to be the case for Infinispan, i.e. here we translate JPQL queries into equivalent Lucene full-text queries (if possible), which is why you need  @Field  and friends. For other stores (specifically, MongoDB and Neo4j) we translate JPQL into their specific query language, meaning that no separate index maintained via Hibernate Search is needed. nn Regarding the license, as you say the entire project is under LGPL. If you don't mind, may I ask why it's stopping to contribute (it's perfectly alright if you don't want to disclose the reasons)? We might consider to put docs unter some CreativeCommons license.  Emmanuel Bernard , any thoughts on that?              n        n    n"},{"commnet_id":"comment-79932","commnet_date":"2016-06-23T09:56:18-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 23\/Jun\/2016 09:56 AM    n        n        We could but that's the first time I hear such concern and where a different license on the doc would have helped. Which CC would it be ? We need to check if embedding CC content in a LGPL distro is also legally valid. n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 23\/Jun\/2016 09:56 AM                      We could but that's the first time I hear such concern and where a different license on the doc would have helped. Which CC would it be ? We need to check if embedding CC content in a LGPL distro is also legally valid.              n        n    n"}]}},{"HV-1076":{"info":{"issue_title":"Improve Checkstyle configuration","issue_key":"HV-1076","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.3.0.CR1","issue_labels":"5.3.0.CR1","issue_description":"The checkstyle configuration of Validator was very lenient (no check for indentation for instance) and a lot of formatting rules were not enforced.  The Hibernate Search configuration is much more complete and is a good base for Validator.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1076?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2300":{"info":{"issue_title":"Use Maven Central first and only contact JBoss Nexus if the artifact is not found in Central","issue_key":"HSEARCH-2300","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta2","issue_labels":"5.6.0.Beta2","issue_description":"In our settings-example.xml, we only define the JBoss repository: Central is ignored and every request end up on JBoss Nexus while we could avoid that.\r\n We already did something about this for Travis but we might as well definitely integrate it in our settings-example.xml","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2300?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1090":{"info":{"issue_title":"Use Maven Central first and only contact JBoss Nexus if the artifact is not found in Central","issue_key":"OGM-1090","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.1.Final","issue_labels":"5.0.1.Final","issue_description":"In our settings-example.xml, we only define the JBoss repository: Central is ignored and every request end up on JBoss Nexus while we could avoid that.  We already did something about this for Travis but we might as well definitely integrate it in our settings-example.xml","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1090?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2299":{"info":{"issue_title":"Create CONTRIBUTING.md file","issue_key":"HSEARCH-2299","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta2","issue_labels":"5.6.0.Beta2","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2299?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1075":{"info":{"issue_title":"Update and improve the French translation","issue_key":"HV-1075","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.3.0.CR1","issue_labels":"5.3.0.CR1","issue_description":"The French translation needs to be updated and there is room for improvement on a number of strings.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1075?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1074":{"info":{"issue_title":"Add Arabic translation","issue_key":"HV-1074","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"5.3.0.CR1","issue_component":"5.3.0.CR1","issue_labels":"5.3.0.CR1","issue_description":"Add Arabic translations for the validation messages.  Attached is a file with most messages translated, formatted as Unicode.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1074?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10861":{"info":{"issue_title":"JPA Constructor Expressions fails with nullLiteral passed to constructor","issue_key":"HHH-10861","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.1.0 ,                                            5.0.9 ,                                            5.2.0","issue_component":"5.1.0 ,                                            5.0.9 ,                                            5.2.0","issue_labels":"5.1.0","issue_description":"CriteriaQuery fails with     org.hibernate.PropertyNotFoundException: no appropriate constructor in class    when use nullLiteral in query.\r\n So if we have constructor like:     public  TestForm(String  a, String  b, String  d) {          this .a = a;          this .b = b;          this .d = d;      }     The query like:             ...          CriteriaQuery&lt;TestForm&gt; c = cb.createQuery(TestForm.class);          Root&lt;TestEntity&gt; r = c.from(TestEntity.class);          c.multiselect(r.get(\"name\" ), cb.nullLiteral(String .class), r.get(\"name\" ));          ....    Will fail with no appropriate constructor in class exception.\r\n Test case attached","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10861?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-79438","commnet_date":"2016-06-16T07:51:27-0700","commnet_user":"Nikita Metzger","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Nikita Metzgern added a comment  - 16\/Jun\/2016 07:51 AM    n        n        It looks like NullLiteralExpression doesn't do any magic and returns plain null:nnnrnpublic  String  render(RenderingContext renderingContext) {rntt<span class=\"code-keyword\">return<\/span> <span class=\"code-quote\">\"<span class=\"code-keyword\">null<\/span>\"<\/span>;rnt}rnnnnIt should make cast to appropriate type based on provided javaType.nnWe can manually cast to needed type, but ExpressionImpl provides as function with type check.nnnrn@Overridernt@SuppressWarnings({ \"unchecked\"  })rntpublic  &lt;X&gt; Expression&lt;X&gt; as(Class &lt;X&gt; type) {rntt<span class=\"code-keyword\">return<\/span> type.equals( getJavaType() )rntttt? (Expression&lt;X&gt;) <span class=\"code-keyword\">this<\/span>rntttt: <span class=\"code-keyword\">new<\/span> CastFunction&lt;X, T&gt;( criteriaBuilder(), type, <span class=\"code-keyword\">this<\/span> );rnt}rnnnnSo to get proper null literal we should do something like:nnnrnb.nullLiteral(Object .class).as(String .class)rnnnFor string null. n    n    n        n            Show  n            n                        n    n    n    n                nn       Nikita Metzgern added a comment  - 16\/Jun\/2016 07:51 AM                      It looks like NullLiteralExpression doesn't do any magic and returns plain null: nn  n rn public   String  render(RenderingContext renderingContext) {rntt return   \" null \" ;rnt}rn n  nn It should make cast to appropriate type based on provided javaType. nn We can manually cast to needed type, but ExpressionImpl provides  as  function with type check. nn  n rn@Overridernt@SuppressWarnings({  \"unchecked\"  })rnt public  &lt;X&gt; Expression&lt;X&gt; as( Class &lt;X&gt; type) {rntt return  type.equals( getJavaType() )rntttt? (Expression&lt;X&gt;)  this rntttt:  new  CastFunction&lt;X, T&gt;( criteriaBuilder(), type,  this  );rnt}rn n  nn So to get proper null literal we should do something like: nn  n rnb.nullLiteral( Object .class).as( String .class)rn n  n For string null.              n        n    n"},{"commnet_id":"comment-80147","commnet_date":"2016-06-28T18:37:40-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 28\/Jun\/2016 18:37 PM    n        n        Andrea Boriero I've backported to 5.1 and 5.0. Can this issue be resolved now? n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 28\/Jun\/2016 18:37 PM                       Andrea Boriero  I've backported to 5.1 and 5.0. Can this issue be resolved now?              n        n    n"},{"commnet_id":"comment-82466","commnet_date":"2016-08-12T09:46:59-0700","commnet_user":"WillB","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       WillBn added a comment  - 12\/Aug\/2016 09:46 AM    n        n        When are the fixed version gonna be released ?nnBecause this is blocking me =\/ n    n    n        n            Show  n            n                        n    n    n    n                nn       WillBn added a comment  - 12\/Aug\/2016 09:46 AM                      When are the fixed version gonna be released ? nn Because this is blocking me =\/              n        n    n"},{"commnet_id":"comment-82467","commnet_date":"2016-08-12T09:48:52-0700","commnet_user":"WillB","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       WillBn added a comment  - 12\/Aug\/2016 09:48 AM    n        n        I mean 5.1.1 n    n    n        n            Show  n            n                        n    n    n    n                nn       WillBn added a comment  - 12\/Aug\/2016 09:48 AM                      I mean 5.1.1              n        n    n"}]}},{"OGM-1089":{"info":{"issue_title":"Support Neo4j 3 remote datastore through the bolt protocol","issue_key":"OGM-1089","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.1.0.Beta2","issue_component":"5.1.0.Beta2","issue_labels":"5.1.0.Beta2","issue_description":"Hi,   thanks for supporting neo4j remote datastore and working on the integration of Neo4j-3.   The current remote protocol consumes the datastore's REST interface. Are there any plans supporting the remote protocol \"bolt\" introduced in Neo4j-3 as an alternative transfer mode?   The java implementation of \"bolt\" is available at https:\/\/github.com\/neo4j\/neo4j-java-driver.  The might be some performance improvements see ...  https:\/\/github.com\/neo4j\/neo4j-javascript-driver\/issues\/84  This is just for the javascript driver version but it might apply for the java implementation as well.  Thanks","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1089?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-79531","commnet_date":"2016-06-17T02:43:34-0700","commnet_user":"Guillaume Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Guillaume Smetn added a comment  - 17\/Jun\/2016 02:43 AM    n        n        Hi Markus,nnWe haven't upgraded to Neo4j 3 yet but I can confirm we have an eye on bolt and its Java driver.nnThanks for creating this issue. n    n    n        n            Show  n            n                        n    n    n    n                nn       Guillaume Smetn added a comment  - 17\/Jun\/2016 02:43 AM                      Hi Markus, nn We haven't upgraded to Neo4j 3 yet but I can confirm we have an eye on bolt and its Java driver. nn Thanks for creating this issue.              n        n    n"}]}},{"HV-1073":{"info":{"issue_title":"Disable bundle aggregration for named modules on Java 9","issue_key":"HV-1073","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6-future-planning","issue_labels":"6-future-planning","issue_description":"ResourceBundle#Control is not supported for named modules on Java 9. So in determineAvailabilityOfResourceBundleControl#determineAvailabilityOfResourceBundleControl() we should detect that and return false.  Otherwise an exception will be raised:     java.lang.UnsupportedOperationException: ResourceBundle.Control not supported in named modules  \tat java.util.ResourceBundle.checkNamedModule(java.base@9-ea\/ResourceBundle.java:1551)  \tat java.util.ResourceBundle.getBundle(java.base@9-ea\/ResourceBundle.java:1533)  \tat org.hibernate.validator.resourceloading.PlatformResourceBundleLocator.loadBundle(org.hibernate.validator.engine\/PlatformResourceBundleLocator.java:135)","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1073?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10859":{"info":{"issue_title":"Extend modified flags support to track changes within embeddables.","issue_key":"HHH-10859","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.2.0","issue_component":"5.2.0","issue_labels":"5.2.0","issue_description":"By taking the following simple example, Envers will only add the MOD fields for the _contactInfo and name properties of the Person entity.  It would be useful to be able to not only track that the embeddable object changed, but precisely what fields within the embeddable changed as well.     @Entity  @Audited(withModifiedFlag = true )  public  class Person {  \t@Id  \t@GeneratedValue  \tprivate  Integer  id;  \tprivate  String  name;  \t@Embedded  \tprivate  ContactInfo contactInfo;          \/** getter \/ setters *\/  }    @Embeddable  public  class ContactInfo {  \tprivate  String  emailAddress;  \tprivate  String  phoneNumber;          \/** getter \/ setters *\/  }     It's worth noting that when using the query API as follows that it will result in an error org.hibernate.QueryException: could not resolve property: contactInfo.    getAuditReader().createQuery().forRevisionsOfEntity( Person.class , false , true  )    .add( AuditEntity.id().eq( personId ) )    .add( AuditEntity.property( \"contactInfo.emailAddress\"  ).hasChanged() )    .getResultList();","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10859?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-85475","commnet_date":"2016-11-01T23:21:52-0700","commnet_user":"Enrico Rafols Dela Cruz","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Enrico Rafols Dela Cruzn added a comment  - 01\/Nov\/2016 23:21 PM    n        n        follow up on this issue n    n    n        n            Show  n            n                        n    n    n    n                nn       Enrico Rafols Dela Cruzn added a comment  - 01\/Nov\/2016 23:21 PM                      follow up on this issue              n        n    n"},{"commnet_id":"comment-85476","commnet_date":"2016-11-02T01:01:11-0700","commnet_user":"Enrico Rafols Dela Cruz","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Enrico Rafols Dela Cruzn added a comment  - 02\/Nov\/2016 01:01 AM    n        n        i tried the @AuditOverrides\/@AuditOverride but the modifiedFlag = true and modifiedColumnName = \"Field_MOD\" attributes are not supported for these annotation.nnuntil now, i cant find any solution to this issue .   n    n    n        n            Show  n            n                        n    n    n    n                nn       Enrico Rafols Dela Cruzn added a comment  - 02\/Nov\/2016 01:01 AM                      i tried the @AuditOverrides\/@AuditOverride but the modifiedFlag = true and modifiedColumnName = \"Field_MOD\" attributes are not supported for these annotation. nn until now, i cant find any solution to this issue .                n        n    n"},{"commnet_id":"comment-86950","commnet_date":"2016-12-04T19:37:05-0800","commnet_user":"Chris Cranford","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Chris Cranfordn added a comment  - 04\/Dec\/2016 19:37 PM     - edited  n        n        Correct, neither @AuditOverrides or @AuditOverride will influence this behavior.  The problem is Envers treats an Embeddable's modified column as an aggregate representation of changes against the Embeddable rather than storing flags for each of the Embeddable's attributes.nnWhat I propose is that we need to introduce support so that Envers stores a boolean flag for each attribute inside an Embeddable in conjunction with the aggregate representation of whether the Embeddable has changed.  This provides the best of both worlds to determine whether the aggregate or an individual attribute changed easily.  The second part of the enhancement effort here would be to extend the query API so that using hasChanged() \/ hasNotChanged() would work with either case too. n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Chris Cranfordn added a comment  - 04\/Dec\/2016 19:37 PM     - edited                    Correct, neither  @AuditOverrides  or  @AuditOverride  will influence this behavior.  The problem is Envers treats an Embeddable's modified column as an aggregate representation of changes against the Embeddable rather than storing flags for each of the Embeddable's attributes. nn What I propose is that we need to introduce support so that Envers stores a boolean flag for each attribute inside an Embeddable in conjunction with the aggregate representation of whether the Embeddable has changed.  This provides the best of both worlds to determine whether the aggregate or an individual attribute changed easily.  The second part of the enhancement effort here would be to extend the query API so that using  hasChanged()  \/  hasNotChanged()  would work with either case too.              n        n    n"}]}},{"HHH-10858":{"info":{"issue_title":"Could not find matching type descriptor for requested Java class [...]; using fallback","issue_key":"HHH-10858","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Trivial","issue_affects_version":"Unresolved","issue_fix_version":"4.3.11","issue_component":"4.3.11","issue_labels":"4.3.11","issue_description":"Types that are persisted using JPA Attribute Converters (@Convert(converter = SomeClassConverter.class)) that do not implement Serializable cause warnings during the application startup:     2016-06-15 19:16:45.227  WARN 1198 --- [ost-startStop-1] o.h.t.d.java.JavaTypeDescriptorRegistry  : Could not find matching type descriptor for  requested Java class [com.example.SomeClass]; using fallback     The application is working fine nonetheless and the warning goes away if I make the type implement Serializable.   I've looked through the documentation, the issue database and the source code and I'm not sure whether this warning is a reason for concern. If it is, I would appreciate if the warning could be more helpful, e.g. by telling me what to do about it. Otherwise the warning should be demoted to a less alarming log level.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10858?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-79348","commnet_date":"2016-06-15T11:40:35-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 15\/Jun\/2016 11:40 AM    n        n        We will be adding some improvements to this for 6.0.  JPA's converter stuff is like most things coming from a spec... good for general cases, but severely limiting for anything non-trivial: especially to the providers.  nnThe warning is really an indication that Hibernate knows nothing about the semantic of the indicated type (com.example.SomeClass) and is going to make some assumptions.  The assumptions need to be safe for all cases, which means they are not necessarily the best choices in all cases.  So the improvements we have in mind are around being able to supply the semantic information about these Java types.  The biggest one is \"mutability\" which has implications in terms of making deep copies and knowing how \"deeply\" to check for equality.nnIn the short term, the easiest solution if you find this to be a problem is to register the JavaTypeDescriptor that defines the \"semantic information\" about a given Java type.  IIRC however  that ability was not added until 5.0.  It may or may not be there in 4.3.  4.3 is way past support, so I am not sure anymore.  If you are interested in exploring this option, look for JavaTypeDescriptorRegistry.  It is available statically (an unfortunate design design we will also address in 6.0) via {{JavaTypeDescriptorRegistry#INSTANCE}. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 15\/Jun\/2016 11:40 AM                      We will be adding some improvements to this for 6.0.  JPA's converter stuff is like most things coming from a spec... good for general cases, but severely limiting for anything non-trivial: especially to the providers.   nn The warning is really an indication that Hibernate knows nothing about the semantic of the indicated type ( com.example.SomeClass ) and is going to make some assumptions.  The assumptions need to be safe for all cases, which means they are not necessarily the best choices in all cases.  So the improvements we have in mind are around being able to supply the semantic information about these Java types.  The biggest one is \"mutability\" which has implications in terms of making deep copies and knowing how \"deeply\" to check for equality. nn In the short term, the easiest solution if you find this to be a problem is to register the  JavaTypeDescriptor  that defines the \"semantic information\" about a given Java type.  IIRC however  that ability was not added until 5.0.  It may or may not be there in 4.3.  4.3 is way past support, so I am not sure anymore.  If you are interested in exploring this option, look for  JavaTypeDescriptorRegistry .  It is available statically (an unfortunate design design we will also address in 6.0) via {{JavaTypeDescriptorRegistry#INSTANCE}.              n        n    n"}]}},{"HHH-10856":{"info":{"issue_title":"Hibernate OSGi overrides a custom JTA Platform","issue_key":"HHH-10856","issue_type":"Improvement","issue_status":"In Progress","issue_priority":"In Progress","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.0.9","issue_component":"5.0.9","issue_labels":"5.0.9","issue_description":"The Apache Aries Transaction Control JPA provider has plugins for Hibernate which it uses to allow Hibernate to participate in XA transactions. It does this by providing a TransactionCoordinatorBuilder plugin.  For the most part this works, however if there is an Exception on persist then Hibernate attempts to use a JTAPlatform to mark the transaction for rollback. This fails because there is no TransactionManagerService.  javax.persistence.PersistenceException: org.hibernate.property.access.spi.PropertyAccessException: Error accessing field &#91;public java.lang.Integer org.apache.aries.tx.control.itests.entity.Message.id&#93;  by reflection for persistent property org.apache.aries.tx.control.itests.entity.Message#id : Message &#91;id=null, message=Hello 1!&#93; \r\n \tat org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1692)\r\n \tat org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1602)\r\n \tat org.hibernate.jpa.spi.AbstractEntityManagerImpl.convert(AbstractEntityManagerImpl.java:1608)\r\n \tat org.hibernate.jpa.spi.AbstractEntityManagerImpl.persist(AbstractEntityManagerImpl.java:1152)\r\n \tat org.apache.aries.tx.control.jpa.common.impl.EntityManagerWrapper.persist(EntityManagerWrapper.java:42)\r\n \tat org.apache.aries.tx.control.jpa.common.impl.EntityManagerWrapper.persist(EntityManagerWrapper.java:42)\r\n \tat org.apache.aries.tx.control.itests.XAJPATransactionTest.lambda$0(XAJPATransactionTest.java:292)\r\n \tat org.apache.aries.tx.control.itests.XAJPATransactionTest$$Lambda$38\/892040710.call(Unknown Source)\r\n \tat org.apache.aries.tx.control.service.common.impl.AbstractTransactionControlImpl$TransactionBuilderImpl.doWork(AbstractTransactionControlImpl.java:155)\r\n \tat org.apache.aries.tx.control.service.common.impl.AbstractTransactionControlImpl$TransactionBuilderImpl.required(AbstractTransactionControlImpl.java:78)\r\n \tat org.apache.aries.tx.control.service.common.impl.AbstractTransactionControlImpl.required(AbstractTransactionControlImpl.java:243)\r\n \tat org.apache.aries.tx.control.itests.XAJPATransactionTest.testTwoPhaseCommit(XAJPATransactionTest.java:285)\r\n \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n \tat java.lang.reflect.Method.invoke(Method.java:483)\r\n \tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\r\n \tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n \tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\r\n \tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\n \tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\r\n \tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\r\n \tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\r\n \tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\r\n \tat org.ops4j.pax.exam.invoker.junit.internal.ContainerTestRunner.runChild(ContainerTestRunner.java:68)\r\n \tat org.ops4j.pax.exam.invoker.junit.internal.ContainerTestRunner.runChild(ContainerTestRunner.java:37)\r\n \tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\n \tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\n \tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\n \tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\n \tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\n \tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n \tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\r\n \tat org.junit.runner.JUnitCore.run(JUnitCore.java:115)\r\n \tat org.ops4j.pax.exam.invoker.junit.internal.JUnitProbeInvoker.invokeViaJUnit(JUnitProbeInvoker.java:124)\r\n \tat org.ops4j.pax.exam.invoker.junit.internal.JUnitProbeInvoker.findAndInvoke(JUnitProbeInvoker.java:97)\r\n \tat org.ops4j.pax.exam.invoker.junit.internal.JUnitProbeInvoker.call(JUnitProbeInvoker.java:73)\r\n \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n \tat java.lang.reflect.Method.invoke(Method.java:483)\r\n \tat org.ops4j.pax.swissbox.framework.RemoteFrameworkImpl.invokeMethodOnService(RemoteFrameworkImpl.java:433)\r\n \tat org.ops4j.pax.swissbox.framework.RemoteFrameworkImpl.invokeMethodOnService(RemoteFrameworkImpl.java:406)\r\n \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n \tat java.lang.reflect.Method.invoke(Method.java:483)\r\n \tat sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:323)\r\n \tat sun.rmi.transport.Transport$1.run(Transport.java:178)\r\n \tat sun.rmi.transport.Transport$1.run(Transport.java:175)\r\n \tat java.security.AccessController.doPrivileged(Native Method)\r\n \tat sun.rmi.transport.Transport.serviceCall(Transport.java:174)\r\n \tat sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:557)\r\n \tat sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:812)\r\n \tat sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:671)\r\n \tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n \tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n \tat java.lang.Thread.run(Thread.java:745)\r\n Caused by: org.hibernate.property.access.spi.PropertyAccessException: Error accessing field &#91;public java.lang.Integer org.apache.aries.tx.control.itests.entity.Message.id&#93;  by reflection for persistent property org.apache.aries.tx.control.itests.entity.Message#id : Message &#91;id=null, message=Hello 1!&#93; \r\n \tat org.hibernate.property.access.spi.GetterFieldImpl.get(GetterFieldImpl.java:43)\r\n \tat org.hibernate.tuple.entity.AbstractEntityTuplizer.getIdentifier(AbstractEntityTuplizer.java:223)\r\n \tat org.hibernate.persister.entity.AbstractEntityPersister.getIdentifier(AbstractEntityPersister.java:4601)\r\n \tat org.hibernate.persister.entity.AbstractEntityPersister.isTransient(AbstractEntityPersister.java:4313)\r\n \tat org.hibernate.engine.internal.ForeignKeys.isTransient(ForeignKeys.java:226)\r\n \tat org.hibernate.event.internal.AbstractSaveEventListener.getEntityState(AbstractSaveEventListener.java:510)\r\n \tat org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:99)\r\n \tat org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:58)\r\n \tat org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:775)\r\n \tat org.hibernate.internal.SessionImpl.persist(SessionImpl.java:748)\r\n \tat org.hibernate.internal.SessionImpl.persist(SessionImpl.java:753)\r\n \tat org.hibernate.jpa.spi.AbstractEntityManagerImpl.persist(AbstractEntityManagerImpl.java:1146)\r\n \t... 54 more\r\n Caused by: java.lang.IllegalArgumentException: Can not set java.lang.Integer field org.apache.aries.tx.control.itests.entity.Message.id to org.apache.aries.tx.control.itests.entity.Message\r\n \tat sun.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:167)\r\n \tat sun.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:171)\r\n \tat sun.reflect.UnsafeFieldAccessorImpl.ensureObj(UnsafeFieldAccessorImpl.java:58)\r\n \tat sun.reflect.UnsafeObjectFieldAccessorImpl.get(UnsafeObjectFieldAccessorImpl.java:36)\r\n \tat java.lang.reflect.Field.get(Field.java:387)\r\n \tat org.hibernate.property.access.spi.GetterFieldImpl.get(GetterFieldImpl.java:39)\r\n \t... 65 more   It is not possible to override the JTA platform in OSGi (which is probably a bad thing). But it would also be helpful if the Transaction Coordinator were used to mark the transaction for rollback, rather than the JTA platform...","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10856?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-79436","commnet_date":"2016-06-16T07:21:32-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 16\/Jun\/2016 07:21 AM    n        n        So I found this code comment in OsgiJtaPlatform:nnThe Enterprise OSGi spec requires all containers to register UserTransaction and TransactionManager OSGi services.nnHistorically I know that we assumed an e-OSGi environment if JTA was being used.  And in fact in my limited OSGi scope I thought that Aries is e-OSGi.  So to me, either:nntAries is not synonymous with e-OSGintAries is synonymous with e-OSGi and that interpretation of the e-OSGi spec is inaccurate.ntAries is synonymous with e-OSGi and that interpretation of the e-OSGi spec is accurate.nnnnTo me all of these cases come down to a RFE within Hibernate to allow OSGi environments (non-enterprise only?) to plug in a custom JtaPlatform.  However, if (3) is the case I'd also consider that a problem with Aries.nnSo, what I'd propose is a way to define a fallback JtaPlatform.  Hibernate OSGi support would define OsgiJtaPlatform as the fallback.  If the deployment or OSGi environment specify a custom JtaPlatform we'd use that instead.  Do note however that the very design of JtaPlatform requires access to either UserTransaction or TransactionManager.  It is built on top of the JTA spec\/contracts, hence the name   So your \"Aries custom JtaPlatform impl\" is still going to have to adapt your TransactionControl to either one of those.nnAlso, I want to be clear that to me this JtaPlatform discussion is separate from the marking a transaction for rollback-only.  Though obviously they are related. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 16\/Jun\/2016 07:21 AM                      So I found this code comment in OsgiJtaPlatform: n n The Enterprise OSGi spec requires all containers to register UserTransaction and TransactionManager OSGi services.  nn Historically I know that we assumed an e-OSGi environment if JTA was being used.  And in fact in my limited OSGi scope I thought that Aries is e-OSGi.  So to me, either: n nt Aries is not synonymous with e-OSGi nt Aries is synonymous with e-OSGi and that interpretation of the e-OSGi spec is inaccurate. nt Aries is synonymous with e-OSGi and that interpretation of the e-OSGi spec is accurate. n nnn To me all of these cases come down to a RFE within Hibernate to allow OSGi environments (non-enterprise only?) to plug in a custom JtaPlatform.  However, if (3) is the case I'd also consider that a problem with Aries. nn So, what I'd propose is a way to define a fallback JtaPlatform.  Hibernate OSGi support would define OsgiJtaPlatform as the fallback.  If the deployment or OSGi environment specify a custom JtaPlatform we'd use that instead.  Do note however that the very design of JtaPlatform requires access to either UserTransaction or TransactionManager.  It is built on top of the JTA spec\/contracts, hence the name    So your \"Aries custom JtaPlatform impl\" is still going to have to adapt your TransactionControl to either one of those. nn Also, I want to be clear that to me this JtaPlatform discussion is separate from the marking a transaction for rollback-only.  Though obviously they are related.              n        n    n"},{"commnet_id":"comment-79443","commnet_date":"2016-06-16T09:32:51-0700","commnet_user":"Tim Ward","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Tim Wardn added a comment  - 16\/Jun\/2016 09:32 AM    n        n        Historically I know that we assumed an e-OSGi environment if JTA was being used. And in fact in my limited OSGi scope I thought that Aries is e-OSGi. So to me, either:nntAries is not synonymous with e-OSGintAries is synonymous with e-OSGi and that interpretation of the e-OSGi spec is inaccurate.ntAries is synonymous with e-OSGi and that interpretation of the e-OSGi spec is accurate.nnnnTo me all of these cases come down to a RFE within Hibernate to allow OSGi environments (non-enterprise only?) to plug in a custom JtaPlatform. However, if (3) is the case I'd also consider that a problem with Aries.nnI think the confusion here comes from the fundamental difference between Java EE and e-OSGi. In Java EE you must have a JPA container and a JTA runtime. In e-OSGi you can have both of these things, but you might not. Basically e-OSGi lets you pick and choose the pieces that you want to use.nnThe bundle org.apache.aries.jpa.container is an implementation of the OSGi JPA Service, which is defined in a chapter of the Enterprise OSGi specification. A different chapter in the same specification defines the OSGi JTA service (also available from Aries), which is what the OsgiJtaPlatform implementation is trying to find. nnWhat the OsgiJtaPlatform currently does is a really good default. In the case where someone has asked to create a JTA EntityManagerFactory then the OSGi JTA service is a perfectly sensible go-to option. It's also right that in the absence of any available service that things go bang. It would be even better if we could guarantee the presence of the TransactionManager before creating the EntityManager, but that's just not possible with the specifications as they are.nnThe next version of the OSGi specification, however, will have a new chapter for the TransactionControl service. The Transaction Control service exists to try to simplify the process of doing transactional work with resources in OSGi. It also aims to fix the lifecycle mismatches around transactions and resources. This is where the need to replace the JtaPlatform comes in. The only good way to do two-phase XA work with a JPA provider is to tell it that it's in a managed JTA mode (which is pretty much the truth). The Aries Transaction Control implementation already replaces the TransactionCoordinator\/Driver to get the right integration points, all that's left are the few places where the JtaPlatform is used directly. nnIn a perfect world Hibernate would be able to do everything using the special TransactionCoordinator and TransactionDriver, added by Transaction Control and I could ignore the JTA platform completely. I get that this would be a big change to Hibernate though, and so I am happy to roll my own JtaPlatform. n    n    n        n            Show  n            n                        n    n    n    n                nn       Tim Wardn added a comment  - 16\/Jun\/2016 09:32 AM                       Historically I know that we assumed an e-OSGi environment if JTA was being used. And in fact in my limited OSGi scope I thought that Aries is e-OSGi. So to me, either: n nt Aries is not synonymous with e-OSGi nt Aries is synonymous with e-OSGi and that interpretation of the e-OSGi spec is inaccurate. nt Aries is synonymous with e-OSGi and that interpretation of the e-OSGi spec is accurate. n nnn To me all of these cases come down to a RFE within Hibernate to allow OSGi environments (non-enterprise only?) to plug in a custom JtaPlatform. However, if (3) is the case I'd also consider that a problem with Aries.  nn I think the confusion here comes from the fundamental difference between Java EE and e-OSGi. In Java EE you  must  have a JPA container  and  a JTA runtime. In e-OSGi you  can  have both of these things, but you might not. Basically e-OSGi lets you pick and choose the pieces that you want to use. nn The bundle org.apache.aries.jpa.container is an implementation of the OSGi JPA Service, which is defined in a chapter of the Enterprise OSGi specification. A different chapter in the same specification defines the OSGi JTA service (also available from Aries), which is what the OsgiJtaPlatform implementation is trying to find.  nn What the OsgiJtaPlatform currently does is a really good default. In the case where someone has asked to create a JTA EntityManagerFactory then the OSGi JTA service is a perfectly sensible go-to option. It's also right that in the absence of any available service that things go bang. It would be even better if we could guarantee the presence of the TransactionManager before creating the EntityManager, but that's just not possible with the specifications as they are. nn The next version of the OSGi specification, however, will have a new chapter for the TransactionControl service. The Transaction Control service exists to try to simplify the process of doing transactional work with resources in OSGi. It also aims to fix the lifecycle mismatches around transactions and resources. This is where the need to replace the JtaPlatform comes in. The only good way to do two-phase XA work with a JPA provider is to tell it that it's in a managed JTA mode (which is pretty much the truth). The Aries Transaction Control implementation already replaces the TransactionCoordinator\/Driver to get the right integration points, all that's left are the few places where the JtaPlatform is used directly.  nn In a perfect world Hibernate would be able to do everything using the special TransactionCoordinator and TransactionDriver, added by Transaction Control and I could ignore the JTA platform completely. I get that this would be a big change to Hibernate though, and so I am happy to roll my own JtaPlatform.              n        n    n"},{"commnet_id":"comment-81434","commnet_date":"2016-07-20T12:18:00-0700","commnet_user":"Brett Meyer","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Brett Meyern added a comment  - 20\/Jul\/2016 12:18 PM    n        n        Hey Tim Ward, let's at least get the custom JtaPlatform ability wired up.  Working on it.  Thanks for the discussion! n    n    n        n            Show  n            n                        n    n    n    n                nn       Brett Meyern added a comment  - 20\/Jul\/2016 12:18 PM                      Hey  Tim Ward , let's at least get the custom JtaPlatform ability wired up.  Working on it.  Thanks for the discussion!              n        n    n"},{"commnet_id":"comment-81435","commnet_date":"2016-07-20T12:26:34-0700","commnet_user":"Brett Meyer","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Brett Meyern added a comment  - 20\/Jul\/2016 12:26 PM    n        n        Tim Ward: One thing to discuss: what's the best way for hibernate-osgi to discover your JtaPlatform?  Automatically through the OSGi service registry?  Requiring persistence bundles to provide the FQN through the hibernate.transaction.jta.platform property in persistence.xml?  The properties Map in the PersistenceProvider's createEntityManagerFactory and createContainerEntityManagerFactory?nnThinking all three in a hierarchy of fallbacks might be ideal (in order)nn1.) persistence.xml\r\nn2.) PersistenceProvider properties Map\r\nn3.) OSGi service registry\r\nn4.) OsgiJtaPlatform (default) n    n    n        n            Show  n            n                        n    n    n    n                nn       Brett Meyern added a comment  - 20\/Jul\/2016 12:26 PM                       Tim Ward : One thing to discuss: what's the best way for hibernate-osgi to discover your JtaPlatform?  Automatically through the OSGi service registry?  Requiring persistence bundles to provide the FQN through the hibernate.transaction.jta.platform property in persistence.xml?  The properties Map in the PersistenceProvider's createEntityManagerFactory and createContainerEntityManagerFactory? nn Thinking all three in a hierarchy of fallbacks might be ideal (in order) nn 1.) persistence.xml n2.) PersistenceProvider properties Map n3.) OSGi service registry n4.) OsgiJtaPlatform (default)              n        n    n"},{"commnet_id":"comment-81547","commnet_date":"2016-07-21T14:31:02-0700","commnet_user":"Tim Ward","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Tim Wardn added a comment  - 21\/Jul\/2016 14:31 PM    n        n        Hi Brett Meyer, thanks for picking this up nnThinking all three in a hierarchy of fallbacks might be ideal (in order)\r\nn1.) persistence.xml\r\nn2.) PersistenceProvider properties Map\r\nn3.) OSGi service registry\r\nn4.) OsgiJtaPlatform (default)nnI think that all of those options are sensible, but I would re-order 1) and 2). My expectation is that as it's the last possible opportunity I can always use the properties Map to override anything, even the persistence.xml. n    n    n        n            Show  n            n                        n    n    n    n                nn       Tim Wardn added a comment  - 21\/Jul\/2016 14:31 PM                      Hi  Brett Meyer , thanks for picking this up   nn  Thinking all three in a hierarchy of fallbacks might be ideal (in order) n1.) persistence.xml n2.) PersistenceProvider properties Map n3.) OSGi service registry n4.) OsgiJtaPlatform (default)  nn I think that all of those options are sensible, but I would re-order 1) and 2). My expectation is that as it's the last possible opportunity I can always use the properties Map to override anything, even the persistence.xml.              n        n    n"}]}},{"HHH-10850":{"info":{"issue_title":"SQLServerDialect doesRepeatableReadCauseReadersToBlockWriters impelmentation","issue_key":"HHH-10850","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Trivial","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.2.0","issue_labels":"5.2.0","issue_description":"The SQLServerDialect always returns false for {{doesRepeatableReadCauseReadersToBlockWriters }} which is not correct.  By default, SQL Server uses 2PL for all four classic isolation levels. Only for READ_COMMITTED_SNAPSHOT and SNAPSHOT, we should return false, for the 2PL isolation levels we should return true.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10850?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-79336","commnet_date":"2016-06-15T03:06:55-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 15\/Jun\/2016 03:06 AM    n        n        For the moment, this is only used for testing and passing the current Connection to get the actual isolation level is not that easy. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 15\/Jun\/2016 03:06 AM                      For the moment, this is only used for testing and passing the current Connection to get the actual isolation level is not that easy.              n        n    n"}]}},{"OGM-1085":{"info":{"issue_title":"Add script to start docker container for OGM datastores","issue_key":"OGM-1085","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0.Alpha1","issue_labels":"5.1.0.Alpha1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1085?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10847":{"info":{"issue_title":"NullPointerException when parsing HQL with &quot;? in elements(...)&quot;","issue_key":"HHH-10847","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.1.0","issue_component":"5.1.0","issue_labels":"5.1.0","issue_description":"I am reporting this as a bug because Hibernate does not explain me what is wrong with my HQL syntax and instead leaves a NPE in the wild.  I found that my syntax contains a trivial error (not referencing properties of associated ManyToOne eager relationship)   Input  Wrong HQL is     select sum(item.importo) from Movimento item where ((organizationId in ( ?0 )) and ?1 in elements(associatedUsers) and (dataValuta &lt; ?2))     Correct HQL is    select sum(item.importo) from Movimento item where ((contoCorrente.organizationId in ( ?0 )) and ?1 in elements(contoCorrente.associatedUsers) and (dataValuta &lt; ?2))     Movimento class properties:  \tcontoCorrente: POJO ContoCorrente @ManyToOne \tdataValuta: java.util.Date    ContoCorrente properties:  \torganizationId: string \tassociatedUsers: Set&lt;String&gt;     Exception     java.lang.NullPointerException  \tat org.hibernate.hql.internal.ast.tree.MethodNode.handleElements(MethodNode.java:194) ~[hibernate-core-5.1.0.Final.jar:5.1.0.Final]  \tat org.hibernate.hql.internal.ast.tree.MethodNode.resolveCollectionProperty(MethodNode.java:147) ~[hibernate-core-5.1.0.Final.jar:5.1.0.Final]  \tat org.hibernate.hql.internal.ast.tree.CollectionFunction.resolve(CollectionFunction.java:26) ~[hibernate-core-5.1.0.Final.jar:5.1.0.Final]  \tat org.hibernate.hql.internal.ast.HqlSqlWalker.processFunction(HqlSqlWalker.java:1145) ~[hibernate-core-5.1.0.Final.jar:5.1.0.Final]  \tat org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.collectionFunction(HqlSqlBaseWalker.java:3025) ~[hibernate-core-5.1.0.Final.jar:5.1.0.Final]  \tat org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.collectionFunctionOrSubselect(HqlSqlBaseWalker.java:4924) ~[hibernate-core-5.1.0.Final.jar:5.1.0.Final]  \tat org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.inRhs(HqlSqlBaseWalker.java:4833) ~[hibernate-core-5.1.0.Final.jar:5.1.0.Final]  \tat org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.comparisonExpr(HqlSqlBaseWalker.java:4500) ~[hibernate-core-5.1.0.Final.jar:5.1.0.Final]  \tat org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.logicalExpr(HqlSqlBaseWalker.java:2130) ~[hibernate-core-5.1.0.Final.jar:5.1.0.Final]  \tat org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.logicalExpr(HqlSqlBaseWalker.java:2058) ~[hibernate-core-5.1.0.Final.jar:5.1.0.Final]  \tat org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.logicalExpr(HqlSqlBaseWalker.java:2055) ~[hibernate-core-5.1.0.Final.jar:5.1.0.Final]  \tat org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.whereClause(HqlSqlBaseWalker.java:813) ~[hibernate-core-5.1.0.Final.jar:5.1.0.Final]  \tat org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.query(HqlSqlBaseWalker.java:607) ~[hibernate-core-5.1.0.Final.jar:5.1.0.Final]  \tat org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.selectStatement(HqlSqlBaseWalker.java:311) ~[hibernate-core-5.1.0.Final.jar:5.1.0.Final]  \tat org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.statement(HqlSqlBaseWalker.java:259) ~[hibernate-core-5.1.0.Final.jar:5.1.0.Final]  \tat org.hibernate.hql.internal.ast.QueryTranslatorImpl.analyze(QueryTranslatorImpl.java:262) ~[hibernate-core-5.1.0.Final.jar:5.1.0.Final]  \tat org.hibernate.hql.internal.ast.QueryTranslatorImpl.doCompile(QueryTranslatorImpl.java:190) ~[hibernate-core-5.1.0.Final.jar:5.1.0.Final]  \tat org.hibernate.hql.internal.ast.QueryTranslatorImpl.compile(QueryTranslatorImpl.java:142) ~[hibernate-core-5.1.0.Final.jar:5.1.0.Final]  \tat org.hibernate.engine.query.spi.HQLQueryPlan.&lt;init&gt;(HQLQueryPlan.java:115) ~[hibernate-core-5.1.0.Final.jar:5.1.0.Final]  \tat org.hibernate.engine.query.spi.HQLQueryPlan.&lt;init&gt;(HQLQueryPlan.java:76) ~[hibernate-core-5.1.0.Final.jar:5.1.0.Final]  \tat org.hibernate.engine.query.spi.QueryPlanCache.getHQLQueryPlan(QueryPlanCache.java:150) ~[hibernate-core-5.1.0.Final.jar:5.1.0.Final]  \tat org.hibernate.internal.AbstractSessionImpl.getHQLQueryPlan(AbstractSessionImpl.java:302) ~[hibernate-core-5.1.0.Final.jar:5.1.0.Final]  \tat org.hibernate.internal.AbstractSessionImpl.createQuery(AbstractSessionImpl.java:240) ~[hibernate-core-5.1.0.Final.jar:5.1.0.Final]  \tat org.hibernate.internal.SessionImpl.createQuery(SessionImpl.java:1907) ~[hibernate-core-5.1.0.Final.jar:5.1.0.Final]  \tat it.csttech.regia.data.daos.hibernate.MovimentoDaoImpl.sumAllImporti(MovimentoDaoImpl.java:22) ~[classes\/:?]     Expected result An exception that tells there is no such property \"organizationId\" in class Movimento (because it is a property of movimento.contoCorrente relationship)     I propose this suitable for new contributors because I deem such NPE handling very easy to address","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10847?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-81672","commnet_date":"2016-07-26T15:38:44-0700","commnet_user":"Bogdan Calmac","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Bogdan Calmacn added a comment  - 26\/Jul\/2016 15:38 PM     - edited  n        n        mistype, disregard. n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Bogdan Calmacn added a comment  - 26\/Jul\/2016 15:38 PM     - edited                    mistype, disregard.              n        n    n"}]}},{"HHH-10840":{"info":{"issue_title":"Serializable Session Factory","issue_key":"HHH-10840","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"5.2.1","issue_component":"5.2.1","issue_labels":"5.2.1","issue_description":"Deeply serializable session factory.  Enabled with System Property hibernate.deepserialization=true.  By default serialization behaves as today where it just serializes name\/uuid and looks up the session factory upon deserialization.  Tested with \r\n spatial, ehcache, infinispan, h2, postgres.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10840?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10839":{"info":{"issue_title":"Restore some lost backwards compatibility of the legacy org.hibernate.Query","issue_key":"HHH-10839","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.2.0","issue_component":"5.2.0","issue_labels":"5.2.0","issue_description":"The clients of org.hibernate.Query can no longer use the API in \"DSL style\" as the builder methods no longer return the org.hibernate.Query contract but force upgrading to the new contract.  We can restore the previous backwards compatibility, which was lost during the refactoring work of version 5.2.0.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10839?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-79190","commnet_date":"2016-06-12T17:13:26-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 12\/Jun\/2016 17:13 PM    n        n        Proposal sent: https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1418 n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 12\/Jun\/2016 17:13 PM                      Proposal sent:  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1418               n        n    n"}]}},{"HHH-10837":{"info":{"issue_title":"Add new setting to disable\/enable scanning for the static metamodel.","issue_key":"HHH-10837","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"5.2.0","issue_component":"5.2.0","issue_labels":"5.2.0","issue_description":"Currently Hibernate always scans classpath for the static metamodel. But not all projects make use of the static metamodel. For big projects (e.g. ca. 2000 entity and embeddable classes in our case) it takes a lot of time to scan the classpath for classes which do not exists. Therefore I propose a new setting \"hibernate.static_metamodel.enabled\" which would allow us to disable scanning the classpath for the static metamodel. If the setting is set to \"false\", then Hibernate will not scan the classpath for the static metamodel. The default value for the setting will be \"true\" to preserve current behavior of Hibernate.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10837?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10835":{"info":{"issue_title":"The hash code calculation of the EntityKey should also include the hash code of the root entity name.","issue_key":"HHH-10835","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.1.0 ,                                            5.2.0","issue_component":"5.1.0 ,                                            5.2.0","issue_labels":"5.1.0","issue_description":"To reduce collisions in the HashMaps of the StatefulPersistenceContext the hash code calculation of the EntityKey should also include the hash code of the root entity name. Currently the hash code calculation of the EntityKey uses only the hash code of the entity identifier. This is a regression introduced by the issue                                                          HHH-8682                                                              Closed                . Before                                                          HHH-8682                                                              Closed                 the hash code of the root entity name was also used to calculate the hash code of the EntityKey.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10835?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10832":{"info":{"issue_title":"Remove  org.hibernate.property.access.spi.EnhancedGetterMethodImpl","issue_key":"HHH-10832","issue_type":"Remove Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6.0.0.Alpha1","issue_labels":"6.0.0.Alpha1","issue_description":"org.hibernate.property.access.spi.EnhancedGetterMethodImpl was deprecated by                                                          HHH-10511                                                              Closed                .","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10832?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10831":{"info":{"issue_title":"Hibernate method to un-proxy a javassist proxy","issue_key":"HHH-10831","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"4.2.21 ,                                            5.1.0 ,                                            5.0.9 ,                                            5.2.0","issue_component":"4.2.21 ,                                            5.1.0 ,                                            5.0.9 ,                                            5.2.0","issue_labels":"4.2.21","issue_description":"When retrieving a LAZY association property and attempting to downcast the returned entity, a ClassCastException is raised due to the use of the javassist proxy (even if the proxy is initialized). The proxy must be \"unwrapped\" to downcast using something like the below.     ((org.hibernate.proxy.HibernateProxy) entity).getHibernateLazyInitializer().getImplementation();     It would be useful to provide something like an org.hibernate.Hibernate.unproxy(Object proxy) method rather than requiring users to access the proxy interface as above.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10831?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10830":{"info":{"issue_title":"Scope SqlTypeDescriptor and JavaTypeDescriptor to SessionFactory\/Metamodel","issue_key":"HHH-10830","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"6.0.0.Alpha1","issue_labels":"6.0.0.Alpha1","issue_description":"In other words, remove static access to them.    Scope the BasicType factory\/registry to SessionFactory\/Metamodel as well.  That contract itself is being refactored for 6.0 as well.  Prior to 6.0 this is org.hibernate.type.BasicTypeRegistry.  In 6.0 this is being refactored into org.hibernate.type.spi.basic.BasicTypeFactory.  So depending on where we agree to apply this change will determine the exposed type.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10830?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2294":{"info":{"issue_title":"Decide of the type of a range query based on the field instead of the value","issue_key":"HSEARCH-2294","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6","issue_labels":"6","issue_description":"This is a followup of a Stackoverflow question. See this comment here:\r\n http:\/\/stackoverflow.com\/questions\/37730874\/numericrangequery-fails-for-int-field-in-hibernate-search\/37731487?noredirect=1#comment62957944_37731487  See NumericFieldUtils#createNumericRangeQuery().  Currently, when we build a range query with the DSL, if the field is defined as a Long but the range parameters are Integers, the query is built as if the field was an Integer and the query does not return any result as Long and Integers are encoded differently.  This is not very user friendly: we should build the query with the field type in mind and throw an error if the field type and the range parameters are not compatible. We could be a bit permissive and allow Integers for a Long field type thus allowing above(0) to work for Long too.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2294?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-79166","commnet_date":"2016-06-10T07:22:36-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Sanne Grinoveron added a comment  - 10\/Jun\/2016 07:22 AM     - edited  n        n        I've marked it for 6.0 as the current helpers are static so they don't have access to the needed metadata without making changes to the API, but if someone can figure out a sensible solution which also happens to be backwards compatible, I'm happy to schedule this for sooner. n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Sanne Grinoveron added a comment  - 10\/Jun\/2016 07:22 AM     - edited                    I've marked it for  6.0  as the current helpers are  static  so they don't have access to the needed metadata without making changes to the API, but if someone can figure out a sensible solution which also happens to be backwards compatible, I'm happy to schedule this for sooner.              n        n    n"}]}},{"HV-1070":{"info":{"issue_title":"Preparatory work for building with Java 9","issue_key":"HV-1070","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.3.0.CR1","issue_labels":"5.3.0.CR1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1070?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10825":{"info":{"issue_title":"Improve concurrency design of ServiceBinding","issue_key":"HHH-10825","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6.0.0.Alpha1","issue_labels":"6.0.0.Alpha1","issue_description":"See https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1403","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10825?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-79147","commnet_date":"2016-06-09T11:36:07-0700","commnet_user":"Andrea Boriero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Andrea Borieron added a comment  - 09\/Jun\/2016 11:36 AM    n        n        PR https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1410 n    n    n        n            Show  n            n                        n    n    n    n                nn       Andrea Borieron added a comment  - 09\/Jun\/2016 11:36 AM                      PR  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1410               n        n    n"}]}},{"HHH-10823":{"info":{"issue_title":"Consider adding hibernate-entitymanager again","issue_key":"HHH-10823","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.2.0","issue_component":"5.2.0","issue_labels":"5.2.0","issue_description":"Spring Framework improved its support so that Hibernate 5.2 works as well so the natural step is to support that release in Spring Boot as well.  A typical hibernate application based on JPA requires hibernate-entitymanager. One major problem we are facing is that hibernate-entitymanager is no longer required in 5.2 but no longer exists either. I don't see how we could ever support any generation before 5.2 if we bump our build to 5.2.  Our users are relying on \"starters\" to get the dependencies they need. We have \"data-jpa\" starter that brings hibernate and has an explicit reference to that artifact. We can change it but then the starter won't work &lt; 5.2  FYI, Spring Boot has support for both 4.x and 5.x generation up to 5.1. Could you please consider adding hibernate-entitymanager again? This could be an empty artifact that depends on hibernate-core.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10823?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-79132","commnet_date":"2016-06-09T07:59:38-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 09\/Jun\/2016 07:59 AM    n        n        nA typical hibernate application based on JPA requires hibernate-entitymanagernnThat was true prior to 5.2, yes.  That is no longer the case, obviously.nnI'm inclined to reject this.  So far the discussion is not compelling to me from a Hibernate perspective.  I can see that it causes you some difficulty in Spring Boot, though.  To me you are simply hamstrung by your use of Maven here.  Gradle would have let you handle this on your own.nnYou are lucky though   Chris Cranford and Vlad Mihalcea convinced me to consider adding the empty hibernate-entitymanager artifact for 5.2.  I'll consider it.n n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 09\/Jun\/2016 07:59 AM                      n A typical hibernate application based on JPA requires hibernate-entitymanager  nn That was true prior to 5.2, yes.  That is no longer the case, obviously. nn I'm inclined to reject this.  So far the discussion is not compelling to me from a Hibernate perspective.  I can see that it causes you some difficulty in Spring Boot, though.  To me you are simply hamstrung by your use of Maven here.  Gradle would have let you handle this on your own. nn You are lucky though     Chris Cranford  and  Vlad Mihalcea  convinced me to consider adding the empty hibernate-entitymanager artifact for 5.2.  I'll consider it. n             n        n    n"},{"commnet_id":"comment-79133","commnet_date":"2016-06-09T08:00:29-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 09\/Jun\/2016 08:00 AM    n        n        Scheduled for 5.2.1 to make sure we resolve this one way or the other (reject\/approve) for 5.2.1 n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 09\/Jun\/2016 08:00 AM                      Scheduled for 5.2.1 to make sure we resolve this one way or the other (reject\/approve) for 5.2.1              n        n    n"},{"commnet_id":"comment-79532","commnet_date":"2016-06-17T04:46:01-0700","commnet_user":"todoubaba","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       todoubaban added a comment  - 17\/Jun\/2016 04:46 AM    n        n        https:\/\/github.com\/spring-projects\/spring-boot\/issues\/6111 is closed n    n    n        n            Show  n            n                        n    n    n    n                nn       todoubaban added a comment  - 17\/Jun\/2016 04:46 AM                       https:\/\/github.com\/spring-projects\/spring-boot\/issues\/6111  is closed              n        n    n"},{"commnet_id":"comment-79533","commnet_date":"2016-06-17T05:27:03-0700","commnet_user":"Stephane Nicoll","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Stephane Nicolln added a comment  - 17\/Jun\/2016 05:27 AM    n        n        Please  don't use that as an argument to dismiss the issue. The only reason I did this is because we want RC1 to use Hibernate 5.2. I still strongly would like this issue to be fixed! n    n    n        n            Show  n            n                        n    n    n    n                nn       Stephane Nicolln added a comment  - 17\/Jun\/2016 05:27 AM                      Please  don't use that as an argument to dismiss the issue. The only reason I did this is because we want RC1 to use Hibernate 5.2. I still strongly would like this issue to be fixed!              n        n    n"}]}},{"HHH-10822":{"info":{"issue_title":"Wrong signature for SharedSessionContract#setJdbcBatchSize","issue_key":"HHH-10822","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.1","issue_labels":"5.2.1","issue_description":"Just wrote a blog post about the new session level batch size feature. http:\/\/blog.arnoldgalovics.com\/2016\/06\/09\/session-level-hibernate-jdbc-batching  Oliver Gierke pointed out, when using the concept of MethodInterceptors the batch size should be set exactly to the original size as was before after a successful or exceptional execution.  The current org.hibernate.SharedSessionContract#setJdbcBatchSize method signature makes it impossible to do, because of the primitive integer parameter.   As I discussed with Vlad Mihalcea, this can be fixed. https:\/\/twitter.com\/ArnoldGalovics\/status\/740897265854877696","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10822?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10819":{"info":{"issue_title":"Allow namespacing (catalog\/schema) rules per db object type","issue_key":"HHH-10819","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.0.7 ,                                            5.1.0","issue_component":"5.0.7 ,                                            5.1.0","issue_labels":"5.0.7","issue_description":"We use identity generation with GenerationTyp.AUTO to support different DBMS (mssql and postgre) with a sequence generator for each Entity:    @SequenceGenerator(name = \"SEQ_MY_CLASS\" , sequenceName = \"SEQ_MY_CLASS\" )  public  class MyClass {   private  Integer  id;  ....  @Id  @GeneratedValue(strategy = GenerationType.AUTO, generator = \"SEQ_MY_CLASS\" )  public  Integer  getId(){  ...  }  }     persistence.xml    ...  &lt;property name=\"hibernate.hbm2ddl.auto\"  value=\"create\"  \/&gt;   &lt;property name=\"hibernate.default_schema\"  value=\"myschema\"  \/&gt;   &lt;property name=\"hibernate.default_catalog\"  value=\"mydatabase\"  \/&gt;   &lt;property name=\"hibernate.id.new_generator_mappings\"  value=\"true\" \/&gt;   ...    Hibernate generates the following SQL for creating the sequence, but MSSQL doesn't support providing catalog name on sequence creation.    create sequence mycatalog.myschema.SEQ_MY_CLASS start with 1 increment by  50     As result we receive the following Exception on wildfly startup:    2016-06-09 13:13:30 INFO  [ServerService Thread  Pool -- 54] [] stdout: Hibernate: create sequence mydatabase.myschema.SEQ_MY_CLASS start with 1 increment by 50    2016-06-09 13:13:30 WARN  [ServerService Thread  Pool -- 54] [] org.hibernate.tool.schema.internal.ExceptionHandlerLoggedImpl: GenerationTarget encountered exception accepting command : Unable to execute command [create sequence mydatabase.myschema.SEQ_MY_CLASS start with 1 increment by 50]: org.hibernate.tool.schema.spi.CommandAcceptanceException: Unable to execute command [create sequence mydatabase.myschema.SEQ_MY_CLASS start with 1 increment by 50]  \tat org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:63)  \tat org.hibernate.tool.schema.internal.SchemaMigratorImpl.applySqlString(SchemaMigratorImpl.java:567)  \tat org.hibernate.tool.schema.internal.SchemaMigratorImpl.applySqlStrings(SchemaMigratorImpl.java:551)  \tat org.hibernate.tool.schema.internal.SchemaMigratorImpl.performMigration(SchemaMigratorImpl.java:289)  \tat org.hibernate.tool.schema.internal.SchemaMigratorImpl.doMigration(SchemaMigratorImpl.java:137)  \tat org.hibernate.tool.schema.internal.SchemaMigratorImpl.doMigration(SchemaMigratorImpl.java:110)  \tat org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:176)  \tat org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:64)  \tat org.hibernate.internal.SessionFactoryImpl.&lt;init&gt;(SessionFactoryImpl.java:458)  \tat org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:465)  \tat org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:881)  \tat org.jboss.as.jpa.hibernate5.TwoPhaseBootstrapImpl.build(TwoPhaseBootstrapImpl.java:44)  \tat org.jboss.as.jpa.service.PersistenceUnitServiceImpl$1$1.run(PersistenceUnitServiceImpl.java:154)  \tat org.jboss.as.jpa.service.PersistenceUnitServiceImpl$1$1.run(PersistenceUnitServiceImpl.java:117)  \tat org.wildfly.security.manager.WildFlySecurityManager.doChecked(WildFlySecurityManager.java:667) [wildfly-elytron-1.0.2.Final.jar:1.0.2.Final]  \tat org.jboss.as.jpa.service.PersistenceUnitServiceImpl$1.run(PersistenceUnitServiceImpl.java:182)  \tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [rt.jar:1.8.0_45]  \tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [rt.jar:1.8.0_45]  \tat java.lang.Thread .run(Thread .java:745) [rt.jar:1.8.0_45]  \tat org.jboss.threads.JBossThread.run(JBossThread.java:320)  Caused by: com.microsoft.sqlserver.jdbc.SQLServerException: 'CREATE SEQUENCE' does not allow specifying the database name as a prefix to the object name.  \tat com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:217)  \tat com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1635)  \tat com.microsoft.sqlserver.jdbc.SQLServerStatement.doExecuteStatement(SQLServerStatement.java:865)  \tat com.microsoft.sqlserver.jdbc.SQLServerStatement$StmtExecCmd.doExecute(SQLServerStatement.java:762)  \tat com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:6276)  \tat com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:1793)  \tat com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:184)  \tat com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:159)  \tat com.microsoft.sqlserver.jdbc.SQLServerStatement.execute(SQLServerStatement.java:735)  \tat org.jboss.jca.adapters.jdbc.WrappedStatement.execute(WrappedStatement.java:198)  \tat org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:51)  \t... 19 more","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10819?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-79134","commnet_date":"2016-06-09T08:18:21-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 09\/Jun\/2016 08:18 AM    n        n        This is only a bug if MSSQL did not support catalog overall.  It does.  nnYou are really asking for a new feature to handle applying schema\/catalog differently based on the type of database object (TABLE, SEQUENCE, etc). n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 09\/Jun\/2016 08:18 AM                      This is only a bug if MSSQL did not support catalog overall.  It does.   nn You are really asking for a new feature to handle applying schema\/catalog differently based on the type of database object (TABLE, SEQUENCE, etc).              n        n    n"}]}},{"HHH-10817":{"info":{"issue_title":"AbstractHANADialect should support the NOWAIT directive in the FOR UPDATE clause","issue_key":"HHH-10817","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.1","issue_labels":"5.2.1","issue_description":"HANA supports both aliases and NOWAIT. This issue aims to add support for the NOWAIT directive.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10817?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10816":{"info":{"issue_title":"SQLServer2005Dialect does not use NOWAIT for aliases","issue_key":"HHH-10816","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.1","issue_labels":"5.2.1","issue_description":"When using lock aliases, the SQLServer2005Dialect ignores the initial LockOptions and uses the deprecated appendLochHint(lockMode, alias)","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10816?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-79050","commnet_date":"2016-06-09T00:40:00-0700","commnet_user":"Carsten Hammer","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Carsten Hammern added a comment  - 09\/Jun\/2016 00:40 AM    n        n        Hi Vlad, I don't think it makes sense to support an unsupported product. SQLServer2005 end of life has been reached:\r\nnhttps:\/\/blogs.msdn.microsoft.com\/sqlreleaseservices\/sql-server-2005-end-of-life-and-upgrade-options\/\r\nnRather than this it would be interesting to support SQLServer2016, memory tables and so on. To put effort in a dead product is a waste of time imho.. n    n    n        n            Show  n            n                        n    n    n    n                nn       Carsten Hammern added a comment  - 09\/Jun\/2016 00:40 AM                      Hi Vlad, I don't think it makes sense to support an unsupported product. SQLServer2005 end of life has been reached: n https:\/\/blogs.msdn.microsoft.com\/sqlreleaseservices\/sql-server-2005-end-of-life-and-upgrade-options\/  nRather than this it would be interesting to support SQLServer2016, memory tables and so on. To put effort in a dead product is a waste of time imho..              n        n    n"},{"commnet_id":"comment-79051","commnet_date":"2016-06-09T00:44:03-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Vlad Mihalcean added a comment  - 09\/Jun\/2016 00:44 AM     - edited  n        n        I was referring to the SQLServer2005Dialect class, not the actual SQL Server 2005 product version. The SQLServer2005Dialect is a base class for:nnntSQLServer2008DialectntSQLServer2012Dialectntany future SQLServer20012Dialect, SQLServer20014Dialect or SQLServer20016DialectnnnnSo, it covers newer versions as well. n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Vlad Mihalcean added a comment  - 09\/Jun\/2016 00:44 AM     - edited                    I was referring to the  SQLServer2005Dialect  class, not the actual SQL Server 2005 product version. The  SQLServer2005Dialect  is a base class for: nn nt  SQLServer2008Dialect  nt  SQLServer2012Dialect  nt any future  SQLServer20012Dialect ,  SQLServer20014Dialect  or  SQLServer20016Dialect  n nnn So, it covers newer versions as well.              n        n    n"}]}},{"HHH-10813":{"info":{"issue_title":"Remove confusing exception message when collection is not processed by flush","issue_key":"HHH-10813","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"5.2.0","issue_component":"5.2.0","issue_labels":"5.2.0","issue_description":"When an exception is not processed by flush, an AssertionException is raised. The error message indicates that a bug might be in Hibernate ORM which is not the case.  Change this exception to an HibernateException and alter the message to clarify that it is a user\/usage bug.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10813?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-79030","commnet_date":"2016-06-08T01:37:45-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 08\/Jun\/2016 01:37 AM    n        n        Pull request sent. n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 08\/Jun\/2016 01:37 AM                      Pull request sent.              n        n    n"}]}},{"HHH-10812":{"info":{"issue_title":"Provide module ZIP file for upgrading WildFly to Hibernate 5.1","issue_key":"HHH-10812","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.1","issue_labels":"5.1.1","issue_description":"This ZIP file will contain all the JAR files and module.xml descriptors required to use a given version of Hibernate ORM on WildFly, as an alternative to the ORM version coming with WildFly out of the box. The file just needs to be unzipped into the server's module directory, and the specific \"slot version\" needs to be set in persistence.xml so to override the ORM version used by default:     jboss.as.jpa.providerModule=org.hibernate:5.1.1.Final     Using the alias mechanism, it also will be possible to just depend on a given minor version:     jboss.as.jpa.providerModule=org.hibernate:5.1     This minor alias will point to the modules unzipped last. So if e.g. unzipping the 5.1.1.Final module ZIP and then later on unzipping the 5.1.2.Final module ZIP, the module dependency \"org.hibernate:5.1\" will point to 5.1.2.Final.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10812?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-80033","commnet_date":"2016-06-27T02:54:23-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 27\/Jun\/2016 02:54 AM    n        n        Sent PR https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1455 n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 27\/Jun\/2016 02:54 AM                      Sent PR  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1455               n        n    n"}]}},{"OGM-1076":{"info":{"issue_title":"Check response for errors when sequences are created in Neo4j remote","issue_key":"OGM-1076","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0.Alpha1","issue_labels":"5.1.0.Alpha1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1076?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1074":{"info":{"issue_title":"Make it possible to connect to Neo4j remote server using https","issue_key":"OGM-1074","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.1","issue_labels":"5.1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1074?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1073":{"info":{"issue_title":"Make the Resteasy connection pool configurable for Neo4j remote","issue_key":"OGM-1073","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.1","issue_labels":"5.1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1073?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10800":{"info":{"issue_title":"InformixDialect: add support for coalesce(), current_timestamp(), current_date()","issue_key":"HHH-10800","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"5.0.0.Final ,                                            5.1.0","issue_component":"5.0.0.Final ,                                            5.1.0","issue_labels":"5.0.0.Final","issue_description":"I've been extending and using for some time the InformixDialect to support the following functions: coalesce(), current_timestamp() and current_date():     registerFunction(\"current_timestamp\" , new  NoArgSQLFunction(\"current\" , StandardBasicTypes.TIMESTAMP, false ));  registerFunction(\"current_date\" , new  NoArgSQLFunction(\"today\" , StandardBasicTypes.DATE, false ));  registerFunction(\"coalesce\" , new  NvlFunction());     Tested it with:\r\n Informix Dynamic Server 11.70.UC7GE\r\n IBM Informix JDBC Driver for IBM Informix Dynamic Server 4.10.JC5DE","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10800?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-81134","commnet_date":"2016-07-14T06:23:43-0700","commnet_user":"Gabriel Belingueres","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gabriel Belingueresn added a comment  - 14\/Jul\/2016 06:23 AM    n        n        Contributed in a PR, without the coalesce() function since it was already added in the codebase. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gabriel Belingueresn added a comment  - 14\/Jul\/2016 06:23 AM                      Contributed in a PR, without the coalesce() function since it was already added in the codebase.              n        n    n"},{"commnet_id":"comment-81439","commnet_date":"2016-07-21T01:01:47-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 21\/Jul\/2016 01:01 AM    n        n        Applied PR upstream. Thanks for your contribution. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 21\/Jul\/2016 01:01 AM                      Applied PR upstream. Thanks for your contribution.              n        n    n"},{"commnet_id":"comment-81440","commnet_date":"2016-07-21T01:02:19-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 21\/Jul\/2016 01:02 AM    n        n        Gail Badner You might consider backporting this issue to 5.0 and\/or 5.1 n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 21\/Jul\/2016 01:02 AM                       Gail Badner  You might consider backporting this issue to 5.0 and\/or 5.1              n        n    n"},{"commnet_id":"comment-82337","commnet_date":"2016-08-10T17:06:11-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 10\/Aug\/2016 17:06 PM    n        n        Re-opening to add another fix version. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 10\/Aug\/2016 17:06 PM                      Re-opening to add another fix version.              n        n    n"},{"commnet_id":"comment-82338","commnet_date":"2016-08-10T17:06:50-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 10\/Aug\/2016 17:06 PM    n        n        Fixed in 5.1 branch as well. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 10\/Aug\/2016 17:06 PM                      Fixed in 5.1 branch as well.              n        n    n"}]}},{"OGM-1071":{"info":{"issue_title":"Add testing facility to inspect executeBatch() content","issue_key":"OGM-1071","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.1","issue_labels":"5.1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1071?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10793":{"info":{"issue_title":"using common major and minor version numbers for compatible subprojects","issue_key":"HHH-10793","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.1.0","issue_component":"5.1.0","issue_labels":"5.1.0","issue_description":"Currently there is no visible version schema for interoperability between the different hibernate subprojects. Not only the different hibernate jars need compatibility - dependencies on thirdparty libraries increase complexity even more. Would it be possible to use a common version number for all hibernate subprojects that can work together? Something like:  hibernate-orm 6.1.x\r\n hibernate-search 6.1.x\r\n hibernate-validator 6.1.x\r\n hibernate-ogm 6.1.x \r\n ..  &lt;hibernateprojectname major.minor.patchnumber&gt;  are all compatible no matter what the patchnumber is.  To do it this way two things are needed:  1) generate releases in all subprojects (not only the changed one) even if no code changes are there in a subproject as soon as one of the subproject implements incompatible changes (changes that cause compatibility issues with other subprojects)\r\n 2) Increment the minor number on incompatible changes in all subprojects\r\n 3) Of course this would be a no brainer if all subprojects would be build with a common subsystem like a multimodule maven project.   I understand that from a hibernate developer point of view finding a compatible version collection for the different subproject is an easy thing. For a \"user\" of these libraries it is sometimes not so easy..","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10793?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-79242","commnet_date":"2016-06-14T09:36:39-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Sanne Grinoveron added a comment  - 14\/Jun\/2016 09:36 AM     - edited  n        n        This issue is mentioned in this mailing list thread, although focusing on the Hibernate Search issue at hand:nnthttp:\/\/lists.jboss.org\/pipermail\/hibernate-dev\/2016-June\/014957.htmlnn n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Sanne Grinoveron added a comment  - 14\/Jun\/2016 09:36 AM     - edited                    This issue is mentioned in this mailing list thread, although focusing on the Hibernate Search issue at hand: n nt  http:\/\/lists.jboss.org\/pipermail\/hibernate-dev\/2016-June\/014957.html  n n             n        n    n"},{"commnet_id":"comment-79251","commnet_date":"2016-06-14T23:53:29-0700","commnet_user":"Carsten Hammer","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Carsten Hammern added a comment  - 14\/Jun\/2016 23:53 PM    n        n        A few years ago I had the same discussion regarding some closed source projects and some very smart and very experienced programmers (better than me). They explained to me that a aligned release is not possible for the same reasons you told me - until I refactored all the different subprojects into a single multimodul maven project tree, added some projects to test interoperability and performance and hooked it into a common jenkins build with a configuration to test with the standard database(s). Since then the interoperability tests failed in some rather surprising situations that however have been difficult but valid quality problems. And since then we only have one rule: versions have to match. Since then not a single line regarding interoperability had to be written by the developers and they can concentrate on something else like compatibility between different versions which is a major problem for us. Of course some subprojects exist in different versions with equal content because of this approach but this is not a problem. I know that for hibernate having gradle and maven as build system is something that might make it impossible to do it that way.nnHowever creating a single multimodul project out of hibernate is a major effort and causes some disadvantages like increased build time that you then have to fix by adding several sub builds using maven profiles within the some multimodul project and so on. So I totally agree there is no silver bullet..  n    n    n        n            Show  n            n                        n    n    n    n                nn       Carsten Hammern added a comment  - 14\/Jun\/2016 23:53 PM                      A few years ago I had the same discussion regarding some closed source projects and some very smart and very experienced programmers (better than me). They explained to me that a aligned release is not possible for the same reasons you told me - until I refactored all the different subprojects into a single multimodul maven project tree, added some projects to test interoperability and performance and hooked it into a common jenkins build with a configuration to test with the standard database(s). Since then the interoperability tests failed in some rather surprising situations that however have been difficult but valid quality problems. And since then we only have one rule: versions have to match. Since then not a single line regarding interoperability had to be written by the developers and they can concentrate on something else like compatibility between different versions which is a major problem for us. Of course some subprojects exist in different versions with equal content because of this approach but this is not a problem. I know that for hibernate having gradle and maven as build system is something that might make it impossible to do it that way. nn However creating a single multimodul project out of hibernate is a major effort and causes some disadvantages like increased build time that you then have to fix by adding several sub builds using maven profiles within the some multimodul project and so on. So I totally agree there is no silver bullet..               n        n    n"},{"commnet_id":"comment-79631","commnet_date":"2016-06-20T02:28:30-0700","commnet_user":"Oliver Gierke","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Oliver Gierken added a comment  - 20\/Jun\/2016 02:28 AM     - edited  n        n        TBCH it would already help if the releases of ORM were slightly more predictable and adhered to semantic versioning in user facing APIs.nnnt5.0.9 broke stored procedure support (n    n                n        n            n            HHH-10515n        n                                                    Closed n             n), which is still broken in 5.1.0 and 5.2.0.nt5.1 appeared without a milestone or release candidate, broke some pretty fundamental JPA things e.g n    n                n        n            n            HHH-10514n        n                                                    Closed n             n.ntbasically everyone is waiting for 5.1.1 as the aforementioned issues were scheduled to be released in that version, but it's overdue for 3 month now with any notice whatsoeverntthen all of a sudden 5.2 appears without milestone or release candidate, the requirement to upgrade to Java 8 (a 6.0 thing if you followed semver), broken binary compatibility in org.hibernate.Query (a 6.0 thing if you followed semver) and JPA specification violations (n    n                n        n            n            HHH-10803n        n                                                    Closed n             n)nnnnWith something like this in place it's close to impossible to build downstream components in a reliable way. I can definitely understand you want to cut of everything before 5.0 but that particular train is tricky to work with to phrase it politely. n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Oliver Gierken added a comment  - 20\/Jun\/2016 02:28 AM     - edited                    TBCH it would already help if the releases of ORM were slightly more predictable and adhered to semantic versioning in user facing APIs. nn nt 5.0.9 broke stored procedure support (n     n                 n         n             n            HHH-10515n         n                                                     Closed n             n), which is still broken in 5.1.0 and 5.2.0. nt 5.1 appeared without a milestone or release candidate, broke some pretty fundamental JPA things e.g n     n                 n         n             n            HHH-10514n         n                                                     Closed n             n. nt basically everyone is waiting for 5.1.1 as the aforementioned issues were scheduled to be released in that version, but it's overdue for 3 month now with any notice whatsoever nt then all of a sudden 5.2 appears without milestone or release candidate, the requirement to upgrade to Java 8 (a 6.0 thing if you followed semver), broken binary compatibility in  org.hibernate.Query  (a 6.0 thing if you followed semver) and JPA specification violations (n     n                 n         n             n            HHH-10803n         n                                                     Closed n             n) n nnn With something like this in place it's close to impossible to build downstream components in a reliable way. I can definitely understand you want to cut of everything before 5.0 but that particular train is tricky to work with to phrase it politely.              n        n    n"},{"commnet_id":"comment-79633","commnet_date":"2016-06-20T02:59:39-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 20\/Jun\/2016 02:59 AM    n        n        Hi Oliver Gierke, I hear you and have had some issues as well (maintainer of Hibernate Search).. we need to improve on this, although it's not trivial to extract some actionable suggestions from your points.nnSome of the things you list were unintentional (bugs), and to improve on those we already discussed on the mailing list that at least a CR should appear also for minor versions before the release. Lacking this though, I think it's fair for \"downstream\" projects like ours to raise any issue and wait for the next bugfix release rather than having to rush out a compatible version.nnFor example Hibernate Search can't upgrade to Hibernate ORM 5.2.0.Final because of issues with org.hibernate.Query .. my bad as I could have noticed earlier but I've been busy on other matters. I fixed the issues and will be able to upgrade to ORM 5.2.1.Final once it comes out, however I'm not sure if it's the same issue with org.hibernate.Query that you are referring to! Please check and raise follow up issues as needed.\r\nnI suspect Steve was expecting us to more closely test against nightly builds, but this hasn't been very practical for the Hibernate Search team (for example), as e.g. when internal APIs break we can no longer have CI test both branches with a single source set.nnRegarding the Java 8 compatibility, that one was discussed on the mailing list and there were no objections. I can see how someone would not consider this \"proper semver\" but to be fair I'm not sure I agree. Might be nice to have you on the mailing list so that when such tradeoffs are debated we can also consider your POV at a more timely moment.nnRe the 5.1.1 release: I asked about one as well this weekend: we might see one this week according to Gail - who is in charge of maintenance of older branches. Steve just explained me that the core ORM team usually works only on releases of the latest branch, so when there's need for a maintenance release of an older branch we might need to ask for one explicitly: for people like you they'll likely do one, but don't take them for granted as there won't be releases unless there's demand or volunteers for making them happen. I hope this helps! n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 20\/Jun\/2016 02:59 AM                      Hi  Oliver Gierke , I hear you and have had some issues as well (maintainer of Hibernate Search).. we need to improve on this, although it's not trivial to extract some actionable suggestions from your points. nn Some of the things you list were unintentional (bugs), and to improve on those we already discussed on the mailing list that at least a CR should appear also for minor versions before the release. Lacking this though, I think it's fair for \"downstream\" projects like ours to raise any issue and wait for the next bugfix release rather than having to rush out a compatible version. nn For example Hibernate Search can't upgrade to Hibernate ORM 5.2.0.Final because of issues with  org.hibernate.Query  .. my bad as I could have noticed earlier but I've been busy on other matters. I fixed the issues and will be able to upgrade to ORM 5.2.1.Final once it comes out, however I'm not sure if it's the same issue with  org.hibernate.Query  that you are referring to! Please check and raise follow up issues as needed. nI suspect Steve was expecting us to more closely test against nightly builds, but this hasn't been very practical for the Hibernate Search team (for example), as e.g. when internal APIs break we can no longer have CI test both branches with a single source set. nn Regarding the Java 8 compatibility, that one was discussed on the mailing list and there were no objections. I can see how someone would not consider this \"proper semver\" but to be fair I'm not sure I agree. Might be nice to have you on the mailing list so that when such tradeoffs are debated we can also consider your POV at a more timely moment. nn Re the  5.1.1  release: I asked about one as well this weekend: we might see one this week according to Gail - who is in charge of maintenance of older branches. Steve just explained me that the core ORM team usually works only on releases of the latest branch, so when there's need for a maintenance release of an older branch we might need to ask for one explicitly: for people like you they'll likely do one, but don't take them for granted as there won't be releases unless there's demand or volunteers for making them happen. I hope this helps!              n        n    n"},{"commnet_id":"comment-79635","commnet_date":"2016-06-20T05:05:23-0700","commnet_user":"Oliver Gierke","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Oliver Gierken added a comment  - 20\/Jun\/2016 05:05 AM     - edited  n        n        My suggestions are pretty simple:nn1. Provide milestone and release candidate builds to be able to identify issues before the rest of the world is left having to work around them (this has been the case before, no clue why 5 stopped with that practice).\r\nn2. Don't break binary compatibility in a minor release. According to semver u2014 unless I hacked myself into deep internals of Hibernate u2014, I should be able to run my application that was on Hibernate 5.1 on Hibernate 5.2 without any need for recompilation.\r\nn3. Don't raise JVM requirements in minor versions. I cannot take my Java 6 or 7 application running on Hibernate 5.1 to run Hibernate 5.2. This is clearly something for a major release.\r\nn4. Make sure you have sufficient test coverage to prevent fundamental JPA functionality to break. I am kind of surprised to see that with sort of every release something breaks in the mapping information detection. Converters being reported invalidly, identifiers not being discovered anymore etc. Just couple of minutes ago I got another bug filed mentioning Hibernate 5.2 and it turns out a simple lookup on the JPA CriteriaBuilder is broken that works on 5.1 (see n    n                n        n            n            HHH-10870n        n                                                    Closed n             n).nnThose points seem to be very trivial and fundamental aspects of software development, and I wonder how you can actually build something minimally reliable at all, if you neglect those. Actually, the Spring Data team tracks Hibernate builds and releases [very closely|https:\/\/travis-ci.org\/spring-projects\/spring-data-jpa| with build profiles set up for all the versions and snapshot flying around. However, since 5.0 we sort of suffer from the broken window syndrome, as we're basically running from one bug into another.nnI just subscribed to the developers mailing list a few weeks ago and will happily share my opinion going forward, in case questions like these should come up again . n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Oliver Gierken added a comment  - 20\/Jun\/2016 05:05 AM     - edited                    My suggestions are pretty simple: nn 1. Provide milestone and release candidate builds to be able to identify issues before the rest of the world is left having to work around them (this has been the case before, no clue why 5 stopped with that practice). n2. Don't break binary compatibility in a minor release. According to semver u2014 unless I hacked myself into deep internals of Hibernate u2014, I should be able to run my application that was on Hibernate 5.1 on Hibernate 5.2 without any need for recompilation. n3. Don't raise JVM requirements in minor versions. I cannot take my Java 6 or 7 application running on Hibernate 5.1 to run Hibernate 5.2. This is clearly something for a major release. n4. Make sure you have sufficient test coverage to prevent fundamental JPA functionality to break. I am kind of surprised to see that with sort of every release something breaks in the mapping information detection. Converters being reported invalidly, identifiers not being discovered anymore etc. Just couple of minutes ago I got another bug filed mentioning Hibernate 5.2 and it turns out a simple lookup on the JPA  CriteriaBuilder  is broken that works on 5.1 (see n     n                 n         n             n            HHH-10870n         n                                                     Closed n             n). nn Those points seem to be very trivial and fundamental aspects of software development, and I wonder how you can actually build something minimally reliable at all, if you neglect those. Actually, the Spring Data team tracks Hibernate builds and releases [very closely|https:\/\/travis-ci.org\/spring-projects\/spring-data-jpa| with build profiles set up for all the versions and snapshot flying around. However, since 5.0 we sort of suffer from the broken window syndrome, as we're basically running from one bug into another. nn I just subscribed to the developers mailing list a few weeks ago and will happily share my opinion going forward, in case questions like these should come up again  .              n        n    n"}]}},{"HHH-10791":{"info":{"issue_title":"Provisioning for hibernate-jcache","issue_key":"HHH-10791","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"hibernate-jcache","issue_description":"Unified configuration for hibernate-jcache.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10791?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-78639","commnet_date":"2016-06-01T16:30:11-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 01\/Jun\/2016 16:30 PM    n        n        Radim Vansa, Louis Jacomet, Ben Manes FYI... n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 01\/Jun\/2016 16:30 PM                       Radim Vansa ,  Louis Jacomet ,  Ben Manes  FYI...              n        n    n"},{"commnet_id":"comment-85575","commnet_date":"2016-11-06T07:25:02-0800","commnet_user":"Jens Wilke","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Jens Wilken added a comment  - 06\/Nov\/2016 07:25 AM    n        n        I went through the other tickets relating to JCache. nnThe JCache standard (JSR107) does not specify enough configuration options for a real world production setup. E.g. there is no way to specify a capacity limit of a cache. This makes it impossible to implement some means of a general configuration mechanism that is working with all (JCache) cache implementations. n    n    n        n            Show  n            n                        n    n    n    n                nn       Jens Wilken added a comment  - 06\/Nov\/2016 07:25 AM                      I went through the other tickets relating to JCache.  nn The JCache standard (JSR107) does not specify enough configuration options for a real world production setup. E.g. there is no way to specify a capacity limit of a cache. This makes it impossible to implement some means of a general configuration mechanism that is working with all (JCache) cache implementations.              n        n    n"}]}},{"HHH-10788":{"info":{"issue_title":"Develop a second-level-cache TCK","issue_key":"HHH-10788","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6.0.0.Alpha1","issue_labels":"6.0.0.Alpha1","issue_description":"The idea is to build a TCK that tests the Hibernate ORM assertions about a RegionFactory implementation.  A correctness test for the SPI impls.   \tcache key generation (                                                         HHH-10287                                                              Closed                ) \tothers ...","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10788?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-78632","commnet_date":"2016-06-01T08:34:03-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 01\/Jun\/2016 08:34 AM    n        n        Radim Vansa, Louis Jacomet FYI...  n n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 01\/Jun\/2016 08:34 AM                       Radim Vansa ,  Louis Jacomet  FYI...   n             n        n    n"}]}},{"HHH-10786":{"info":{"issue_title":"Add MySQL 5.7 JSON datatype support","issue_key":"HHH-10786","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.1","issue_labels":"5.2.1","issue_description":"The new JSON datatype is documented here :\r\n https:\/\/dev.mysql.com\/doc\/refman\/5.7\/en\/json.html  The actuel MySql57 dialect doesn't support it","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10786?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-78645","commnet_date":"2016-06-01T21:55:37-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 01\/Jun\/2016 21:55 PM    n        n        Applied PR on master. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 01\/Jun\/2016 21:55 PM                      Applied PR on master.              n        n    n"}]}},{"HHH-10784":{"info":{"issue_title":"JavaTypeDescriptorRegistry logs warning for interface for which an AttributeConverter is registered","issue_key":"HHH-10784","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"5.1.0","issue_component":"5.1.0","issue_labels":"5.1.0","issue_description":"If an entity class contains a property of an interface type for which a JPA AttributeConverter is registered, JavaTypeDescriptorRegistry logs a warning   Could not find matching type descriptor for requested Java class [javax.money.MonetaryAmount]; using fallback     which sort of implies that there is a problem, where there actually is none.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10784?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10780":{"info":{"issue_title":"Provide a PrimitiveByteArrayTypeDescriptor toString implementation","issue_key":"HHH-10780","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.0,                                            5.1.1","issue_labels":"5.2.0,                                            5.1.1","issue_description":"Currently, if we have the following entity:      @Entity(name = \"Image\" )  public  static  class Image {        @Id      private  Long  id;        @Column(name = \"content\" )      private  byte [] content;  }     When we try to persist and entity, the following log output is generated:   10:34:58,722 DEBUG SQL:92 -       insert       into          Image          (content, id)       values          (?, ?)  10:34:58,723 TRACE BasicBinder:65 - binding parameter [1] as [VARBINARY] - [[B@3f5478c8]  10:34:58,724 TRACE BasicBinder:65 - binding parameter [2] as [BIGINT] - [1]     The VARBINARY logged value is using the default java.lang.Object implementation, which is not very useful in this case.  We should provide a better toString() implementation for this.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10780?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-78536","commnet_date":"2016-05-31T02:31:45-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 31\/May\/2016 02:31 AM    n        n        Add a fix starting from the PR suggestions. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 31\/May\/2016 02:31 AM                      Add a fix starting from the  PR suggestions .              n        n    n"},{"commnet_id":"comment-78538","commnet_date":"2016-05-31T02:54:40-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 31\/May\/2016 02:54 AM    n        n        Gail Badner Would you like to add this to 5.0 too? n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 31\/May\/2016 02:54 AM                       Gail Badner  Would you like to add this to 5.0 too?              n        n    n"},{"commnet_id":"comment-79205","commnet_date":"2016-06-13T13:29:32-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 13\/Jun\/2016 13:29 PM    n        n        Reopening to apply label. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 13\/Jun\/2016 13:29 PM                      Reopening to apply label.              n        n    n"},{"commnet_id":"comment-79206","commnet_date":"2016-06-13T13:29:52-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 13\/Jun\/2016 13:29 PM    n        n        Closing after applying label. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 13\/Jun\/2016 13:29 PM                      Closing after applying label.              n        n    n"}]}},{"HHH-10778":{"info":{"issue_title":"Add support for non-public AttributeConverter implementations","issue_key":"HHH-10778","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"hibernate-entitymanager","issue_description":"It would be cool if AttributeConverter implementations could be package protected to prevent them from being referred to by other parts of the code base. It looks like simply making the type accessible in AttributeConverterDefinition.instantiateAttributeConverter(\u2026) should do the trick.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10778?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10775":{"info":{"issue_title":"Type systems consolidation","issue_key":"HHH-10775","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Out of Date","issue_fix_version":"None","issue_component":"None","issue_labels":"hibernate-core","issue_description":"Develop the consolidation\/unification of the numerous type systems implemented by Hibernate:  \tits own org.hibernate.type.Type system \tJPA type system \tSQM type system    Also needs to ultimately swap ResultSet value extraction by name to extraction by position (perf) which is highly disruptive change (custom type impls).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10775?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-81035","commnet_date":"2016-07-13T10:57:35-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 13\/Jul\/2016 10:57 AM    n        n        Resolved as \"out of date\" since this work got caught up in the work for n    n                n        n            n            HHH-10873n        n                                                    Open n             n and both are being developed under that key. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 13\/Jul\/2016 10:57 AM                      Resolved as \"out of date\" since this work got caught up in the work for n     n                 n         n             n            HHH-10873n         n                                                     Open n             n and both are being developed under that key.              n        n    n"}]}},{"OGM-1067":{"info":{"issue_title":"CollectionHelper.newHashMap(int) is counter productive","issue_key":"OGM-1067","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Minor","issue_affects_version":"Won&#39;t Fix","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"In OGM, we usually use CollectionHelper.newHashMap(int initialCapacity) to avoid the resizing of the HashMap after its initialization.  The issue is that it's doing more harm than good because the default load factor is of 0.75 so the initial size of the map is always smaller than what we expect and it's always resized.  We should rename the parameter to expectedSize instead of initialCapacity and calculate the size taking into account the default load factor.  Typically, we use the following pattern to initialize a correctly sized Map:    Given a List&lt;String &gt; myList, we create the Map with:  Map&lt;String , Object &gt; myMap = CollectionHelper.newHashMap( myList.size() );  for  ( String  element : myList ) {      myMap.put( element, object );  }     Currently the Map is created with an initial capacity of myList.size() but as the load factor is of 0.75, when we try to put myList.size() elements in it, it is systematically resized. This is totally counter productive as the purpose was to avoid the resizing of the Map.  See for instance Lists.newArrayListWithExpectedSize of Guava.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1067?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-78481","commnet_date":"2016-05-27T03:31:59-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Sanne Grinoveron added a comment  - 27\/May\/2016 03:31 AM     - edited  n        n        I'm not entirely convinced that this is a good idea, do you have evidence of us systemically wasting space?\r\nnRemember that in a HashMap it's quite possible that several items will resolve to the same bucket, so it's a normal scenario to have less buckets allocated than the total size of entries.nnThe \"putAll\" method does indeed apply some correction factor; I don't know why they came to this conclusion but my wild guess is that it's taking in consideration that it's adding N elements in addition to existing items.\r\nnClearly some people thought this through and decided that it wasn't worth to apply on the constructor invocation.nnThe main doubt I have is wondering if this slight offset in allocation is something you have observed in a specific use case:\r\nnin this case we should just have either a dedicate method on CollectionHelper, or get rid of the helper so that each code path takes responsibility.nnIf you think this is \"globally\" needed - like that the default constructor is just wrong - then it would be nice to share your observations to the OpenJDK team. n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Sanne Grinoveron added a comment  - 27\/May\/2016 03:31 AM     - edited                    I'm not entirely convinced that this is a good idea, do you have evidence of us systemically wasting space? nRemember that in a HashMap it's quite possible that several items will resolve to the same bucket, so it's a normal scenario to have less buckets allocated than the total size of entries. nn The \"putAll\" method does indeed apply some correction factor; I don't know why they came to this conclusion but my wild guess is that it's taking in consideration that it's adding N elements  in addition  to existing items. nClearly some people thought this through and decided that it wasn't worth to apply on the constructor invocation. nn The main doubt I have is wondering if this slight offset in allocation is something you have observed in a specific use case: nin this case we should just have either a dedicate method on  CollectionHelper , or get rid of the helper so that each code path takes responsibility. nn If you think this is \"globally\" needed - like that the default constructor is just wrong - then it would be nice to share your observations to the OpenJDK team.              n        n    n"},{"commnet_id":"comment-78482","commnet_date":"2016-05-27T03:52:34-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 27\/May\/2016 03:52 AM    n        n        The issue is not so much one of wasting space but that we allocate the map in a size that is \"too small\" to hold all the elements we want it to hold, so it gets resized right away instead of being allocated with the right size from the beginning.nnOne can have \"each code path take responsibility\", but as shown it's very easy to allocate maps too small when e.g. driving the initialization from a list. So having something as Guava's newArrayListWithExpectedSize() would be nice. nnWhether it makes any difference in the larger scheme of things? Probably not. So I'd rather shave different yaks  n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 27\/May\/2016 03:52 AM                      The issue is not so much one of wasting space but that we allocate the map in a size that is \"too small\" to hold all the elements we want it to hold, so it gets resized right away instead of being allocated with the right size from the beginning. nn One can have \"each code path take responsibility\", but as shown it's very easy to allocate maps too small when e.g. driving the initialization from a list. So having something as Guava's  newArrayListWithExpectedSize()  would be nice.  nn Whether it makes any difference in the larger scheme of things? Probably not. So I'd rather shave different yaks                n        n    n"},{"commnet_id":"comment-78483","commnet_date":"2016-05-27T03:58:49-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 27\/May\/2016 03:58 AM    n        n        The issue is not so much one of wasting space but that we allocate the map in a size that is \"too small\" to hold all the elements we want it to hold, so it gets resized right away instead of being allocated with the right size from the beginning.nnYes I had understood that; sorry I just wrote the wrong thing as I was getting ahead on myself on a related matter.nnOne can have \"each code path take responsibility\", but as shown it's very easy to allocate maps too small when e.g. driving the initialization from a list. So having something as Guava's newArrayListWithExpectedSize() would be nice.nnThe analogy with a List implementation isn't a good argument to do this on hashmaps as lists don't use buckets and don't aim to reuse buckets.nnWhether it makes any difference in the larger scheme of things? Probably not. So I'd rather shave different yaks nnSounds reasonable. I'd rather not merge this either then: it adds some more math computation which is of questionable value. Merge it if you have proof with i.e. JMH, but then again this seems more like a potential optimisation to suggest to the OpenJDK team (if it's proven valid). n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 27\/May\/2016 03:58 AM                       The issue is not so much one of wasting space but that we allocate the map in a size that is \"too small\" to hold all the elements we want it to hold, so it gets resized right away instead of being allocated with the right size from the beginning.  nn Yes I had understood that; sorry I just wrote the wrong thing as I was getting ahead on myself on a related matter. nn  One can have \"each code path take responsibility\", but as shown it's very easy to allocate maps too small when e.g. driving the initialization from a list. So having something as Guava's newArrayListWithExpectedSize() would be nice.  nn The analogy with a List implementation isn't a good argument to do this on hashmaps as lists don't use buckets and don't aim to reuse buckets. nn  Whether it makes any difference in the larger scheme of things? Probably not. So I'd rather shave different yaks   nn Sounds reasonable. I'd rather not merge this either then: it adds some more math computation which is of questionable value. Merge it if you have proof with i.e. JMH, but then again this seems more like a potential optimisation to suggest to the OpenJDK team (if it's proven valid).              n        n    n"},{"commnet_id":"comment-78484","commnet_date":"2016-05-27T04:00:32-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 27\/May\/2016 04:00 AM    n        n        P.S. I don't mean to sound too negative. Feel free to merge it, but I'd rather do so only with better proof to back the change - lacking that, I'd rather keep the code simple. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 27\/May\/2016 04:00 AM                      P.S. I don't mean to sound too negative. Feel free to merge it, but I'd rather do so only with better proof to back the change - lacking that, I'd rather keep the code simple.              n        n    n"},{"commnet_id":"comment-78485","commnet_date":"2016-05-27T04:04:22-0700","commnet_user":"Davide D&#39;Alto","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Davide D&#39;Alton added a comment  - 27\/May\/2016 04:04 AM    n        n        &gt; P.S. I don't mean to sound too negative. Feel free to merge it, but I'd rather do so only with better proof to back the change - lacking that, I'd rather keep the code simple.nn+1 n    n    n        n            Show  n            n                        n    n    n    n                nn       Davide D&#39;Alton added a comment  - 27\/May\/2016 04:04 AM                      &gt; P.S. I don't mean to sound too negative. Feel free to merge it, but I'd rather do so only with better proof to back the change - lacking that, I'd rather keep the code simple. nn +1              n        n    n"},{"commnet_id":"comment-78486","commnet_date":"2016-05-27T04:19:03-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 27\/May\/2016 04:19 AM    n        n        nThe analogy with a List implementation isn't a good argument to do this on hashmaps as lists don't use buckets and don't aim to reuse buckets.nnWhat I mean is driving map allocation based on the size of a given list. Say you have a list of 12 things and want to allocate a map from name to \"thing\" for these 12. Then allocating the map with list.getSize() is most of the time not what you wanted. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 27\/May\/2016 04:19 AM                      n The analogy with a List implementation isn't a good argument to do this on hashmaps as lists don't use buckets and don't aim to reuse buckets.  nn What I mean is  driving  map allocation based on the size of a given list. Say you have a list of 12 things and want to allocate a map from name to \"thing\" for these 12. Then allocating the map with list.getSize() is most of the time not what you wanted.              n        n    n"},{"commnet_id":"comment-78487","commnet_date":"2016-05-27T05:21:52-0700","commnet_user":"Guillaume Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Guillaume Smetn added a comment  - 27\/May\/2016 05:21 AM    n        n        Didn't think it would be that controversial, considering it was mentioned to me in a review.nnBy the way, that's the logic used in HashMap#putAll when the initial table is empty so that sounds like something we should do.nnAnyway, closing. n    n    n        n            Show  n            n                        n    n    n    n                nn       Guillaume Smetn added a comment  - 27\/May\/2016 05:21 AM                      Didn't think it would be that controversial, considering it was mentioned to me in a review. nn By the way, that's the logic used in HashMap#putAll when the initial table is empty so that sounds like something we should do. nn Anyway, closing.              n        n    n"}]}},{"HSEARCH-2286":{"info":{"issue_title":"DistanceSortField should support reverse sorting","issue_key":"HSEARCH-2286","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.5.2.Final","issue_component":"5.5.2.Final","issue_labels":"5.5.2.Final","issue_description":"May be I do not know how to use the DistanceSortField class,\r\n But I want to do some column sorting on distance, and I am not able to do reverse sorting (in DESC direction).  The DistanceSortField constructor do not accept a parameter 'reverse boolean'.\r\n I think the point is in the method\r\n org.hibernate.search.spatial.impl.DistanceComparatorSource#newComparator that do not handle the given reverse parameter.  May be I miss something ?","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2286?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-78453","commnet_date":"2016-05-26T07:14:12-0700","commnet_user":"Guillaume Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Guillaume Smetn added a comment  - 26\/May\/2016 07:14 AM    n        n        You can work around it for now by implementing your own DistanceSortField and adding the constructors I added in the PR: https:\/\/github.com\/hibernate\/hibernate-search\/pull\/1113\/files n    n    n        n            Show  n            n                        n    n    n    n                nn       Guillaume Smetn added a comment  - 26\/May\/2016 07:14 AM                      You can work around it for now by implementing your own DistanceSortField and adding the constructors I added in the PR:  https:\/\/github.com\/hibernate\/hibernate-search\/pull\/1113\/files               n        n    n"},{"commnet_id":"comment-78454","commnet_date":"2016-05-26T07:20:26-0700","commnet_user":"Adrien ESTRAN","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Adrien ESTRANn added a comment  - 26\/May\/2016 07:20 AM    n        n        That was exactly what I have planned to do.\r\nnThank your for your quick answer .nnRegards. n    n    n        n            Show  n            n                        n    n    n    n                nn       Adrien ESTRANn added a comment  - 26\/May\/2016 07:20 AM                      That was exactly what I have planned to do. nThank your for your quick answer  . nn Regards.              n        n    n"},{"commnet_id":"comment-78492","commnet_date":"2016-05-27T09:09:41-0700","commnet_user":"Adrien ESTRAN","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Adrien ESTRANn added a comment  - 27\/May\/2016 09:09 AM    n        n        @Guillaume Smet =&gt; I have applied your suggestion and it work well, thank you. n    n    n        n            Show  n            n                        n    n    n    n                nn       Adrien ESTRANn added a comment  - 27\/May\/2016 09:09 AM                      @Guillaume Smet =&gt; I have applied your suggestion and it work well, thank you.              n        n    n"}]}},{"HHH-10773":{"info":{"issue_title":"Add a toString() implementation to the READ_WRITE Ehcache Item object","issue_key":"HHH-10773","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"5.1.0","issue_component":"5.1.0","issue_labels":"5.1.0","issue_description":"All cache concurrency strategies, except for READ_WRITE, use the StandardCacheEntryImpl object type for storing a second-level cache entry value. This class has a toString() representation, which makes it easy to grasp the entity disassembled state.  For READ_WRITE, the AbstractReadWriteAccessStrategy.Item object is used, which doesn't have a toString() representation.  For the design to be consistent, it would be good to implement toString() for AbstractReadWriteAccessStrategy.Item too.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10773?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-78435","commnet_date":"2016-05-25T07:58:47-0700","commnet_user":"Louis Jacomet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Louis Jacometn added a comment  - 25\/May\/2016 07:58 AM    n        n        Taking the liberty of doing a similar change in the context of n    n                n        n            n            HHH-10770n        n                                                    Closed n             n so that the new JCache provider does not suffer from a similar problem. n    n    n        n            Show  n            n                        n    n    n    n                nn       Louis Jacometn added a comment  - 25\/May\/2016 07:58 AM                      Taking the liberty of doing a similar change in the context of n     n                 n         n             n            HHH-10770n         n                                                     Closed n             n so that the new JCache provider does not suffer from a similar problem.              n        n    n"},{"commnet_id":"comment-78436","commnet_date":"2016-05-25T08:09:24-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 25\/May\/2016 08:09 AM    n        n        That would be great. It really helps debugging. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 25\/May\/2016 08:09 AM                      That would be great. It really helps debugging.              n        n    n"}]}},{"HHH-10771":{"info":{"issue_title":"Non-optional bidirectional @OneToOne with @MapsId should respect the FetchType.LAZY contract","issue_key":"HHH-10771","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.1.0","issue_component":"5.1.0","issue_labels":"5.1.0","issue_description":"Traditionally, the parent-side @OneToOne association will always fetch the child association eagerly.   For optional associations, this makes a lot of sense because we have to know whether we need a null or a Proxy.  For non-optional associations, we don't know the child entity identifier, so we also need a query to populate the Proxy with the least information possible. However, if the association is using @MapsId, we know that both the parent and the child are going to share the same identifier, in which case the secondary select is not needed anymore.  This is even more dramatic if the user selects N parent entities with a JPQL query, and she forgets to fetch the child side. Another N secondary queries will be generated, leading to a N+1 query issue.  This optimization for @MapsId cases will allow us to circumvent this secondary select problem without having to use bytecode enhancement.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10771?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10770":{"info":{"issue_title":"Add support for JCache-compliant 2nd-level cache providers","issue_key":"HHH-10770","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.0","issue_labels":"5.2.0","issue_description":"The Ehcache team has some level of support for this developed already.  Tentatively scheduling for 5.2 pending outcome of dev mailing list discussion.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10770?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-78430","commnet_date":"2016-05-25T03:01:19-0700","commnet_user":"Louis Jacomet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Louis Jacometn added a comment  - 25\/May\/2016 03:01 AM    n        n        I have opened a pull request for this: https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1386 n    n    n        n            Show  n            n                        n    n    n    n                nn       Louis Jacometn added a comment  - 25\/May\/2016 03:01 AM                      I have opened a pull request for this:  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1386               n        n    n"},{"commnet_id":"comment-78452","commnet_date":"2016-05-26T07:10:49-0700","commnet_user":"Louis Jacomet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Louis Jacometn added a comment  - 26\/May\/2016 07:10 AM     - edited  n        n        Found an issue in SessionFactoryImpl.close() where cacheAccess.close() is called twice. This results in interactions with the JCache CacheManager which are invalid because it will have been closed after the first invocation.nnWhile there is something in place to simply log when the cache manager is closed twice, this does not apply here since before reaching that point, tentatives are made to destroy known caches. And that is the operation illegal at that point.nnUnless this should be filed as a separate issue, I plan to add a commit to the pull request fixing that duplicate call.\r\nnSee https:\/\/github.com\/hibernate\/hibernate-orm\/blob\/bf9b3f524d271eaf055cfda4f66a7a3acb714c0d\/hibernate-core\/src\/main\/java\/org\/hibernate\/internal\/SessionFactoryImpl.java#L737 n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Louis Jacometn added a comment  - 26\/May\/2016 07:10 AM     - edited                    Found an issue in  SessionFactoryImpl.close()  where  cacheAccess.close()  is called twice. This results in interactions with the JCache  CacheManager  which are invalid because it will have been closed after the first invocation. nn While there is something in place to simply log when the cache manager is closed twice, this does not apply here since before reaching that point, tentatives are made to destroy known caches. And that is the operation illegal at that point. nn Unless this should be filed as a separate issue, I plan to add a commit to the pull request fixing that duplicate call. nSee  https:\/\/github.com\/hibernate\/hibernate-orm\/blob\/bf9b3f524d271eaf055cfda4f66a7a3acb714c0d\/hibernate-core\/src\/main\/java\/org\/hibernate\/internal\/SessionFactoryImpl.java#L737               n        n    n"},{"commnet_id":"comment-78455","commnet_date":"2016-05-26T08:02:40-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 26\/May\/2016 08:02 AM    n        n        Yes that was clearly an oversight nnI'd rather fix that under n    n                n        n            n            HHH-10664n        n                                                    Closed n             n. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 26\/May\/2016 08:02 AM                      Yes that was clearly an oversight   nn I'd rather fix that under n     n                 n         n             n            HHH-10664n         n                                                     Closed n             n.              n        n    n"},{"commnet_id":"comment-78456","commnet_date":"2016-05-26T08:09:53-0700","commnet_user":"Louis Jacomet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Louis Jacometn added a comment  - 26\/May\/2016 08:09 AM     - edited  n        n        You want me to open a PR for that with this id or are you taking care of it then?nnAnswered on the PR, will add a commit to it with the proper issue reference. n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Louis Jacometn added a comment  - 26\/May\/2016 08:09 AM     - edited                     You want me to open a PR for that with this id or are you taking care of it then?  nn Answered on the PR, will add a commit to it with the proper issue reference.              n        n    n"},{"commnet_id":"comment-78457","commnet_date":"2016-05-26T08:20:59-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 26\/May\/2016 08:20 AM    n        n        Louis Jacomet What do you think of building a \"configuration mechanism\" of some sort into hibernate-jcache?  n    n                n        n            n            HHH-10315n        n                                                    Closed n             n is another reference point.  Ben Manes any interest in helping design\/develop this \"configuration mechanism\"? n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 26\/May\/2016 08:20 AM                       Louis Jacomet  What do you think of building a \"configuration mechanism\" of some sort into  hibernate-jcache ?  n     n                 n         n             n            HHH-10315n         n                                                     Closed n             n is another reference point.   Ben Manes  any interest in helping design\/develop this \"configuration mechanism\"?              n        n    n"},{"commnet_id":"comment-78458","commnet_date":"2016-05-26T08:29:13-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 26\/May\/2016 08:29 AM    n        n        To be clear.. I think both mechanisms (\"framework\"\/\"library\") mentioned in n    n                n        n            n            HHH-10315n        n                                                    Closed n             n should be supported ultimately.nnDo y'all see this as a generalized replacement for library-specific RegionFactory impls?  n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 26\/May\/2016 08:29 AM                      To be clear.. I think both mechanisms (\"framework\"\/\"library\") mentioned in n     n                 n         n             n            HHH-10315n         n                                                     Closed n             n should be supported ultimately. nn Do y'all see this as a generalized replacement for library-specific RegionFactory impls?               n        n    n"},{"commnet_id":"comment-78545","commnet_date":"2016-05-31T21:57:25-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 31\/May\/2016 21:57 PM    n        n        Applied the PR upstream.  Thanks Louis Jacomet, Alex Snaps, Radim Vansa and everyone else for helping with this! n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 31\/May\/2016 21:57 PM                      Applied the PR upstream.  Thanks  Louis Jacomet ,  Alex Snaps ,  Radim Vansa  and everyone else for helping with this!              n        n    n"}]}},{"HHH-10769":{"info":{"issue_title":"Allow registering an embeddable parameter for stored procedures","issue_key":"HHH-10769","issue_type":"Improvement","issue_status":"Awaiting Response","issue_priority":"Awaiting Response","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"hibernate-core","issue_description":"There is nothing in the API that prevents an embeddable parameter to be mapped for a stored procedure.   For example, with Address is an embeddable:     @NamedStoredProcedureQuery(  \tname = \"User.findAddressById\" ,   \tresultClasses = User.class,  \tprocedureName = \"PROC\" ,  \tparameters = {  \t\t@StoredProcedureParameter(mode = ParameterMode.IN, name = \"ID_PARAM\" , type = Integer .class),  \t\t@StoredProcedureParameter(mode = ParameterMode.OUT, name = \"ADDRESS_PARAM\" , type = Address.class)  \t}  )     When Hibernate tries to create the stored procedure, the following exception is thrown:   java.lang.IllegalArgumentException: Type cannot be null  \tat org.hibernate.procedure.internal.AbstractParameterRegistrationImpl.setHibernateType(AbstractParameterRegistrationImpl.java:187)  \tat org.hibernate.procedure.internal.AbstractParameterRegistrationImpl.&lt;init&gt;(AbstractParameterRegistrationImpl.java:124)  \tat org.hibernate.procedure.internal.AbstractParameterRegistrationImpl.&lt;init&gt;(AbstractParameterRegistrationImpl.java:97)  \tat org.hibernate.procedure.internal.NamedParameterRegistration.&lt;init&gt;(NamedParameterRegistration.java:35)  \tat org.hibernate.procedure.internal.ProcedureCallImpl.&lt;init&gt;(ProcedureCallImpl.java:235)  \tat org.hibernate.procedure.internal.ProcedureCallMementoImpl.makeProcedureCall(ProcedureCallMementoImpl.java:65)  \tat org.hibernate.internal.SessionImpl.createNamedStoredProcedureQuery(SessionImpl.java:3636)  \tat org.hibernate.jpa.test.procedure.StoreProcedureOutParameterByNameTest.testNamedBasicAndEmbeddableOutParameters(StoreProcedureOutParameterByNameTest.java:127)  \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)  \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)  \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)  \tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)  \tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)  \tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)  \tat org.hibernate.testing.junit4.ExtendedFrameworkMethod.invokeExplosively(ExtendedFrameworkMethod.java:45)  \tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)  \tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)  \tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)  \tat org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)     The Hibernate type for the embeddable is null because the ParameterMemento constructor passes the value returned by sessionFactory.getTypeResolver().heuristicType( type.getName() ), which returns null.  In addition the following needs to be resolved to support this improvement:  \tfor a named embeddable parameter, some strategy needs to be used to generate parameter names for the embeddable's sub-attributes (and sub-subattributes, etc.); these names must match the parameter names defined for the stored procedure in the database; \tfor a positional embeddable parameter, some strategy needs to be used so that the order of the embeddable's sub-attributes (and sub-subattributes, etc.) matches the order of the parameters defined for the stored procedure in the database (is this possible)?","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10769?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-78376","commnet_date":"2016-05-24T15:27:52-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Gail Badnern added a comment  - 24\/May\/2016 15:27 PM     - edited  n        n        Custom types are related to this; the exception shown above is not thrown. Instead, the type is assumed to be SerializableType. n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Gail Badnern added a comment  - 24\/May\/2016 15:27 PM     - edited                    Custom types are related to this; the exception shown above is not thrown. Instead, the type is assumed to be SerializableType.              n        n    n"},{"commnet_id":"comment-84611","commnet_date":"2016-09-28T16:24:35-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 28\/Sep\/2016 16:24 PM    n        n        Where does requesting this come from Gail Badner?nnJust something you see as nice to have? n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 28\/Sep\/2016 16:24 PM                      Where does requesting this come from  Gail Badner ? nn Just something you see as nice to have?              n        n    n"},{"commnet_id":"comment-84612","commnet_date":"2016-09-28T16:35:53-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 28\/Sep\/2016 16:35 PM    n        n        Specifically.. ok, nothing prevents a parameter from being composite.  But nothing says that should be supported either.nnThere are just a lot of difficulties in implementing this properly.  nnIn regards to named parameters, my intent was to not use named params on the JDBC side in various cases, even though named parameters were used on the Hibernate\/JPA side. - they do not have to correlate.  EVen if we were to support composite param types, I would then expect them to fall into this bucket. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 28\/Sep\/2016 16:35 PM                      Specifically.. ok, nothing  prevents  a parameter from being composite.  But nothing says that should be supported either. nn There are just a lot of difficulties in implementing this properly.   nn In regards to named parameters, my intent was to  not  use named params on the JDBC side in various cases, even though named parameters were used on the Hibernate\/JPA side. - they do not have to correlate.  EVen if we were to support composite param types, I would then expect them to fall into this bucket.              n        n    n"}]}},{"OGM-1066":{"info":{"issue_title":"Create quick PoC to use new SQM parser for OGM query translation","issue_key":"OGM-1066","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"neo4j,                                            query","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1066?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-78358","commnet_date":"2016-05-24T06:58:25-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 24\/May\/2016 06:58 AM    n        n        Andrea Boriero, could you attach your presentation to this issue? n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 24\/May\/2016 06:58 AM                       Andrea Boriero , could you attach your presentation to this issue?              n        n    n"}]}},{"HBX-1260":{"info":{"issue_title":"JDBCMetaDataConfiguration should allow fetching of table names only","issue_key":"HBX-1260","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Rejected","issue_fix_version":"4.3.3.Final ,                                            5.0.0.CR1 ,                                            5.1.0.Alpha3","issue_component":"4.3.3.Final ,                                            5.0.0.CR1 ,                                            5.1.0.Alpha3","issue_labels":"4.3.3.Final","issue_description":"I have a MySQL DB containing 40 tables. When I call org.hibernate.cfg.JDBCMetaDataConfiguration.readFromJDBC() it takes a considerably amount of time (minutes) when all I need are the table names. It seems that this method reads the entire mapping structure for all tables.  This is where I am using it: https:\/\/github.com\/forge\/core\/blob\/master\/database-tools\/impl\/src\/main\/java\/org\/jboss\/forge\/addon\/database\/tools\/generate\/DatabaseTableSelectionStep.java#L102.   The HibernateToolsHelper class calls JDBCMetaDataConfiguration.readFromJDBC() here: https:\/\/github.com\/forge\/core\/blob\/master\/database-tools\/impl\/src\/main\/java\/org\/jboss\/forge\/addon\/database\/tools\/util\/HibernateToolsHelper.java#L28  Can we improve this class to return only the table names and avoid this extra amount of work?","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HBX-1260?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-78351","commnet_date":"2016-05-24T06:02:41-0700","commnet_user":"Koen Aers","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Koen Aersn added a comment  - 24\/May\/2016 06:02 AM    n        n        This issue is a duplicate of JBIDE-22071 (https:\/\/issues.jboss.org\/browse\/JBIDE-22071) n    n    n        n            Show  n            n                        n    n    n    n                nn       Koen Aersn added a comment  - 24\/May\/2016 06:02 AM                      This issue is a duplicate of JBIDE-22071 ( https:\/\/issues.jboss.org\/browse\/JBIDE-22071 )              n        n    n"}]}},{"OGM-1064":{"info":{"issue_title":"Replace separate association management methods by upsertTupleWithAssociations()","issue_key":"OGM-1064","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0.Alpha1","issue_labels":"5.1.0.Alpha1","issue_description":"Background  Currently, there are separate methods for insert\/updating tuples and association(s) managed by the entity represented by a given tuple. This makes it tough for dialects to write out tuple changes and related association changes in one roundtrip to the datastore also if this would make very much sense e.g. for document stores (but also for Redis, where we write JSON documents, too) where an entire object tree is stored within one document.  Proposal  Replace the following methods on GridDialect:   \tinsertOrUpdateTuple() \tinsertOrUpdateAssociation() \tremoveAssociation()    with a combined method which takes all the info for upsert-ing an entity and all the association(s) it embeds (either element collections or associations stored in-entity):   \tupsertTupleWithAssociations()    As input it would receive:   \tAll the info on the embedding tuple \tAll the info on the embedded associations (directly or nested within embeddables)    Implementation proposal  This would be driven by the existing batching engine (see attached image). The batch delegator would always be enabled, also if batching is not implemented by a given dialect. Upon batch execution, it would group all operations by ids of the embedding entities and either invoke upsertTupleWithAssociations one-by-one, or it would execute this as a batch if supported (so we'd need a UpsertTupleWithAssociationsOperation, too).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1064?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-78532","commnet_date":"2016-05-30T10:10:33-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Emmanuel Bernardn added a comment  - 30\/May\/2016 10:10 AM     - edited  n        n        This is more than upsert as it also contains delete. \r\nnMore like state change.  n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Emmanuel Bernardn added a comment  - 30\/May\/2016 10:10 AM     - edited                    This is more than upsert as it also contains delete.  nMore like state change.               n        n    n"},{"commnet_id":"comment-78535","commnet_date":"2016-05-30T23:35:31-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 30\/May\/2016 23:35 PM    n        n        Yes, technically, only the containing tuple is upserted, while contained associations can be inserted, updated or removed. Any naming proposals welcome. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 30\/May\/2016 23:35 PM                      Yes, technically, only the containing tuple is upserted, while contained associations can be inserted, updated or removed. Any naming proposals welcome.              n        n    n"}]}},{"OGM-1063":{"info":{"issue_title":"Offer a command centric API for Hibernate OGM","issue_key":"OGM-1063","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.1","issue_labels":"5.1","issue_description":"Why  Some Gunnar Morling that shall remain unnamed believes that claiming we do \"transaction\" or \"unit of work\" is dangerous and misleading. So we are going to offer an alternative API that is more classic in the Object Mapper universe.\r\n This API is command centric and operations do fail right away instead of being queued before a flush.  Gunnar wants:   \tno expectation of atomic batched operations (no transaction) \tshould we have Persistence Context identity? \tprobably not to avoid the side effect of updated object being flushed by a separate operation \tdo you forbid relations? \tno but only store ids and prevent cascading    How     \/\/ name could be Datastore, CommandCenter, etc if  we give up PersistenceContext   \/\/ could be CommandSession if  we keep the PersistenceContext   CommandSession {      \/\/ API needs to be refined       \/\/ implementation logic after the -&gt;       save(Object  o) -&gt; persist() + flush() + clear()*      saveAll(Iterator&lt;Object &gt; o) -&gt; [persist()]* + flush() + clear()*        \/\/ could be removed and use save() with merge as implementation       update(Object  o) -&gt; merge() (or update()) + flush() + clear()*      updateAll(Iterator&lt;Object &gt; o) -&gt; [merge() (or update())]* + flush() + clear()*        delete( ...) -&gt; ...        find(...) -&gt; get() + clear()*      \/\/ useful as an association reference to avoid loading the object       getReference(...) -&gt; load() + clear()*        \/\/ all query methods       createQuery(...).getResults() -&gt; createQuery(...).getResults()+clear()*        \/\/ only if  we go for  the persistence context approach       clear() -&gt; clear()    }     No cascading  We do not allow cascading setting. It could be used but breaks the one command -&gt; one explicit operation logic that we are after.  With no Persistence Context  clear()* means that we go for the solution without Persistence Context. This makes the implementation simple but it makes associations fail in Hibernate ORM I think as associating an uninitialized object will fail. Remember the object would have been loaded before but clear would have detached it.  Update: apparently tests seem to pass.  We would need to do the following for each operation:  \tcheck the persistence context for the object being saved or updated \treplace all associated objects (direct or via collection, and nested) by their \"managed\" proxy \trun the operation (merge+flush+clear) \tplace back the initial associated object instances back at their places    With Persistence Context  That is the preferred approach as it :  \tis closer to Hibernate's behavior \tsolves the association requiring proxying \tmakes the system faster (via first level cache) \tallows to lazily load collections etc    This requires to trick Hibernate ORM:  \tfire the event and add the object to the persistence context \tdo not add the operation to the flush queue \timmediately apply the flush for that specific object (or set of objects) \tthis assumes associated object had been saved before but that's the general expectation of the command API in general.    batching and *All operations  Depending on the underlying batching API of the dialect, we could have it atomic or with partial success and returning an error.\r\n Probably, we should wire the error report API to return an exception in the Command API use case  Command API vs Session API  No mixing will be allowed between command API and Session API. It's one or the other.  Steps  1. do a simple clear focused prototype and make it work without association (but with embeddable and collection of embeddable)\r\n 2. explore the partial flush approach by looking at short circuiting the flush \"queue\" and do the operation right away assuming associated objects are in the persistence context\r\n 3. if that fails, fall back to the clear approach and need to implement the association replaced by proxy approach","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1063?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2282":{"info":{"issue_title":"Need explicit flush and refresh indexes command","issue_key":"HSEARCH-2282","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.8","issue_labels":"5.8","issue_description":"We suspect we need two styles of refresh:  \ta global one which flushes all on SearchFactory (useful for testing). \tone which setups a \"block on commit\" making the changes from the current TX visible to follow up operations of the same thread.    Proposals:\r\n  SearchFactory#forceVisibility()   FullTextSession#onCommit().blockUntilIndexesUpdated(); \r\n or\r\n  FullTextSession#onCommit().makeChangesVisible();\r\n  FullTextSession#onCommit().awaitUntilChangesAreVisible(); &lt;- favourite so far  Not expected to work on the JMS slaves. Throw an exception?","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2282?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84729","commnet_date":"2016-10-04T02:14:09-0700","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 04\/Oct\/2016 02:14 AM    n        n        TD;DRnI'm afraid that, if we want to do this cleanly, it will require additions or changes to the following SPIs:nnntorg.hibernate.search.backend.spi.BackendQueueProcessor (in particular BackendQueueProcessor.applyWork(List&lt;LuceneWork&gt;, IndexingMonitor))ntorg.hibernate.search.indexes.spi.IndexManager (in particular IndexManager.performOperations(List&lt;LuceneWork&gt;, IndexingMonitor))nnnnThe reason being that implementations of IndexManager don't have access to such thing as session-scoped settings. Which is normal, since sessions are an ORM concept. So we ought to pass those settings as method arguments.nnIf we really need to get this done quickly, we may also take advantage of a thread local storing such session-scoped settings (in a Service for instance), but this solution seems less elegant to me (of course we can pass any argument through a thread local instead of the stack, but then the method signatures become less and less informative).nnSo my questions are:nnntam I completely wrong in my assessment?ntdo we need this now or can it be pushed to 6.0?ntif we must do it now, is the threadlocal solution acceptable?nnnnnFull explanationnWe have two concepts at play here:nnntWhether operations are transmitted to the backend synchronously. If they are, and if a power failure (which does not affect the backend) happens just after returning from the request processing, we know the operations will be executed anyway.ntWhether operations are executed synchronously. If they are, and we query the index just after returning from the request processing, we know the results will be up-to-date (the effects of our operations will be visible).nnnnWe implement, here and there, three modes of execution:nnntAsynchronous, i.e. transmission-asynchronous and execution-asynchronousntTransmission-synchronous only, i.e. transmission-synchronous and execution-asynchronousntSynchronous, i.e. transmission-synchronous and execution-synchronousnnnnWe want to offer the possibility for Search-orm users to switch the post-commit behavior between transmission-synchronous only and synchronous with a session-scoped setting.nnWhen a transaction ends, the message is propagated this way:nnntorg.hibernate.search.backend.impl.PostTransactionWorkQueueSynchronization.afterCompletion(int) is calledntwhich calls org.hibernate.search.backend.impl.BatchedQueueingProcessor.performWorks(WorkQueue)ntwhich calls {{org.hibernate.search.backend.impl.WorkQueuePerIndexSplitter.commitOperations(IndexingMonitor)}ntwhich calls org.hibernate.search.backend.spi.BackendQueueProcessor.applyWork(List&lt;LuceneWork&gt;, IndexingMonitor)nnnnThat last method is where the JMS\/local distinction is made. Letting the JMS processor aside, when works are triggered locally, the processor calls org.hibernate.search.indexes.spi.IndexManager.performOperations(List&lt;LuceneWork&gt;, IndexingMonitor), whose implementation may be synchronous, transmission-synchronous only or asynchronous depending on global configuration and implementation choices.nnUnless I'm mistaken, those IndexManager implementations do not have access to such thing as session-scoped settings, and obviously the method signature does not allow passing additional settings.nnFor the record, here's what I noted when inspecting various IndexManager implementations:nnntDirectoryBasedIndexManager is synchronous or asynchronous depending on global (application-scoped) settingsntNRTIndexManager seems to be synchronous, given that its documentation states \"IndexReaders are able to inspect the unflushed changes still pending in the IndexWriter buffers\"ntElasticsearchIndexManager is synchronousnn n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 04\/Oct\/2016 02:14 AM                        TD;DR n I'm afraid that, if we want to do this cleanly, it will require additions or changes to the following SPIs: nn nt  org.hibernate.search.backend.spi.BackendQueueProcessor  (in particular  BackendQueueProcessor.applyWork(List&lt;LuceneWork&gt;, IndexingMonitor) ) nt  org.hibernate.search.indexes.spi.IndexManager  (in particular  IndexManager.performOperations(List&lt;LuceneWork&gt;, IndexingMonitor) ) n nnn The reason being that implementations of  IndexManager  don't have access to such thing as session-scoped settings. Which is normal, since sessions are an ORM concept. So we ought to pass those settings as method arguments. nn If we really need to get this done quickly, we may also take advantage of a thread local storing such session-scoped settings (in a  Service  for instance), but this solution seems less elegant to me (of course we can pass any argument through a thread local instead of the stack, but then the method signatures become less and less informative). nn So my questions are: nn nt am I completely wrong in my assessment? nt do we need this now or can it be pushed to 6.0? nt if we must do it now, is the threadlocal solution acceptable? n nnnn   Full explanation n We have two concepts at play here: nn nt Whether operations are transmitted to the backend synchronously. If they are, and if a power failure (which does not affect the backend) happens just after returning from the request processing, we know the operations will be executed anyway. nt Whether operations are executed synchronously. If they are, and we query the index just after returning from the request processing, we know the results will be up-to-date (the effects of our operations will be visible). n nnn We implement, here and there, three modes of execution: nn nt Asynchronous, i.e. transmission-asynchronous and execution-asynchronous nt Transmission-synchronous only, i.e. transmission-synchronous and execution-asynchronous nt Synchronous, i.e. transmission-synchronous and execution-synchronous n nnn We want to offer the possibility for Search-orm users to switch the post-commit behavior between transmission-synchronous only and synchronous with a session-scoped setting. nn When a transaction ends, the message is propagated this way: nn nt  org.hibernate.search.backend.impl.PostTransactionWorkQueueSynchronization.afterCompletion(int)  is called nt which calls  org.hibernate.search.backend.impl.BatchedQueueingProcessor.performWorks(WorkQueue)  nt which calls {{org.hibernate.search.backend.impl.WorkQueuePerIndexSplitter.commitOperations(IndexingMonitor)} nt which calls  org.hibernate.search.backend.spi.BackendQueueProcessor.applyWork(List&lt;LuceneWork&gt;, IndexingMonitor)  n nnn That last method is where the JMS\/local distinction is made. Letting the JMS processor aside, when works are triggered locally, the processor calls  org.hibernate.search.indexes.spi.IndexManager.performOperations(List&lt;LuceneWork&gt;, IndexingMonitor) , whose implementation may be synchronous, transmission-synchronous only or asynchronous depending on global configuration and implementation choices. nn Unless I'm mistaken, those  IndexManager  implementations do not have access to such thing as session-scoped settings, and obviously the method signature does not allow passing additional settings. nn For the record, here's what I noted when inspecting various  IndexManager  implementations: nn nt  DirectoryBasedIndexManager  is synchronous or asynchronous depending on global (application-scoped) settings nt  NRTIndexManager  seems to be synchronous, given that its documentation states \"IndexReaders are able to inspect the unflushed changes still pending in the IndexWriter buffers\" nt  ElasticsearchIndexManager  is synchronous n n             n        n    n"},{"commnet_id":"comment-84730","commnet_date":"2016-10-04T02:17:49-0700","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 04\/Oct\/2016 02:17 AM    n        n        Sanne Grinovero I hit the \"Add\" button by mistake...nnI meant to say: maybe you have an answer to my questions (see the TL;DR section in the previous comment), since you created the ticket?nnI personally don't see this ticket as urgent, since the default behavior when committing and using the Elasticsearch backend is already to make changes visible to follow up operations of the same thread. We would only add the ability not to make these changes available, which may be a performance improvement. n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 04\/Oct\/2016 02:17 AM                       Sanne Grinovero  I hit the \"Add\" button by mistake... nn I meant to say: maybe you have an answer to my questions (see the TL;DR section in the previous comment), since you created the ticket? nn I personally don't see this ticket as urgent, since the default behavior when committing and using the Elasticsearch backend is already to make changes visible to follow up operations of the same thread. We would only add the ability  not  to make these changes available, which may be a performance improvement.              n        n    n"},{"commnet_id":"comment-84735","commnet_date":"2016-10-04T05:37:50-0700","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 04\/Oct\/2016 05:37 AM    n        n        I just realized that another way of implementing this would be to add a singleton work representing refreshes, much as was done with org.hibernate.search.backend.FlushLuceneWork.INSTANCE.\r\nnIt would definitely work with Elasticsearch; I'll have a look to other index managers. n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 04\/Oct\/2016 05:37 AM                      I just realized that another way of implementing this would be to add a singleton work representing refreshes, much as was done with  org.hibernate.search.backend.FlushLuceneWork.INSTANCE . nIt would definitely work with Elasticsearch; I'll have a look to other index managers.              n        n    n"},{"commnet_id":"comment-84740","commnet_date":"2016-10-04T07:04:41-0700","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 04\/Oct\/2016 07:04 AM    n        n        Well, actually LuceneWork and IndexWorkVisitor are API, so no I can't do that without breaking those contracts. And in any case, it seems adding new types of work is an implicit SPI break, since service providers are supposed to consume those, and thus to understand them.nnSo the question is still here: we'll have to break something, so do we really want to do this now instead of waiting 6.0? n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 04\/Oct\/2016 07:04 AM                      Well, actually LuceneWork and IndexWorkVisitor are API, so no I can't do that without breaking those contracts. And in any case, it seems adding new types of work is an implicit SPI break, since service providers are supposed to consume those, and thus to understand them. nn So the question is still here: we'll have to break something, so do we really want to do this now instead of waiting 6.0?              n        n    n"}]}},{"HHH-10764":{"info":{"issue_title":"Reuse of identifiers should be enabled by default for ValidityAuditStrategy.","issue_key":"HHH-10764","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.2.0","issue_component":"5.2.0","issue_labels":"5.2.0","issue_description":"In 5.x, the option org.hibernate.envers.allow_identifier_reuse is disabled by default.  Is there a reason why this option is not enabled by default for this strategy?","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10764?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10763":{"info":{"issue_title":"Change default auditing strategy to ValidityAuditStrategy","issue_key":"HHH-10763","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"hibernate-envers","issue_description":"Change the default audit strategy from using DefaultAuditStrategy to using ValidityAuditStrategy.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10763?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10762":{"info":{"issue_title":"Implement left-joins for relation traversion in audit queries","issue_key":"HHH-10762","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.0","issue_labels":"5.2.0","issue_description":"With                                                          HHH-3555                                                              Closed                 the Envers query system has been extended with the ability to traverse associations for *-to-one assocations. However, this is limited to inner-joins. With                                                          HHH-16                                                              Closed                , HQL has been extended to support joins on unrelated entities, which enables support for left joins in audit queries.  The already existing Envers query API should be improved, such that left-joins are supported when traversing associations, too. The inner join implementation should also leverage the new unrelated entity join mechanism.  Furthermore, the Envers query API should be extended such that criterias on properties from two related entities can be expressed together in a conjunction, disjunction and in a direct property relation expression.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10762?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2281":{"info":{"issue_title":"Omit the &quot;boost&quot; attribute on queries when not required","issue_key":"HSEARCH-2281","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta2","issue_labels":"5.6.0.Beta2","issue_description":"Looks like we explicitly state \"boost\":1.0 in some queries, which can probably be omitted when we know that this matches the default value.  Older version of Elasticsearch do not accept this attribute, so fixing it would improve compatibility. Particulartly noticeable, that the Elasticsearch version running on AWS as a service would not be compatible.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2281?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2273":{"info":{"issue_title":"Support Solr as a backend","issue_key":"HSEARCH-2273","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"In the same way we support Elasticsearch as a backend, it would be nice to support Solr.  Solr is different from Elasticsearch: it introduces the notion of cores, which are separate indexes with separate configuration files, schemas and so on.  In a core, you can have one and only one schema which defines the way the data are stored. Note that the schema can be quite flexible as you have the notion of dynamic fields so you might decide that all *_int fields are mapped to an int and you can then add any field named with this scheme.  Cores are manageable through an API and you can also manage the underlying schema with the API.  AFAIK, it is possible to build join request across cores but there might be limitations: we would have to study this carefully if we want to support joins one day.  Solr 6 introduces a JSON request API which allows to build requests with JSON: https:\/\/cwiki.apache.org\/confluence\/display\/solr\/JSON+Request+API . It's really far more readable than using the \"everything in the URL\" API.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2273?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-85909","commnet_date":"2016-11-10T09:53:44-0800","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 10\/Nov\/2016 09:53 AM    n        n        Guillaume Smet I think this may be big enough to require an epic... WDYT? n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 10\/Nov\/2016 09:53 AM                       Guillaume Smet  I think this may be big enough to require an epic... WDYT?              n        n    n"}]}},{"HHH-10752":{"info":{"issue_title":"ProcedureCallImpl registers every paremeter twice","issue_key":"HHH-10752","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.2.0","issue_component":"5.2.0","issue_labels":"5.2.0","issue_description":"Now that stored procedure tests have been added, I noticed that on 5.2.0 neither one of the REFCURSOR tests works anymore.  To replicate it, first set up tests to run on PostgreSQL:   &gt; gradle clean testClasses -Pdb=pgsql     Then run the org.hibernate.test.procedure.PostgreSQLStoredProcedureTest#testStoredProcedureOutParameter test.  You'll get the following error:   javax.persistence.PersistenceException: org.hibernate.exception.SQLGrammarException: Error calling CallableStatement.getMoreResults    \tat org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:147)  \tat org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:155)  \tat org.hibernate.procedure.internal.ProcedureCallImpl.execute(ProcedureCallImpl.java:643)  \tat org.hibernate.test.procedure.PostgreSQLStoredProcedureTest.testStoredProcedureOutParameter(PostgreSQLStoredProcedureTest.java:184)  \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     Because the input parameters are doubled:     13:28:46,836 DEBUG SQL:92 -       {call sp_count_phones(?,?,?,?)}  13:28:46,838 TRACE BasicBinder:65 - binding parameter [1] as [BIGINT] - [1]  13:28:46,838 TRACE BasicBinder:65 - binding parameter [2] as [BIGINT] - [1]  13:28:46,844  WARN SqlExceptionHelper:129 - SQL Error: 0, SQLState: 42883     Even if there were only two registrations:     StoredProcedureQuery query = entityManager.createStoredProcedureQuery( \"sp_count_phones\"  );  query.registerStoredProcedureParameter( \"personId\" , Long .class, ParameterMode.IN );  query.registerStoredProcedureParameter( \"phoneCount\" , Long .class, ParameterMode.OUT );    query.setParameter( \"personId\" , 1L );    query.execute();  Long  phoneCount = (Long ) query.getOutputParameterValue( \"phoneCount\"  );     Most likely, the issue comes from ProcedureCallImpl where in the registerStoredProcedureParameter method, the registerParameter method is called twice:     registerParameter( (ParameterRegistrationImplementor) registerParameter( parameterName, type, mode ) );","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10752?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10750":{"info":{"issue_title":"Add stored procedure tests for Oracle, SQL Server, PostgreSQL, and MySQL","issue_key":"HHH-10750","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.0","issue_labels":"5.2.0","issue_description":"At least for Oracle, SQL Server, PostgreSQL, and MySQL, we should have tests that check how stored procedure work. Currently, with H2, it's very difficult to assert that a change will not break the stored procedure functionality.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10750?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-78157","commnet_date":"2016-05-18T03:33:39-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 18\/May\/2016 03:33 AM    n        n        Pushed on master branch. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 18\/May\/2016 03:33 AM                      Pushed on master branch.              n        n    n"}]}},{"HHH-10749":{"info":{"issue_title":"Create Hibernate Configuration file Using MYSQL NDB CLuster","issue_key":"HHH-10749","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"4.3.11","issue_component":"4.3.11","issue_labels":"4.3.11","issue_description":"I am able to access Mysql Database using previous following configuration.  And i am also able to access  MYSQL NDB CLuster database using simple JDBC connectivity.  Problem is when i am using  MYSQL NDB CLuster database credentials that time i am not able to access Database using Hibernate.  Please suggest any other configuration for Connect  MYSQL NDB CLuster database using Hibernate configuration file (hibernate.cfg.xml).      &lt;!DOCTYPE hibernate-configuration PUBLIC  \t\t\"-\/\/Hibernate\/Hibernate Configuration DTD 3.0\/\/EN\"    \t\t\"http:\/\/hibernate.sourceforge.net\/hibernate-configuration-3.0.dtd\" &gt;   &lt;hibernate-configuration&gt;      &lt;session-factory&gt;                        &lt;property name=\"hibernate.bytecode.use_reflection_optimizer\" &gt;false &lt;\/property&gt;          &lt;property name=\"hibernate.connection.driver_class\" &gt;com.mysql.jdbc.Driver&lt;\/property&gt;          &lt;property name=\"hibernate.connection.password\" &gt;HAZE@rt!f!c!aldb&lt;\/property&gt;          &lt;property name=\"hibernate.connection.pool_size\" &gt;10&lt;\/property&gt;          &lt;property name=\"hibernate.connection.url\" &gt;jdbc:mysql:\/\/192.168.1.187:3306\/haze_videocon_v0.8&lt;\/property&gt;           &lt;property name=\"hibernate.connection.username\" &gt;haze&lt;\/property&gt;          &lt;property name=\"hibernate.current_session_context_class\" &gt;thread&lt;\/property&gt;          &lt;property name=\"hibernate.dialect\" &gt;org.hibernate.dialect.MySQLDialect&lt;\/property&gt;          &lt;property name=\"hibernate.search.autoregister_listeners\" &gt;false &lt;\/property&gt;          &lt;property name=\"hibernate.show_sql\" &gt;true &lt;\/property&gt;          &lt;property name=\"hibernate.validator.apply_to_ddl\" &gt;false &lt;\/property&gt;      &lt;\/session-factory&gt;  &lt;\/hibernate-configuration&gt;        I think the soluation is new dialect is required for MySQL NDB clustered table types.\r\n Otherwise any changes in configuration file","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10749?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1053":{"info":{"issue_title":"Minor various documentation updates for 5.0 release","issue_key":"OGM-1053","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.Final","issue_labels":"5.0.0.Final","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1053?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1052":{"info":{"issue_title":"Update the documentation to state that the store specific properties are in classes, not interfaces","issue_key":"OGM-1052","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.1","issue_labels":"5.1","issue_description":"For example MongoDBProperties could be an interface, like its \"parent interface\" which contains the properties shared by all providers.  The documentation consistently refers to all these classes as interfaces: so if we were to decide that these should really be classes (as they are) instead of interfaces, then we should correct the language in the reference documentation.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1052?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-77972","commnet_date":"2016-05-13T05:08:11-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 13\/May\/2016 05:08 AM    n        n        The store specific properties are declared in final classes in purpose, so people are not tempted to implement them.nn+1 for updating the doc lingo where needed. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 13\/May\/2016 05:08 AM                      The store specific properties are declared in final classes in purpose, so people are not tempted to implement them. nn +1 for updating the doc lingo where needed.              n        n    n"},{"commnet_id":"comment-82242","commnet_date":"2016-08-09T02:15:45-0700","commnet_user":"Guillaume Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Guillaume Smetn added a comment  - 09\/Aug\/2016 02:15 AM    n        n        OK, so the doc states the following:nnCommon properties shared between stores are declared on `OgmProperties`\r\nn(a super interface of `YourBackendHereProperties`).nnFor maximum portability between stores, use the most generic interface possible.nnI think it's OK as is. You either use the specific final class or a more generic super interface. Sanne Grinovero Gunnar Morling Thoughts? n    n    n        n            Show  n            n                        n    n    n    n                nn       Guillaume Smetn added a comment  - 09\/Aug\/2016 02:15 AM                      OK, so the doc states the following: n n Common properties shared between stores are declared on `OgmProperties` n(a super interface of `YourBackendHereProperties`). nn For maximum portability between stores, use the most generic interface possible.  nn I think it's OK as is. You either use the specific final class or a more generic super interface.  Sanne Grinovero   Gunnar Morling  Thoughts?              n        n    n"}]}},{"HSEARCH-2270":{"info":{"issue_title":"Upgrade to Apache Lucene 5.5.1.Final","issue_key":"HSEARCH-2270","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta1","issue_labels":"5.6.0.Beta1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2270?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1049":{"info":{"issue_title":"Support lazy properties \/ @LazyGroup","issue_key":"OGM-1049","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1049?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-77930","commnet_date":"2016-05-12T01:47:06-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 12\/May\/2016 01:47 AM    n        n        It's not high on my personal wish list. Creating it though, so we have it in the back log of things to catch up with. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 12\/May\/2016 01:47 AM                      It's not high on my personal wish list. Creating it though, so we have it in the back log of things to catch up with.              n        n    n"}]}},{"HHH-10739":{"info":{"issue_title":"Custom Type - Class to constant","issue_key":"HHH-10739","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"One can use the provided ClassType to map a java.lang.Class to a VARCHAR.  This approach has a lot of drawbacks.   \tThe application specific full classname is saved in the database. When different application wants to access same database problem arises if different code base is used. \tViolates separation of concern aswell it is prone to refactorization. When packages or class names are refactored it requires database batch updates which is just unnecessary maintenance work, especially in production. \tVARCHAR is used which is harder to index, especially in unique database constraints     My first idea was a converter for mapped entities that converts their class to their real table names. So instead of saving package.entities.MyFoo in database it is converted to my_foo instead. The metadata is available in ClassMetaData of configuration.   For my use case this is sufficient but it is restricted to mapped classes. So why not use a configuration element to define those mappings.     &lt;classMappingType&gt;   \t&lt;class=\"package.entities.MyFoo\"  value=\"my_foo\" \/&gt;   \t&lt;class=\"package.entities.MyBar\"  value=\"my_bar\" \/&gt;   &lt;\/classMappingType&gt;      Add targeted SQL type:     &lt;classMappingType&gt;   \t&lt;class=\"package.entities.MyFoo\"  value=\"1\"  type=\"long\" \/&gt;   \t&lt;class=\"package.entities.MyBar\"  value=\"2\"  type=\"long\" \/&gt;   &lt;\/classMappingType&gt;      This approach resolves all mentioned disadvantages of using ClassType.      It could even be more generic by allowing the definition of types in xml that can be referenced as a property type:      &lt;!-- define custom types --&gt;    &lt;mappingType name=\"ClassMappingType\" &gt;   \t&lt;key=\"package.entities.MyFoo\"  value=\"1\"  type=\"long\" \/&gt;   \t&lt;key=\"package.entities.MyBar\"  value=\"2\"  type=\"long\" \/&gt;   &lt;\/mappingType&gt;     &lt;!-- Entity mapping - use defined type --&gt;    &lt;property name=\"refType\"  type=\"ClassMappingType\" \/&gt;","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10739?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10738":{"info":{"issue_title":"Improved usability of MultiTenantConnectionProvider in SE environments","issue_key":"HHH-10738","issue_type":"New Feature","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Won&#39;t Fix","issue_fix_version":"5.1.0","issue_component":"5.1.0","issue_labels":"5.1.0","issue_description":"Take a look at the doc here: http:\/\/docs.jboss.org\/hibernate\/orm\/5.1\/userguide\/html_single\/Hibernate_User_Guide.html#_strategies_for_code_multitenantconnectionprovider_code_implementors  The doc mentions a ConnectionProviderUtil which simplifies the creation of a datasource for you when implementing this feature.  A common use case is that I'm using a single pool, but pointing to different schemas\/databases.  In that setup, it would be great to get access to the underlying pool and just use   USE `schemaName`   to switch which database is used.  The problem is that this class doesn't actually exist.  There is no way to refer to the underlying datasource to get a connection.  On an app server, I can lookup the datasource and get the JNDI entry.  When running in SE via a microservice, I'd need to actually create a datasource.  I'd prefer to leverage the JPA feature of specifying JDBC params in the persistence.xml, but I can't use it when doing this.  So this ticket would be   \tUpdate the docs to clarify how to implement this without using made up class names. \tCreate a lookup mechanism to get the datasource.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10738?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84738","commnet_date":"2016-10-04T07:02:22-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 04\/Oct\/2016 07:02 AM    n        n        Is this issue still relevant? I checked the multitenancy chapter in 5.2 and I could not find any ConnectionProviderUtil reference. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 04\/Oct\/2016 07:02 AM                      Is this issue still relevant? I checked the  multitenancy chapter in 5.2  and I could not find any  ConnectionProviderUtil  reference.              n        n    n"},{"commnet_id":"comment-84741","commnet_date":"2016-10-04T07:07:46-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 04\/Oct\/2016 07:07 AM    n        n        The USE syntax is not SQL-standard.  I'd really rather not get into Dialect specific handling for how multi-tenancy is applied.nnWhy can't you just provide a org.hibernate.engine.jdbc.connections.spi.MultiTenantConnectionProvider implementation that does what you want? n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 04\/Oct\/2016 07:07 AM                      The  USE  syntax is not SQL-standard.  I'd really rather not get into Dialect specific handling for how multi-tenancy is applied. nn Why can't you just provide a  org.hibernate.engine.jdbc.connections.spi.MultiTenantConnectionProvider  implementation that does what you want?              n        n    n"},{"commnet_id":"comment-84908","commnet_date":"2016-10-12T06:48:55-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 12\/Oct\/2016 06:48 AM    n        n        John AmentnnYou cannot reduce the whole multitenancy setting to a list of configuration properties. That's why we provide an SPI for this task. Also, you don't have to create a `DataSource` at all. You can use any `DataSource` you want. Just make sure that you provide it to the `MultiTenantConnectionProvider`.nnI'm going to close this issue because the documentation has changed, and the change request is not feasible in this case. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 12\/Oct\/2016 06:48 AM                       John Ament  nn You cannot reduce the whole multitenancy setting to a list of configuration properties. That's why we provide an SPI for this task. Also, you don't have to create a `DataSource` at all. You can use any `DataSource` you want. Just make sure that you provide it to the `MultiTenantConnectionProvider`. nn I'm going to close this issue because the documentation has changed, and the change request is not feasible in this case.              n        n    n"}]}},{"HHH-10737":{"info":{"issue_title":"Unrecognized select expression causes a NullPointerException","issue_key":"HHH-10737","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"5.1.0","issue_component":"5.1.0","issue_labels":"5.1.0","issue_description":"When a user does not explicitly register a function on the Dialect selected a NullPointerException is thrown without much reason as to why.  I would like to suggest handling this problem more gracefully to notify the user of the mistake.  Consider the following:  Animal.java   @Entity  @Table( name = \"ANIMAL\"  )  public  class Animal {  \tprivate  Long  id;  \tprivate  Animal mother;  \tprivate  Animal father;  \tprivate  String  name;  \tprivate  Date born;  }     JPA Criteria Query   CriteriaBuilder cb =  em.getCriteriaBuilder();  CriteriaQuery&lt;HumanPojo&gt; criteria = cb.createQuery( HumanPojo.class );  Root&lt;Human&gt; root = criteria.from( Human.class );    criteria.select(   \t\t\tcb.construct(   \t\t\t\t\tHumanPojo.class,   \t\t\t\t\troot.get(Human_.id),   \t\t\t\t\troot.get(Human_.name),   \t\t\t\t\tcb.function(  \t\t\t\t\t\t\t\"convert\" ,   \t\t\t\t\t\t\tString .class,   \t\t\t\t\t\t\troot.get(Human_.born),   \t\t\t\t\t\t\tcb.literal(110))  \t\t\t)   \t\t);    em.createQuery( criteria ).getResultList();      In this scenario I am trying to utilize the CONVERT() function provided by SQL Server 2005+.  When the query is executed I am presented with the following stack trace.  Stack Trace   java.lang.NullPointerException  \tat org.hibernate.internal.util.ReflectHelper.getConstructor(ReflectHelper.java:309)  \tat org.hibernate.hql.internal.ast.tree.ConstructorNode.resolveConstructor(ConstructorNode.java:174)  \tat org.hibernate.hql.internal.ast.tree.ConstructorNode.prepare(ConstructorNode.java:144)  \tat org.hibernate.hql.internal.ast.HqlSqlWalker.processConstructor(HqlSqlWalker.java:1163)  \tat org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.selectExpr(HqlSqlBaseWalker.java:2354)  \tat org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.selectExprList(HqlSqlBaseWalker.java:2220)  \tat org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.selectClause(HqlSqlBaseWalker.java:1495)  \tat org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.query(HqlSqlBaseWalker.java:583)  \tat org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.selectStatement(HqlSqlBaseWalker.java:311)  \tat org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.statement(HqlSqlBaseWalker.java:259)  \tat org.hibernate.hql.internal.ast.QueryTranslatorImpl.analyze(QueryTranslatorImpl.java:262)  \tat org.hibernate.hql.internal.ast.QueryTranslatorImpl.doCompile(QueryTranslatorImpl.java:190)  \tat org.hibernate.hql.internal.ast.QueryTranslatorImpl.compile(QueryTranslatorImpl.java:142)  \tat org.hibernate.engine.query.spi.HQLQueryPlan.&lt;init&gt;(HQLQueryPlan.java:115)  \tat org.hibernate.engine.query.spi.HQLQueryPlan.&lt;init&gt;(HQLQueryPlan.java:76)  \tat org.hibernate.engine.query.spi.QueryPlanCache.getHQLQueryPlan(QueryPlanCache.java:150)  \tat org.hibernate.internal.AbstractSessionImpl.getHQLQueryPlan(AbstractSessionImpl.java:302)  \tat org.hibernate.internal.AbstractSessionImpl.createQuery(AbstractSessionImpl.java:240)  \tat org.hibernate.internal.SessionImpl.createQuery(SessionImpl.java:1907)  \tat org.hibernate.jpa.spi.AbstractEntityManagerImpl.createQuery(AbstractEntityManagerImpl.java:531)  \tat org.hibernate.jpa.criteria.CriteriaQueryImpl$1.buildCompiledQuery(CriteriaQueryImpl.java:319)  \tat org.hibernate.jpa.criteria.compile.CriteriaCompiler.compile(CriteriaCompiler.java:130)  \tat org.hibernate.jpa.spi.AbstractEntityManagerImpl.createQuery(AbstractEntityManagerImpl.java:699)  \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)  \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)  \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)  \tat java.lang.reflect.Method.invoke(Method.java:497)  \tat org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:344)  \tat com.sun.proxy.$Proxy73.createQuery(Unknown Source)  \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)  \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)  \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)  \tat java.lang.reflect.Method.invoke(Method.java:497)  \tat org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:294)  \tat com.sun.proxy.$Proxy73.createQuery(Unknown Source)     The NPE is caused by an inability of the AST node produced for the select expression to determine a data type.  See SelectExpressionList.java  Ultimately a null value is placed into the types array of the resolved constructor argument types and causes the NPE inside the ReflectHelper noted in the stack trace above.  See ConstructorNode.java  A couple of proposed solutions  \tAdd a warning\/error when a user attempts to invoke CriteriaBuilder.function() if the function is not defined. \tThrow an exception\/warning when a null data type for a constructor argument occurs within ConstructorNode.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10737?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2269":{"info":{"issue_title":"Provide support for new Java 8 time\/date types (JSR 310) with Elasticsearch backend","issue_key":"HSEARCH-2269","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta3","issue_labels":"5.6.0.Beta3","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2269?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2268":{"info":{"issue_title":"Make value of ProjectionConstants#SPATIAL_DISTANCE consistent with other constants","issue_key":"HSEARCH-2268","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6","issue_labels":"6","issue_description":"This one begins only with a single \"\", whereas all others begin with \"_\".","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2268?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2267":{"info":{"issue_title":"Marker annotation for fields whose dirtiness is irrelevant to HSearch","issue_key":"HSEARCH-2267","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Duplicate","issue_fix_version":"5.5.3.Final","issue_component":"5.5.3.Final","issue_labels":"5.5.3.Final","issue_description":"Following                                                          HSEARCH-1096                                                              Closed                , entities with @Transient indexed fields are always reindexed upon entity update, regardless of the dirty properties. This is fine, because Hibernate Search cannot know which properties the indexed fields depend on, but this may lead to performance nightmares, where simple changes trigger a full, resource-intensive reindexing of an entity and all its related @ContainedIn entities.  In                                                          HSEARCH-1093                                                              Open                , it was proposed to add a way for users to indicate which properties a given @Transient indexed field depend on. This has not been developed yet, probably because it would be quite complex.\r\n Another solution to this issue would be to provide a way for users to indicate which properties are never used in @Transient indexed fields. This way, if a user performs very frequently a tiny update operation on his entities that should not impact the indexes, the user only has to annotate the properties involved in this update operation. Then, when Hibernate performs the update, Hibernate Search will detect that the only changed fields are irrelevant to the indexes, and thus will skip the indexing.\r\n About the name of this annotation, there are a few possibilities: @DirtyIgnore, @IndexIgnore, @IndexTransient, ... My personnal favorite is @IndexTransient, because I think it more closely translates the characteristics that the annotated property should have.  I already implemented this in our own project, by heavily overriding some key classes of Hibernate Search (most notably the FullTextIndexEventListener), but I think moving this implementation directly to Hibernate Search would prove very simple (20 to 30 lines of code). So, the question is: if I did provide a pull request, would this feature be accepted?","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2267?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-78134","commnet_date":"2016-05-17T02:54:13-0700","commnet_user":"Guillaume Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Guillaume Smetn added a comment  - 17\/May\/2016 02:54 AM    n        n        As for {{ClassBridge}}s, we need to integrate it in the FieldBridge 2.0 work as it's going to need something like MetadataProvidingFieldBridge to declare the indexed fields and the potential dependencies for dirty checking optimization. n    n    n        n            Show  n            n                        n    n    n    n                nn       Guillaume Smetn added a comment  - 17\/May\/2016 02:54 AM                      As for {{ClassBridge}}s, we need to integrate it in the FieldBridge 2.0 work as it's going to need something like MetadataProvidingFieldBridge to declare the indexed fields and the potential dependencies for dirty checking optimization.              n        n    n"},{"commnet_id":"comment-78135","commnet_date":"2016-05-17T03:13:14-0700","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 17\/May\/2016 03:13 AM    n        n        I'm wondering if, instead of creating a new annotation, we could include it in the @Field annotation. Something like a dependsOn attribute taking a list of properties? If not empty, it would disable the automatic shutting down of the optimizations on @Transient fields and consider these properties.nThis might not be a good idea, since we're talking about the method itself. If there are multiple @Field, you don't want to repeat the dependsOn attribute for each field...\r\nnOn a side-note, the shutting down of the optimizations is (and must be) global to the entity, i.e. if even one @Transient method does not document its dependencies, then when any property is dirty, it might affect the output of this method, so reindexing is needed. n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 17\/May\/2016 03:13 AM                       I'm wondering if, instead of creating a new annotation, we could include it in the @Field annotation. Something like a dependsOn attribute taking a list of properties? If not empty, it would disable the automatic shutting down of the optimizations on @Transient fields and consider these properties.  n This might not be a good idea, since we're talking about the method itself. If there are multiple  @Field , you don't want to repeat the  dependsOn  attribute for each field... nOn a side-note, the shutting down of the optimizations is (and must be) global to the entity, i.e. if even  one   @Transient  method does not document its dependencies, then when any property is dirty, it might affect the output of this method, so reindexing is needed.              n        n    n"},{"commnet_id":"comment-78136","commnet_date":"2016-05-17T03:14:56-0700","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 17\/May\/2016 03:14 AM    n        n         On a side-note, the shutting down of the optimizations is (and must be) global to the entity, i.e. if even one @Transient method does not document its dependencies, then when any property is dirty, it might affect the output of this method, so reindexing is needed.nUnless, of course, we can add a \"substractive\" annotation on this property...  n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 17\/May\/2016 03:14 AM                        On a side-note, the shutting down of the optimizations is (and must be) global to the entity, i.e. if even one @Transient method does not document its dependencies, then when any property is dirty, it might affect the output of this method, so reindexing is needed.  n Unless, of course, we can add a \"substractive\" annotation on this property...                n        n    n"},{"commnet_id":"comment-80430","commnet_date":"2016-07-05T04:46:57-0700","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 05\/Jul\/2016 04:46 AM    n        n        Hello,nnI see you're planning on addressing this issue on 5.7. Did you choose to do it with an \"additive\" annotation (as proposed in n    n                n        n            n            HSEARCH-2267n        n                                                    Closed n             n) or a \"substractive\" annotation (as proposed in this ticket)? If you're going substractive, I think I could submit a pull request fairly quickly. n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 05\/Jul\/2016 04:46 AM                      Hello, nn I see you're planning on addressing this issue on 5.7. Did you choose to do it with an \"additive\" annotation (as proposed in n     n                 n         n             n            HSEARCH-2267n         n                                                     Closed n             n) or a \"substractive\" annotation (as proposed in this ticket)? If you're going substractive, I think I could submit a pull request fairly quickly.              n        n    n"},{"commnet_id":"comment-82730","commnet_date":"2016-08-17T02:19:20-0700","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 17\/Aug\/2016 02:19 AM    n        n        This won't be solved as proposed in the ticket description (with an annotation on fields whose dirtiness is to be ignored).\r\nnThis will be solved as proposed in n    n                n        n            n            HSEARCH-1093n        n                                                    Open n             n. Marking this ticket as duplicate. n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 17\/Aug\/2016 02:19 AM                      This won't be solved as proposed in the ticket description (with an annotation on fields whose dirtiness is to be ignored). nThis will be solved as proposed in n     n                 n         n             n            HSEARCH-1093n         n                                                     Open n             n. Marking this ticket as duplicate.              n        n    n"}]}},{"OGM-1046":{"info":{"issue_title":"Tests in the package &#39;org.hibernate.ogm.backendtck.batchfetching&#39; aren&#39;t committing the transaction","issue_key":"OGM-1046","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.Final","issue_labels":"5.0.0.Final","issue_description":"This slow down the build with transactional datastores like Neo4j","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1046?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1045":{"info":{"issue_title":"Upgrade Neo4j to version 3.x","issue_key":"OGM-1045","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Duplicate","issue_fix_version":"None","issue_component":"5.x","issue_labels":"5.x","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1045?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-77833","commnet_date":"2016-05-10T05:24:23-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 10\/May\/2016 05:24 AM    n        n        Davide D'Alto, for remote Neo4j, can we support 2.x and 3.x? Or would it be one or the other? n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 10\/May\/2016 05:24 AM                       Davide D'Alto , for remote Neo4j, can we support 2.x  and  3.x? Or would it be one or the other?              n        n    n"}]}},{"HSEARCH-2266":{"info":{"issue_title":"Support access to an Elasticsearch cluster","issue_key":"HSEARCH-2266","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Duplicate","issue_fix_version":"None","issue_component":"None","issue_labels":"elasticsearch","issue_description":"One option to access a cluster is to access a proxy that will then be able to dispatch to one random node.\r\n The alternative is for the client to have a list of defined hostname to access (instead of a single one).\r\n A third is some DNS round robin.  We could do something special for case #2 but can someone check in the Elasticsearch community what is the recommended approach?","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2266?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-86028","commnet_date":"2016-11-15T06:06:58-0800","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 15\/Nov\/2016 06:06 AM    n        n        Closing as duplicate of n    n                n        n            n            HSEARCH-2235n        n                                                    Closed n             n n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 15\/Nov\/2016 06:06 AM                      Closing as duplicate of n     n                 n         n             n            HSEARCH-2235n         n                                                     Closed n             n              n        n    n"}]}},{"HV-1067":{"info":{"issue_title":"Allow public API to access validation metadata in a developer friendly way","issue_key":"HV-1067","issue_type":"New Feature","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Won&#39;t Fix","issue_fix_version":"5.2.4.Final","issue_component":"5.2.4.Final","issue_labels":"5.2.4.Final","issue_description":"Hibernate validator already creates some metadata based on the validation annotations. However, currently this is used internally and no public access is provided. Since the implementation is already done in such a way, opening this metadata to external users can provide new possibilities like web application form validation.   If a web developer can get validation metadata of a model object, then the form that binds to the object can support the same validation logic at the client side. This way, server side validation rules would not be replicated at the client side, consistency would be assured and more important, automatic form generation ( scaffolding ) would be much easier.   Although this may not be very helpful for very complex conditional validation scenarios, most of the time web forms are simpler and even for a complex form, field rules like null checks, empty checks, and regex checks are enough to save real effort.  I know that this feature is not relevant to the spec, but if Hibernate validator supports this, then it would be very beneficial for web frameworks like Spring MVC which by default has  Hibernate Validator integration can provide better client side validation support.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1067?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-77563","commnet_date":"2016-05-05T00:29:20-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 05\/May\/2016 00:29 AM    n        n        Hi, the Bean Validation spec already defines a public meta-data API: http:\/\/beanvalidation.org\/1.1\/spec\/#constraintmetadatannThe entry point is Validator#getConstraintsForClass(). It has been envisioned exactly for the purposes you describe, such as exposing constraint information to client-side validation solutions. Could you check whether that API contains everything you need and report back? n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 05\/May\/2016 00:29 AM                      Hi, the Bean Validation spec already defines a public meta-data API:  http:\/\/beanvalidation.org\/1.1\/spec\/#constraintmetadata  nn The entry point is  Validator#getConstraintsForClass() . It has been envisioned exactly for the purposes you describe, such as exposing constraint information to client-side validation solutions. Could you check whether that API contains everything you need and report back?              n        n    n"},{"commnet_id":"comment-77740","commnet_date":"2016-05-06T10:58:57-0700","commnet_user":"Cagatay Kalan","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Cagatay Kalann added a comment  - 06\/May\/2016 10:58 AM    n        n        Thanks, you are completely right. Sorry I didn't recognize that. API seems to be enough to discover constraint metadata. n    n    n        n            Show  n            n                        n    n    n    n                nn       Cagatay Kalann added a comment  - 06\/May\/2016 10:58 AM                      Thanks, you are completely right. Sorry I didn't recognize that. API seems to be enough to discover constraint metadata.              n        n    n"},{"commnet_id":"comment-78138","commnet_date":"2016-05-17T05:56:07-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 17\/May\/2016 05:56 AM    n        n        Closing this as \"Won't Fix\" as there already is the public metadata API addressing the described needs. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 17\/May\/2016 05:56 AM                      Closing this as \"Won't Fix\" as there already is the public metadata API addressing the described needs.              n        n    n"}]}},{"HHH-10726":{"info":{"issue_title":"Support for Java 8 date\/time types as Query parameters","issue_key":"HHH-10726","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.0","issue_labels":"5.2.0","issue_description":"Namely in setting parameter values as Java 8 date\/time types using TemporalType clarifications.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10726?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-77648","commnet_date":"2016-05-05T13:35:16-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 05\/May\/2016 13:35 PM    n        n        See https:\/\/github.com\/sebersole\/hibernate-core\/pull\/49 n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 05\/May\/2016 13:35 PM                      See  https:\/\/github.com\/sebersole\/hibernate-core\/pull\/49               n        n    n"}]}},{"OGM-1035":{"info":{"issue_title":"Add convenience methods on AssociationKeyMetadata","issue_key":"OGM-1035","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.1","issue_labels":"5.1","issue_description":"getColumnsWithoutKeyAndRowKeyColumns() \tisRowKeyColumn()","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1035?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1034":{"info":{"issue_title":"Propagate changed property values to embedded nodes when updating an association","issue_key":"OGM-1034","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.Final","issue_labels":"5.0.0.Final","issue_description":"As of ORM 5.0.7 (                                                         HHH-9474                                                              Closed                ), ORM will avoid the recreation of element collections with an index column when updating their contents.  This revealed an issue in Neo4jDialect#putAssociationOperation() where we'd forget to apply property updates on the embeddable in the case the relationship exists already (before, it would always be removed and re-created).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1034?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1032":{"info":{"issue_title":"Make ORM and Search version referenced in documentation a property","issue_key":"OGM-1032","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0.Alpha1","issue_labels":"5.1.0.Alpha1","issue_description":"Currently there is \"5.0\", \"5.5\" or even \"\/stable\/\" specified several times in the AsciiDoc source. It should be build properties.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1032?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-77549","commnet_date":"2016-05-04T03:05:18-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 04\/May\/2016 03:05 AM    n        n        N.B. I'm introducing such a property as part of n    n                n        n            n            OGM-1015n        n                                                    Closed n             n n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 04\/May\/2016 03:05 AM                      N.B. I'm introducing such a property as part of n     n                 n         n             n            OGM-1015n         n                                                     Closed n             n              n        n    n"}]}},{"OGM-1031":{"info":{"issue_title":"Convert projected values obtained from MongoDB queries","issue_key":"OGM-1031","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.1","issue_labels":"5.1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1031?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1030":{"info":{"issue_title":"Upgrade to ORM 5.0.9","issue_key":"OGM-1030","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.Final","issue_labels":"5.0.0.Final","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1030?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1029":{"info":{"issue_title":"Message stating which db are going to be tested during build","issue_key":"OGM-1029","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.x","issue_labels":"5.x","issue_description":"If the right environment variable is not configured, OGM will skip some tests silently.\r\n This is good, but sometimes people forget to test some dbs that are related to the issue they are fixing.  It would be nice to have a message on the console explaining which dbs are going to be tested and (which ones are not) when the build starts.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1029?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10722":{"info":{"issue_title":"@Basic override for embeddable fails though no warning is raised during config","issue_key":"HHH-10722","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"4.2.21 ,                                            5.0.9","issue_component":"4.2.21 ,                                            5.0.9","issue_labels":"4.2.21","issue_description":"A property of an @Embeddable is defined with @Basic(optional = false)\r\n Attempting to override the non-optional column where the embeddable is @Embedded in an entity using @AttributeOverride(... column = @Column(nullable = true))  No warning is logged nor is any exception raised until an attempt it made to persist an entity with a null value for the relevant column at which point the following exception is raised (see attached testcase):   org.hibernate.PropertyValueException: not-null property references a null or transient value : org.hibernate.test.annotations.embeddables.NullableOverrideTest$TestEntity.aCode          at org.hibernate.engine.internal.Nullability.checkNullability(Nullability.java:92)          at org.hibernate.action.internal.AbstractEntityInsertAction.nullifyTransientReferencesIfNotAlready(AbstractEntityInsertAction.java:115)          at org.hibernate.action.internal.AbstractEntityInsertAction.makeEntityManaged(AbstractEntityInsertAction.java:124)          at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:241)          at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:213)          at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:200)          at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:325)          at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:272)          at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:178)          at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:121)          at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.saveWithGeneratedOrRequestedId(DefaultSaveOrUpdateEventListener.java:192)          at org.hibernate.event.internal.DefaultSaveEventListener.saveWithGeneratedOrRequestedId(DefaultSaveEventListener.java:38)          at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.entityIsTransient(DefaultSaveOrUpdateEventListener.java:177)          at org.hibernate.event.internal.DefaultSaveEventListener.performSaveOrUpdate(DefaultSaveEventListener.java:32)          at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.onSaveOrUpdate(DefaultSaveOrUpdateEventListener.java:73)          at org.hibernate.internal.SessionImpl.fireSave(SessionImpl.java:679)          at org.hibernate.internal.SessionImpl.save(SessionImpl.java:671)          at org.hibernate.internal.SessionImpl.save(SessionImpl.java:666)          at org.hibernate.test.annotations.embeddables.NullableOverrideTest.testUnsetNullable(NullableOverrideTest.java:44)     If @Basic cannot be overridden in this manner, but there should be a warning or exception raised.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10722?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1028":{"info":{"issue_title":"Add more verbosity to exception thrown by OgmEntityEntryState#getStateFor()","issue_key":"OGM-1028","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"5.0.0.CR1","issue_component":"5.0.0.CR1","issue_labels":"5.0.0.CR1","issue_description":"In OgmEntityEntryState method getStateFor, there's an attempt to retrieve the object from the persistence context.  If the object is not found in the persistence context, then an exception is throw stating \" 'entityEntry' must not be null \".  This is not very descriptive and could easily be improved by passing something like  \"entityEntry: \" + object as the \"name\" parameter to Contracts.assertNotNull.  In this way the object's toString method will be called and appended to the exception output, allowing for easy identification of the object which is not in the persistence context.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1028?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-77536","commnet_date":"2016-05-03T04:41:02-0700","commnet_user":"Guillaume Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Guillaume Smetn added a comment  - 03\/May\/2016 04:41 AM    n        n        Yes, you're right. Contracts.assertNotNull shoudn't have been used in the first place. I will move this call to a proper call to the logger with the object toString in the log message. n    n    n        n            Show  n            n                        n    n    n    n                nn       Guillaume Smetn added a comment  - 03\/May\/2016 04:41 AM                      Yes, you're right.  Contracts.assertNotNull  shoudn't have been used in the first place. I will move this call to a proper call to the logger with the object  toString  in the log message.              n        n    n"}]}},{"HHH-10717":{"info":{"issue_title":"hibernate and transaction using method annotation","issue_key":"HHH-10717","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"hibernate-core,                                            hibernate-entitymanager","issue_description":"Following question can be seens as a strategy to improve resource usage.\r\n MAIN QUESTION\r\n Is there a way i can say to hibernate that a particular hibernate transaction is readonly and hibernate can then reuse an already acquired connection instead of asking for a new connection from the connection pool ?  link to question description: http:\/\/stackoverflow.com\/questions\/36920695\/hibernate-and-transaction-using-method-annotation  More info with few trials:\r\n https:\/\/github.com\/swaldman\/c3p0\/issues\/70","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10717?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1027":{"info":{"issue_title":"Support BSON function calls in the MongoDB native parser","issue_key":"OGM-1027","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.Final","issue_labels":"5.0.0.Final","issue_description":"String  nativeQuery = \"db.OscarWilde.update({'_id': 1}, { '$inc': { 'counter': NumberLong(5) } } )\" ;  Query query = session.createNativeQuery( nativeQuery ).addEntity( OscarWildePoem.class );  query.executeUpdate();","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1027?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-77733","commnet_date":"2016-05-06T05:05:46-0700","commnet_user":"Guillaume Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Guillaume Smetn added a comment  - 06\/May\/2016 05:05 AM    n        n        Note that NumberInt is not supported by the MongoDB Java driver so it won't work.nnHowever the other supported BSON functions should now work. n    n    n        n            Show  n            n                        n    n    n    n                nn       Guillaume Smetn added a comment  - 06\/May\/2016 05:05 AM                      Note that NumberInt is not supported by the MongoDB Java driver so it won't work. nn However the other supported BSON functions should now work.              n        n    n"}]}},{"HHH-10716":{"info":{"issue_title":"Allow setting of logging category on queries and configuring logging levels for each category","issue_key":"HHH-10716","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"hibernate-core,                                            query-hql,                                            query-sql","issue_description":"For applications with many queries or a large amount of data and related queries going through, it can be useful to switch on query logging on a selective basis to gain diagnostic information, but not increase the log volume too much.  This could be done by  1) Allowing a logging category string to be associated with each query.  2) Allowing logging level (DEBUG\/INFO\/WARN\/..) to be configured for each separate category.  Ideally it should be possible to change the logging levels for the logging categories without restarting the application.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10716?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2250":{"info":{"issue_title":"Improve readability and efficiency of MultiWriteDrainableLinkedList","issue_key":"HSEARCH-2250","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta1","issue_labels":"5.6.0.Beta1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2250?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10715":{"info":{"issue_title":"We should try to reduce the static field usage only when this is absolutely necessary","issue_key":"HHH-10715","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.1.0","issue_component":"5.1.0","issue_labels":"5.1.0","issue_description":"As indicated by this PR, there are some places where static fields are being used, which can cause some problems if we try to spawn several SessionFactory instances in the same ClassLoader (like when using Spring).  Sanne has provided a very good summary on this topic:  There are several components which can safely use static fields, of\r\n course as you say only if their state is not affected by which\r\n SessionFactory is using them.  So I would agree on treating those with care: it should always be a\r\n warning sign during code reviews and warrant an in-depth check, but\r\n ultimately it's a reasonable way to save some resources (both CPU and\r\n memory) - especially when the same JVM runs multiple SessionFactory\r\n instances.\r\n Sure, savings might be small but when the component is clearly\r\n stateless: why not.  I would assume this is a technical detail which we can handle without\r\n needing to make a blanket statement.  +1 to avoid such tricks when it's not trivial to assert its safety,\r\n yet there are valid use cases.   Looking at the specific case:\r\n the usage of \"private static Method memberMethod;\" &#91;1&#93;  seems dodgy indeed.\r\n Synchronization is clearly not the best solution, as it would create a\r\n contention point were there's no need to create one. It would even\r\n contend across multiple SessionFactory instances which is worse than\r\n usual   Indeed the code is \"racy\" as different threads might need to repeat\r\n the effort of finding the reference to \"memberMethod\", it would have\r\n been better to make the field \"volatile\" to ensure different threads\r\n would see it;\r\n yet the code is not functionally incorrect as any thread invoking that\r\n method will behave the same, and retrieve the right value.  Better yet than volatile, make the \"memberMethod\" field Final, have it\r\n initialized statically and move it to the top.. not sure why there are\r\n fields hiding in the mid of a class   BTW this is a good example of sane usage of static (final) fields: it\r\n doesn't matter which SessionFactory is running or how it's configured,\r\n but it's a good thing that different SessionFactory instances won't\r\n have to repeat the initialization of that field over and over.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10715?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10714":{"info":{"issue_title":"Add support for @Immutable attribute types","issue_key":"HHH-10714","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.0","issue_labels":"5.2.0","issue_description":"Currently, @Immutable works for entities and collections, as indicated by ANN-542.  By adding support for attribute types, we can benefit from:   \tlower memory consumption (no need to create copies for checking if entity is dirty or to put\/read it from cache) - especially in cases where entity contains JSON documents \tfaster flush operations    An immutable attribute type looks like this:     @Immutable  public  class Caption {    \tprivate  String  text;    \tpublic  Caption(String  text) {  \t\tthis .text = text;  \t}    \tpublic  String  getText() {  \t\treturn  text;  \t}    \tpublic  void setText(String  text) {  \t\tthis .text = text;  \t}    \t@Override  \tpublic  boolean  equals(Object  o) {  \t\tif  ( this  == o ) {  \t\t\treturn  true ;  \t\t}  \t\tif  ( o == null  || getClass() != o.getClass() ) {  \t\t\treturn  false ;  \t\t}  \t\tCaption caption = (Caption) o;  \t\treturn  text != null  ? text.equals( caption.text ) : caption.text == null ;    \t}    \t@Override  \tpublic  int  hashCode() {  \t\treturn  text != null  ? text.hashCode() : 0;  \t}  }     And it is used as follows:     @Entity  @SuppressWarnings(\"serial\" )  public  class Photo implements  Serializable {    \tprivate  Integer  id;    \tprivate  String  name;    \tprivate  Exif metadata;    \tprivate  Caption caption;    \t@Id  \t@GeneratedValue  \tpublic  Integer  getId() {  \t\treturn  id;  \t}    \tpublic  String  getName() {  \t\treturn  name;  \t}    \tpublic  void setId(Integer  integer) {  \t\tid = integer;  \t}    \tpublic  void setName(String  string) {  \t\tname = string;  \t}    \tpublic  Exif getMetadata() {  \t\treturn  metadata;  \t}    \tpublic  void setMetadata(Exif metadata) {  \t\tthis .metadata = metadata;  \t}    \t@Convert(converter = CaptionConverter.class)  \tpublic  Caption getCaption() {  \t\treturn  caption;  \t}    \tpublic  void setCaption(Caption caption) {  \t\tthis .caption = caption;  \t}  }     The @Immutable annotation still cannot be applied on fields directly, but it can work on an attribute type as illustrated above.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10714?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-78161","commnet_date":"2016-05-18T07:37:40-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 18\/May\/2016 07:37 AM    n        n        The PR was applied on master. Thanks for your contribution. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 18\/May\/2016 07:37 AM                      The PR was applied on master. Thanks for your contribution.              n        n    n"}]}},{"HHH-10713":{"info":{"issue_title":"Improve how column length\/precision\/scale are determined when the same column is mapped from multiple sources","issue_key":"HHH-10713","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.1.0","issue_component":"5.1.0","issue_labels":"5.1.0","issue_description":"The following happened after our upgrade from 5.0.3 to 5.1.0.Final  First, we normally use a double @ManyToOne mapping, e.g. one property maps the entity and the other one only the ID. This because sometimes, on a LAZY association, we want to retrieve only the id of the parent object without having Hibernate fetch the whole object. So we map both properties on the same column.  Given the following @OneToMany mapping         @ManyToOne(fetch = FetchType.EAGER,              optional = true ,              targetEntity = Parent.class)      @JoinColumn(name = \"PARENT_ID\" ,              nullable = true ,              foreignKey = @ForeignKey(name = \"CHILD_TO_PARENT\" ,                      value = ConstraintMode.CONSTRAINT) )      private  Parent parent;        @Column(name = \"PARENT_ID\" ,              \/\/   length = 2,               nullable = true ,              insertable = false ,              updatable = false )      private  final  String  parentId = null ;     In version 5.0.3 the SchemaCreate would automagically guess that the length of Parent's PK column is 2 and generate a column of length 2  So I get a SQL create statement like      CREATE TABLE CHILD (....., PARENT_ID VARCHAR(2).....);  ALTER TABLE CHILD ADD CONSTRAINT....    Works good.  After upgrade to Hibernate 5.1.0.Final the PARENT_ID column is generated VARCHAR(255) so the ADD CONSTRAINT statement will fail. I need to explicitly (this is why I commented out the length attribute in @Column annotation in my code) set the length to each and every @Column.  Withut setting the length of every FK column, I get an error executing the ADD CONSTRAINT statement.   If someone has an idea about where to look in the Hibernate code I could take that look personally and hopefully make a PR.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10713?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-77438","commnet_date":"2016-04-29T14:24:09-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 29\/Apr\/2016 14:24 PM    n        n        You can use @Formula(value=\"PARENT_ID\"). See the doc for details.nnSteve Ebersole, I'm not sure I would consider this a bug; would you? n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 29\/Apr\/2016 14:24 PM                      You can use  @Formula(value=\"PARENT_ID\") . See the doc for details. nn  Steve Ebersole , I'm not sure I would consider this a bug; would you?              n        n    n"},{"commnet_id":"comment-77445","commnet_date":"2016-05-02T00:06:11-0700","commnet_user":"Antonio Anzivino","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Antonio Anzivinon added a comment  - 02\/May\/2016 00:06 AM    n        n        Hi, with all the due respect everything worked until 5.0.3.nnIn my opinion if something stops working after an upgrade, and is not explicitly documented, it is a bug.\r\nnIf it was explicitly stated in Hibernate upgrade guide that such mapping would have stopped working no problem, I could knew in advance.nnThanks for understanding. n    n    n        n            Show  n            n                        n    n    n    n                nn       Antonio Anzivinon added a comment  - 02\/May\/2016 00:06 AM                      Hi, with all the due respect everything worked until 5.0.3. nn In my opinion if something stops working after an upgrade, and is not explicitly documented, it is a bug. nIf it was explicitly stated in Hibernate upgrade guide that such mapping would have stopped working no problem, I could knew in advance. nn Thanks for understanding.              n        n    n"},{"commnet_id":"comment-77454","commnet_date":"2016-05-02T13:27:02-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 02\/May\/2016 13:27 PM    n        n        Actually, if it is not documented in the Hibernate documentation or JPA 2.1 spec, and is not tested in our test suite, then it is probably not supported. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 02\/May\/2016 13:27 PM                      Actually, if it is not documented in the Hibernate documentation or JPA 2.1 spec, and is not tested in our test suite, then it is probably not supported.              n        n    n"},{"commnet_id":"comment-77468","commnet_date":"2016-05-02T23:57:28-0700","commnet_user":"Antonio Anzivino","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Antonio Anzivinon added a comment  - 02\/May\/2016 23:57 PM    n        n        ...stackoverflow is not obviously considered JPA 2.1 spec nnThat could have been a hidden incidental feature n    n    n        n            Show  n            n                        n    n    n    n                nn       Antonio Anzivinon added a comment  - 02\/May\/2016 23:57 PM                      ...stackoverflow is not obviously considered JPA 2.1 spec   nn That could have been a hidden incidental feature              n        n    n"},{"commnet_id":"comment-77540","commnet_date":"2016-05-03T13:53:54-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 03\/May\/2016 13:53 PM    n        n        Gail Badneru00B711:18 AM\r\nn@SteveEbersole, quick question about n    n                n        n            n            HHH-10713n        n                                                    Open n             n\r\nnHHH-10713: @JoinColumn and @Column mapping to String PK require length to be defined hibernate.atlassian.net\r\nnType: Bug\r\nnPriority: Major\r\nnStatus: Open\r\nnis this expected? iow, should length\/precision\/etc be taken from columns mapped with insertable=false, updatable=false?\r\nnI suspect this happened due to the order in which attributes are mapped (basic attributes before associations)\r\nnbut I haven't checked it\r\nnSteve Ebersoleu00B711:28 AM\r\nn@GailBadner you mean as opposed to another column?\r\nn...\r\nnGail Badneru00B711:35 AM\r\nn@SteveEbersole wimi, if there are 2 columns mapped for the same column and one of them is mapped with insertable=false, updatable=false, should length\/precision\/etc be taken from other column (with insertable=true, updatable=true)?\r\nnSteve Ebersoleu00B711:35 AM\r\nnsure, i dont think there is anything inherently wrong with that\r\nnGail Badneru00B711:37 AM\r\nn@SteveEbersole was your response to my question?\r\nnSteve Ebersoleu00B711:37 AM\r\nnyep\r\nnGail Badneru00B711:37 AM\r\nnok, thanks\r\nnseems that would be an improvement, not a bug\r\nnSteve Ebersoleu00B711:41 AM\r\nnwell that assumes that you the entire set of all the @Columns\r\nnGail Badneru00B711:51 AM\r\nn@SteveEbersole we could track if any of length\/precision\/scale have been explicitly set using a setter; we could allow length\/precision\/scale to be set once; if an attempt is made to reset length\/precision\/scale, ignore and log a warning; wdyt?\r\nnSteve Ebersoleu00B711:52 AM\r\nnwell 2 things there\r\nn1) that really does nothing about whether it came from insertable=false, updatable=false\r\nnGail Badneru00B711:53 AM\r\nn(true)\r\nnSteve Ebersoleu00B711:53 AM\r\nn2) i'm ok with that in general, but I'd change to to say you can only call it once with differing values\r\nne.g....\r\nni ought to be able to call setLegth( 5 ) as many times as I want\r\nnGail Badneru00B711:54 AM\r\nn(I realized after writing it that Column does not have contextual information like insertable=false, updatable=false\r\nnyes, the same value is fine;\r\nnSteve Ebersoleu00B711:54 AM\r\nnyeah, so I'm ok with that\r\nnGail Badneru00B711:55 AM\r\nnso, basically first one wins (indeterminate), but we log to show inconsistencies\r\nnGail Badneru00B712:02 PM\r\nn@SteveEbersole , org.hibernate.mapping.Column doesn't have access to contextual information, and there's no way (without changing Column) to determine if, for example, one attribute has @Column(precision=..) and another attribute has @Column(scale=...); I guess I'm ok with that; wdyt?\r\nnSteve Ebersoleu00B712:53 PM\r\nnwell I think it boils down to whether we can effectively handle null for those values\r\nnthats been an outstanding problem in Hibernate for years\r\nntake setLength, e.g....\r\nnideally, setLength would look like:\r\nnpublic void setLength(int length) {\r\nnu2002u2002u2002u2002if ( this.length != null ) {\r\nnu2002u2002u2002u2002u2002u2002u2002u2002\/\/ make sure the values are the same...\r\nnu2002u2002u2002u2002u2002u2002u2002u2002if ( this.length.intValue() != length ) n{ rnu2002u2002u2002u2002u2002u2002u2002u2002u2002u2002u2002u2002throw new TheException();rnu2002u2002u2002u2002u2002u2002u2002u2002}nu2002u2002u2002u2002}\r\nnu2002u2002u2002u2002this.length = length;\r\nn}\r\nnShow less\r\nnGail Badneru00B712:57 PM\r\nnhmm, how would one set null for length?\r\nnsince the argument is an int...\r\nnSteve Ebersoleu00B712:59 PM\r\nnset null?\r\nnGail Badneru00B712:59 PM\r\nn@SteveEbersoleu2002u2002would it break anything if we change the length and argument field to Integer?\r\nnSteve Ebersoleu00B71:00 PM\r\nnthe idea is that the default is null\r\nnyou only call setXYZ when the value is not null\r\nnGail Badneru00B71:00 PM\r\nnah, ok\r\nnSteve Ebersoleu00B71:00 PM\r\nnyou could accept nulls too\r\nnbut\r\nnyou need to be careful then about setLength( null )\r\nnsince thats overriding a previously set value (or is a change) if you follow the normal meaning of setter\r\nnGail Badneru00B71:02 PM\r\nnany problem with changing the method signature to take an Integer arg (instead of int)?\r\nnnormal meaning of setter is last one wins; maybe that's what should happen here along with a warning\r\nnI'm not sure if I'm following all of the ramifications; I'm not going to be able to do anything on this before pto, so I'll just capture this conversation in the jira issue and we can work out details later\r\nnI need to wrap some things up and I know you're really busy\r\nnSteve Ebersoleu00B71:19 PM\r\nnthe problem is more that something (I forget what exact;y) immediately applies the \"defaults\" when a particular source does not provide them\r\nnand then lots of code work on that assumption (non null)\r\nnif you can adjust all those places that would be great\r\nnthis is ultimately what I want to do to properly support those Type#dictatedSizes and Type#defaultSizes methods\r\nnbut as you said, that needs to be at a higher level than Column\r\nni just have not found a decent hook point given how we currently process sources n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 03\/May\/2016 13:53 PM                      Gail Badneru00B711:18 AM n@SteveEbersole, quick question about n     n                 n         n             n            HHH-10713n         n                                                     Open n             n nHHH-10713: @JoinColumn and @Column mapping to String PK require length to be defined hibernate.atlassian.net nType: Bug nPriority: Major nStatus: Open nis this expected? iow, should length\/precision\/etc be taken from columns mapped with insertable=false, updatable=false? nI suspect this happened due to the order in which attributes are mapped (basic attributes before associations) nbut I haven't checked it nSteve Ebersoleu00B711:28 AM n@GailBadner you mean as opposed to another column? n... nGail Badneru00B711:35 AM n@SteveEbersole wimi, if there are 2 columns mapped for the same column and one of them is mapped with insertable=false, updatable=false, should length\/precision\/etc be taken from other column (with insertable=true, updatable=true)? nSteve Ebersoleu00B711:35 AM nsure, i dont think there is anything inherently wrong with that nGail Badneru00B711:37 AM n@SteveEbersole was your response to my question? nSteve Ebersoleu00B711:37 AM nyep nGail Badneru00B711:37 AM nok, thanks nseems that would be an improvement, not a bug nSteve Ebersoleu00B711:41 AM nwell that assumes that you the entire set of all the @Columns nGail Badneru00B711:51 AM n@SteveEbersole we could track if any of length\/precision\/scale have been explicitly set using a setter; we could allow length\/precision\/scale to be set once; if an attempt is made to reset length\/precision\/scale, ignore and log a warning; wdyt? nSteve Ebersoleu00B711:52 AM nwell 2 things there n1) that really does nothing about whether it came from insertable=false, updatable=false nGail Badneru00B711:53 AM n(true) nSteve Ebersoleu00B711:53 AM n2) i'm ok with that in general, but I'd change to to say you can only call it once with differing values ne.g.... ni ought to be able to call setLegth( 5 ) as many times as I want nGail Badneru00B711:54 AM n(I realized after writing it that Column does not have contextual information like insertable=false, updatable=false nyes, the same value is fine; nSteve Ebersoleu00B711:54 AM nyeah, so I'm ok with that nGail Badneru00B711:55 AM nso, basically first one wins (indeterminate), but we log to show inconsistencies nGail Badneru00B712:02 PM n@SteveEbersole , org.hibernate.mapping.Column doesn't have access to contextual information, and there's no way (without changing Column) to determine if, for example, one attribute has @Column(precision=..) and another attribute has @Column(scale=...); I guess I'm ok with that; wdyt? nSteve Ebersoleu00B712:53 PM nwell I think it boils down to whether we can effectively handle null for those values nthats been an outstanding problem in Hibernate for years ntake setLength, e.g.... nideally, setLength would look like: npublic void setLength(int length) { nu2002u2002u2002u2002if ( this.length != null ) { nu2002u2002u2002u2002u2002u2002u2002u2002\/\/ make sure the values are the same... nu2002u2002u2002u2002u2002u2002u2002u2002if ( this.length.intValue() != length )  n{ rnu2002u2002u2002u2002u2002u2002u2002u2002u2002u2002u2002u2002throw new TheException();rnu2002u2002u2002u2002u2002u2002u2002u2002}n u2002u2002u2002u2002} nu2002u2002u2002u2002this.length = length; n} nShow less nGail Badneru00B712:57 PM nhmm, how would one set null for length? nsince the argument is an int... nSteve Ebersoleu00B712:59 PM nset null? nGail Badneru00B712:59 PM n@SteveEbersoleu2002u2002would it break anything if we change the length and argument field to Integer? nSteve Ebersoleu00B71:00 PM nthe idea is that the default is null nyou only call setXYZ when the value is not null nGail Badneru00B71:00 PM nah, ok nSteve Ebersoleu00B71:00 PM nyou could accept nulls too nbut nyou need to be careful then about setLength( null ) nsince thats overriding a previously set value (or is a change) if you follow the normal meaning of setter nGail Badneru00B71:02 PM nany problem with changing the method signature to take an Integer arg (instead of int)? nnormal meaning of setter is last one wins; maybe that's what should happen here along with a warning nI'm not sure if I'm following all of the ramifications; I'm not going to be able to do anything on this before pto, so I'll just capture this conversation in the jira issue and we can work out details later nI need to wrap some things up and I know you're really busy nSteve Ebersoleu00B71:19 PM nthe problem is more that something (I forget what exact;y) immediately applies the \"defaults\" when a particular source does not provide them nand then lots of code work on that assumption (non null) nif you can adjust all those places that would be great nthis is ultimately what I want to do to properly support those Type#dictatedSizes and Type#defaultSizes methods nbut as you said, that needs to be at a higher level than Column ni just have not found a decent hook point given how we currently process sources              n        n    n"},{"commnet_id":"comment-77548","commnet_date":"2016-05-04T02:32:51-0700","commnet_user":"Antonio Anzivino","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Antonio Anzivinon added a comment  - 04\/May\/2016 02:32 AM    n        n        I like to point out that if one of the sources is @JoinColumn that should win or at least have priority, because you can find the correct length\/size in the referenced column (I have never seen a NUMERIC(PRECISION,SCALE) as primary key) n    n    n        n            Show  n            n                        n    n    n    n                nn       Antonio Anzivinon added a comment  - 04\/May\/2016 02:32 AM                      I like to point out that if one of the sources is @JoinColumn that should win or at least have priority, because you can find the correct length\/size in the referenced column (I have never seen a NUMERIC(PRECISION,SCALE) as primary key)              n        n    n"}]}},{"HV-1065":{"info":{"issue_title":"Add hibernate.validator.constraint_mapping_contributor*s* to take a list of contributors and deprecate hibernate.validator.constraint_mapping_contributor","issue_key":"HV-1065","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.3.0.CR1","issue_labels":"5.3.0.CR1","issue_description":"Unlike other properties in HibernateValidatorConfiguration, \"hibernate.validator.constraint_mapping_contributor\" only takes a single FQN as opposed to a comma-separated list. That should be changed.  We will add an option for 5.3 and deprecate the old hibernate.validator.constraint_mapping_contributor. We will remove  hibernate.validator.constraint_mapping_contributor in 6.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1065?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2247":{"info":{"issue_title":"Represent the kind of underlying technology with an explicit type","issue_key":"HSEARCH-2247","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta1","issue_labels":"5.6.0.Beta1","issue_description":"We have been wondering how to differentiate the \"Elasticsearch\" from \"Lucene embedded\" storage types properly.\r\n The current code relies on \"instanceof\" and knowledge about which implementations we have, but this is not extensions friendly (nor future friendly).  An enum was proposed, but that's a closed set. So I'm suggesting to use a \"marker Class\": anyone adding a jar or a dependency would be adding a Class anyway; it's conceptually similar to looking at the type of the IndexManager but the constant can be reused by alternative implementations.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2247?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10711":{"info":{"issue_title":"Null pointers should not be dereferenced ","issue_key":"HHH-10711","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.0","issue_labels":"5.2.0","issue_description":"Small improvement mentioned in this PR. There are some equals method implementations that could check the other object for null prior to verifying its content.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10711?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-77340","commnet_date":"2016-04-27T07:47:45-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 27\/Apr\/2016 07:47 AM    n        n        Applied PR on master. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 27\/Apr\/2016 07:47 AM                      Applied PR on master.              n        n    n"}]}},{"HSEARCH-2244":{"info":{"issue_title":"Unify the way TermQuery for numerics are handled","issue_key":"HSEARCH-2244","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta1","issue_labels":"5.6.0.Beta1","issue_description":"TermQuery for numerics are handled in 2 different ways in SingularTermDeletionQuery and in ConnectedMultiFieldsTermQueryBuilder.  Moreover the implementation in SingularTermDeletionQuery was very low level and didn't take into account FieldBridges.  This change might look a bit out of the blue but it's a part of my analyzer patch.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2244?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2243":{"info":{"issue_title":"Allow provided services to implement Startable or Stoppable","issue_key":"HSEARCH-2243","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta1","issue_labels":"5.6.0.Beta1","issue_description":"The current contract of org.hibernate.search.engine.service.spi.ServiceManager explicitly prohibits using provided services which happen to also implement the marker interfaces org.hibernate.search.engine.service.spi.Startable and\/or org.hibernate.search.engine.service.spi.Stoppable.  This is not very friendly for code reuse, and there is no reason to enforce this.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2243?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1026":{"info":{"issue_title":"Support Neo4j 3.0","issue_key":"OGM-1026","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0.Alpha1","issue_labels":"5.1.0.Alpha1","issue_description":"See http:\/\/neo4j.com\/blog\/neo4j-3-0-massive-scale-developer-productivity\/.  Need to investigate what's new and how OGM is affected. Can we support 2.x and 3.0 with a single dialect? Or should there two separate ones?","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1026?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2235":{"info":{"issue_title":"Allow to configure several hosts of an Elasticsearch cluster","issue_key":"HSEARCH-2235","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta4,                                            5.7.0.Beta1","issue_labels":"5.6.0.Beta4,                                            5.7.0.Beta1","issue_description":"Atm. we only support a single one endpoint URI to be given by the user. We should allow for several ones, allowing to fallback to other members of the cluster in case a node becomes unavailable. The Jest client we use takes a collection of endpoint URIs, I expect it to handle the fallback transparently (haven't tested that yet, though).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2235?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2234":{"info":{"issue_title":"Add dependency to &quot;xml.bind&quot; to ES JBoss Modules module.xml","issue_key":"HSEARCH-2234","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Blocker","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta1","issue_labels":"5.6.0.Beta1","issue_description":"ElasticsearchBridgeProvider.EsDateBridge has a dependency to JAXB's DatatypeConverter (for date formatting\/parsing purposes), but we lack the required dependency in the module.xml definition:     &lt;module name=\"javax.xml.bind.api\" \/&gt;","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2234?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-77138","commnet_date":"2016-04-21T04:16:27-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 21\/Apr\/2016 04:16 AM    n        n        Blocking:nnthttps:\/\/issues.jboss.org\/browse\/ISPN-6522nthttps:\/\/issues.jboss.org\/browse\/JDG-196nn n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 21\/Apr\/2016 04:16 AM                      Blocking: n nt  https:\/\/issues.jboss.org\/browse\/ISPN-6522  nt  https:\/\/issues.jboss.org\/browse\/JDG-196  n n             n        n    n"}]}},{"OGM-1025":{"info":{"issue_title":"Support JPQL lowercase and\/or uppercase functions ","issue_key":"OGM-1025","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.1","issue_labels":"5.1","issue_description":"Not sure how hard this might be, it might require some changes in the HQL parser.\r\n Maybe this should be two separate issues.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1025?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10698":{"info":{"issue_title":"org.hibernate.exception.spi.SQLExceptionConversionDelegate should allow mapping to any HibernateException","issue_key":"HHH-10698","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"4.3.11","issue_component":"4.3.11","issue_labels":"4.3.11","issue_description":"In working on a Dialect for NuoDB, there's a case in which an SQLException need to map to a StaleStateException, which is not a subclass of JDBCException. Of course, as a result, I can't handle it in the delegate. It would be helpful if there was a way to do this mapping in the delegate.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10698?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10697":{"info":{"issue_title":"Backport HHH-9548 to globally enable passing null as stored procedure parameter to Hibernate 5.0","issue_key":"HHH-10697","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.9","issue_component":"5.0.9","issue_labels":"5.0.9","issue_description":"Backport the functionality to permit propagation of NULL to the database for parameters in stored procedure invocations. Setting hibernate.proc.param_null_passing=\"true\" will globally enable passing null as the stored procedure parameter value when no value is provided. Default will be \"false\".  NOTE:                                                          HHH-9548                                                              Closed                 allows the global value to be overridden on a per parameter basis; this functionality cannot be backported to 5.0 due to SPI changes.  Note: The 5.0 documentation section 22.7 currently documents the use of hibernate.proc.param_null_passing but this property is ignored in 5.0.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10697?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-77063","commnet_date":"2016-04-19T08:23:36-0700","commnet_user":"Stephen Fikes","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Stephen Fikesn added a comment  - 19\/Apr\/2016 08:23 AM    n        n        Opening per previous discussion with Gail Badner n    n    n        n            Show  n            n                        n    n    n    n                nn       Stephen Fikesn added a comment  - 19\/Apr\/2016 08:23 AM                      Opening per previous discussion with  Gail Badner               n        n    n"},{"commnet_id":"comment-77147","commnet_date":"2016-04-21T15:33:36-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 21\/Apr\/2016 15:33 PM    n        n        Fixed in 5.0 branch only. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 21\/Apr\/2016 15:33 PM                      Fixed in 5.0 branch only.              n        n    n"},{"commnet_id":"comment-77148","commnet_date":"2016-04-21T17:22:40-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 21\/Apr\/2016 17:22 PM    n        n        I've also pushed a commit to correct the documentation. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 21\/Apr\/2016 17:22 PM                      I've also pushed a commit to correct the documentation.              n        n    n"}]}},{"OGM-1024":{"info":{"issue_title":"Support .aggregate() using MongoDB CLI syntax  ","issue_key":"OGM-1024","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.x","issue_labels":"5.x","issue_description":"We already have the constant Operation.AGGREGATE we need to update   org.hibernate.ogm.datastore.mongodb.query.parsing.nativequery.impl.NativeQueryParser   and the MongoDB dialect to actually execute it","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1024?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-80635","commnet_date":"2016-07-07T13:15:05-0700","commnet_user":"u00CDcaro Goulart Faria Motta Franu00E7a","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       u00CDcaro Goulart Faria Motta Franu00E7an added a comment  - 07\/Jul\/2016 13:15 PM     - edited  n        n        I have the same problem. I need this function in my project.  n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       u00CDcaro Goulart Faria Motta Franu00E7an added a comment  - 07\/Jul\/2016 13:15 PM     - edited                    I have the same problem. I need this function in my project.                n        n    n"}]}},{"HHH-10696":{"info":{"issue_title":"Add a new CatalogFilterTest","issue_key":"HHH-10696","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.1.0","issue_component":"5.1.0","issue_labels":"5.1.0","issue_description":"Just like SchemaFilterTest, we should have a CatalogFilterTest that tests the same behavior for MySQL, where a catalog plays the role of a schema.  For example, SchemaFilterTest fails when run against MySQL, and we should use the catalog instead of the schema for testing the underlying behavior.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10696?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-78152","commnet_date":"2016-05-18T00:00:38-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 18\/May\/2016 00:00 AM    n        n        This was fixed along with n    n                n        n            n            HHH-10691n        n                                                    Closed n             n PR. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 18\/May\/2016 00:00 AM                      This was fixed along with n     n                 n         n             n            HHH-10691n         n                                                     Closed n             n PR.              n        n    n"}]}},{"HSEARCH-2231":{"info":{"issue_title":"Add a TypeNamingStrategy to allow users to change the Elasticsearch type name","issue_key":"HSEARCH-2231","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"elasticsearch","issue_description":"After discussions on                                                          HSEARCH-2216                                                              Open                , we agreed:   \tnot to change the Elasticsearch type name to a non qualified name by default (Sanne's lead hammer) \toffer another strategy contract: TypeNamingStrategy which allow users to provide a different name for the Elasticsearch type (than the FQCN).    The default TypeNamingStrategy would provide the FQCN as the type name.  Questions remaining,   \tshould we store the classname in the type structure _meta? We could offer a bidirectional TypeNamingStrategy and not store anything \tif we decide to store, should we only store it when the TypeNamingStrategy deviates from the default one? how to recognized a true FQCN from a modified one?","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2231?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10694":{"info":{"issue_title":"Dialect support for mapping from &#39;some&#39; to something else","issue_key":"HHH-10694","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"4.3.11","issue_component":"4.3.11","issue_labels":"4.3.11","issue_description":"Some hibernate documentation treats the 'some' sort-of-aggregate function as a common feature of HQL. However, not all databases have this syntax, and the Dialect class seems to offer no convenient means for a Dialect to provide the rewrite from 'some' to an exists subquery.  This is a feature request for that mapping capability.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10694?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2230":{"info":{"issue_title":"Detect invalid cardinality of fields mapped as DocValues","issue_key":"HSEARCH-2230","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.8","issue_labels":"5.8","issue_description":"It appears that a mapping following this structure:   root entity -&gt; oneToMany -&gt; Spatial fields  will attempt to index the spatial coordinates multiple times for the same field name.\r\n Since Spatial now uses DocValues, this is an invalid mapping.  The mapping has always been invalid as the pairs of coordinates would have been indexed in a mixed bag - so impossible to pair up a latitude with its related longitude - yet we didn't throw an exception at runtime when these were not DocValues.  We should detect an illegal cardinality for DocValue fields at boot time, and fail fast.  See also https:\/\/forum.hibernate.org\/viewtopic.php?f=9&amp;t=1043185","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2230?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-77058","commnet_date":"2016-04-19T02:04:59-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 19\/Apr\/2016 02:04 AM    n        n        Good you filed this, wanted to talk to you about it, too nnApart from detecting the issue and failing fast (+1 for that), my question rather is how we can support it, as the use case is legit. Sub-documents come to mind, I hope we can address this soon-ish (6, or maybe even 5.7?). n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 19\/Apr\/2016 02:04 AM                      Good you filed this, wanted to talk to you about it, too   nn Apart from detecting the issue and failing fast (+1 for that), my question rather is how we can support it, as the use case is legit. Sub-documents come to mind, I hope we can address this soon-ish (6, or maybe even 5.7?).              n        n    n"},{"commnet_id":"comment-77059","commnet_date":"2016-04-19T02:26:53-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 19\/Apr\/2016 02:26 AM    n        n        Agreed n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 19\/Apr\/2016 02:26 AM                      Agreed              n        n    n"}]}},{"HSEARCH-2228":{"info":{"issue_title":"Document that value given for indexNullAs() must match field type","issue_key":"HSEARCH-2228","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"engine","issue_description":"That requirement has been added only recently, it should be reflected in the JavaDocs of indexNullAs().","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2228?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2225":{"info":{"issue_title":"Consider adding typed version of query on FullTextEntityManager","issue_key":"HSEARCH-2225","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"interface  FullTextEntityManager {    \/\/existing     FullTextQuery createFullTextQuery(Query var1, Class ... var2);    FullTextQuery createFullTextQuery(QueryDescriptor var1, Class ... var2);      \/\/adding     \/\/ FullTextTypedQuery extends  TypedQuery     &lt;T&gt; FullTextTypedQuery&lt;T&gt; createFullTextQuery(Query query, Class &lt;T&gt; uniqueClass);    &lt;T&gt; FullTextTypedQuery&lt;T&gt; createFullTextQuery(QueryDescriptor query, Class &lt;T&gt; uniqueClass);         Today code change from JPA are a bit unfavorable.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2225?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-77046","commnet_date":"2016-04-18T07:31:35-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 18\/Apr\/2016 07:31 AM    n        n        Today code change from JPA are a bit unfavorable.nCould you explain this sentence? Not sure what it means. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 18\/Apr\/2016 07:31 AM                       Today code change from JPA are a bit unfavorable.  n Could you explain this sentence? Not sure what it means.              n        n    n"},{"commnet_id":"comment-77047","commnet_date":"2016-04-18T07:49:05-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 18\/Apr\/2016 07:49 AM    n        n        When I demo a change from a JPA query to a HSearch query in place, I lose the type safety and I need to explain why, which makes me spend 1 min or so and add @SuppressWarnings(\"unchecked\"). n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 18\/Apr\/2016 07:49 AM                      When I demo a change from a JPA query to a HSearch query in place, I lose the type safety and I need to explain why, which makes me spend 1 min or so and add @SuppressWarnings(\"unchecked\").              n        n    n"},{"commnet_id":"comment-77048","commnet_date":"2016-04-18T08:51:49-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 18\/Apr\/2016 08:51 AM    n        n        Would you have these variations disallow:nntsetResultTransformerntsetProjectionnt..\r\nn ?nn n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 18\/Apr\/2016 08:51 AM                      Would you have these variations disallow: n nt setResultTransformer nt setProjection nt .. n ? n n             n        n    n"},{"commnet_id":"comment-77054","commnet_date":"2016-04-18T22:37:39-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 18\/Apr\/2016 22:37 PM    n        n        Sanne Grinovero no. Note the FullTextTypedQuery alternative to host these specific methods. n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 18\/Apr\/2016 22:37 PM                       Sanne Grinovero  no. Note the  FullTextTypedQuery  alternative to host these specific methods.              n        n    n"},{"commnet_id":"comment-77067","commnet_date":"2016-04-19T11:12:29-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 19\/Apr\/2016 11:12 AM    n        n        I noticed. The question stems from wondering if FullTextTypedQuery could extend FullTextQuery.. if not as you seem to imply, then it's an API breaking change which would need to wait for 6.0 at least.nnOr we could do this incrementally by picking a new method name.. might be good also to avoid confusion? n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 19\/Apr\/2016 11:12 AM                      I noticed. The question stems from wondering if  FullTextTypedQuery  could extend  FullTextQuery .. if not as you seem to imply, then it's an API breaking change which would need to wait for 6.0 at least. nn Or we could do this incrementally by picking a new method name.. might be good also to avoid confusion?              n        n    n"}]}},{"HHH-10691":{"info":{"issue_title":"Fix tests failing when switching to PostgreSQL","issue_key":"HHH-10691","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.1.0","issue_component":"5.1.0","issue_labels":"5.1.0","issue_description":"The following tests fail when testing with PostgreSQL:   \tdocumentation:  BlobTest. test  ClobTest. test  NClobCharArrayTest. test  NClobStringTest. test  NClobTest. test  NationalizedTest. test  DatabaseMultiTenancyTest. testBasicExpectedBehavior  SchemaMultiTenancyTest. classMethod    \thibernate-core:  UUIDBasedIdInterpretationTest. testBinaryRuntimeUsage  SchemaUpdateWithFunctionIndexTest. testUpdateSchema  SchemaUpdateWithViewsTest. testUpdateSchema  CrossSchemaForeignKeyGenerationTest. testSchemaExportForeignKeysAreGeneratedAfterAllTheTablesAreCreated  Java8DateTimeTests. basicTests","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10691?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10689":{"info":{"issue_title":"Fix tests failing when switching to Oracle","issue_key":"HHH-10689","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.1.0","issue_component":"5.1.0","issue_labels":"5.1.0","issue_description":"When running tests against Oracle:   gradle clean test -Pdb=oracle     The following tests fail:   \tdocumentation  DatabaseMultiTenancyTest. testBasicExpectedBehavior  SchemaMultiTenancyTest. classMethod  CollectionLoaderTest. test_HHH10557  CustomSQLSecondaryTableTest. test_sql_custom_crud  CustomSQLTest. test_sql_custom_crud    \thibernate-core  IndexedCollectionTest. testTemporalKeyMap  EagerIndexedCollectionTest. testTemporalKeyMap  MapKeyAttributeConverterTest. classMethod  InheritanceManyToManyForeignKeyTest. testForeignKeyNameUnicity  BulkManipulationTest. testDeleteOnJoinedSubclass  BulkManipulationTest. testUpdateOnMammal  BulkManipulationTest. testUpdateSetNullOnJoinedSubclass  UUIDBasedIdInterpretationTest. testBinaryRuntimeUsage  OneToManyTest. testOneToManyLinkTable  SchemaExportTest. testBothType  SchemaUpdateFormatterTest. testSetFormat  CrossSchemaForeignKeyGenerationTest. testSchemaMigrationForeignKeysAreGeneratedAfterAllTheTablesAreCreated  InheritanceSchemaUpdateTest. testBidirectionalOneToManyReferencingRootEntity    \thibernate-entitymanager  QueryLockingTest. testEntityLockModeStateAfterQueryLocking    \thibernate-envers \t AssociationToOneQueryTest. initData[0]  AssociationToOneQueryTest. initData[1]  AssociationToOneQueryTest. testAssociationQueryWithOrdering[0]  AssociationToOneQueryTest. testAssociationQueryWithOrdering[1]  AssociationToOneQueryTest. testAssociationQueryWithProjection[0]  AssociationToOneQueryTest. testAssociationQueryWithProjection[1]  AssociationToOneQueryTest. testAssociationQuery[0]  AssociationToOneQueryTest. testAssociationQuery[1]","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10689?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-78140","commnet_date":"2016-05-17T07:49:27-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Vlad Mihalcean added a comment  - 17\/May\/2016 07:49 AM     - edited  n        n        Fix most issues. The remaining ones require a case-by-case code change:nnnnorg.hibernate.dialect.SQLServer2005DialectTestCase &gt; testGetLimitStringWithNewlineAfterColumnList FAILEDrn    org.junit.ComparisonFailure at SQLServer2005DialectTestCase.java:78rnrnorg.hibernate.dialect.SQLServer2005DialectTestCase &gt; testGetLimitStringWithNewlineAfterSelect FAILEDrn    org.junit.ComparisonFailure at SQLServer2005DialectTestCase.java:56rnrnorg.hibernate.dialect.SQLServer2005DialectTestCase &gt; testGetLimitStringWithNewlineAfterSelectWithMultipleSpaces FAILEDrn    org.junit.ComparisonFailure at SQLServer2005DialectTestCase.java:67rnrnorg.hibernate.test.optlock.OptimisticLockTest &gt; testOptimisticLockAllDelete FAILEDrn    java.lang.AssertionError at OptimisticLockTest.java:177rnrnorg.hibernate.test.optlock.OptimisticLockTest &gt; testOptimisticLockDirtyDelete FAILEDrn    java.lang.AssertionError at OptimisticLockTest.java:177rnrnorg.hibernate.test.schemaupdate.inheritance.ForeignKeyNameTest &gt; testJoinedSubclassForeignKeyNameIsNotAutoGeneratedWhenProvided FAILEDrn    org.hibernate.tool.schema.spi.SchemaManagementException at ForeignKeyNameTest.java:56rnn n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Vlad Mihalcean added a comment  - 17\/May\/2016 07:49 AM     - edited                    Fix most issues. The remaining ones require a case-by-case code change: nnn  n org.hibernate.dialect.SQLServer2005DialectTestCase &gt; testGetLimitStringWithNewlineAfterColumnList FAILEDrn    org.junit.ComparisonFailure at SQLServer2005DialectTestCase.java:78rnrnorg.hibernate.dialect.SQLServer2005DialectTestCase &gt; testGetLimitStringWithNewlineAfterSelect FAILEDrn    org.junit.ComparisonFailure at SQLServer2005DialectTestCase.java:56rnrnorg.hibernate.dialect.SQLServer2005DialectTestCase &gt; testGetLimitStringWithNewlineAfterSelectWithMultipleSpaces FAILEDrn    org.junit.ComparisonFailure at SQLServer2005DialectTestCase.java:67rnrnorg.hibernate.test.optlock.OptimisticLockTest &gt; testOptimisticLockAllDelete FAILEDrn    java.lang.AssertionError at OptimisticLockTest.java:177rnrnorg.hibernate.test.optlock.OptimisticLockTest &gt; testOptimisticLockDirtyDelete FAILEDrn    java.lang.AssertionError at OptimisticLockTest.java:177rnrnorg.hibernate.test.schemaupdate.inheritance.ForeignKeyNameTest &gt; testJoinedSubclassForeignKeyNameIsNotAutoGeneratedWhenProvided FAILEDrn    org.hibernate.tool.schema.spi.SchemaManagementException at ForeignKeyNameTest.java:56rn n               n        n    n"},{"commnet_id":"comment-87303","commnet_date":"2016-12-09T13:41:32-0800","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 09\/Dec\/2016 13:41 PM    n        n        Reopen to add 5.1.4 as fix version. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 09\/Dec\/2016 13:41 PM                      Reopen to add 5.1.4 as fix version.              n        n    n"},{"commnet_id":"comment-87304","commnet_date":"2016-12-09T13:42:09-0800","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 09\/Dec\/2016 13:42 PM    n        n        Closing after adding 5.1.4 as fix version. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 09\/Dec\/2016 13:42 PM                      Closing after adding 5.1.4 as fix version.              n        n    n"}]}},{"HHH-10686":{"info":{"issue_title":"Update xml-apis dependency","issue_key":"HHH-10686","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.1.0","issue_component":"5.1.0","issue_labels":"5.1.0","issue_description":"Please, consider updating the outdate version of xml-apis dependency that is being used at hibernate-core component. The latest one is version 1.14.01 (DEC 2009) and the one you are using is version 1.0b2 (Dec 2002). There are multiple issues when using the latest org\/w3c\/dom or any similar packages due to classes that are introduced to newest versions of xml-apis.\r\n I am alredy using version 1.14.01 on my projects and i ahve not faced any issues at all.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10686?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10685":{"info":{"issue_title":"Custom schema exporter","issue_key":"HHH-10685","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Out of Date","issue_fix_version":"None","issue_component":"None","issue_labels":"hibernate-core","issue_description":"Feature that allows user to specify custom schema exporter and export schema for example to xml file.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10685?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-76995","commnet_date":"2016-04-14T03:51:49-0700","commnet_user":"Marek Szalik","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Marek Szalikn added a comment  - 14\/Apr\/2016 03:51 AM    n        n        https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/833 n    n    n        n            Show  n            n                        n    n    n    n                nn       Marek Szalikn added a comment  - 14\/Apr\/2016 03:51 AM                       https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/833               n        n    n"},{"commnet_id":"comment-76996","commnet_date":"2016-04-14T04:01:35-0700","commnet_user":"Marek Szalik","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Marek Szalikn added a comment  - 14\/Apr\/2016 04:01 AM    n        n        When I started to resolve merge conflicts I realised that hiberante-orm now has already that functionality.\r\nnIMHO that jira can be closed. n    n    n        n            Show  n            n                        n    n    n    n                nn       Marek Szalikn added a comment  - 14\/Apr\/2016 04:01 AM                      When I started to resolve merge conflicts I realised that hiberante-orm now has already that functionality. nIMHO that jira can be closed.              n        n    n"}]}},{"HSEARCH-2220":{"info":{"issue_title":"Use Elasticsearch `fields` query capability for projection","issue_key":"HSEARCH-2220","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Duplicate","issue_fix_version":"5.6.0.Alpha3","issue_component":"5.6.0.Alpha3","issue_labels":"5.6.0.Alpha3","issue_description":"Elasticsearch allows to define the list of fields to extract either from the Lucene store or the JSON document via the fields query option AFAIU. That is a way to avoid loading and transporting the full JSON document across the wire.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2220?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-86000","commnet_date":"2016-11-14T01:40:01-0800","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 14\/Nov\/2016 01:40 AM    n        n        Duplicated by n    n                n        n            n            HSEARCH-2358n        n                                                    Closed n             n , which has been closed. n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 14\/Nov\/2016 01:40 AM                      Duplicated by n     n                 n         n             n            HSEARCH-2358n         n                                                     Closed n             n , which has been closed.              n        n    n"}]}},{"HSEARCH-2219":{"info":{"issue_title":"Define analyzers via the REST API","issue_key":"HSEARCH-2219","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.6.0.Alpha3 ,                                            5.6.0.Beta3","issue_component":"5.6.0.Alpha3 ,                                            5.6.0.Beta3","issue_labels":"5.6.0.Alpha3","issue_description":"Defining analyzer or any index.* properties in elasticsearch.yml is deprecated and will not work in Elasticsearch 5 (next version after 2.3). \r\n We should move away from using this approach and instead incorporate the Analyzer definition during the create index phase. \r\n Here is the API for it https:\/\/www.elastic.co\/guide\/en\/elasticsearch\/reference\/2.3\/indices-update-settings.html#update-settings-analysis  This will work for all the analyzer def based on reasonable default implementations of Lucene \/ Elasticsearch. Each tokenizer and filter and char set can be given a name. \r\n One can also pass a fully qualified class name instead of the short name (to be verified)  What about custom implementations of Tokenizer \/ Filter. The natural way in Elasticsearch is to write and deploy a plugin which contains a small implementation enlisting the tokenizers or filter by name and the actual implementations in a Jar. The main gotcha is that implementation classes must implement Elasticsearch interfaces.   How far should we help users deploy their custom analyzer implementations :  \tbuild the plugin distro? \tcheck the presence of the named analyzers or components (which ES API)? \tchange Analyzerdef to adopt a string based name solution like Elasticsearch?","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2219?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-86001","commnet_date":"2016-11-14T01:43:24-0800","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 14\/Nov\/2016 01:43 AM    n        n        Continuing the discussion from n    n                n        n            n            HSEARCH-2417n        n                                                    Closed n             n (which is a duplicate): this issue will be addressed in 5.6.0-CR1 only if we have enough time. It's a low-priority issue for now. n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 14\/Nov\/2016 01:43 AM                      Continuing the discussion from n     n                 n         n             n            HSEARCH-2417n         n                                                     Closed n             n (which is a duplicate): this issue will be addressed in 5.6.0-CR1  only if we have enough time . It's a low-priority issue for now.              n        n    n"}]}},{"HSEARCH-2218":{"info":{"issue_title":"Propagate Store.YES as Elasticsearch &quot;Lucene storage&quot;","issue_key":"HSEARCH-2218","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Cannot Reproduce","issue_fix_version":"None","issue_component":"None","issue_labels":"elasticsearch","issue_description":"Elasticsearch stores the full document indexed as _SOURCE. One can use it to project fields even though they are not marked as Store.YES in Hibernate Search.\r\n But Elasticsearch also let people store the value of the field in Lucene itself (like Hibernate Search does). The reason is that it might be much faster to retrieve a small piece of stored info from Lucene vs loading the JSON document and filtering it out.  So we should map Hibernate Search Store.YES to the Elasticsearch's Lucene Store.YES.  That might be already done.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2218?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-76974","commnet_date":"2016-04-13T00:26:59-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 13\/Apr\/2016 00:26 AM    n        n        We already apply the store setting to the field mapping.nnStored fields are not yet used on the querying side, though. I.e. there we always go to the JSON, also if all projected values could be obtained from stored fields. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 13\/Apr\/2016 00:26 AM                      We already apply the store setting to the field mapping. nn Stored fields are not yet used on the querying side, though. I.e. there we always go to the JSON, also if all projected values could be obtained from stored fields.              n        n    n"},{"commnet_id":"comment-76975","commnet_date":"2016-04-13T00:42:11-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 13\/Apr\/2016 00:42 AM    n        n        OK, I've created n    n                n        n            n            HSEARCH-2220n        n                                                    Closed n             n to capture the latter. n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 13\/Apr\/2016 00:42 AM                      OK, I've created n     n                 n         n             n            HSEARCH-2220n         n                                                     Closed n             n to capture the latter.              n        n    n"}]}},{"HSEARCH-2214":{"info":{"issue_title":"Provide an option to wait for Elasticsearch status yellow rather than green","issue_key":"HSEARCH-2214","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"5.6.0.Alpha3","issue_component":"5.6.0.Alpha3","issue_labels":"5.6.0.Alpha3","issue_description":"Waiting for green is a bit aggressive especially for demos and other code level work. It requires to manually change in the configuration the replica numbers.\r\n David Pilato was mentioning that waiting for yellow might be good enough.  We probably should make it an option.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2214?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-76972","commnet_date":"2016-04-13T00:19:05-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 13\/Apr\/2016 00:19 AM    n        n        nIt requires to manually change in the configuration the replica numbers.nnIn which case is this change needed? Is your demo running with several nodes? n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 13\/Apr\/2016 00:19 AM                      n It requires to manually change in the configuration the replica numbers.  nn In which case is this change needed? Is your demo running with several nodes?              n        n    n"},{"commnet_id":"comment-76978","commnet_date":"2016-04-13T01:03:30-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 13\/Apr\/2016 01:03 AM    n        n        We spent 15 mins trying to understand why the dome would not run David's laptop. It turns out we have a timeout exception because his configuration was yellow. Simply because he has a config that accepts several nodes but only start them if he wants to make a point. n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 13\/Apr\/2016 01:03 AM                      We spent 15 mins trying to understand why the dome would not run David's laptop. It turns out we have a timeout exception because his configuration was yellow. Simply because he has a config that accepts several nodes but only start them if he wants to make a point.              n        n    n"},{"commnet_id":"comment-77049","commnet_date":"2016-04-18T09:45:38-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 18\/Apr\/2016 09:45 AM    n        n        Would it help if we made the timeout message better?nnI'm not sure why people would prefer to set an Hibernate Search specific property to workaround this, rather than fix the ES configuration to run on one node. Either way, a setting needs to be changed... n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 18\/Apr\/2016 09:45 AM                      Would it help if we made the timeout message better? nn I'm not sure why people would prefer to set an Hibernate Search specific property to workaround this, rather than fix the ES configuration to run on one node. Either way, a setting needs to be changed...              n        n    n"},{"commnet_id":"comment-77050","commnet_date":"2016-04-18T11:01:09-0700","commnet_user":"Guillaume Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Guillaume Smetn added a comment  - 18\/Apr\/2016 11:01 AM    n        n        FWIW, it's failing with the default Elasticsearch install (i.e. download, untar and run bin\/elasticsearch). We need to change it to yellow to get it work. n    n    n        n            Show  n            n                        n    n    n    n                nn       Guillaume Smetn added a comment  - 18\/Apr\/2016 11:01 AM                      FWIW, it's failing with the default Elasticsearch install (i.e. download, untar and run bin\/elasticsearch). We need to change it to yellow to get it work.              n        n    n"},{"commnet_id":"comment-77052","commnet_date":"2016-04-18T12:33:16-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 18\/Apr\/2016 12:33 PM    n        n        FWIW, it's failing with the default Elasticsearch install nI'm aware: I am using that too, and figured that the Maven plugin reconfigures ES to allow the singleton cluster when I had to debug it.nnMy doubt is just that either way, the user will have an error, and then will either already know how to reconfigure ES or google for it, and in each of these outcomes you'll likely end up reconfiguring ES.nnSo assuming that we fix n    n                n        n            n            HSEARCH-2213n        n                                                    Closed n             n I suspect having an ad-hoc option in Search is a bit redundant.nnN.B. for a quick demo you can also start ES from our project invoking:\r\nnmvn elasticsearch:run\r\nnThis must be run from the \/elasticsearch module. CTRL+C to terminate it. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 18\/Apr\/2016 12:33 PM                       FWIW, it's failing with the default Elasticsearch install   n I'm aware: I am using that too, and figured that the Maven plugin reconfigures ES to allow the singleton cluster when I had to debug it. nn My doubt is just that either way, the user will have an error, and then will either already know how to reconfigure ES or google for it, and in each of these outcomes you'll likely end up reconfiguring ES. nn So assuming that we fix n     n                 n         n             n            HSEARCH-2213n         n                                                     Closed n             n I suspect having an ad-hoc option in Search is a bit redundant. nn N.B. for a quick demo you can also start ES from our project invoking: n mvn elasticsearch:run  nThis must be run from the  \/elasticsearch  module. CTRL+C to terminate it.              n        n    n"},{"commnet_id":"comment-77061","commnet_date":"2016-04-19T02:36:08-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 19\/Apr\/2016 02:36 AM    n        n        Think about the case where you want to have 3 replicas of an index, but only 2 are available (as one of your nodes broke down). Do you want HSEARCH to do its thing (all requests can be satisfied, only the replication rules are not satisfied) or not? I.e. do you want HSEARCH to send writes to the index also if the replica count currently is not what you want, or do you want to be extra safe and wait for the full number of replicas. To distinguish these two, a setting in HSEARCH would make sense.nnI feel, working with yellow is good in most cases, esp. since the cluster can degrade from green to yellow any time at runtime, and we won't check or detect this after start-up. So I suggest to just change it so we only wait for yellow (log a warning if it's not green), and if there is user demand, we can still make it configurable down the road. But then we'd also have to think about what to do about degredation at runtime, i.e. should we regularly check and log errors then?nnThoughts? n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 19\/Apr\/2016 02:36 AM                      Think about the case where you want to have 3 replicas of an index, but only 2 are available (as one of your nodes broke down). Do you want HSEARCH to do its thing (all requests can be satisfied, only the replication rules are not satisfied) or not? I.e. do you want HSEARCH to send writes to the index also if the replica count currently is not what you want, or do you want to be extra safe and wait for the full number of replicas. To distinguish these two, a setting in HSEARCH would make sense. nn I feel, working with yellow is good in most cases, esp. since the cluster can degrade from green to yellow any time at runtime, and we won't check or detect this after start-up. So I suggest to just change it so we only wait for yellow (log a warning if it's not green), and if there is user demand, we can still make it configurable down the road. But then we'd also have to think about what to do about degredation at runtime, i.e. should we regularly check and log errors then? nn Thoughts?              n        n    n"},{"commnet_id":"comment-77066","commnet_date":"2016-04-19T10:43:33-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 19\/Apr\/2016 10:43 AM    n        n        No I disagree on considering \"yellow\" a sane default. If the cluster is yellow it's very possible that it's still starting and we should give it a chance to form... yes this is an edge case but for this specific edge you won't have to wait for many seconds, so it's just about being \"user friendly\" for people starting up a bunch of VMs (i.e. clouds).\r\nnYet if the cluster is \"yellow\" because something is really wrong, then allowing to write to it is as good as the unsafe-by-default on MongoDB which we've laughed about. I do agree that the user might be happy with writing on one replica only - definitely a valid scenario - but he\/she has plenty of configuration options to make this explicit in the Elasticsearch configuration (i.e. ES would report \"green\" in a more relaxed configuration).nn+1 to regularly check for the cluster health. I'm sure I already mentioned that this would be needed eventually.. it's way more complex though, as we've already started so what are we going to do with the changes? Sending runtime exceptions up seems not very nice.nnMy question still stands: why should I prefer reconfiguring an Hibernate Search property to \"write on yellow\" rather than reconfigure Elasticsearch?\r\nnFor example, if all you want is to start a demo you probably want to disable discovery altogether.. or you risk connecting to someone else on the conference wifi, or countless other issues.. not least, it will start faster.nnThis is a good \"demo configuration\" which I tuned myself: https:\/\/github.com\/hibernate\/hibernate-search\/blob\/master\/elasticsearch\/elasticsearchconfiguration\/elasticsearch.yml n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 19\/Apr\/2016 10:43 AM                      No I disagree on considering \"yellow\" a sane default. If the cluster is yellow it's very possible that it's still starting and we should give it a chance to form... yes this is an edge case but for this specific edge you won't have to wait for many seconds, so it's just about being \"user friendly\" for people starting up a bunch of VMs (i.e. clouds). nYet if the cluster is \"yellow\" because something is really wrong, then allowing to write to it is as good as the unsafe-by-default on MongoDB which we've laughed about. I do agree that the user might be happy with writing on one replica only - definitely a valid scenario - but he\/she has plenty of configuration options to make this explicit in the Elasticsearch configuration (i.e. ES would report \"green\" in a more relaxed configuration). nn +1 to regularly check for the cluster health. I'm sure I already mentioned that this would be needed eventually.. it's way more complex though, as we've already started so what are we going to do with the changes? Sending runtime exceptions up seems not very nice. nn My question still stands: why should I prefer reconfiguring an Hibernate Search property to \"write on yellow\" rather than reconfigure Elasticsearch? nFor example, if all you want is to start a demo you probably want to disable discovery altogether.. or you risk connecting to someone else on the conference wifi, or countless other issues.. not least, it will start faster. nn This is a good \"demo configuration\" which I tuned myself:  https:\/\/github.com\/hibernate\/hibernate-search\/blob\/master\/elasticsearch\/elasticsearchconfiguration\/elasticsearch.yml               n        n    n"}]}},{"HSEARCH-2213":{"info":{"issue_title":"Cryptic error when cluster is not green during index creation","issue_key":"HSEARCH-2213","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Blocker","issue_affects_version":"Fixed","issue_fix_version":"5.6.0.Alpha3","issue_component":"5.6.0.Alpha3","issue_labels":"5.6.0.Alpha3","issue_description":"We have a generic HSEARCH00007 error which says, request timeout.\r\n We should be more specific in case it fails for the index creation time out and offer as explanation that the cluster is red or yellow","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2213?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2212":{"info":{"issue_title":"Improve Elasticsearch integration documentation","issue_key":"HSEARCH-2212","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.6.0.Alpha3","issue_component":"5.6.0.Alpha3","issue_labels":"5.6.0.Alpha3","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2212?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1018":{"info":{"issue_title":"hibernate-search-orm is not optional if you have Hibernate Search on the class path","issue_key":"OGM-1018","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Rejected","issue_fix_version":"None","issue_component":"5.0.0.Final","issue_labels":"5.0.0.Final","issue_description":"See the forum discussion  We could clarify this in the documentation or, if possible, add a property to disable the integration with Hibernate Search.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1018?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-76947","commnet_date":"2016-04-12T04:46:17-0700","commnet_user":"Davide D&#39;Alto","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Davide D&#39;Alton added a comment  - 12\/Apr\/2016 04:46 AM    n        n        I'm not sure if this is really an issue, I've asked in the forum for more details about the user use-case n    n    n        n            Show  n            n                        n    n    n    n                nn       Davide D&#39;Alton added a comment  - 12\/Apr\/2016 04:46 AM                      I'm not sure if this is really an issue, I've asked in the forum for more details about the user use-case              n        n    n"},{"commnet_id":"comment-76982","commnet_date":"2016-04-13T05:01:42-0700","commnet_user":"Davide D&#39;Alto","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Davide D&#39;Alton added a comment  - 13\/Apr\/2016 05:01 AM    n        n        THe class not found is not an OGM class but a search one.nnMy bad. n    n    n        n            Show  n            n                        n    n    n    n                nn       Davide D&#39;Alton added a comment  - 13\/Apr\/2016 05:01 AM                      THe class not found is not an OGM class but a search one. nn My bad.              n        n    n"}]}},{"OGM-1017":{"info":{"issue_title":"Cassandra should store java.math.BigDecimal as decimal","issue_key":"OGM-1017","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.Final","issue_labels":"5.0.0.Final","issue_description":"According to the cassandra driver documentation BigDecimal shoud be store as decimal, right now we are storing it as text","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1017?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1016":{"info":{"issue_title":"Enable SSL for MongoDB","issue_key":"OGM-1016","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Rejected","issue_fix_version":"None","issue_component":"5.x","issue_labels":"5.x","issue_description":"Properties related to SSL are:     MongoClientOptions#sslEnabled(boolean )  MongoClientOptions#sslInvalidHostNameAllowed( boolean  )","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1016?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-76836","commnet_date":"2016-04-07T07:28:01-0700","commnet_user":"Davide D&#39;Alto","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Davide D&#39;Alton added a comment  - 07\/Apr\/2016 07:28 AM    n        n        This is already working n    n    n        n            Show  n            n                        n    n    n    n                nn       Davide D&#39;Alton added a comment  - 07\/Apr\/2016 07:28 AM                      This is already working              n        n    n"}]}},{"OGM-1015":{"info":{"issue_title":"Publish WildFly modules using a slot reflecting the version of OGM","issue_key":"OGM-1015","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Blocker","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.Final","issue_labels":"5.0.0.Final","issue_description":"We shouldn't be using the \"main\" slot but use slots which reflect the specific OGM version.  At best we can have a \"main\" alias.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1015?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10674":{"info":{"issue_title":"SessionFactoryObserver could use a sessionFactoryAboutToClose method","issue_key":"HHH-10674","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"5.0.9 ,                                            5.2.0","issue_component":"5.0.9 ,                                            5.2.0","issue_labels":"5.0.9","issue_description":"Currently the SessionFactory allows to listen for events about its creation and it being closed. The latter however only notifies the listener after it has already been closed.  For my use case I need a callback that is called before any actual resources are closed so I can cleanup objects that I want to bind to the lifecycle of the SessionFactory (and these require access to the database).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10674?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-76650","commnet_date":"2016-04-06T00:19:28-0700","commnet_user":"Martin Braun","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Martin Braunn added a comment  - 06\/Apr\/2016 00:19 AM     - edited  n        n        If it's possible, can this be added pre 6.0? n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Martin Braunn added a comment  - 06\/Apr\/2016 00:19 AM     - edited                    If it's possible, can this be added pre 6.0?              n        n    n"},{"commnet_id":"comment-77642","commnet_date":"2016-05-05T09:15:52-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 05\/May\/2016 09:15 AM    n        n        It is slated for 5.2 n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 05\/May\/2016 09:15 AM                      It is slated for 5.2              n        n    n"}]}},{"HHH-10673":{"info":{"issue_title":"Remove deprecated auditParents from @Audited","issue_key":"HHH-10673","issue_type":"Remove Feature","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"6.0.0.Alpha1","issue_labels":"6.0.0.Alpha1","issue_description":"Remove deprecated @Audited.auditParents property, deprecated as of 4.3.1.Final.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10673?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2204":{"info":{"issue_title":"Allow to plug in custom ObjectInitializer","issue_key":"HSEARCH-2204","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"Hibernate OGM MultiGetGridDialect allows to fetch several entities by id in one round-trip. It'd be beneficial if we could plug in a custom object initializer into HSEARCH which leverages that capability of grid dialects.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2204?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-76638","commnet_date":"2016-04-05T04:57:07-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 05\/Apr\/2016 04:57 AM    n        n        Good point, how did you notice this?nnI suspect the better way to implement this is to have Search use the new ORM's capability of \"multi-get\", and have OGM implement that operation effectively. Linking to n    n                n        n            n            HSEARCH-2088n        n                                                    Open n             n.nnN.B. Infinispan Query is already able to perform a multi-fetch; it doesn't use the hibernate-search-orm module though.n n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 05\/Apr\/2016 04:57 AM                      Good point, how did you notice this? nn I suspect the better way to implement this is to have Search use the new ORM's capability of \"multi-get\", and have OGM implement that operation effectively. Linking to n     n                 n         n             n            HSEARCH-2088n         n                                                     Open n             n. nn N.B. Infinispan Query is already able to perform a multi-fetch; it doesn't use the hibernate-search-orm module though. n             n        n    n"},{"commnet_id":"comment-76649","commnet_date":"2016-04-05T22:42:01-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Gunnar Morlingn added a comment  - 05\/Apr\/2016 22:42 PM     - edited  n        n        A user was asking about getTuple() requests being issued from a HSEARCH query instead of getTuples() although his dialect implements MultiGetGridDialect. I also had been contemplating this improvement long time ago and even believed I had filed an issue for it, but I couldn't find it.nnYes, using multi-get would be nice, we don't implement it in OGM yet. Should be straight forward to do. Nevertheless it'd be nice to have some freedom for custom object initializers, beyond the existing fixed impls. n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Gunnar Morlingn added a comment  - 05\/Apr\/2016 22:42 PM     - edited                    A user was asking about  getTuple()  requests being issued from a HSEARCH query instead of  getTuples()  although his dialect implements  MultiGetGridDialect . I also had been contemplating this improvement long time ago and even believed I had filed an issue for it, but I couldn't find it. nn Yes, using multi-get would be nice, we don't implement it in OGM yet. Should be straight forward to do. Nevertheless it'd be nice to have some freedom for custom object initializers, beyond the existing fixed impls.              n        n    n"},{"commnet_id":"comment-76731","commnet_date":"2016-04-06T03:19:17-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 06\/Apr\/2016 03:19 AM    n        n        Remember there's a tradeoff between giving away power and keeping things simple.nnI'm not thrilled about allowing to override object initializers w\/o a strong use case; not least this would probably have to expose several internals as API to allow people full flexibility.nnBuilding on multi-get seems a cool cleanup and leverage any optimisations ORM\/OGM might have, without additional things to learn for the end user. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 06\/Apr\/2016 03:19 AM                      Remember there's a tradeoff between giving away power and keeping things simple. nn I'm not thrilled about allowing to override object initializers w\/o a strong use case; not least this would probably have to expose several internals as API to allow people full flexibility. nn Building on multi-get seems a cool cleanup and leverage any optimisations ORM\/OGM might have, without additional things to learn for the end user.              n        n    n"}]}},{"OGM-1014":{"info":{"issue_title":"Let object initializer used with Hibernate Search use MultiGetGridDialect if possible","issue_key":"OGM-1014","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1014?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2203":{"info":{"issue_title":"Reduce memory consumption of EntityInfoImpl objects.","issue_key":"HSEARCH-2203","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta1","issue_labels":"5.6.0.Beta1","issue_description":"Every instance of EntityInfoImpl references a LinkedList which is used to store the indexes of the entity in the projection even when ProjectionConstants.THIS was not specified in the projection fields. This can be easily avoided. We can use a placeholder in the projection array which will be replaced later in the #populateWithEntityInstance-method.  Additionally the constructor of EntityInfoImpl makes a copy of the projected values array. This is not needed as the array was just created before the call to the constructor and the array is not modified after the call to the constructor.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2203?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-76545","commnet_date":"2016-04-04T12:21:05-0700","commnet_user":"Andrej Golovnin","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Andrej Golovninn added a comment  - 04\/Apr\/2016 12:21 PM    n        n        The pull request for this issue contains three bonuses:\r\nn1. It fixes a small possible NullPointerException in ElasticsearchHSQueryImpl which may occur when the FullTextQuery's projection has null as field name:\r\nn    FullTextQuery query = ....;\r\nn    query.setProjection(\"field1\", null, \"field2\");\r\nn2. DocumentExtractorImpl iterates over the projection to set values for projection fields defined in ProjectionConstants only when it is needed. In the current version of Hibernate Search it does it always.\r\nn3. The HasMap for the field \"DocumentExtractorImpl.targetedClasses\" is only created when it is needed. n    n    n        n            Show  n            n                        n    n    n    n                nn       Andrej Golovninn added a comment  - 04\/Apr\/2016 12:21 PM                      The pull request for this issue contains three bonuses: n1. It fixes a small possible NullPointerException in ElasticsearchHSQueryImpl which may occur when the FullTextQuery's projection has null as field name: n    FullTextQuery query = ....; n    query.setProjection(\"field1\", null, \"field2\"); n2. DocumentExtractorImpl iterates over the projection to set values for projection fields defined in ProjectionConstants only when it is needed. In the current version of Hibernate Search it does it always. n3. The HasMap for the field \"DocumentExtractorImpl.targetedClasses\" is only created when it is needed.              n        n    n"}]}},{"HHH-10669":{"info":{"issue_title":"Allow to add SF-scoped services through a ServiceContributor","issue_key":"HHH-10669","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.0","issue_labels":"5.2.0","issue_description":"Similar to standard services, services living in the session factory scoped service registry should be allowed to be added by means of a ServiceContributor.  Related discussion on hibernate-dev: http:\/\/lists.jboss.org\/pipermail\/hibernate-dev\/2016-April\/014634.html","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10669?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-77643","commnet_date":"2016-05-05T09:18:16-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 05\/May\/2016 09:18 AM    n        n        So this \"SessionFactoryServiceContributor\" would be discoverable as well as some means to explicitly specify them? n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 05\/May\/2016 09:18 AM                      So this \"SessionFactoryServiceContributor\" would be discoverable as well as some means to explicitly specify them?              n        n    n"},{"commnet_id":"comment-77649","commnet_date":"2016-05-05T14:09:19-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 05\/May\/2016 14:09 PM    n        n        https:\/\/github.com\/sebersole\/hibernate-core\/pull\/50 n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 05\/May\/2016 14:09 PM                       https:\/\/github.com\/sebersole\/hibernate-core\/pull\/50               n        n    n"},{"commnet_id":"comment-77731","commnet_date":"2016-05-06T01:29:13-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 06\/May\/2016 01:29 AM    n        n        For the purposes of OGM, discoverable would do the trick. Additionally being able to explicitly specify contributors wouldn't do harm, but we'd not need it right away. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 06\/May\/2016 01:29 AM                      For the purposes of OGM, discoverable would do the trick. Additionally being able to explicitly specify contributors wouldn't do harm, but we'd not need it right away.              n        n    n"}]}},{"HSEARCH-2202":{"info":{"issue_title":"Fix SearchIntegrator camel casing throughout the codebase","issue_key":"HSEARCH-2202","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta1","issue_labels":"5.6.0.Beta1","issue_description":"\"SearchIntegrator\" is sometimes spelled \"Searchintegrator\" in the comments and in a few method names.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2202?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2201":{"info":{"issue_title":"Fix assorted typos in comments","issue_key":"HSEARCH-2201","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta1","issue_labels":"5.6.0.Beta1","issue_description":"Duplicated \"the\" occurrences in the comments (and a few fixes around them).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2201?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2199":{"info":{"issue_title":"Allows the use of CharFilter in the programmatic API of SearchMapping","issue_key":"HSEARCH-2199","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.5.3.Final,                                            5.6.0.Beta1","issue_labels":"5.5.3.Final,                                            5.6.0.Beta1","issue_description":"@AnalyzerDef got extended with an option to define CharFilter, however, the programmatic API does not offer this capability yet.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2199?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-77043","commnet_date":"2016-04-18T06:49:26-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 18\/Apr\/2016 06:49 AM    n        n        Merged into master\/5.6. I'm seeing it's assigned to 5.5, too. That made me curious, what kinds of issues are meant to go into that version? I'd have expected bug fixes but I'm surprised to see new features, too. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 18\/Apr\/2016 06:49 AM                      Merged into master\/5.6. I'm seeing it's assigned to 5.5, too. That made me curious, what kinds of issues are meant to go into that version? I'd have expected bug fixes but I'm surprised to see new features, too.              n        n    n"},{"commnet_id":"comment-77044","commnet_date":"2016-04-18T06:59:26-0700","commnet_user":"Guillaume Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Guillaume Smetn added a comment  - 18\/Apr\/2016 06:59 AM    n        n        I let Hardy Ferentschik answer. He's the one who marked it that way. n    n    n        n            Show  n            n                        n    n    n    n                nn       Guillaume Smetn added a comment  - 18\/Apr\/2016 06:59 AM                      I let  Hardy Ferentschik  answer. He's the one who marked it that way.              n        n    n"},{"commnet_id":"comment-77045","commnet_date":"2016-04-18T07:29:56-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 18\/Apr\/2016 07:29 AM    n        n        +1 to backport, as I wouldn't consider it a new feature but rather something which we forgot to do n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 18\/Apr\/2016 07:29 AM                      +1 to backport, as I wouldn't consider it a new feature but rather something which we forgot to do              n        n    n"},{"commnet_id":"comment-77157","commnet_date":"2016-04-23T12:15:58-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 23\/Apr\/2016 12:15 PM    n        n        backported to 5.5: marking resolved. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 23\/Apr\/2016 12:15 PM                      backported to 5.5: marking resolved.              n        n    n"}]}},{"HHH-10668":{"info":{"issue_title":"Add SQL dialect for SQLite 3","issue_key":"HHH-10668","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"hibernate-core","issue_description":"SQLite type affinity and limited support for altering table means that hibernate.hbm2ddl.auto cannot be set to modify nor create (I seem to recall that FK constraints are added after tables).\r\n And when hibernate.hbm2ddl.auto is set to validate, Hibernate don't know that 'float', 'double', 'real' means the same thing for SQLite.\r\n Also, there is no date\/time datatype (See Time Strings). So a date can be stored in a column declared with text or float or integer or numeric affinity.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10668?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-76541","commnet_date":"2016-04-03T12:04:24-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 03\/Apr\/2016 12:04 PM    n        n        Thanks for the PR. I'll review it and merge it upstream. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 03\/Apr\/2016 12:04 PM                      Thanks for the PR. I'll review it and merge it upstream.              n        n    n"}]}},{"HHH-10665":{"info":{"issue_title":"Add tenant method: create per tenant a set of tables with tenant in the table name","issue_key":"HHH-10665","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"hibernate-core","issue_description":"To handle tenants you can having the next methods:  \tPer tenant a database \tPer tenant a schema \ta discriminator in each column of each table \tfor each tenant a set of tables: extend the table name with the tenant.    The first two are implemented, the third is not implemented yet but can be done with a query filter. However the fourth is not mention yet, however, this option has advantages. When a table grows large the performance will decrease, so when one of your 100 tenants has a lot of data he should suffer not the small ones.   The other advantage is that when a company wants its data, you can easily give it to that company (tenant).  see https:\/\/forum.hibernate.org\/viewtopic.php?f=1&amp;t=1043114","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10665?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-76645","commnet_date":"2016-04-05T17:14:49-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 05\/Apr\/2016 17:14 PM    n        n        The implementation of this will get ugly.  To implement this, each persister implementation needs to become tenant-aware and build all of the SQL statements it currently builds x each tenant. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 05\/Apr\/2016 17:14 PM                      The implementation of this will get ugly.  To implement this, each persister implementation needs to become tenant-aware and build all of the SQL statements it currently builds x each tenant.              n        n    n"},{"commnet_id":"comment-76647","commnet_date":"2016-04-05T22:23:20-0700","commnet_user":"Dirk Gerrit Oort","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Dirk Gerrit Oortn added a comment  - 05\/Apr\/2016 22:23 PM    n        n        Will it be ugly? Why not introduce a interface or interceptor that can be put in the properties, and let the user deal with this. You did it with the database per tenant why not here. The user of hibernate is then in control to implement this. nnSomething like:nnString getTableName(String tableNameByHibernate);nnThe things I expect from hibernate that this is save in every code path for instance in query caches.nnAnd adding this tenant solution, will make the tenant solution of hibernate more complete. n n    n    n        n            Show  n            n                        n    n    n    n                nn       Dirk Gerrit Oortn added a comment  - 05\/Apr\/2016 22:23 PM                      Will it be ugly? Why not introduce a interface or interceptor that can be put in the properties, and let the user deal with this. You did it with the database per tenant why not here. The user of hibernate is then in control to implement this.  nn Something like: nn String getTableName(String tableNameByHibernate); nn The things I expect from hibernate that this is save in every code path for instance in query caches. nn And adding this tenant solution, will make the tenant solution of hibernate more complete.  n             n        n    n"}]}},{"HSEARCH-2197":{"info":{"issue_title":"Loading of search results produces useless garbage.","issue_key":"HSEARCH-2197","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta1","issue_labels":"5.6.0.Beta1","issue_description":"The signature of the Loader.load(EntityInfo...) and ObjectInitializer.initializeObjects(EntityInfo[] entityInfos, LinkedHashMap&lt;EntityInfoLoadKey, Object&gt; idToObjectMap, ObjectInitializationContext objectInitializationContext) methods in the package org.hibernate.search.query.hibernate.impl should be changed from accepting an array of EntityInfos to accepting a list. In all cases where this methods are called we first create a temporary list of EntityInfos and then convert this list to an array just to call this methods.\r\n Changing the signature would allow us to avoid creation of temporary arrays.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2197?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10657":{"info":{"issue_title":"Make &#39;none&#39; a valid option for hibernate.hbm2ddl.auto","issue_key":"HHH-10657","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.1","issue_labels":"5.1.1","issue_description":"I'd like to add \"none\" as a valid value for the `hibernate.hbm2ddl.auto` configuration property,\r\n so to make it easier when making replacements in configuration files via placeholders (i.e.  $ {schema-ops} ); The \"none\" value was widely used in literature in the past and just happened to work as a non-recognized option was having the desired effect, but since recently a warning is being logged for unrecognized values.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10657?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10655":{"info":{"issue_title":"PostgreSQL CROSS JOIN DELETE","issue_key":"HHH-10655","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"4.3.11","issue_component":"4.3.11","issue_labels":"4.3.11","issue_description":"I have two tables in PostgreSQL.\r\n When I use HQL    DELETE  FROM  AccessTokenVO at WHERE  at.authentication.hash = :hash     for deleting, Hibernate produce:    2016-03-29 13:14:56.514 [http-nio-8200-exec-1] DEBUG org.hibernate.SQL - delete from a_access_token cross join a_authentication authentica1_ where hash=?    2016-03-29 13:14:56.514 [http-nio-8200-exec-1] TRACE o.h.type.descriptor.sql.BasicBinder - binding parameter [1] as [VARCHAR] - [3cb3d8f75e7560cfbfe1013f0a16f975]    which raise syntax exception in PostgreSQL near \"cross\".\r\n Cross joins are not supported on delete operation.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10655?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-76311","commnet_date":"2016-03-29T05:11:06-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 29\/Mar\/2016 05:11 AM    n        n        I think it's much more efficient to do the deletion like this:nnnrnDELETE FROM AccessTokenVOrnWHERE id IN (rn    SELECT at.id rn    FROM AccessTokenVO atrn    JOIN at.authentication trn    WHERE t.hash = :hashrn)rnn n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 29\/Mar\/2016 05:11 AM                      I think it's much more efficient to do the deletion like this: nn  n rnDELETE FROM AccessTokenVOrnWHERE id IN (rn    SELECT at.id rn    FROM AccessTokenVO atrn    JOIN at.authentication trn    WHERE t.hash = :hashrn)rn n               n        n    n"},{"commnet_id":"comment-76312","commnet_date":"2016-03-29T05:36:28-0700","commnet_user":"Libor Ondruu0161ek","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Libor Ondruu0161ekn added a comment  - 29\/Mar\/2016 05:36 AM    n        n        OK but this is not solution. n    n    n        n            Show  n            n                        n    n    n    n                nn       Libor Ondruu0161ekn added a comment  - 29\/Mar\/2016 05:36 AM                      OK but this is not solution.              n        n    n"},{"commnet_id":"comment-76313","commnet_date":"2016-03-29T05:41:58-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 29\/Mar\/2016 05:41 AM    n        n        It's not a solution to this issue indeed. But it's a workaround that I think it's much more efficient. You could compare the execution plans and see which one performs better. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 29\/Mar\/2016 05:41 AM                      It's not a solution to this issue indeed. But it's a workaround that I think it's much more efficient. You could compare the execution plans and see which one performs better.              n        n    n"},{"commnet_id":"comment-76314","commnet_date":"2016-03-29T05:44:11-0700","commnet_user":"Libor Ondruu0161ek","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Libor Ondruu0161ekn added a comment  - 29\/Mar\/2016 05:44 AM    n        n        OK. I agree but I reported issue in Hibernate dialect not in my approach. n    n    n        n            Show  n            n                        n    n    n    n                nn       Libor Ondruu0161ekn added a comment  - 29\/Mar\/2016 05:44 AM                      OK. I agree but I reported issue in Hibernate dialect not in my approach.              n        n    n"},{"commnet_id":"comment-76315","commnet_date":"2016-03-29T05:50:12-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 29\/Mar\/2016 05:50 AM    n        n        True. Thanks for adding the issue. I was just trying to give you a tip. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 29\/Mar\/2016 05:50 AM                      True. Thanks for adding the issue. I was just trying to give you a tip.              n        n    n"},{"commnet_id":"comment-76317","commnet_date":"2016-03-29T13:06:53-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 29\/Mar\/2016 13:06 PM    n        n        Please create a pull request with an update to org.hibernate.test.hql.BulkManipulationTest that reproduces your issue.nnIt looks like a PostgreSQL dialect should override Dialect#getCrossJoinSeparator to return \", \", although the query still would not work for a delete statement.nnI'm changing this to an improvement because Hibernate would need to translate the implicit join in the WHERE clause to a subquery when used in a DELETE statement.nnSteve Ebersole, would this sort of query be handled properly by the SQM work? n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 29\/Mar\/2016 13:06 PM                      Please create a pull request with an update to org.hibernate.test.hql.BulkManipulationTest that reproduces your issue. nn It looks like a PostgreSQL dialect should override  Dialect#getCrossJoinSeparator  to return \", \", although the query still would not work for a delete statement. nn I'm changing this to an improvement because Hibernate would need to translate the implicit join in the WHERE clause to a subquery when used in a DELETE statement. nn  Steve Ebersole , would this sort of query be handled properly by the SQM work?              n        n    n"},{"commnet_id":"comment-76318","commnet_date":"2016-03-29T14:32:45-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 29\/Mar\/2016 14:32 PM    n        n        Well I think the first question is whether we actually want to even do this.  nnBut certainly if we decide to not do this, then at least there should be a better error than relying a SQLException from the driver.   n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 29\/Mar\/2016 14:32 PM                      Well I think the first question is whether we actually want to even do this.   nn But certainly if we decide to not do this, then at least there should be a better error than relying a SQLException from the driver.                n        n    n"}]}},{"HHH-10654":{"info":{"issue_title":"LockOptions.SKIP_LOCKED semantics implementation on MSSQL","issue_key":"HHH-10654","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"4.3.11","issue_component":"4.3.11","issue_labels":"4.3.11","issue_description":"I tried to use LockOptions with LockOptions.SKIP_LOCKED as a timeout value on MSSQL with Hibernate 4.3.11 but it seems it was ignored.  As far as I checked, it is possible to have SKIP_LOCKED semantics with MSSQL using READPAST hint (see also https:\/\/msdn.microsoft.com\/en-us\/library\/ms187373.aspx), for example:     select        top 1 *   from  my_table with (rowlock, updlock, readpast);      Will return a first not locked row in my_table and will lock it at the same time.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10654?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-76288","commnet_date":"2016-03-28T23:46:43-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 28\/Mar\/2016 23:46 PM    n        n        Thanks for adding the issue. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 28\/Mar\/2016 23:46 PM                      Thanks for adding the issue.              n        n    n"}]}},{"OGM-1006":{"info":{"issue_title":"Support the MassIndexer for Neo4j embedded on Wildfly","issue_key":"OGM-1006","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0.Beta1","issue_labels":"5.1.0.Beta1","issue_description":"Currently the Massindexer for Hibernate Search doesn't work when using Neo4J;\r\n this is documented as a known limitation as Neo4J uses an incompatible version of Lucene,\r\n but at least when running in WildFly we could make sure the extension implementing the Massindexer override is properly isolated.  This could benefit Neo4J\/Remote too, as in this case there's no clash with Lucene even in a flat classpath.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1006?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1004":{"info":{"issue_title":"Build is failing because of JavaDoc","issue_key":"OGM-1004","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.CR1","issue_labels":"5.0.0.CR1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1004?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-1003":{"info":{"issue_title":"Add license header to make file in Redis backend","issue_key":"OGM-1003","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.CR1","issue_labels":"5.0.0.CR1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1003?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-76246","commnet_date":"2016-03-24T05:24:56-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 24\/Mar\/2016 05:24 AM    n        n        Hey Mark Paluch, I've merged the original PR to get it into the next CR. Can you send a separate PR for the license header in the make file? As discussed, I'd like eventually move to a different set-up, ideally Docker-based, but that's a separate issue. Thanks! n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 24\/Mar\/2016 05:24 AM                      Hey  Mark Paluch , I've merged the original PR to get it into the next CR. Can you send a separate PR for the license header in the make file? As discussed, I'd like eventually move to a different set-up, ideally Docker-based, but that's a separate issue. Thanks!              n        n    n"},{"commnet_id":"comment-76250","commnet_date":"2016-03-24T06:06:37-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 24\/Mar\/2016 06:06 AM    n        n        Hey Davide D'Alto, Mark plans to send a PR for this soon, so if you haven't started with releasing yet, that one would be nice to have. Otherwise it's good for the Final, too. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 24\/Mar\/2016 06:06 AM                      Hey  Davide D'Alto , Mark plans to send a PR for this soon, so if you haven't started with releasing yet, that one would be nice to have. Otherwise it's good for the Final, too.              n        n    n"},{"commnet_id":"comment-76252","commnet_date":"2016-03-24T06:34:24-0700","commnet_user":"Davide D&#39;Alto","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Davide D&#39;Alton added a comment  - 24\/Mar\/2016 06:34 AM    n        n        I haven't started yet. I'll include it n    n    n        n            Show  n            n                        n    n    n    n                nn       Davide D&#39;Alton added a comment  - 24\/Mar\/2016 06:34 AM                      I haven't started yet. I'll include it              n        n    n"}]}},{"OGM-1000":{"info":{"issue_title":"ScenicDrive","issue_key":"OGM-1000","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-1000?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-77565","commnet_date":"2016-05-05T00:37:24-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 05\/May\/2016 00:37 AM    n        n        PoC is developed at https:\/\/github.com\/gunnarmorling\/scenicview-mvp n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 05\/May\/2016 00:37 AM                      PoC is developed at  https:\/\/github.com\/gunnarmorling\/scenicview-mvp               n        n    n"}]}},{"OGM-999":{"info":{"issue_title":"Write integration test where OGM is used with an EAR","issue_key":"OGM-999","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.x","issue_labels":"5.x","issue_description":"All our integration tests are suing a WAR. We should make sure the everything works with EAR as well.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-999?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2192":{"info":{"issue_title":"Implement Highlighting for Elasticsearch backend","issue_key":"HSEARCH-2192","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.6.0.Alpha3","issue_component":"5.6.0.Alpha3","issue_labels":"5.6.0.Alpha3","issue_description":"Need a way to implement highlighting search results much like the native Lucene backend when using the Elasticsearch backend.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2192?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2191":{"info":{"issue_title":"Make Hibernate Search Modules a valid Wildfly Feature pack file.","issue_key":"HSEARCH-2191","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.7","issue_labels":"5.7","issue_description":"The Hibernate Search Modules ZIP&#91;1&#93;   should be a valid Wildfly Feature Pack&#91;2&#93; . This means changing the internal modules structures to start with \/modules\/system\/layers\/base\/ or \/modules\/add-ons\/hibernate-search\/  &#91;1&#93;  https:\/\/sourceforge.net\/projects\/hibernate\/files\/hibernate-search\/5.6.0.Alpha3\/hibernate-search-modules-5.6.0.Alpha3-wildfly-10-dist.zip\/download  &#91;2&#93;  https:\/\/developer.jboss.org\/wiki\/WildflyBuildProcess","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2191?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-76140","commnet_date":"2016-03-21T10:57:22-0700","commnet_user":"George Gastaldi","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       George Gastaldin added a comment  - 21\/Mar\/2016 10:57 AM    n        n        Looks like I managed to bypass the need for a feature pack.nnHowever, the version used in the Hibernate Search fraction will be the same as the one bundled in Wildfly Swarm.\r\nnFeel free to close this issue if that works for you.nnThanks! n    n    n        n            Show  n            n                        n    n    n    n                nn       George Gastaldin added a comment  - 21\/Mar\/2016 10:57 AM                      Looks like I managed to bypass the need for a feature pack. nn However, the version used in the Hibernate Search fraction will be the same as the one bundled in Wildfly Swarm. nFeel free to close this issue if that works for you. nn Thanks!              n        n    n"},{"commnet_id":"comment-76159","commnet_date":"2016-03-22T05:23:32-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 22\/Mar\/2016 05:23 AM    n        n        It seems like we keep going in circles about \"feature pack\". I initially thought - and I think the name suggests it - that people can use a \"feature pack\" to add a new feature to the container.nnBut the WildFly team means a different thing with it: a feature pack is something to be added to WildFly ad build time , i.e. it requires to rebuild the application server from sources to include it.nnWe do want to make it easier for people to use a different version of Hibernate Search, for example to use our latest releases without having to wait for the next generation WildFly is released, but it seems the \"feature pack\" notion is not useful for this purpose, so we release a zip file which actually is able to \"layer\" on top of latest WildFly:nnthttp:\/\/docs.jboss.org\/hibernate\/search\/5.6\/reference\/en-US\/html_single\/#_update_and_activate_latest_hibernate_search_version_in_wildflynnnnUnless the definition of \"feature pack\" evolved further, I don't see why we should make a feature pack in that strict sense, as Hibernate Search is already included during build time.nnI'd be happy to evolve this further if WildFly Swarm requires us to make changes, but we'd need the WildFly team to give some hints about this. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 22\/Mar\/2016 05:23 AM                      It seems like we keep going in circles about \"feature pack\". I initially thought - and I think the name suggests it - that people can use a \"feature pack\" to add a new feature to the container. nn But the WildFly team means a different thing with it: a feature pack is something to be added to WildFly ad  build time  , i.e. it requires to rebuild the application server from sources to include it. nn We do want to make it easier for people to use a different version of Hibernate Search, for example to use our latest releases without having to wait for the next generation WildFly is released, but it seems the \"feature pack\" notion is not useful for this purpose, so we release a zip file which actually is able to \"layer\" on top of latest WildFly: n nt  http:\/\/docs.jboss.org\/hibernate\/search\/5.6\/reference\/en-US\/html_single\/#_update_and_activate_latest_hibernate_search_version_in_wildfly  n nnn Unless the definition of \"feature pack\" evolved further, I don't see why we should make a feature pack in that strict sense, as Hibernate Search is already included during build time. nn I'd be happy to evolve this further if WildFly Swarm requires us to make changes, but we'd need the WildFly team to give some hints about this.              n        n    n"},{"commnet_id":"comment-76160","commnet_date":"2016-03-22T06:36:18-0700","commnet_user":"George Gastaldi","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       George Gastaldin added a comment  - 22\/Mar\/2016 06:36 AM    n        n        Although the Swarm team have a strict policy of using the library versions that are bundled with Wildfly, nothing prevents a contributor from creating a custom fraction that bundles a newer version of a library. However, for that to happen, it's necessary to have a feature pack ZIP, as the wildfly-swarm-plugin requires it. The feature pack behaves exactly as your ZIP right now, however in a different structure (as the PR illustrates) . nnWould it make sense to keep building the ZIP file as you do now AND the feature pack ZIP for Swarm? nnI am also looking forward to hearing from the Wildfly team if the feature pack can be used to update the core libraries. n    n    n        n            Show  n            n                        n    n    n    n                nn       George Gastaldin added a comment  - 22\/Mar\/2016 06:36 AM                      Although the Swarm team have a strict policy of using the library versions that are bundled with Wildfly, nothing prevents a contributor from creating a custom fraction that bundles a newer version of a library. However, for that to happen, it's necessary to have a feature pack ZIP, as the  wildfly-swarm-plugin  requires it. The feature pack behaves exactly as your ZIP right now, however in a different structure (as the PR illustrates) .  nn Would it make sense to keep building the ZIP file as you do now AND the feature pack ZIP for Swarm?  nn I am also looking forward to hearing from the Wildfly team if the feature pack can be used to update the core libraries.              n        n    n"},{"commnet_id":"comment-76161","commnet_date":"2016-03-22T06:49:14-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Sanne Grinoveron added a comment  - 22\/Mar\/2016 06:49 AM     - edited  n        n        Would it make sense to keep building the ZIP file as you do now AND the feature pack ZIP for Swarm?nnWe could do that.\r\nnI hope we can make sure the overall structure is identical to our other modules, or generated in a similar enough way to not have to repeat integration tests on various combinations.nnI'll keep this open in wait for clarifications and\/or wishes from the WildFly team and Emmanuel BernardnnAlthough the Swarm team have a strict policy ...nThat might be the answer already.. n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Sanne Grinoveron added a comment  - 22\/Mar\/2016 06:49 AM     - edited                     Would it make sense to keep building the ZIP file as you do now AND the feature pack ZIP for Swarm?  nn We could do that. nI hope we can make sure the overall structure is identical to our other modules, or generated in a similar enough way to not have to repeat integration tests on various combinations. nn I'll keep this open in wait for clarifications and\/or wishes from the WildFly team and  Emmanuel Bernard  nn  Although the Swarm team have a strict policy ...  n That might be the answer already..              n        n    n"},{"commnet_id":"comment-76164","commnet_date":"2016-03-22T11:09:47-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 22\/Mar\/2016 11:09 AM    n        n        I don't have any strong opinion, it looks like a light enough work add-on. n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 22\/Mar\/2016 11:09 AM                      I don't have any strong opinion, it looks like a light enough work add-on.              n        n    n"}]}},{"HSEARCH-2190":{"info":{"issue_title":"Document tested ES versions","issue_key":"HSEARCH-2190","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Out of Date","issue_fix_version":"None","issue_component":"None","issue_labels":"documentation,                                            elasticsearch","issue_description":"While we should not depend on specific versions of ES, we should document the one(s) used for testing and thus known to work.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2190?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-86914","commnet_date":"2016-12-02T09:05:22-0800","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 02\/Dec\/2016 09:05 AM    n        n        We have a note looking like that in the documentation:nnnrnHibernate Search expects an Elasticsearch node version 2.0 at least. 5.0 is not supported yet.rnHibernate Search internal tests run against Elasticsearch {testElasticsearchVersion}.rnnnntestElasticsearchVersion being the one tested against when releasing.nnI think we can close this ticket. Sanne Grinovero ok with that?  n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 02\/Dec\/2016 09:05 AM                      We have a note looking like that in the documentation: nn  n rnHibernate Search expects an Elasticsearch node version 2.0 at least. 5.0 is not supported yet.rnHibernate Search internal tests run against Elasticsearch {testElasticsearchVersion}.rn n  nn  testElasticsearchVersion  being the one tested against when releasing. nn I think we can close this ticket.  Sanne Grinovero  ok with that?               n        n    n"}]}},{"OGM-998":{"info":{"issue_title":"Revisit composite key serialization","issue_key":"OGM-998","issue_type":"Improvement","issue_status":"In Progress","issue_priority":"In Progress","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"redis","issue_description":"The Redis module implements two strategies for key serialization depending on the number of entity key columns:   \tSingle key: Plain usage of the key value within the entity key representation  MyTable:1234  \tComposite key: Serialize key\/value tuples to JSON and use the JSON string as part of the entity key    MyTable.{\"key1\" :\"keyvalue1\" ,\"key2\" :\"keyvalue2\" }      While the first strategy is fine, the second strategy raises some issues:   \tIt's hard to read \tRedis Cluster uses hash tagging and uses the value between the curly braces  {...}  to calculate the hash tag    We should rethink the second strategy and maybe apply a similar pattern to the CouchDB implementation.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-998?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-82438","commnet_date":"2016-08-11T08:32:21-0700","commnet_user":"Mark Paluch","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Mark Paluchn added a comment  - 11\/Aug\/2016 08:32 AM    n        n        The usual approach to composite Redis keys is namespacing by using a structured key and some separators. A possible key could look like:nnIndexedNews:author:titlennThe syntax is: TableName COLON KeyPart1 COLON KeyPart2 [ COLON KeyPartN ... ]nnKey parts are separated by a colon (:) and colons inside the key parts can be escaped (:). By reversing the process, we can parse the key into its components. Assume we have a key author=the:author and title=mytitle so the resulting key would be represented as:nnIndexedNews:the:author:mytitlennLet's take that example to the next level with a composite key of author=theauthor (hint: trailing backslash) and title=mytitlennIndexedNews:theauthor:mytitlennA trailing backslash introduces ambiguity about escaping. It's no longer possible to tell the key parts apart.nnGunnar Morling Guillaume Smet any thoughts from your side? n    n    n        n            Show  n            n                        n    n    n    n                nn       Mark Paluchn added a comment  - 11\/Aug\/2016 08:32 AM                      The usual approach to composite Redis keys is namespacing by using a structured key and some separators. A possible key could look like: nn  IndexedNews:author:title  nn The syntax is:  TableName   COLON   KeyPart1   COLON   KeyPart2  [  COLON   KeyPartN  ... ] nn Key parts are separated by a colon ( : ) and colons inside the key parts can be escaped ( : ). By reversing the process, we can parse the key into its components. Assume we have a key  author=the:author  and  title=mytitle  so the resulting key would be represented as: nn  IndexedNews:the:author:mytitle  nn Let's take that example to the next level with a composite key of  author=theauthor  (hint: trailing backslash) and  title=mytitle  nn  IndexedNews:theauthor:mytitle  nn A trailing backslash introduces ambiguity about escaping. It's no longer possible to tell the key parts apart. nn  Gunnar Morling   Guillaume Smet  any thoughts from your side?              n        n    n"}]}},{"HHH-10630":{"info":{"issue_title":"Throw an exception when a mapped superclass is queried","issue_key":"HHH-10630","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"5.0.8","issue_component":"5.0.8","issue_labels":"5.0.8","issue_description":"The attached test case works, giving the SQL:  select concrete2x0_.entityId as col_0_0_ from CON2 concrete2x0_ order by concrete2x0_.entityId ASC  select concrete1x0_.entityId as col_0_0_ from CON1 concrete1x0_ order by concrete1x0_.entityId ASC  and a warning: HHH000180: FirstResult\/maxResults specified on polymorphic query; applying in memory!  Limits are not specified in the test case, regardless, this can be done in the database as:  (select entityId from CON2\r\n union all\r\n select entityId from CON1)\r\n order by entityId ASC  And even with limits and sort conditions it can be done as:  select * from (\r\n (select * from (select entityId from CON2 order by entityId ASC) where rownum &lt;= 10)\r\n UNION ALL\r\n (select * from (select entityId from CON1 order by entityId ASC) where rownum &lt;= 10)\r\n ) where rownum &lt;= 10 order by entityId ASC  and also more generally with LIMIT and more sort columns, I believe.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10630?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-76144","commnet_date":"2016-03-21T16:12:47-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 21\/Mar\/2016 16:12 PM    n        n        Your test case does limit the number of results with: queri.setMaxResults(10). When that line is commented out, the warning is not logged.nnMore importantly, your named query is on a class that is a mapped superclass.nnJPA 2.1, 2.11.2 Mapped Superclasses, says:nn\"A  mapped  superclass,  unlike  an  entity,  is  not  queryable  and  must  not  be  passed  as  an  argument  to\r\nnEntityManager or Query operations.\"nnHibernate should throw an exception in this case. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 21\/Mar\/2016 16:12 PM                      Your test case does limit the number of results with:  queri.setMaxResults(10) . When that line is commented out, the warning is not logged. nn More importantly, your named query is on a class that is a mapped superclass. nn JPA 2.1, 2.11.2 Mapped Superclasses, says: nn \"A  mapped  superclass,  unlike  an  entity,  is  not  queryable  and  must  not  be  passed  as  an  argument  to nEntityManager or Query operations.\" nn Hibernate should throw an exception in this case.              n        n    n"},{"commnet_id":"comment-76156","commnet_date":"2016-03-22T02:53:00-0700","commnet_user":"Nikolas Andersen","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Nikolas Andersenn added a comment  - 22\/Mar\/2016 02:53 AM    n        n        Ah, OK. In that case, how about this as an enhancement, as it seems almost supported already?\r\nnThe sorting\/limiting can be done fully in the database and it fits the concept of mapping object hierarchies to relational tables.nnAlternatively, how would I query a hierarchy of objects in Hibernate as, unless I am mistaken, I can't guarantee to query a single concrete type under a mapped superclass unless it has either a supertype or a subtype (n    n                n        n            n            HHH-10628n        n                                                    Closed n             n)?nnnBasically I need to be able to either: nnntReturn results from multiple tables with the combined result sorted by a common column (on the abstract supertype) and limited.nnnnor nnntReturn ordered\/limited results for each concrete type in the hierarchy individually.nnnnnThank you! n    n    n        n            Show  n            n                        n    n    n    n                nn       Nikolas Andersenn added a comment  - 22\/Mar\/2016 02:53 AM                      Ah, OK. In that case, how about this as an enhancement, as it seems almost supported already? nThe sorting\/limiting can be done fully in the database and it fits the concept of mapping object hierarchies to relational tables. nn Alternatively, how would I query a hierarchy of objects in Hibernate as, unless I am mistaken, I can't guarantee to query a single concrete type under a mapped superclass unless it has either a supertype or a subtype (n     n                 n         n             n            HHH-10628n         n                                                     Closed n             n)? nnn Basically I need to be able to either:  nn nt Return results from multiple tables with the combined result sorted by a common column (on the abstract supertype) and limited. n nnn or  nn nt Return ordered\/limited results for each concrete type in the hierarchy individually. n nnnn Thank you!              n        n    n"}]}},{"HHH-10627":{"info":{"issue_title":"adding info level logging into AbstractEntityManagerImpl  before calling markAsRollback() method","issue_key":"HHH-10627","issue_type":"Improvement","issue_status":"Awaiting Response","issue_priority":"Awaiting Response","issue_resolution":"Trivial","issue_affects_version":"Unresolved","issue_fix_version":"5.0.0.CR3","issue_component":"5.0.0.CR3","issue_labels":"5.0.0.CR3","issue_description":"When an exception is being rolled back for the reason of a nested transient object, Hinbernate does not log it. it is better to include a logging in the  Class org.hibernate.ejb.AbstractEntityManagerImpl   \r\n line 1378 before calling the method  markAsRollback();   so that the trouble shooting for such and exception can be found such as   LOG.warn(e.getMessage()); or LOG.inf(e.getMessage());","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10627?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-76093","commnet_date":"2016-03-18T14:42:21-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 18\/Mar\/2016 14:42 PM    n        n        There will not be any more 4.2 releases and 4.3 is no longer supported. Is this still an issue in 5.0.9? n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 18\/Mar\/2016 14:42 PM                      There will not be any more 4.2 releases and 4.3 is no longer supported. Is this still an issue in 5.0.9?              n        n    n"},{"commnet_id":"comment-76095","commnet_date":"2016-03-19T04:19:19-0700","commnet_user":"Alan Mehio","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Alan Mehion added a comment  - 19\/Mar\/2016 04:19 AM    n        n        I will check the source code for 5.0.9 and see if this has been added. \r\nnThanks for getting back to me. nnRegards,\r\nnAlan Mehio\r\nnLondon, UK n    n    n        n            Show  n            n                        n    n    n    n                nn       Alan Mehion added a comment  - 19\/Mar\/2016 04:19 AM                      I will check the source code for 5.0.9 and see if this has been added.  nThanks for getting back to me.  nn Regards, nAlan Mehio nLondon, UK              n        n    n"},{"commnet_id":"comment-76100","commnet_date":"2016-03-20T06:26:33-0700","commnet_user":"Alan Mehio","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Alan Mehion added a comment  - 20\/Mar\/2016 06:26 AM    n        n        I have found it in the the   5.0.0.CR3    \r\nnhttp:\/\/grepcode.com\/file\/repo1.maven.org\/maven2\/org.hibernate\/hibernate-entitymanager\/5.0.0.CR3\/org\/hibernate\/jpa\/spi\/AbstractEntityManagerImpl.java#AbstractEntityManagerImplnnIt seems this org.hibernate.ejb.AbstractEntityManagerImpl  was deprecated and replaced by the  org.hibernate.jpa.spi.AbstractEntityManagerImplnnin the above link the line 1682 to 1690 still the same issue or lack of  high lightning of the cause. nnHope this could helpnnRegards,\r\nnAlan Mehio\r\nnLondon n    n    n        n            Show  n            n                        n    n    n    n                nn       Alan Mehion added a comment  - 20\/Mar\/2016 06:26 AM                      I have found it in the the   5.0.0.CR3     n http:\/\/grepcode.com\/file\/repo1.maven.org\/maven2\/org.hibernate\/hibernate-entitymanager\/5.0.0.CR3\/org\/hibernate\/jpa\/spi\/AbstractEntityManagerImpl.java#AbstractEntityManagerImpl  nn It seems this org.hibernate.ejb.AbstractEntityManagerImpl  was deprecated and replaced by the  org.hibernate.jpa.spi.AbstractEntityManagerImpl nn in the above link the line 1682 to 1690 still the same issue or lack of  high lightning of the cause.  nn Hope this could help nn Regards, nAlan Mehio nLondon              n        n    n"}]}},{"HHH-10625":{"info":{"issue_title":"Not possible to add a where clause to a query that check if a tuple is in a tuple list :parameter","issue_key":"HHH-10625","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"hibernate-core","issue_description":"This issue looks the same as \r\n https:\/\/hibernate.atlassian.net\/browse\/HHH-10226\r\n but I'm getting a different error :\r\n Caused by: org.postgresql.util.PSQLException: ERROR: operator does not exist: record = bytea\r\n   Hint: No operator matches the given name and argument type(s). You might need to add explicit type casts.  The test case is the same:   {{\tString queryTest = \"select customer from CustomerEntity customer where (customer.fistname, customer.lastname) in (:pairsList)\";\r\n List&lt;Object[]&gt; values = new ArrayList&lt;&gt;();\r\n values.add(new Object[] {\"firstname1\", \"lastname1\"} );\r\n values.add(new Object[] {\"firstname2\", \"lastname2\"} );\r\n Query q = em.createQuery(queryTest);\r\n q.setParameter(\"pairsList\", values);\r\n return q.getResultList();}}   If I change the query to\r\n  String queryTest = \"select customer from CustomerEntity customer where (customer.fistname, customer.lastname) in (('a','b'), ('c','d'))\";\r\n it works, but it is not dynamic.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10625?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-76074","commnet_date":"2016-03-17T11:40:28-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 17\/Mar\/2016 11:40 AM    n        n        We are no longer maintaining 4.3. Does this happen with 5.0.9? If so, please create a pull request with a test added to org.hibernate.test.hql.ASTParserLoadingTest (preferred) or attach a runnable test case that reproduces your issue. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 17\/Mar\/2016 11:40 AM                      We are no longer maintaining 4.3. Does this happen with 5.0.9? If so, please create a pull request with a test added to org.hibernate.test.hql.ASTParserLoadingTest (preferred) or attach a runnable test case that reproduces your issue.              n        n    n"},{"commnet_id":"comment-76075","commnet_date":"2016-03-17T11:44:38-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 17\/Mar\/2016 11:44 AM    n        n        WHat you are asking for is a new feature.  What you are trying is not supported and not documented anywhere to work. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 17\/Mar\/2016 11:44 AM                      WHat you are asking for is a new feature.  What you are trying is not supported and not documented anywhere to work.              n        n    n"},{"commnet_id":"comment-76088","commnet_date":"2016-03-18T02:28:54-0700","commnet_user":"Mario Balaban","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Mario Balabann added a comment  - 18\/Mar\/2016 02:28 AM    n        n        Steve, maybe I'm mistaken but the feature is almost the same as the one described here http:\/\/docs.jboss.org\/hibernate\/core\/3.3\/reference\/en\/html\/queryhql.html#queryhql-tuple\r\nnProbably the missing bit is the ability of Hibernate to construct the \" ('a','b') \" part of the query from a list of object arrays. \r\nnThe porkarround I have adopted is to construct the string \" ('a','b') \" from the list and to replace the token \":pairsList\" before creating the query. \r\nnThank you. n    n    n        n            Show  n            n                        n    n    n    n                nn       Mario Balabann added a comment  - 18\/Mar\/2016 02:28 AM                      Steve, maybe I'm mistaken but the feature is almost the same as the one described here  http:\/\/docs.jboss.org\/hibernate\/core\/3.3\/reference\/en\/html\/queryhql.html#queryhql-tuple  nProbably the missing bit is the ability of Hibernate to construct the \" ('a','b') \" part of the query from a list of object arrays.  nThe porkarround I have adopted is to construct the string \" ('a','b') \" from the list and to replace the token \":pairsList\" before creating the query.  nThank you.              n        n    n"}]}},{"OGM-996":{"info":{"issue_title":"Move Neo4jEntityQueries#findAssociation() to Neo4jAssociationQueries","issue_key":"OGM-996","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"neo4j","issue_description":"This should avoid the need for the concurrent hash map, as there will only be a single query  within one Neo4jAssociationQueries, which ideally can be initialized eagerly in the constructor. One problem though is how to get access to the role on the main side in this context.  That issue is sort of a prerequisite to address                                                          OGM-963                                                              Open                .","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-996?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-994":{"info":{"issue_title":"Upgrade to Infinispan 8.2.0.Final","issue_key":"OGM-994","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.CR1","issue_labels":"5.0.0.CR1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-994?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-992":{"info":{"issue_title":"Upgrade to Infinispan 8.1.0.Final","issue_key":"OGM-992","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.CR1","issue_labels":"5.0.0.CR1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-992?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-76041","commnet_date":"2016-03-16T05:07:05-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 16\/Mar\/2016 05:07 AM    n        n        changing from 8.2.0.Final as I intended to 8.1.0.Final as Gunnar Morling prefers for the time being to keep the alignment with WildFly 10 n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 16\/Mar\/2016 05:07 AM                      changing from 8.2.0.Final as I intended to 8.1.0.Final as  Gunnar Morling  prefers for the time being to keep the alignment with WildFly 10              n        n    n"}]}},{"HSEARCH-2186":{"info":{"issue_title":"Abstract from direct usage of Lucene&#39;s Document as the internal data container","issue_key":"HSEARCH-2186","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"Currently, an instance of Lucene's Document class is used to represent index changes and is passed to index managers etc. This requires the Elasticsearch backend to do quite some tricks to asemble a JSON structure representing the document contents, specifically when it comes to nested contents.  Hence we should find a more abstract representation of indexed \"documents\", allowing different backends (Embedded Lucene, Elasticsearch) custom implementations. Amongst others, the FieldBridge contract will need to be changed (or a new, alternative form be added) to work with this more abstract representation.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2186?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-75956","commnet_date":"2016-03-15T01:54:01-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 15\/Mar\/2016 01:54 AM    n        n        Hey Sanne Grinovero, I've created this one hoping you may use it to dump any thoughts you gathered during the last sprint. Anything (including failed experiments etc.) helps so we can pick up the issue next time around. I am very interested in moving forward with this, so whatever you have to share is much appreciated  Thanks! n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 15\/Mar\/2016 01:54 AM                      Hey  Sanne Grinovero , I've created this one hoping you may use it to dump any thoughts you gathered during the last sprint. Anything (including failed experiments etc.) helps so we can pick up the issue next time around. I am very interested in moving forward with this, so whatever you have to share is much appreciated   Thanks!              n        n    n"}]}},{"HHH-10615":{"info":{"issue_title":"Store geometries in Oracle as points (when they are points) instead of array of points","issue_key":"HHH-10615","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Won&#39;t Fix","issue_fix_version":"5.1.0","issue_component":"5.1.0","issue_labels":"5.1.0","issue_description":"Hi there, first of all, apologies in case I don't follow your procedures, as I'm new in this project. \r\n Our use case is that we use Hibernate-spatial to store and query millions of points in Oracle that will be shown on a map. \r\n I saw in OracleJDBCTypeFactory that the createStruct will store points as array of points ( SDO_ORDINATE_ARRAY ) instead of actual points ( SDO_POINT_TYPE ) which is not that performant. \r\n My current pull request suggests that we could use SDO_POINT_TYPE. \r\n I understand that maybe this is something that was already discussed in this project so I'm open to any kind of comments. \r\n In case this is ok with you, I created a pull request with my approach to the change : \r\n https:\/\/github.com\/GeoLatte\/geolatte-geom\/pull\/42  This is something I have seen in Hibernate for a good while, but it is only now that I thought about submitting a pull request. I mean this is not relevant to a particular version.   Thanks for your time.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10615?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84712","commnet_date":"2016-10-01T05:39:07-0700","commnet_user":"Karel Maesen","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Karel Maesenn added a comment  - 01\/Oct\/2016 05:39 AM    n        n        This will be decided by geolatte-geom project (PR #42) n    n    n        n            Show  n            n                        n    n    n    n                nn       Karel Maesenn added a comment  - 01\/Oct\/2016 05:39 AM                      This will be decided by geolatte-geom project (PR #42)              n        n    n"}]}},{"HSEARCH-2183":{"info":{"issue_title":"Don&#39;t be too restrictive when user customized the loading Criteria","issue_key":"HSEARCH-2183","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.7","issue_labels":"5.7","issue_description":"When setCriteria(c) is invoked on a FullTextQuery, the user will hit:  org.hibernate.search.exception.SearchException: HSEARCH000105: Cannot safely compute getResultSize() when a Criteria with restriction is used. Use query.list().size() or query.getResultList().size().  on using getResultSize() even if there are no restrictions being applied.\r\n It would be nice to allow this in this case; ideally by auto-detecting that it is safe, or failing that by providing an ad-hoc option.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2183?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2182":{"info":{"issue_title":"Configure plug-in for creating API\/SPI change report","issue_key":"HSEARCH-2182","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Alpha3","issue_labels":"5.6.0.Alpha3","issue_description":"I've looked into using the japicmp tool which generates a quite useable report with API changes. PR is following shortly.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2182?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2181":{"info":{"issue_title":"Remove StringHelper from public API","issue_key":"HSEARCH-2181","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6","issue_labels":"6","issue_description":"org.hibernate.search.util.StringHelper should not be exposed in the public API but rather be located in some impl package.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2181?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2180":{"info":{"issue_title":"Rename IndexManager#closeIndexWriter() into flushAndReleaseResources()","issue_key":"HSEARCH-2180","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Alpha3","issue_labels":"5.6.0.Alpha3","issue_description":"HSEARCH-2012                                                              Closed                 adds a new method closeIndexWriter() on IndexManager. This should only be exposed through DirectoryBasedIndexManager as it doesn't apply to other backends such as Lucene. This should be renamed to fit with non-Lucene-based backends, too.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2180?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-75942","commnet_date":"2016-03-14T05:53:01-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 14\/Mar\/2016 05:53 AM    n        n        Right. See my first comment: I agree on picking a better suited name. I disagree on removing it. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 14\/Mar\/2016 05:53 AM                      Right. See my first comment: I agree on picking a better suited name. I disagree on removing it.              n        n    n"},{"commnet_id":"comment-75943","commnet_date":"2016-03-14T06:07:08-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 14\/Mar\/2016 06:07 AM    n        n        What's the point to this, though? Unless you show me where this method actually is invoked by engine, there is no point in having it in the SPI. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 14\/Mar\/2016 06:07 AM                      What's the point to this, though? Unless you show me where this method actually is invoked by engine, there is no point in having it in the SPI.              n        n    n"},{"commnet_id":"comment-75960","commnet_date":"2016-03-15T06:24:34-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 15\/Mar\/2016 06:24 AM    n        n        As discussed in the Hangout, there is no usage right now, but ISPN is expected add one in a custom sharding strategy. Sanne Grinovero expressed utter surprise that this is not the case yet as per ISPN master  nnWe agreed to rename the method into something more general such as releaseWriteResources() which doesn't expose details of specific implementations and can rightfully be implemented as a no-op for index managers which don't need to release such resources. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 15\/Mar\/2016 06:24 AM                      As discussed in the Hangout, there is no usage  right now , but ISPN is expected add one in a custom sharding strategy.  Sanne Grinovero  expressed utter surprise that this is not the case yet as per ISPN master    nn We agreed to rename the method into something more general such as  releaseWriteResources()  which doesn't expose details of specific implementations and can rightfully be implemented as a no-op for index managers which don't need to release such resources.              n        n    n"},{"commnet_id":"comment-75961","commnet_date":"2016-03-15T06:30:32-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 15\/Mar\/2016 06:30 AM    n        n        We settled on the name flushAndReleaseResources() n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 15\/Mar\/2016 06:30 AM                      We settled on the name  flushAndReleaseResources()               n        n    n"},{"commnet_id":"comment-75962","commnet_date":"2016-03-15T06:31:48-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 15\/Mar\/2016 06:31 AM    n        n         n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 15\/Mar\/2016 06:31 AM                                     n        n    n"}]}},{"HHH-10611":{"info":{"issue_title":"Hide or remove org.dom4j.io.STAXEventReader class dependency","issue_key":"HHH-10611","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.0.1","issue_component":"5.0.1","issue_labels":"5.0.1","issue_description":"org.dom4j.io.STAXEventReader was used in the MappingBinder class starting from 5.0.1.Final, which means we need to upgrade to dom4j-1.6.1. We're currently on dom4j-1.4 and have over 50 plugins which depend on this version of dom4j, so it's a considerable effort for us and our vendors to upgrade and we have strict code standards which means we can't just work around the NoClassDefFoundException without performing the dom4j upgrade.  STAXEventReader is only needed when using JPA xml mappings, which we won't be using. Can this be moved to another class to avoid NoClassDefFoundException (this would be a very small code change), or alternatively remove usage of STAXEventReader altogether?","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10611?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2178":{"info":{"issue_title":"Send bulked index changes to ES when using the mass indexer","issue_key":"HSEARCH-2178","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta1","issue_labels":"5.6.0.Beta1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2178?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2177":{"info":{"issue_title":"Provide a way to map hash spatial strategy to geohashes in ES","issue_key":"HSEARCH-2177","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"elasticsearch","issue_description":"Currently the \"hash\" spatial strategy is mapped to HSEARCH specific hash fields in ES. But there is there concept of geohashes in ES, too, which alternatively could be used. This seems to be not as precise as the current custom mapping as per Guillaume Smet, but it's more compact. So there should be an option to make use of geohashes alternatively.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2177?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2176":{"info":{"issue_title":"Avoid repeated service look-ups in ElasticsearchBackendQueueProcessor","issue_key":"HSEARCH-2176","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Alpha3","issue_labels":"5.6.0.Alpha3","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2176?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2175":{"info":{"issue_title":"Enable some more tests","issue_key":"HSEARCH-2175","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Alpha3","issue_labels":"5.6.0.Alpha3","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2175?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2174":{"info":{"issue_title":"Tenant id should not be analyzed","issue_key":"HSEARCH-2174","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Alpha3","issue_labels":"5.6.0.Alpha3","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2174?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2173":{"info":{"issue_title":"Support delete-by-query with ES backend","issue_key":"HSEARCH-2173","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Alpha3","issue_labels":"5.6.0.Alpha3","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2173?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2172":{"info":{"issue_title":"Non-null properties persisted as null in ES if value equals indexNullAs()","issue_key":"HSEARCH-2172","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.CR1,                                            5.7.0.Beta2","issue_labels":"5.6.0.CR1,                                            5.7.0.Beta2","issue_description":"The following property is persisted as null in Elasticsearch if it has the value false:     @Field(indexNullAs = \"false \" )  private  Boolean  active;     The reason being, that we go through the (two-way) field bridge to obtain the boolean value, but doing so we cannot know whether false actually means false or null.  The problem exists for any type, because what we do when indexing is comparing the value, and if it matches the null token, we replace it with null. So if an actual value happens to be the same as the null token, it will be replaced with null...","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2172?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-77538","commnet_date":"2016-05-03T07:44:44-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 03\/May\/2016 07:44 AM    n        n        Sanne Grinovero, any thoughts on this one? Do you think it can be deferred to Beta2? It's related to the mapping, but the case seems not very common so I think we can move it. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 03\/May\/2016 07:44 AM                       Sanne Grinovero , any thoughts on this one? Do you think it can be deferred to Beta2? It's related to the mapping, but the case seems not very common so I think we can move it.              n        n    n"},{"commnet_id":"comment-78030","commnet_date":"2016-05-16T04:12:02-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 16\/May\/2016 04:12 AM    n        n        Thanks Gunnar Morling: moved. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 16\/May\/2016 04:12 AM                      Thanks  Gunnar Morling : moved.              n        n    n"}]}},{"HSEARCH-2171":{"info":{"issue_title":"Convert query values to correct type","issue_key":"HSEARCH-2171","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta2","issue_labels":"5.6.0.Beta2","issue_description":"When building a query e.g. for a boolean property:     QueryBuilder qb = ...;  kb.keyword()      .onField( \"active\"  )      .matching( true  )      .createQuery();     Then we pass the String \"true\"\/\"false\" as part of the JSON query instead of the actual boolean.  It doesn't make a difference in this specific case as ES will still return the right results by converting the value itself, but it might not be working for some other cases (dates?).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2171?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-83130","commnet_date":"2016-08-25T01:56:48-0700","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 25\/Aug\/2016 01:56 AM    n        n        Gunnar Morling Actually, it seems the case of dates has been handled after you created this ticket as part of n    n                n        n            n            HSEARCH-2246n        n                                                    Closed n             n.nnRegarding booleans, I'm not sure we can do much for now given that we use the Lucene APIs under the hood, and Lucene has no such concept as booleans (you can't create a \"BooleanTermQuery\", you have to create a \"TermQuery\", and this only accepts a String term).nnOne thing we can do, though, is disabling analysis by default for boolean fields. It does not seem necessary, and may be harmful with exotic default analyzers.\r\nnI'll add test cases to ElasticSearchDSLIT and see what I can do about boolean fields. n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 25\/Aug\/2016 01:56 AM                       Gunnar Morling  Actually, it seems the case of dates has been handled after you created this ticket as part of n     n                 n         n             n            HSEARCH-2246n         n                                                     Closed n             n. nn Regarding booleans, I'm not sure we can do much for now given that we use the Lucene APIs under the hood, and Lucene has no such concept as booleans (you can't create a \"BooleanTermQuery\", you have to create a \"TermQuery\", and this only accepts a String term). nn One thing we can do, though, is disabling analysis by default for boolean fields. It does not seem necessary, and may be harmful with exotic default analyzers. nI'll add test cases to ElasticSearchDSLIT and see what I can do about boolean fields.              n        n    n"},{"commnet_id":"comment-83131","commnet_date":"2016-08-25T04:19:01-0700","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 25\/Aug\/2016 04:19 AM    n        n        Here is the PR: https:\/\/github.com\/hibernate\/hibernate-search\/pull\/1148 . It'll help discussing the backward compatibility issues that I stated in the PR. n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 25\/Aug\/2016 04:19 AM                      Here is the PR:  https:\/\/github.com\/hibernate\/hibernate-search\/pull\/1148  . It'll help discussing the backward compatibility issues that I stated in the PR.              n        n    n"}]}},{"HHH-10607":{"info":{"issue_title":"Increase logging level in DefaultPersistEventListener","issue_key":"HHH-10607","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"4.3.11 ,                                            5.1.0","issue_component":"4.3.11 ,                                            5.1.0","issue_labels":"4.3.11","issue_description":"Would it be possible to increase logging level in DefaultPersistEventListener#entityIsDeleted from TRACE to DEBUG? The message about un-scheduling entity deletion. It seems noteworthy to me that an entity is not deleted after all.  Other people seem to have bumbed into the same issue (although my problem was in transaction boundaries): http:\/\/stackoverflow.com\/questions\/16898085\/jpa-hibernate-remove-entity-sometimes-not-working","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10607?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10606":{"info":{"issue_title":"Allow MetadataSourcesContributor to have access to configuration properties","issue_key":"HHH-10606","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"5.0.7","issue_component":"5.0.7","issue_labels":"5.0.7","issue_description":"I am trying to dynamically make a single persistence unit out of multiple jars.\r\n By dynamically, I mean that I add all jars on the classpath that contain a specific resource to the MetadataSources inside a MetadataSourcesContributor. I would like the resource name to be dynamic, therefore I would like to put it in a configuration property.  The problem is that the ServiceRegistry in MetaDataSources is a BootstrapServiceRegistry which only gives access to ClassLoaderService, StrategySelector and IntegratorService... so I cannot resolve ConfigurationService to resolve my config property.  I see multiple ways to solve this problem:   \tGive MetaDataSources a StandardServiceRegistry instead of a BootstrapServiceRegistry \tAllow BootstrapServiceRegistry to hold  a ServiceBinding&lt;ConfigurationService&gt; \tAs StandardServiceRegistry is a child registry of BootstrapServiceRegistry, add a method like BootstrapServiceRegistry.getChildRegistries()","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10606?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2168":{"info":{"issue_title":"Raise exceptions via Log API in Elasticsearch backend","issue_key":"HSEARCH-2168","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta2","issue_labels":"5.6.0.Beta2","issue_description":"So far I mostly raised exceptions directly to avoid frequent changes to the Log interface as the code evolved. Once the dust has settled a bit and things are more stable, we can create the required methods on the Log interface and raise exceptions through them.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2168?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2167":{"info":{"issue_title":"Rename IndexManagementStrategy","issue_key":"HSEARCH-2167","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Blocker","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta1","issue_labels":"5.6.0.Beta1","issue_description":"quoting from chat:  Emmanuel: IndexManagermentStrategy -&gt; IndexCreationStrategy or IndexSchemaStrategy ? When reading Management I thought about how the index interaction was handled like an IndexManager basically\r\n Martin: IndexCreationStrategy sounds the most intuitive  I also like IndexCreationStrategy but wondering if we should separate the effects on schema from the index in that case.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2167?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-75781","commnet_date":"2016-03-08T10:10:43-0800","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 08\/Mar\/2016 10:10 AM    n        n        I had it named \"IndexCreationStrategy\" originally, but then this setting also is about deleting the index. Maybe \"IndexSchemaManagementStrategy\"? n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 08\/Mar\/2016 10:10 AM                      I had it named \"IndexCreationStrategy\" originally, but then this setting also is about deleting the index. Maybe \"IndexSchemaManagementStrategy\"?              n        n    n"},{"commnet_id":"comment-78250","commnet_date":"2016-05-20T13:43:43-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 20\/May\/2016 13:43 PM    n        n        I'm proposing IndexSchemaControl. Any more opinions or votes please?nn(Not necessarily against IndexSchemaManagementStrategy but I'd like it to be a bit shorter) n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 20\/May\/2016 13:43 PM                      I'm proposing  IndexSchemaControl . Any more opinions or votes please? nn (Not necessarily against  IndexSchemaManagementStrategy  but I'd like it to be a bit shorter)              n        n    n"},{"commnet_id":"comment-78251","commnet_date":"2016-05-20T13:52:18-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 20\/May\/2016 13:52 PM    n        n        A quick ballot over chat declares IndexSchemaManagementStrategy the winner. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 20\/May\/2016 13:52 PM                      A quick ballot over chat declares  IndexSchemaManagementStrategy  the winner.              n        n    n"},{"commnet_id":"comment-78252","commnet_date":"2016-05-20T14:02:42-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 20\/May\/2016 14:02 PM    n        n        An update to ElasticsearchModuleMemberRegistrationIT is needed, too. Ideally we can refer to the constants\/enum values declared in the ES module? n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 20\/May\/2016 14:02 PM                      An update to  ElasticsearchModuleMemberRegistrationIT  is needed, too. Ideally we can refer to the constants\/enum values declared in the ES module?              n        n    n"}]}},{"HSEARCH-2165":{"info":{"issue_title":"If asynchronous backend is used @IndexedEmbedded#includedEmbeddedId = true should be enforced","issue_key":"HSEARCH-2165","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"(follow up for                                                          HSEARCH-2104                                                              Pull Request Sent                )","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2165?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-988":{"info":{"issue_title":"Redis and Cassandra use the same range for the Log message ids","issue_key":"OGM-988","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.CR1","issue_labels":"5.0.0.CR1","issue_description":"They are both using the range 16xx","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-988?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-987":{"info":{"issue_title":"Support nested embedded collections for MongoDB","issue_key":"OGM-987","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"core,                                            mongodb","issue_description":"Ideally, we should support this for document stores in general.  Sometimes users need to map this kind of document:    {      _id: ObjectId(\"abc\" ),      userId: \"123\"       experiments: {          \"experiment1\"  : {\"variantA\"  : \"variantValue1\" ,                           \"variantB\" , \"VariantValue2\"                            \"variantC\" , \"VariantValue3\" },            \"experiment2\"  : {\"variantD\" , \"VariantValue4\" }      }  }     Basically, it's the mapping of collection of embeddables with another collection of embeddables.  The problem is that this mapping is not supported by JPA or Hibernate, we need to find an alternative.\r\n Maybe a user could use entities instead of embeddables with some additional OGM specific annotation or properties.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-987?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2154":{"info":{"issue_title":"Enable some more tests around embeddables","issue_key":"HSEARCH-2154","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Alpha3","issue_labels":"5.6.0.Alpha3","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2154?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2153":{"info":{"issue_title":"Validate global custom analyzer name in Elasticsearch","issue_key":"HSEARCH-2153","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"elasticsearch","issue_description":"It seems that at the moment this is not possible and we have to wait for the release 2.3.x.  Elasticsearch issue: https:\/\/github.com\/elastic\/elasticsearch\/issues\/15148  Note that _analyze might not work with global analyzer if it's not used with an index, as explained by this response on stack overflow","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2153?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2152":{"info":{"issue_title":"Create bulk request for one List&lt;LuceneWork&gt; where possible","issue_key":"HSEARCH-2152","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Alpha3","issue_labels":"5.6.0.Alpha3","issue_description":"The bulk API allows to execute several commands in one go, reducing the number of HTTP requests.  In a first step, we can create bulks in the context of one index manager (i.e. per invocation of performOperations(List&lt;LuceneWork&gt; queue, IndexingMonitor monitor). Bulks can also be used across indexes, so in a second step we could bulk on a larger scope (all updates originating from one commit\/flush), this will require us to establish some sort of context which is shared between index managers for in the scope of one commit\/flush. This issue is to implement the first step.  Note that not all requests are bulkable, most notably not delete-by-query. When encountering such non-bulkable action, the current bulk needs to be issued, that action be executed and a new bulk must be started. Atm. only purge-all is affected by this, so in most cases we can build one bulk per index manager \/ index type.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2152?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-985":{"info":{"issue_title":"Upgrade MongoDB java Driver","issue_key":"OGM-985","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.0.Beta1","issue_component":"5.0.0.Beta1","issue_labels":"5.0.0.Beta1","issue_description":"Upgrade MongoDB Java Driver from 3.0.x to 3.2.2, being the latest version at the time of writing.  This would make it possible to better support some types of native queries.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-985?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10581":{"info":{"issue_title":"Make result transformers Lambda-friendly","issue_key":"HHH-10581","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"It'd be great to specify result transformation logic in Lambda-style when running on Java 8:     session.createQuery( \"SELECT foo, bar FROM Baz\"  )      .transformResultTuples( (tuple, aliases) -&gt; { return  tuple[0] + \" \"  + tuple[1]; } )      .list();     That requires an interface with a single abstract method (\"functional interface\") describing the Lambda type. The current ResultTransformer interface has two methods, so it cannot be used as is.  Proposal: Deprecate ResultTransformer and add two new, separate contracts as replacement: ResultRowTransformer and ResultListTransformer. Query#setResultTransformer() would be superseded by two new methods: transformResultTuples() and transformResultList().  Note that this change is fully compatible with previous Java versions: One still can pass an (anonymous) implementation of one or both of the contracts when stuck to Java 6\/7:     session.createQuery( \"SELECT foo, bar FROM Baz\"  )      .transformResultTuples( new  ResultRowTransformer() {          public  Object  transformTuple(Object [] tuple, String [] aliases) {              return  return  tuple[0] + \" \"  + tuple[1];           }      } )      .list();     It's just a tad more verbose.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10581?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-75658","commnet_date":"2016-03-03T03:18:29-0800","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 03\/Mar\/2016 03:18 AM    n        n        Hey Steve Ebersole, if you like the idea, I'll send a PR. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 03\/Mar\/2016 03:18 AM                      Hey  Steve Ebersole , if you like the idea, I'll send a PR.              n        n    n"},{"commnet_id":"comment-75661","commnet_date":"2016-03-03T04:04:55-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 03\/Mar\/2016 04:04 AM    n        n        Sure, lets see what it takes. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 03\/Mar\/2016 04:04 AM                      Sure, lets see what it takes.              n        n    n"}]}},{"HSEARCH-2142":{"info":{"issue_title":"Upgrade JGroups to version 3.6.8.Final","issue_key":"HSEARCH-2142","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Alpha3","issue_labels":"5.6.0.Alpha3","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2142?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2139":{"info":{"issue_title":"SpatialFieldBridge implementations should reuse target field name","issue_key":"HSEARCH-2139","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Alpha3","issue_labels":"5.6.0.Alpha3","issue_description":"Each instance of SpatialFieldBridge is bound to a specific couple of field names, generated from the original field name invoking SpatialHelper.formatFieldName, SpatialHelper.formatLatitude and\/or SpatialHelper.formatLongitude.  The parent class should define the field names as final, and the helpers should be invoked only once at constructor time rather than re-allocating the field name for each Document write.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2139?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-75649","commnet_date":"2016-03-02T09:04:42-0800","commnet_user":"Guillaume Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Guillaume Smetn added a comment  - 02\/Mar\/2016 09:04 AM    n        n        Took a look at this one. I don't think we can make them final as we can only generate them after or in configureFieldMetadata.nnThat being said, I can see the rationale for the longitude and latitude fields. As for the hash fields, I wonder if it's such a good idea as we probably will need a Map&lt;Integer, String&gt; to store the values.nnWaiting for your feedback before fixing this one. n    n    n        n            Show  n            n                        n    n    n    n                nn       Guillaume Smetn added a comment  - 02\/Mar\/2016 09:04 AM                      Took a look at this one. I don't think we can make them final as we can only generate them after or in configureFieldMetadata. nn That being said, I can see the rationale for the longitude and latitude fields. As for the hash fields, I wonder if it's such a good idea as we probably will need a Map&lt;Integer, String&gt; to store the values. nn Waiting for your feedback before fixing this one.              n        n    n"},{"commnet_id":"comment-75650","commnet_date":"2016-03-02T09:06:56-0800","commnet_user":"Guillaume Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Guillaume Smetn added a comment  - 02\/Mar\/2016 09:06 AM    n        n        Hmmm an array of Strings will do indeed.nnThoughts? n    n    n        n            Show  n            n                        n    n    n    n                nn       Guillaume Smetn added a comment  - 02\/Mar\/2016 09:06 AM                      Hmmm an array of Strings will do indeed. nn Thoughts?              n        n    n"},{"commnet_id":"comment-75651","commnet_date":"2016-03-02T09:14:09-0800","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 02\/Mar\/2016 09:14 AM    n        n        Took a look at this one. I don't think we can make them final as we can only generate them after or in configureFieldMetadata.nOk, right. I saw a constructor initializing them but missed there's an alternative constructor which does it lazily. Not final then, unless you have time to find a way to refactor it all to use constructor initialization only.nnThat being said, I can see the rationale for the longitude and latitude fields. As for the hash fields, I wonder if it's such a good idea as we probably will need a Map&lt;Integer, String&gt; to store the values.nGood point, I had forgotten that the hash approach has to generate many different fields names. A Map would not be very efficient but we could use an array? The total number of fields being generated is generally quite small, and definitely well known upfront. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 02\/Mar\/2016 09:14 AM                       Took a look at this one. I don't think we can make them final as we can only generate them after or in configureFieldMetadata.  n Ok, right. I saw a constructor initializing them but missed there's an alternative constructor which does it lazily. Not  final  then, unless you have time to find a way to refactor it all to use constructor initialization only. nn  That being said, I can see the rationale for the longitude and latitude fields. As for the hash fields, I wonder if it's such a good idea as we probably will need a Map&lt;Integer, String&gt; to store the values.  n Good point, I had forgotten that the hash approach has to generate many different fields names. A Map would not be very efficient but we could use an array? The total number of fields being generated is generally quite small, and definitely well known upfront.              n        n    n"},{"commnet_id":"comment-75652","commnet_date":"2016-03-02T09:14:48-0800","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 02\/Mar\/2016 09:14 AM    n        n        +1 for the array, I just though the same  n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 02\/Mar\/2016 09:14 AM                      +1 for the array, I just though the same                n        n    n"},{"commnet_id":"comment-75787","commnet_date":"2016-03-09T00:58:28-0800","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 09\/Mar\/2016 00:58 AM    n        n        That's done for 5.6, but I am seeint it's marked for 5.5.3, too. Two questions on that:nna) Do we really want to do such release? b) Who's going to do the backport? n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 09\/Mar\/2016 00:58 AM                      That's done for 5.6, but I am seeint it's marked for 5.5.3, too. Two questions on that: nn a) Do we really want to do such release? b) Who's going to do the backport?              n        n    n"},{"commnet_id":"comment-75790","commnet_date":"2016-03-09T02:02:35-0800","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 09\/Mar\/2016 02:02 AM    n        n        a) Do we really want to do such release?nIt's unlikely to think we'll never need one. 7 years support is a long timennb) Who's going to do the backport?nSomeone on our team? Unless you find a volunteer..nnWe don't have a strict rule, generally I cherry pick them when merging if it's trivial, if it takes more than a couple of import conflicts it's nice if the issue resolver can send two PRs .. essentially it depends if we think a second pair of eyes is needed. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 09\/Mar\/2016 02:02 AM                       a) Do we really want to do such release?  n It's unlikely to think we'll never need one. 7 years support is a long time nn  b) Who's going to do the backport?  n Someone on our team? Unless you find a volunteer.. nn We don't have a strict rule, generally I cherry pick them when merging if it's trivial, if it takes more than a couple of import conflicts it's nice if the issue resolver can send two PRs .. essentially it depends if we think a second pair of eyes is needed.              n        n    n"}]}},{"OGM-984":{"info":{"issue_title":"JP-QL aggregate operator doesn&#39;t seem to be supported for MongoDB","issue_key":"OGM-984","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.0.0.Beta1","issue_component":"5.0.0.Beta1","issue_labels":"5.0.0.Beta1","issue_description":"I tried to execute a simple JP-QL query using COUNT aggregation:    SELECT COUNT(e) FROM Foo e    This results in the following exception (using Wildly 10):    Caused by: java.lang.IndexOutOfBoundsException (Index: 0)      at java.util.Collections$EmptyList.get(Collections.java:4454)      at org.hibernate.ogm.query.impl.OgmQueryLoader.listOfArrays(OgmQueryLoader.java:110)      at org.hibernate.ogm.query.impl.OgmQueryLoader.list(OgmQueryLoader.java:73)      at org.hibernate.loader.hql.QueryLoader.list(QueryLoader.java:501)      at org.hibernate.ogm.query.impl.OgmQueryTranslator.list(OgmQueryTranslator.java:127)      at org.hibernate.engine.query.spi.HQLQueryPlan.performList(HQLQueryPlan.java:216)      at org.hibernate.internal.SessionImpl.list(SessionImpl.java:1326)      at org.hibernate.internal.QueryImpl.list(QueryImpl.java:87)      at org.hibernate.jpa.internal.QueryImpl.list(QueryImpl.java:593)      at org.hibernate.jpa.internal.QueryImpl.getSingleResult(QueryImpl.java:516)      at ch.sbi.forte.persistence.dao.ProductManager.count(ProductManager.java:152)     Am I right that aggregation operators are currently not supported for MongoDB? If so, could someone outline where I would need to start to implement this. Any hints appreciated.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-984?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2135":{"info":{"issue_title":"Merge generic version of Hibernate Search from GSoC 2015","issue_key":"HSEARCH-2135","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2135?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-75537","commnet_date":"2016-02-29T04:48:40-0800","commnet_user":"Martin Braun","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Martin Braunn added a comment  - 29\/Feb\/2016 04:48 AM     - edited  n        n        This will probably also include requiring a new \"JPA FullText API\" module (that contains the interfaces from to org.hibernate.search.jpa, but adapted) to have the ORM and generic version use the same API. n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Martin Braunn added a comment  - 29\/Feb\/2016 04:48 AM     - edited                    This will probably also include requiring a new \"JPA FullText API\" module (that contains the interfaces from to org.hibernate.search.jpa, but adapted) to have the ORM and generic version use the same API.              n        n    n"}]}},{"HSEARCH-2133":{"info":{"issue_title":"Add various accessors and utilities to be able to exploit the spatial structures","issue_key":"HSEARCH-2133","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Alpha3","issue_labels":"5.6.0.Alpha3","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2133?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10571":{"info":{"issue_title":"Add a PDF User Guide version","issue_key":"HHH-10571","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"According to this user comment, there is a demand for exporting the User Guide to PDF so we should add support for this as well.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10571?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2130":{"info":{"issue_title":"Elasticsearch - add spatial support","issue_key":"HSEARCH-2130","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Alpha3","issue_labels":"5.6.0.Alpha3","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2130?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-75461","commnet_date":"2016-02-26T12:33:37-0800","commnet_user":"Guillaume Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Guillaume Smetn added a comment  - 26\/Feb\/2016 12:33 PM    n        n        I got the basics working (indexing and querying).nnThere is still work to do to see how we can deal with getting the distance in the results and sorting the results by distance. n    n    n        n            Show  n            n                        n    n    n    n                nn       Guillaume Smetn added a comment  - 26\/Feb\/2016 12:33 PM                      I got the basics working (indexing and querying). nn There is still work to do to see how we can deal with getting the distance in the results and sorting the results by distance.              n        n    n"}]}},{"HSEARCH-2128":{"info":{"issue_title":"Use the Elasticsearch Scroll API when fetching large result sets","issue_key":"HSEARCH-2128","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Duplicate","issue_fix_version":"None","issue_component":"None","issue_labels":"elasticsearch","issue_description":"Recent versions of Elasticsearch will refuse to run a query whose potential result size is larger than its   [index.max_result_window]   setting.  We either need to fetch this value from the ES node on initial connection, or allow the user to configure the same and make sure to use the Scroll API to run queries which could be larger.   {    \"root_cause\" : [      {        \"type\" : \"query_phase_execution_exception\" ,        \"reason\" : \"Result window is too large, from + size must be less than or equal to: [10000] but was [2147483647]. See the scroll api for  a more efficient way to request large data sets. This limit can be set by changing the [index.max_result_window] index level parameter.\"       }    ],    \"type\" : \"search_phase_execution_exception\" ,    \"reason\" : \"all shards failed\" ,    \"phase\" : \"query_fetch\" ,    \"grouped\" : true ,    \"failed_shards\" : [      {        \"shard\" : 0,        \"index\" : \"org.hibernate.search.test.query.facet.car\" ,        \"node\" : \"Tst_qjttSPOSbxjz2hsK7A\" ,        \"reason\" : {          \"type\" : \"query_phase_execution_exception\" ,          \"reason\" : \"Result window is too large, from + size must be less than or equal to: [10000] but was [2147483647]. See the scroll api for  a more efficient way to request large data sets. This limit can be set by changing the [index.max_result_window] index level parameter.\"         }      }    ]  }","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2128?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2125":{"info":{"issue_title":"Elasticsearch - support for MultiPhraseQuery","issue_key":"HSEARCH-2125","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Duplicate","issue_fix_version":"None","issue_component":"5.6.0.Beta1","issue_labels":"5.6.0.Beta1","issue_description":"Currently the phrase query support of Hibernate Search might generate a MultiPhraseQuery if your analyzer returns several words for a given position (typically with synonyms).  This is not supported by the Elasticsearch backend and should probably not be supported as we need to remove the analyzer part in this case and let Elasticsearch do the analyze thing.  Just wanted to log this issue somewhere so we can be sure it gets tackled before the release.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2125?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-77361","commnet_date":"2016-04-28T07:39:57-0700","commnet_user":"Guillaume Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Guillaume Smetn added a comment  - 28\/Apr\/2016 07:39 AM    n        n        The phrase support will work once n    n                n        n            n            HSEARCH-2222n        n                                                    Closed n             n is merged. n    n    n        n            Show  n            n                        n    n    n    n                nn       Guillaume Smetn added a comment  - 28\/Apr\/2016 07:39 AM                      The phrase support will work once n     n                 n         n             n            HSEARCH-2222n         n                                                     Closed n             n is merged.              n        n    n"}]}},{"HSEARCH-2124":{"info":{"issue_title":"Elasticsearch - add support for phrase query","issue_key":"HSEARCH-2124","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Alpha2","issue_labels":"5.6.0.Alpha2","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2124?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2123":{"info":{"issue_title":"Elasticsearch - add support for boost","issue_key":"HSEARCH-2123","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Alpha2","issue_labels":"5.6.0.Alpha2","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2123?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2122":{"info":{"issue_title":"Elasticsearch - add support for FuzzyQuery","issue_key":"HSEARCH-2122","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Alpha2","issue_labels":"5.6.0.Alpha2","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2122?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2121":{"info":{"issue_title":"Split DSLTest to facilitate Elasticsearch testing","issue_key":"HSEARCH-2121","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Alpha2","issue_labels":"5.6.0.Alpha2","issue_description":"Separate non working tests \tSeparate Spatial tests in their own test","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2121?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-75435","commnet_date":"2016-02-26T07:19:12-0800","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 26\/Feb\/2016 07:19 AM    n        n        There is one thing that I do not like about splitting it. The test is the best documentation by far for the DSL use.\r\nnEither we find a way to integrate such it into the Hibernate Search documentation to show complex multi feature queries, or we find a way not to split the test into unreadable complex examples. n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 26\/Feb\/2016 07:19 AM                      There is one thing that I do not like about splitting it. The test is the  best  documentation by far for the DSL use. nEither we find a way to integrate such it into the Hibernate Search documentation to show complex multi feature queries, or we find a way not to split the test into unreadable complex examples.              n        n    n"},{"commnet_id":"comment-75436","commnet_date":"2016-02-26T07:25:16-0800","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 26\/Feb\/2016 07:25 AM    n        n        Could we simply mark individual tests as ES-compatible (or not) rather than the whole class? n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 26\/Feb\/2016 07:25 AM                      Could we simply mark individual tests as ES-compatible (or not) rather than the whole class?              n        n    n"},{"commnet_id":"comment-75437","commnet_date":"2016-02-26T07:41:09-0800","commnet_user":"Guillaume Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Guillaume Smetn added a comment  - 26\/Feb\/2016 07:41 AM    n        n        I only split the spatial DSL test in a different file as we can't start the context without support for spatial.nnI think it's acceptable. If not, I can create a ticket to add it back once we get support for spatial.nnOther than that, I use the JUnit category markers I introduce earlier to ignore specific test methods. n    n    n        n            Show  n            n                        n    n    n    n                nn       Guillaume Smetn added a comment  - 26\/Feb\/2016 07:41 AM                      I only split the spatial DSL test in a different file as we can't start the context without support for spatial. nn I think it's acceptable. If not, I can create a ticket to add it back once we get support for spatial. nn Other than that, I use the JUnit category markers I introduce earlier to ignore specific test methods.              n        n    n"},{"commnet_id":"comment-75441","commnet_date":"2016-02-26T08:17:39-0800","commnet_user":"Guillaume Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Guillaume Smetn added a comment  - 26\/Feb\/2016 08:17 AM    n        n        You can see what I'm talking about here: https:\/\/github.com\/hibernate\/hibernate-search\/pull\/1007 . n    n    n        n            Show  n            n                        n    n    n    n                nn       Guillaume Smetn added a comment  - 26\/Feb\/2016 08:17 AM                      You can see what I'm talking about here:  https:\/\/github.com\/hibernate\/hibernate-search\/pull\/1007  .              n        n    n"}]}},{"HSEARCH-2118":{"info":{"issue_title":"Add infrastructure to be able to ignore tests when running the Elasticsearch backend","issue_key":"HSEARCH-2118","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Alpha2","issue_labels":"5.6.0.Alpha2","issue_description":"We can use the JUnit category markers to do so as they are supported by surefire and failsafe.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2118?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2117":{"info":{"issue_title":"Add FullTextEntityManager#createFullTextQuery(QueryDescriptor, Class&lt;?&gt;...)","issue_key":"HSEARCH-2117","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Alpha2","issue_labels":"5.6.0.Alpha2","issue_description":"Equivalent to the same method on FullTextsession.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2117?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2115":{"info":{"issue_title":"Allow extensions to contribute short names for new IndexManager implementations","issue_key":"HSEARCH-2115","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.7","issue_labels":"5.7","issue_description":"The only \"third party\" IndexManager we had so far is the InfinispanIndexManager - living in the Infinispan Query project - , which overrides the DefaultIndexManagerFactory as it actually also overrides the resolution of names.  This approach doesn't scale to other jars wanting to contribute additional short names, for example the Elasticsearch integration module can not define an additional IndexManagerFactory as that wouldn't \"compose\" with the Infinispan approach.  Rather than overriding a core service this needs an ad-hoc approach.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2115?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-77032","commnet_date":"2016-04-18T02:48:52-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 18\/Apr\/2016 02:48 AM    n        n        Sanne Grinovero, can you point me to ISPN's implementation of IndexManagerFactory? I could not find it with a quick search. Thanks! n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 18\/Apr\/2016 02:48 AM                       Sanne Grinovero , can you point me to ISPN's implementation of  IndexManagerFactory ? I could not find it with a quick search. Thanks!              n        n    n"},{"commnet_id":"comment-77051","commnet_date":"2016-04-18T12:18:44-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 18\/Apr\/2016 12:18 PM    n        n        That code was in a branch containing the POC for the index-affinity implementation; turns out index affinity was ultimately merged without needing this.nnLooks like we could go our own way: not allow overrides, but allow extensions as long as they don't contribute conflicting options (same name). n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 18\/Apr\/2016 12:18 PM                      That code was in a branch containing the POC for the index-affinity implementation; turns out index affinity was ultimately merged without needing this. nn Looks like we could go our own way: not allow overrides, but allow extensions as long as they don't contribute conflicting options (same name).              n        n    n"}]}},{"HSEARCH-2114":{"info":{"issue_title":"Allow to use &quot;elasticsearch&quot; as alias for index manager configuration","issue_key":"HSEARCH-2114","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Alpha2","issue_labels":"5.6.0.Alpha2","issue_description":"Currently the FQN needs to be given as index name, which isn't nice, esp. as it's an internal class.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2114?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2113":{"info":{"issue_title":"Elasticsearch - Better sort support","issue_key":"HSEARCH-2113","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Alpha2","issue_labels":"5.6.0.Alpha2","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2113?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2111":{"info":{"issue_title":"FacetRange and RangeFacet need some love","issue_key":"HSEARCH-2111","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Trivial","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6","issue_labels":"6","issue_description":"We currently have 2 classes which represent a range facet:  \tFacetRange: used by the DSL to build a facet range query \tRangeFacet: an interface to represent a facet range query    RangeFacet contains isIncludeMin and isIncludeMax whereas FacetRange contains isMinIncluded and isMaxIncluded.  It would be better if the naming was consistent.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2111?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2110":{"info":{"issue_title":"Upgrade ES documentation before Beta1 release","issue_key":"HSEARCH-2110","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta1","issue_labels":"5.6.0.Beta1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2110?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1061":{"info":{"issue_title":"Add documentation of OverridesAttribute annotation to online docs","issue_key":"HV-1061","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"At the moment there is only one unrelated example using it, but nothing as part of constraint composition.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1061?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2109":{"info":{"issue_title":"Add support for composite id types with ES backend","issue_key":"HSEARCH-2109","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"elasticsearch","issue_description":"I am not sure what currently happens for composite id types. Maybe we should map them to actual document fields for the sake of searchability? That needs some more research.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2109?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-75381","commnet_date":"2016-02-24T07:27:19-0800","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 24\/Feb\/2016 07:27 AM    n        n        I don't think we support this for a traditional backend either.. the user needs to provide some custom bridge at least.nnhttps:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1715nnI'll remove the 5.6 version as target n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 24\/Feb\/2016 07:27 AM                      I don't think we support this for a traditional backend either.. the user needs to provide some custom bridge at least. nn  https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1715  nn I'll remove the 5.6 version as target              n        n    n"},{"commnet_id":"comment-77132","commnet_date":"2016-04-20T07:57:23-0700","commnet_user":"Davide D&#39;Alto","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Davide D&#39;Alton added a comment  - 20\/Apr\/2016 07:57 AM    n        n        Is this a duplicate of https:\/\/hibernate.atlassian.net\/projects\/HSEARCH\/issues\/HSEARCH-2213? n    n    n        n            Show  n            n                        n    n    n    n                nn       Davide D&#39;Alton added a comment  - 20\/Apr\/2016 07:57 AM                      Is this a duplicate of  https:\/\/hibernate.atlassian.net\/projects\/HSEARCH\/issues\/HSEARCH-2213?               n        n    n"},{"commnet_id":"comment-86006","commnet_date":"2016-11-14T02:57:21-0800","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 14\/Nov\/2016 02:57 AM    n        n        Davide D'Alto Your link doesn't seem to be related to this ticket, maybe you meant https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2071 ?nnAnyway, n    n                n        n            n            HSEARCH-2071n        n                                                    Closed n             n introduced a test case for something related: EmbeddedIdWithMetadataProvidingBridgeTest. It passes on Elasticsearch.nnSanne Grinovero, Davide D'Alto: ok to close as a duplicate of n    n                n        n            n            HSEARCH-2071n        n                                                    Closed n             n? n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 14\/Nov\/2016 02:57 AM                       Davide D'Alto  Your link doesn't seem to be related to this ticket, maybe you meant  https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2071  ? nn Anyway, n     n                 n         n             n            HSEARCH-2071n         n                                                     Closed n             n introduced a test case for something related:  EmbeddedIdWithMetadataProvidingBridgeTest . It passes on Elasticsearch. nn  Sanne Grinovero ,  Davide D'Alto : ok to close as a duplicate of n     n                 n         n             n            HSEARCH-2071n         n                                                     Closed n             n?              n        n    n"}]}},{"HSEARCH-2108":{"info":{"issue_title":"Allow to configure custom analyzers with ES backend","issue_key":"HSEARCH-2108","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Critical","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Alpha3","issue_labels":"5.6.0.Alpha3","issue_description":"Currently we always use the \"standard\" analyzer when mapping analyzed fields. It should be possible to apply specific analyzers defined in Elasticsearch for given fields.  See these resources:   \thttps:\/\/www.elastic.co\/guide\/en\/elasticsearch\/guide\/current\/mapping-intro.html#_analyzer \thttps:\/\/www.elastic.co\/guide\/en\/elasticsearch\/guide\/current\/custom-analyzers.html    Being able to refer to built-in analyzers could be a first step, support for custom-defined ones a second step. AFAIU, analyzer definitions are bound to specific indexes, so we'd need a way to pass in analyzer definitions when creating an index for that (when letting HSEARCH deal with index creation).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2108?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2107":{"info":{"issue_title":"Advanced mechanism for propagating index updates when using Oracle DB","issue_key":"HSEARCH-2107","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"Oracle provides several interesting mechanisms which we could leverage to detect data changes done by other applications which require an index update.   \tData change notifications allow to trigger registed Java callbacks (\"registrations\") upon data changes \tOracle Advanced Queuing provides a persistent JMS queue implementation backed by the database itself; This allows to enqueue messages e.g. via triggers in a transactionally safe fashion, which the HSEARCH application could be consume and trigger index updates from    The second alternative is especially promising, as it will keep index invalidation messages in a persistent queue in case the Java application is offline.  I don't think this is something we can do ourselves given our constrained resources, but it may be an interesting feature to be tackled by a contributor or maybe GSoC student. Any feedback welcome.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2107?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-75345","commnet_date":"2016-02-23T10:58:41-0800","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 23\/Feb\/2016 10:58 AM    n        n         For the data change capture approach, Randall Hauch is working in this area already and we will be able to reuse that work.  n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 23\/Feb\/2016 10:58 AM                       For the data change capture approach,  Randall Hauch  is working in this area already and we will be able to reuse that work.               n        n    n"},{"commnet_id":"comment-75346","commnet_date":"2016-02-23T11:06:28-0800","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 23\/Feb\/2016 11:06 AM    n        n        Yes, it may well be Randall's work will be a more generic superset of this. Maybe it's also just worth to write a quick blog post showing how to drive index updates through Oracle data change notifications so users can study this as an example. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 23\/Feb\/2016 11:06 AM                      Yes, it may well be Randall's work will be a more generic superset of this. Maybe it's also just worth to write a quick blog post showing how to drive index updates through Oracle data change notifications so users can study this as an example.              n        n    n"},{"commnet_id":"comment-75347","commnet_date":"2016-02-23T11:14:19-0800","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 23\/Feb\/2016 11:14 AM    n        n        Maybe it's also just worth to write a quick blog post showing how to drive index updates through Oracle data change notificationsnnI don't think that will be very simple to write a \"quick blog\", the trigger will fire in the context of SQL relational tables but we expect mapped objects, and denormalized structures.. even triggers from \"containedIn\" relations with some specific depth of recursion.\r\nnThe code living in the database would need to depend on Hibernate ORM and Hibernate Search? n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 23\/Feb\/2016 11:14 AM                       Maybe it's also just worth to write a quick blog post showing how to drive index updates through Oracle data change notifications  nn I don't think that will be very simple to write a \"quick blog\", the trigger will fire in the context of SQL relational tables but we expect mapped objects, and denormalized structures.. even triggers from \"containedIn\" relations with some specific depth of recursion. nThe code living in the database would need to depend on Hibernate ORM and Hibernate Search?              n        n    n"},{"commnet_id":"comment-75348","commnet_date":"2016-02-23T11:15:03-0800","commnet_user":"Randall Hauch","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Randall Hauchn added a comment  - 23\/Feb\/2016 11:15 AM    n        n        As Emmanuel Bernard mentioned, the Debezium project is developing connectors for a variety of DBMSes that will monitor databases and produce events for each row change committed to the database. A MySQL connector was the first to be developed, but a connector for Oracle is on our shortlist. Contributions are welcome.nnThe change events produced by Debezium will largely be DBMS-agnostic, so a major benefit is that consumers can receive and process data change events from a variety of DBMSes with little (if any) change to the consumer app.nnDebezium connectors can be embedded into an application for lower-volume or lighter-weight scenarios, but for larger and more fault tolerant scenarios it is better to run the entire Debezium distributed platform, where one or more Debezium connector services can monitor database(s) and record events in durable, replicated, totally-ordered, and append-only Kafka logs. With the Debezium platform, consumer clients read directly from the Kafka streams using the Kafka API or a planned Debezium client SDK.nnThe project will soon be releasing 0.1 version with MySQL support, and will add support for other DBMSes in future releases. n    n    n        n            Show  n            n                        n    n    n    n                nn       Randall Hauchn added a comment  - 23\/Feb\/2016 11:15 AM                      As  Emmanuel Bernard  mentioned, the  Debezium project  is developing connectors for a variety of DBMSes that will monitor databases and produce events for each row change committed to the database. A MySQL connector was the first to be developed, but a  connector for Oracle  is on our shortlist. Contributions are welcome. nn The change events produced by Debezium will largely be DBMS-agnostic, so a major benefit is that consumers can receive and process data change events from a variety of DBMSes with little (if any) change to the consumer app. nn Debezium connectors can be  embedded  into an application for lower-volume or lighter-weight scenarios, but for larger and more fault tolerant scenarios it is better to run the entire Debezium distributed platform, where one or more Debezium connector services can monitor database(s) and record events in durable, replicated, totally-ordered, and append-only Kafka logs. With the Debezium platform, consumer clients read directly from the Kafka streams using the Kafka API or a planned Debezium client SDK. nn The project will soon be releasing 0.1 version with MySQL support, and will add support for other DBMSes in future releases.              n        n    n"},{"commnet_id":"comment-75375","commnet_date":"2016-02-24T04:27:57-0800","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 24\/Feb\/2016 04:27 AM    n        n        Agreed, using Debezium would be great for that. Data change notifications look promising, but maybe I indeed underestimate the task.nnnThe code living in the database would need to depend on Hibernate ORM and Hibernate Search?nnHum, no, it'd be task of the code on the receiving end to identify those entities affected by given table data changes. The task of determining these entities needs to be done with either approach.nnAnyways, I'm fine with closing this issue or re-purposing it to integrate with DBZ once it's there. I'll need to take some time and look into the same in some more depth. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 24\/Feb\/2016 04:27 AM                      Agreed, using Debezium would be great for that. Data change notifications look promising, but maybe I indeed underestimate the task. nn n The code living in the database would need to depend on Hibernate ORM and Hibernate Search?  nn Hum, no, it'd be task of the code on the receiving end to identify those entities affected by given table data changes. The task of determining these entities needs to be done with either approach. nn Anyways, I'm fine with closing this issue or re-purposing it to integrate with DBZ once it's there. I'll need to take some time and look into the same in some more depth.              n        n    n"},{"commnet_id":"comment-75379","commnet_date":"2016-02-24T07:19:58-0800","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 24\/Feb\/2016 07:19 AM    n        n        &gt; Hum, no, it'd be task of the code on the receiving end to identify those entities affected by given table data changes. The task of determining these entities needs to be done with either approach.nnYes I agree but I meant to point out that - as a user - I'd expect the frameworks to help define to which events it will listen to (i.e. which tables and columns we care about) and then from the received events being able to push the updates to the object model.\r\nnI guess from there we'll need to trigger more database reads, as the event will contain only the changes but building a Lucene Document doesn't work via updates of fields, so we need to rebuild it all including fields which haven't been changed: these need to be fetched; for consistency reasons then I guess you'd need to re-fetch the whole entity graph. Ideally the listener could be pushing updates to an in-memory data grid which is caching the whole DB nnThe alternative is that the RDBMs listener pushes not just the delta but the full graph of needed fields; but I'm afraid that gets complex too quickly and would require our libraries. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 24\/Feb\/2016 07:19 AM                      &gt; Hum, no, it'd be task of the code on the receiving end to identify those entities affected by given table data changes. The task of determining these entities needs to be done with either approach. nn Yes I agree but I meant to point out that - as a user - I'd expect the frameworks to help define to which events it will listen to (i.e. which tables and columns we care about) and then from the received events being able to push the updates to the object model. nI guess from there we'll need to trigger more database reads, as the event will contain only the changes but building a Lucene Document doesn't work via updates of fields, so we need to rebuild it all including fields which haven't been changed: these need to be fetched; for consistency reasons then I guess you'd need to re-fetch the whole entity graph. Ideally the listener could be pushing updates to an in-memory data grid which is caching the whole DB   nn The alternative is that the RDBMs listener pushes not just the delta but the full graph of needed fields; but I'm afraid that gets complex too quickly and would require our libraries.              n        n    n"},{"commnet_id":"comment-75383","commnet_date":"2016-02-24T08:25:41-0800","commnet_user":"Randall Hauch","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Randall Hauchn added a comment  - 24\/Feb\/2016 08:25 AM     - edited  n        n        nYes I agree but I meant to point out that - as a user - I'd expect the frameworks to help define to which events it will listen to (i.e. which tables and columns we care about) and then from the received events being able to push the updates to the object model.nnDifferent databases do different things, which is why change data capture (CDC) is so difficult for apps\/frameworks that deal with multiple DBMSes. The MySQL binlog, for example, always records all of the values in each modified record, so that's what Debezium ships in its events. Other DBMS logs (or streaming APIs) might only expose the values that changed (MongoDB does this). The result is that the events are not homogenous. My goal is that Debezium can eventually provide services that one can optionally chain together to make the events homogenous. For example, one service can keep track of each record, consume the updates, and spit out events with the full state. Another service might keep track of the each record and spit out a patch of the record (only what changed). nnBTW, another thing that is really difficult about CDC is that you can't miss an event (and you don't want to process an event twice). If your consuming process goes down and comes back up, you want to start consuming events where you last left off, even when those events kept coming while you were down.nnnThe alternative is that the RDBMs listener pushes not just the delta but the full graph of needed fields; but I'm afraid that gets complex too quickly and would require our libraries.nnIt'd be very interesting if Debezium service could be set up with entity definitions (e.g., from Hibernate &amp; Co) that, when deployed, it tracks the state of each entity, applies the individual record changes to that entity, and spits out a \"patch\" for the entity anytime it changed. That's obviously non-trivial and requires a lot of integration, but I think the whole point is to provide functionality so that apps and libraries (like Hibernate Search) can set up Debezium to see the changes they need in near real-time so they don't have to query the database. n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Randall Hauchn added a comment  - 24\/Feb\/2016 08:25 AM     - edited                    n Yes I agree but I meant to point out that - as a user - I'd expect the frameworks to help define to which events it will listen to (i.e. which tables and columns we care about) and then from the received events being able to push the updates to the object model.  nn Different databases do different things, which is why change data capture (CDC) is so difficult for apps\/frameworks that deal with multiple DBMSes. The MySQL binlog, for example, always records all of the values in each modified record, so that's what Debezium ships in its events. Other DBMS logs (or streaming APIs) might only expose the values that changed (MongoDB does this). The result is that the events are not homogenous. My goal is that Debezium can eventually provide services that one can optionally chain together to make the events homogenous. For example, one service can keep track of each record, consume the updates, and spit out events with the full state. Another service might keep track of the each record and spit out a patch of the record (only what changed).  nn BTW, another thing that is really difficult about CDC is that you can't miss an event (and you don't want to process an event twice). If your consuming process goes down and comes back up, you want to start consuming events where you last left off, even when those events kept coming while you were down. nn n The alternative is that the RDBMs listener pushes not just the delta but the full graph of needed fields; but I'm afraid that gets complex too quickly and would require our libraries.  nn It'd be very interesting if Debezium service could be set up with entity definitions (e.g., from Hibernate &amp; Co) that, when deployed, it tracks the state of each  entity , applies the individual record changes to that entity, and spits out a \"patch\" for the entity anytime it changed. That's obviously non-trivial and requires a lot of integration, but I think the whole point is to provide functionality so that apps and libraries (like Hibernate Search) can set up Debezium to see the changes they need in near real-time so they don't have to query the database.              n        n    n"}]}},{"HHH-10559":{"info":{"issue_title":"Support for cached HQLQueryPlan for @NamedQuery with @NamedEntityGraph","issue_key":"HHH-10559","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"4.3.11","issue_component":"4.3.11","issue_labels":"4.3.11","issue_description":"See topic:\r\n https:\/\/forum.hibernate.org\/viewtopic.php?f=1&amp;t=1042964&amp;p=2488756#p2488756  If a provided named query and the (always) desired entitygraph for this named query are known and fixed at deploy-time, then the HqlQueryPlan should be cached and not recalculated each time.\r\n After all, named queries are designed \/ meant to be processed at deploy time, and by setting an entity graph hint at runtime, this advantage over 'normal' queries seems to be minimized, if any!?\r\n I've tried, but to no avail...:  Code:\r\n @NamedEntityGraph(name = \"InlegJpa\", includeAllAttributes = true)\r\n @NamedQueries({\r\n         @NamedQuery(name = \"InlegJpa.queryInleggenMetPeriodiekOpbouwVoorKlant\",\r\n                 query = \"SELECT DISTINCT inleg FROM InlegJpa as inleg, \"\r\n                         + \"InlegBetaalherkomstJpa as herkomst \"\r\n                         + \"WHERE inleg.pk.verzekerdeIdentificatie = herkomst.pk.klantnummerInleg \"\r\n                         + \"AND inleg.pk.sppProductIdentificatie = herkomst.pk.sppIdInleg \"\r\n                         + \"AND inleg.pk.polisOnderdeelNummer = herkomst.pk.polisonderdeelNummerInleg \"\r\n                         + \"AND inleg.pk.keynummer = herkomst.pk.keynummerInleg \"\r\n                         + \"AND inleg.pk.verzekerdeIdentificatie = :persoonId \"\r\n                         + \"AND inleg.datumVerificatie IS NOT NULL \"\r\n                         + \"AND inleg.datumEindeRegistratie IS NULL\",\r\n                     hints =  {                          @QueryHint(name = \"javax.persistence.loadgraph\", value = \"InlegJpa\"),                          @QueryHint(name = \"org.hibernate.readOnly\", value = \"true\")      } ),\r\n ...   Debugging into Hibernate code, I found that the QueryHint on readonly gets processed and set to true, but the loadgraph hint doesn't.\r\n Moreover, the org.hibernate.engine.spi.NamedQueryDefinition class doesn't have an attribute to hold a reference to an entity graph instance.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10559?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10558":{"info":{"issue_title":"Add support for java.time.Year","issue_key":"HHH-10558","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"5.1.0","issue_component":"5.1.0","issue_labels":"5.1.0","issue_description":"Although some of the java.time.* classes are already supported, java.time.Year isn't.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10558?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-80242","commnet_date":"2016-06-29T17:37:36-0700","commnet_user":"Matthias Kurz","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Matthias Kurzn added a comment  - 29\/Jun\/2016 17:37 PM    n        n        What about YearMonth?nnAny progress on this? n    n    n        n            Show  n            n                        n    n    n    n                nn       Matthias Kurzn added a comment  - 29\/Jun\/2016 17:37 PM                      What about YearMonth? nn Any progress on this?              n        n    n"},{"commnet_id":"comment-85706","commnet_date":"2016-11-08T08:17:58-0800","commnet_user":"Jan-Willem Gmelig Meyling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Jan-Willem Gmelig Meylingn added a comment  - 08\/Nov\/2016 08:17 AM    n        n        Vote for YearMonth and Year here as well. I am currently using attribute converters that transform it into a date. n    n    n        n            Show  n            n                        n    n    n    n                nn       Jan-Willem Gmelig Meylingn added a comment  - 08\/Nov\/2016 08:17 AM                      Vote for YearMonth and Year here as well. I am currently using attribute converters that transform it into a date.              n        n    n"}]}},{"HHH-10557":{"info":{"issue_title":"@Loader doesn&#39;t work for bags","issue_key":"HHH-10557","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.1.0","issue_component":"5.1.0","issue_labels":"5.1.0","issue_description":"While updating the new User Guide, I wanted to create a test case for the custom CRUD section and the `@Loader` only works for entities but not for collections (as it was the case according to the old docs).  The unit test can be loacted here:  hibernate-orm\/documentation\/src\/test\/java\/org\/hibernate\/userguide\/sql\/CollectionLoaderTest.java#test_HHH10557  The test throws a NullPointerException when getting the collection size because the internal bag is not initialized by the @Loader.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10557?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10555":{"info":{"issue_title":"How to specify oracle edition name in hibernate config file ","issue_key":"HHH-10555","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Minor","issue_affects_version":"Rejected","issue_fix_version":"3.0 final ,                                            4.0.0.Final ,                                            5.0.0.Final","issue_component":"3.0 final ,                                            4.0.0.Final ,                                            5.0.0.Final","issue_labels":"3.0 final","issue_description":"Currently our project is using Oracle 11g.\r\n We are trying to active zero down time from DB deployment using Oracle Edition Based Redefinition.  How to specify the oracle edition name in the hibernate config file.  Note: Attached is how we can do in oracle weblogic data source.  https:\/\/blogs.oracle.com\/WebLogicServer\/entry\/using_oracle_edition_based_redefinition  Currently we are not using any application server and our hibernate application is running as standard alone application, and we are specifying the connection url in hibernate config file.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10555?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-75338","commnet_date":"2016-02-23T04:34:53-0800","commnet_user":"vijayaraghavan","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       vijayaraghavann added a comment  - 23\/Feb\/2016 04:34 AM    n        n        Hi All,nnAny body can help on this task? n    n    n        n            Show  n            n                        n    n    n    n                nn       vijayaraghavann added a comment  - 23\/Feb\/2016 04:34 AM                      Hi All, nn Any body can help on this task?              n        n    n"},{"commnet_id":"comment-75349","commnet_date":"2016-02-23T11:44:01-0800","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 23\/Feb\/2016 11:44 AM    n        n        This is, at best, an improvement and it certainly is not a blocker.nnWe are no longer doing work on Hibernate 3.x; we are actively doing development work for 5.0 and 5.1. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 23\/Feb\/2016 11:44 AM                      This is, at best, an improvement and it certainly is not a blocker. nn We are no longer doing work on Hibernate 3.x; we are actively doing development work for 5.0 and 5.1.              n        n    n"},{"commnet_id":"comment-75351","commnet_date":"2016-02-23T13:04:49-0800","commnet_user":"vijayaraghavan","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       vijayaraghavann added a comment  - 23\/Feb\/2016 13:04 PM    n        n        Do we have a solution for this in 4.X or 5.X?\r\nnWe need this help ASAP to decide to go with oracle edition or not. n    n    n        n            Show  n            n                        n    n    n    n                nn       vijayaraghavann added a comment  - 23\/Feb\/2016 13:04 PM                      Do we have a solution for this in 4.X or 5.X? nWe need this help ASAP to decide to go with oracle edition or not.              n        n    n"},{"commnet_id":"comment-75535","commnet_date":"2016-02-29T04:12:07-0800","commnet_user":"vijayaraghavan","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       vijayaraghavann added a comment  - 29\/Feb\/2016 04:12 AM    n        n        Any comments suggestion on this space? n    n    n        n            Show  n            n                        n    n    n    n                nn       vijayaraghavann added a comment  - 29\/Feb\/2016 04:12 AM                      Any comments suggestion on this space?              n        n    n"},{"commnet_id":"comment-76832","commnet_date":"2016-04-07T03:40:15-0700","commnet_user":"vijayaraghavan","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       vijayaraghavann added a comment  - 07\/Apr\/2016 03:40 AM    n        n        We fix this by the connection pool configuration.\r\nn&lt;property name=\"hibernate.connection.provider_class\"&gt;org.hibernate.connection.C3P0ConnectionProvider&lt;\/property&gt;\r\nn &lt;property name=\"hibernate.c3p0.acquire_increment\"&gt;2&lt;\/property&gt;\r\nn &lt;property name=\"hibernate.c3p0.idle_test_period\"&gt;300&lt;\/property&gt;\r\nn &lt;property name=\"hibernate.c3p0.timeout\"&gt;1800&lt;\/property&gt;\r\nn &lt;property name=\"hibernate.c3p0.max_size\"&gt;25&lt;\/property&gt;\r\nn &lt;property name=\"hibernate.c3p0.min_size\" &gt;3&lt;\/property&gt;\r\nn &lt;property name=\"hibernate.c3p0.max_statement\"&gt;0&lt;\/property&gt;\r\nn &lt;property name=\"hibernate.c3p0.preferredTestQuery\"&gt;ALTER SESSION SET EDITION=R2016_03_01&lt;\/property&gt;\r\nn &lt;property name=\"hibernate.c3p0.testConnectionOnCheckout\"&gt;true&lt;\/property&gt;nnwith test query we are setting up the oracle EBR edition version ... \r\nnby doing this whenever code gets the connection it will be form the new edition. n    n    n        n            Show  n            n                        n    n    n    n                nn       vijayaraghavann added a comment  - 07\/Apr\/2016 03:40 AM                      We fix this by the connection pool configuration. n&lt;property name=\"hibernate.connection.provider_class\"&gt;org.hibernate.connection.C3P0ConnectionProvider&lt;\/property&gt; n &lt;property name=\"hibernate.c3p0.acquire_increment\"&gt;2&lt;\/property&gt; n &lt;property name=\"hibernate.c3p0.idle_test_period\"&gt;300&lt;\/property&gt; n &lt;property name=\"hibernate.c3p0.timeout\"&gt;1800&lt;\/property&gt; n &lt;property name=\"hibernate.c3p0.max_size\"&gt;25&lt;\/property&gt; n &lt;property name=\"hibernate.c3p0.min_size\" &gt;3&lt;\/property&gt; n &lt;property name=\"hibernate.c3p0.max_statement\"&gt;0&lt;\/property&gt; n  &lt;property name=\"hibernate.c3p0.preferredTestQuery\"&gt;ALTER SESSION SET EDITION=R2016_03_01&lt;\/property&gt;  n &lt;property name=\"hibernate.c3p0.testConnectionOnCheckout\"&gt;true&lt;\/property&gt; nn with test query we are setting up the oracle EBR edition version ...  nby doing this whenever code gets the connection it will be form the new edition.              n        n    n"},{"commnet_id":"comment-76833","commnet_date":"2016-04-07T03:40:37-0700","commnet_user":"vijayaraghavan","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       vijayaraghavann added a comment  - 07\/Apr\/2016 03:40 AM    n        n        3d n    n    n        n            Show  n            n                        n    n    n    n                nn       vijayaraghavann added a comment  - 07\/Apr\/2016 03:40 AM                      3d              n        n    n"},{"commnet_id":"comment-76840","commnet_date":"2016-04-07T11:43:09-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 07\/Apr\/2016 11:43 AM    n        n        This is not a hibernate issue. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 07\/Apr\/2016 11:43 AM                      This is not a hibernate issue.              n        n    n"}]}},{"HHH-10552":{"info":{"issue_title":"Gradle plugin section of Bytecode Enhancement should specify how to apply the plugin","issue_key":"HHH-10552","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.1","issue_labels":"5.1.1","issue_description":"See title","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10552?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2105":{"info":{"issue_title":"Don&#39;t use nested mapping by default with ES backend","issue_key":"HSEARCH-2105","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Alpha2","issue_labels":"5.6.0.Alpha2","issue_description":"Let's use the unnested mapping by default for now. In follow-up steps it could be nested by default for embedded collections with more than one field and eventually user-configurable per association.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2105?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2104":{"info":{"issue_title":"Merge Asynchronous Backend from GSOC 2015","issue_key":"HSEARCH-2104","issue_type":"New Feature","issue_status":"Pull Request Sent","issue_priority":"Pull Request Sent","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.7","issue_labels":"5.7","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2104?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-75333","commnet_date":"2016-02-22T05:29:42-0800","commnet_user":"Martin Braun","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Martin Braunn added a comment  - 22\/Feb\/2016 05:29 AM    n        n        This could be useful:nnhttps:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1861 n    n    n        n            Show  n            n                        n    n    n    n                nn       Martin Braunn added a comment  - 22\/Feb\/2016 05:29 AM                      This could be useful: nn  https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1861               n        n    n"}]}},{"HV-1060":{"info":{"issue_title":"Include messages for @EAN and @ParameterScriptAssert in Brazilian Portuguese error messages","issue_key":"HV-1060","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"5.3.0.Alpha1","issue_component":"5.3.0.Alpha1","issue_labels":"5.3.0.Alpha1","issue_description":"org.hibernate.validator.constraints.EAN.message \t\t\t\t= c\u00f3digo de barras  {type}  inv\\u00E1lido  org.hibernate.validator.constraints.ParametersScriptAssert.message = o script \" {script} \" n\u00e3o retornou verdadeiro","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1060?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2103":{"info":{"issue_title":"Fix Checkstyle for Java 8 syntax","issue_key":"HSEARCH-2103","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"The current checkstyle version in use for Hibernate Search is 5.7 which is from 2014.  I am using Java 8 for some classes in my async backend pull request and checkstyle fails because of Java 8 syntax. Maybe this is due to some configuration problem, but the checkstyle version is still quite old.  In my opinion, the version should be updated to the most recent version 6.15 or to at least 6.11.2 which is compatible with maven-checkstyle-plugin:2.17.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2103?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2102":{"info":{"issue_title":"Optimise function: LazyQueryState.validateQuery()","issue_key":"HSEARCH-2102","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.7","issue_labels":"5.7","issue_description":"The code in org.hibernate.search.query.engine.impl.LazyQueryState.validateQuery() has an impact on performance and we should be able to rethink it in some smart way.  For example, I suspect we're currently collecting all fieldnames for each cathegory to simplify the code and make it easy to throw a user-friendly exception, but I wonder if we could attempt an \"optimistic validation\" which doesn't collect anything unless something is actually wrong, in that case we can fall back to the slower strategy to still show a user friendly error.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2102?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2101":{"info":{"issue_title":"Optimise execution for hot path: ImmutableSearchFactory.getIndexBinding(Class)","issue_key":"HSEARCH-2101","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Minor","issue_affects_version":"Out of Date","issue_fix_version":"None","issue_component":"None","issue_labels":"engine","issue_description":"This class is currently relying on a ConcurrentHashMap but since it's essentially read only after boot phase - with the notable exception of rare events such as dynamic discovery of a new type - it could be optimised for intense reading operations.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2101?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2100":{"info":{"issue_title":"CPU hotspot in query.dsl.impl.Helper.getDocumentBuilder(QueryBuildingContext)","issue_key":"HSEARCH-2100","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta1","issue_labels":"5.6.0.Beta1","issue_description":"org.hibernate.search.query.dsl.impl.Helper.getDocumentBuilder(QueryBuildingContext)\r\n is invoked very frequently by the DSL helpers and is not particularly efficient.\r\n Seems an easy win to cache the DocumentBuilder in a field of QueryBuildingContext.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2100?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10546":{"info":{"issue_title":"InfinispanRegionFactory should stop any caches it starts","issue_key":"HHH-10546","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"4.3.11 ,                                            5.1.0 ,                                            5.0.8","issue_component":"4.3.11 ,                                            5.1.0 ,                                            5.0.8","issue_labels":"4.3.11","issue_description":"Within the context of hibernate, this is normally not a problem, since InfinispanRegionFactory relies on the stopping of the cache manager to stop any caches that were started.  However, the WF extension of this class does not stop the cache manager.  This leaves caches running that were started by the region factory - and can cause issues when the region factory is restarted.  Additionally, InfinispanRegionFactory should undefine any cache configurations that it defines.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10546?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-75274","commnet_date":"2016-02-18T12:04:31-0800","commnet_user":"Scott Marlow","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Scott Marlown added a comment  - 18\/Feb\/2016 12:04 PM    n        n        forum link https:\/\/developer.jboss.org\/message\/951117 n    n    n        n            Show  n            n                        n    n    n    n                nn       Scott Marlown added a comment  - 18\/Feb\/2016 12:04 PM                      forum link  https:\/\/developer.jboss.org\/message\/951117               n        n    n"},{"commnet_id":"comment-75279","commnet_date":"2016-02-19T07:20:29-0800","commnet_user":"Paul Ferraro","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Paul Ferraron added a comment  - 19\/Feb\/2016 07:20 AM    n        n        https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1268\r\nnhttps:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1269 n    n    n        n            Show  n            n                        n    n    n    n                nn       Paul Ferraron added a comment  - 19\/Feb\/2016 07:20 AM                       https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1268  n https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1269               n        n    n"},{"commnet_id":"comment-75641","commnet_date":"2016-03-01T15:40:03-0800","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 01\/Mar\/2016 15:40 PM    n        n        Fixed in master and 5.0 branches. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 01\/Mar\/2016 15:40 PM                      Fixed in master and 5.0 branches.              n        n    n"}]}},{"OGM-983":{"info":{"issue_title":"Create integration with Apache Ignite (and GridGain)","issue_key":"OGM-983","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"ignite","issue_description":"Apache Ignite: http:\/\/ignite.apache.org\/features\/datagrid.html\r\n Commercial version (GridGain): http:\/\/www.gridgain.com\/products\/in-memory-data-fabric\/overview\/  (Maybe this should be split in two separate issues)","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-983?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1058":{"info":{"issue_title":"Avoid repeated retrieval of default group sequence in BeanMetadataImpl#getConstrainedPropertiesAsDescriptors()","issue_key":"HV-1058","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.3.0.CR1","issue_labels":"5.3.0.CR1","issue_description":"getDefaultGroupSequence() is invoked once per property in getConstrainedPropertiesAsDescriptors() (and similarly in getConstrainedMethodsAsDescriptors). That's fine for statically defined group sequences, but it triggers a configured default group sequence provider repeatedly, which should be avoided by fetching the sequence once and pass it to getConstrainedPropertiesAsDescriptors() etc.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1058?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10541":{"info":{"issue_title":"Create Vibur DBCP connection pool module","issue_key":"HHH-10541","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.0.7 ,                                            5.1.0","issue_component":"5.0.7 ,                                            5.1.0","issue_labels":"5.0.7","issue_description":"Please include an integration module for Vibur DBCP (https:\/\/github.com\/vibur\/vibur-dbcp, documentation: http:\/\/www.vibur.org\/) in the official Hibernate distribution.  Vibur DBCP is a mature and complete JDBC connection pool library which has been in active development for 3+ years now, and which offers between others:  \tnon-starvation guarantee for application threads \tadvanced performance monitoring capabilities \tHibernate 3.6.x, 4.x and 5.x integration support, as separate modules \tcaching support for JDBC Statements (Prepared and Callable)    Vibur requires Java 1.7.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10541?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-85919","commnet_date":"2016-11-11T05:19:09-0800","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 11\/Nov\/2016 05:19 AM    n        n        I had the impression that the necessary integration point already existed in the Vibur distribution. So this should be more about donating that module (legal task?) and then import the existing code, integrating with our build.  n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 11\/Nov\/2016 05:19 AM                      I had the impression that the necessary integration point already existed in the Vibur distribution. So this should be more about donating that module (legal task?) and then import the existing code, integrating with our build.               n        n    n"},{"commnet_id":"comment-85920","commnet_date":"2016-11-11T05:20:27-0800","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 11\/Nov\/2016 05:20 AM    n        n        (if it's trivial it might be quicker to re-emplement it, to avoid any legal paperwork)  n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 11\/Nov\/2016 05:20 AM                      (if it's trivial it might be quicker to re-emplement it, to avoid any legal paperwork)               n        n    n"},{"commnet_id":"comment-85921","commnet_date":"2016-11-11T05:54:01-0800","commnet_user":"Simeon Malchev","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Simeon Malchevn added a comment  - 11\/Nov\/2016 05:54 AM    n        n        My whole project is ASL 2.0 licensed, hope this works well for you? I'm happy to go the donation \/ legal task path if needed. Note that I have ConnectionProvider implementation for Hibernate 3.6, 4.x, and 5.&#91;0-1&#93; , but not for 5.2 - this is the point where a change was introduced in Hibernate. Let me know how you want to continue. nnAlso, I'm guessing that you're considering the integration for your 5.x branches only, is this correct?nnAnd of course, I'll be able to help with choosing the default configuration values for Vibur where needed, etc. n    n    n        n            Show  n            n                        n    n    n    n                nn       Simeon Malchevn added a comment  - 11\/Nov\/2016 05:54 AM                      My whole project is ASL 2.0 licensed, hope this works well for you? I'm happy to go the donation \/ legal task path if needed. Note that I have ConnectionProvider implementation for Hibernate 3.6, 4.x, and 5. &#91;0-1&#93; , but not for 5.2 - this is the point where a change was introduced in Hibernate. Let me know how you want to continue.  nn Also, I'm guessing that you're considering the integration for your 5.x branches only, is this correct? nn And of course, I'll be able to help with choosing the default configuration values for Vibur where needed, etc.              n        n    n"},{"commnet_id":"comment-85922","commnet_date":"2016-11-11T06:40:31-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 11\/Nov\/2016 06:40 AM    n        n        ASL 2.0 would work but LGPL would be preferred mainly because the rest of the codebase is LGPL.nnAnd yes, the idea would be that the new module would only be moving forward.  Technically we could add it to 5.2, but I'd really only \"announce it\" for whatever comes after 5.2 (whether that be 5.3 or 6.0 is still to be decided in the next few months).nnSince the code already exists in Vibur (albeit in form that needs some tweaking for 5.2) as Sanne points out the actual work should be pretty trivial.  I really comes down to the legalese as Sanne also mentions. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 11\/Nov\/2016 06:40 AM                      ASL 2.0 would work but LGPL would be preferred mainly because the rest of the codebase is LGPL. nn And yes, the idea would be that the new module would only be moving forward.  Technically we could add it to 5.2, but I'd really only \"announce it\" for whatever comes after 5.2 (whether that be 5.3 or 6.0 is still to be decided in the next few months). nn Since the code already exists in Vibur (albeit in form that needs some tweaking for 5.2) as Sanne points out the actual work should be pretty trivial.  I really comes down to the legalese as Sanne also mentions.              n        n    n"},{"commnet_id":"comment-85927","commnet_date":"2016-11-11T11:46:04-0800","commnet_user":"Simeon Malchev","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Simeon Malchevn added a comment  - 11\/Nov\/2016 11:46 AM    n        n        If I need to sign on any legalese please just contact me by my personal email. n    n    n        n            Show  n            n                        n    n    n    n                nn       Simeon Malchevn added a comment  - 11\/Nov\/2016 11:46 AM                      If I need to sign on any legalese please just contact me by my personal email.              n        n    n"}]}},{"HHH-10539":{"info":{"issue_title":"Cannot easily suppress warning &quot;this operation breaks ==&quot; from StatefulPersistenceContext","issue_key":"HHH-10539","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"4.0.0.Alpha1 ,                                            5.0.7","issue_component":"4.0.0.Alpha1 ,                                            5.0.7","issue_labels":"4.0.0.Alpha1","issue_description":"In Hibernate 3, it was possible to suppress the warning \"this operation breaks ==\" given by StatefulPersistenceContext by setting the level of the \"org.hibernate.engine.StatefulPersistentContext.ProxyWarnLog\" logger to ERROR (see                                                          HHH-1367                                                              Closed                , lost in commit a9b1425f3f07021dae556e710b2bdfdc3812661b (4.0.0.Alpha1)).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10539?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2099":{"info":{"issue_title":"Upgrade to Apache Lucene 5.5.0","issue_key":"HSEARCH-2099","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Alpha2","issue_labels":"5.6.0.Alpha2","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2099?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10536":{"info":{"issue_title":"Shade Javassist javassist.util.proxy package so that applications do not need Javassist dependency","issue_key":"HHH-10536","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"Currently, Hibernate applications are required to have a Javassist dependency.  In modular classloading environments (e.g. WildFly + OSGi), applications are therefore not allowed to include their own Javassist classes (which may be a different version of Javassist than what Hibernate ORM needs).  Related Hibernate-dev ml discussion\r\n Related WildFly dev ml discussion  Hack test that manually repackages javassist.util.proxy","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10536?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-78372","commnet_date":"2016-05-24T11:22:52-0700","commnet_user":"Scott Marlow","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Scott Marlown added a comment  - 24\/May\/2016 11:22 AM    n        n        n    n                n        n            n            HHH-10742n        n                                                    In Progress n             n is (attempting to) change the Hibernate use of Javassist proxies to not require applications to have Hibernate\/Javassist on the application classloader path. n    n    n        n            Show  n            n                        n    n    n    n                nn       Scott Marlown added a comment  - 24\/May\/2016 11:22 AM                      n     n                 n         n             n            HHH-10742n         n                                                     In Progress n             n is (attempting to) change the Hibernate use of Javassist proxies to not require applications to have Hibernate\/Javassist on the application classloader path.              n        n    n"}]}},{"HSEARCH-2098":{"info":{"issue_title":"Clarify documentation of @IndexedEmbedded#prefix()","issue_key":"HSEARCH-2098","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta2","issue_labels":"5.6.0.Beta2","issue_description":"The description of the default behavior is contradictory:   \t\"defaults to  {@code propertyname.} \" \t\"Default to \".\"\"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2098?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-75243","commnet_date":"2016-02-16T10:59:09-0800","commnet_user":"Guillaume Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Guillaume Smetn added a comment  - 16\/Feb\/2016 10:59 AM    n        n        I had the same thought while reading the doc.nnThe fact is that the default value is \".\" but it's transformed afterwards in \"propertyname.\". n    n    n        n            Show  n            n                        n    n    n    n                nn       Guillaume Smetn added a comment  - 16\/Feb\/2016 10:59 AM                      I had the same thought while reading the doc. nn The fact is that the default value is \".\" but it's transformed afterwards in \"propertyname.\".              n        n    n"}]}},{"HHH-10532":{"info":{"issue_title":"Cannot marshall JaxbHbmBasicAttributeType to xml if the &quot;generated&quot; attribute is not specified","issue_key":"HHH-10532","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"5.0.7 ,                                            5.1.0","issue_component":"5.0.7 ,                                            5.1.0","issue_labels":"5.0.7","issue_description":"bug description Marshalling a JaxbHbmBasicAttributeType to xml throws a NPE if the generated attribut has not been set whereas the generated attribute of property-element is not declared as use=\"required\" in the hibernate-mapping-4.0.xsd.  Step to reproduce See attached test case  Workaround explicitely set the generated attribute for JaxbHbmBasicAttributeType. It defaults to never, this value can be safely used.  Fix handle a null argument in org.hibernate.boot.jaxb.hbm.internal.GenerationTimingConverter.toXml(GenerationTiming). See attached patch.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10532?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-75355","commnet_date":"2016-02-23T16:08:55-0800","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 23\/Feb\/2016 16:08 PM    n        n        Jean-Franu00E7ois BOEUF, IIUC, null should not be passed to GenerationTimingConverter#toXml. Please provide an hbm.xml mapping that causes this to happen.. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 23\/Feb\/2016 16:08 PM                       Jean-Franu00E7ois BOEUF , IIUC,  null  should not be passed to  GenerationTimingConverter#toXml . Please provide an hbm.xml mapping that causes this to happen..              n        n    n"},{"commnet_id":"comment-75371","commnet_date":"2016-02-24T01:54:47-0800","commnet_user":"Jean-Franu00E7ois BOEUF","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Jean-Franu00E7ois BOEUFn added a comment  - 24\/Feb\/2016 01:54 AM    n        n        The issue is marshalling the JaxbHbmBasicAttributeType to xml. I know it is not a hibernate main feature and that's why I gave the lower priority. But as the JAXB bindings exist, let make them work... Might be very useful to generate mapping definition programmatically. I provided test cases with with the pull request that reproduce the problem. The simplest .hbm.xml that reproduces the problem is :\r\nn&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt;\r\nn&lt;hibernate-mapping xmlns=\"http:\/\/www.hibernate.org\/xsd\/orm\/hbm\"&gt;\r\nn    &lt;class&gt;\r\nn        &lt;id\/&gt;\r\nn        &lt;property name=\"attributeName\"\/&gt;\r\nn    &lt;\/class&gt;\r\nn&lt;\/hibernate-mapping&gt;\r\nnThis xml defines a valid mapping, but the generated binding cannot be reverted to xml (Try to marshall the generated JaxbHbmHibernateMapping back to xml). n    n    n        n            Show  n            n                        n    n    n    n                nn       Jean-Franu00E7ois BOEUFn added a comment  - 24\/Feb\/2016 01:54 AM                      The issue is  marshalling  the JaxbHbmBasicAttributeType to xml. I know it is not a hibernate main feature and that's why I gave the lower priority. But as the JAXB bindings exist, let make them work... Might be very useful to generate mapping definition programmatically. I provided test cases with with the pull request that reproduce the problem. The simplest .hbm.xml that reproduces the problem is : n&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt; n&lt;hibernate-mapping xmlns=\"http:\/\/www.hibernate.org\/xsd\/orm\/hbm\"&gt; n    &lt;class&gt; n        &lt;id\/&gt; n        &lt;property name=\"attributeName\"\/&gt; n    &lt;\/class&gt; n&lt;\/hibernate-mapping&gt; nThis xml defines a valid mapping, but the generated binding cannot be reverted to xml (Try to marshall the generated JaxbHbmHibernateMapping back to xml).              n        n    n"},{"commnet_id":"comment-75395","commnet_date":"2016-02-24T19:05:13-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 24\/Feb\/2016 19:05 PM    n        n        As you mention, this is outside the scope of Hibernate's use of the JAX bindings.  We tend to write these kind of reports off as unsupported usages.  This one is trivial enough that I think we can handle it.  As long as the attached test really works as a regression (aka, I can use it to reproduce the problem currently) then I will consider it. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 24\/Feb\/2016 19:05 PM                      As you mention, this is outside the scope of Hibernate's use of the JAX bindings.  We tend to write these kind of reports off as unsupported usages.  This one is trivial enough that I think we can handle it.  As long as the attached test really works as a regression (aka, I can use it to reproduce the problem currently) then I will consider it.              n        n    n"},{"commnet_id":"comment-75676","commnet_date":"2016-03-04T06:24:09-0800","commnet_user":"Jean-Franu00E7ois BOEUF","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Jean-Franu00E7ois BOEUFn added a comment  - 04\/Mar\/2016 06:24 AM    n        n        Thanks to considerate my request. Please, only take into account the test included in the pull request which is much better than the one attached to this bug report (and I made a mistake attaching the .class instead of .java).  I've just re-based my branches on master; the provided tests still reproduce the issues and all tests are still OK after fixing. n    n    n        n            Show  n            n                        n    n    n    n                nn       Jean-Franu00E7ois BOEUFn added a comment  - 04\/Mar\/2016 06:24 AM                      Thanks to considerate my request. Please, only take into account the test included in the pull request which is much better than the one attached to this bug report (and I made a mistake attaching the .class instead of .java).  I've just re-based my branches on master; the provided tests still reproduce the issues and all tests are still OK after fixing.              n        n    n"},{"commnet_id":"comment-81652","commnet_date":"2016-07-26T01:24:15-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 26\/Jul\/2016 01:24 AM    n        n        Applied PR upstream. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 26\/Jul\/2016 01:24 AM                      Applied PR upstream.              n        n    n"}]}},{"HHH-10531":{"info":{"issue_title":"JaxbHbmTuplizerType marshalling does not conform hibernate-mapping-4.0.xsd","issue_key":"HHH-10531","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"5.0.7 ,                                            5.1.0","issue_component":"5.0.7 ,                                            5.1.0","issue_labels":"5.0.7","issue_description":"Problem description Marshalling a JaxbHbmTuplizerType to Xml :  \tDoes not take into account the entity mode attribute may be null whereas the xml-schema does not specifies it as use=\"required\" (a NPE is thrown). \tDoes not serialize the entity mode properly. The Enum litteral is inserted (POJO, MAP) instead of the xsd-specified values (\"pojo\", \"dynamic-map\"). Creating a session factory with the generated Xml throws a org.hibernate.boot.InvalidMappingException.    As a consequences, the xml cannot be generated or the generated xml does not define a valid mapping file.  Steps to reproduce See attached file.  Workaround The first problem (NPE) may be avoided specifying explicitly the entity mode but the generated xml still cannot be added to a Configuration.  Fix org.hibernate.boot.jaxb.hbm.internal.EntityModeConverter.toXml(EntityMode) should return entityMode.getExternalName() instead of entityMode.name() and handle a potentially null argument.  Edit  \tUpdated test case \tprovide patch for fix.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10531?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-75356","commnet_date":"2016-02-23T16:12:06-0800","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 23\/Feb\/2016 16:12 PM    n        n        Please provide a .hbm.xml mapping that reproduces the NPE. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 23\/Feb\/2016 16:12 PM                      Please provide a .hbm.xml mapping that reproduces the NPE.              n        n    n"},{"commnet_id":"comment-75370","commnet_date":"2016-02-24T01:46:55-0800","commnet_user":"Jean-Franu00E7ois BOEUF","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Jean-Franu00E7ois BOEUFn added a comment  - 24\/Feb\/2016 01:46 AM     - edited  n        n        The issue is marshalling the JaxbHbmTuplizerType to xml. I know it is not a hibernate main feature and that's why I gave the lower priority. But as the JAXB bindings exist, let make them work... Might be very useful to generate mapping definition programmatically. I provided test cases with with the pull request that reproduce the problem. The simplest .hbm.xml that reproduces the problem is :nn{{&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt;\r\nn&lt;hibernate-mapping xmlns=\"http:\/\/www.hibernate.org\/xsd\/orm\/hbm\"&gt;\r\nn    &lt;class&gt;\r\nn        &lt;tuplizer class=\"org.hibernate.tuple.entity.DynamicMapEntityTuplizer\"\/&gt;\r\nn        &lt;id\/&gt;\r\nn    &lt;\/class&gt;\r\nn&lt;\/hibernate-mapping&gt;}}nnThis xml defines a valid mapping, but the generated binding cannot be reverted to xml (Try to marshall the generated JaxbHbmHibernateMapping back to xml). n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Jean-Franu00E7ois BOEUFn added a comment  - 24\/Feb\/2016 01:46 AM     - edited                    The issue is  marshalling  the JaxbHbmTuplizerType to xml. I know it is not a hibernate main feature and that's why I gave the lower priority. But as the JAXB bindings exist, let make them work... Might be very useful to generate mapping definition programmatically. I provided test cases with with the pull request that reproduce the problem. The simplest .hbm.xml that reproduces the problem is : nn {{&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?&gt; n&lt;hibernate-mapping xmlns=\"http:\/\/www.hibernate.org\/xsd\/orm\/hbm\"&gt; n    &lt;class&gt; n        &lt;tuplizer class=\"org.hibernate.tuple.entity.DynamicMapEntityTuplizer\"\/&gt; n        &lt;id\/&gt; n    &lt;\/class&gt; n&lt;\/hibernate-mapping&gt;}} nn This xml defines a valid mapping, but the generated binding cannot be reverted to xml (Try to marshall the generated JaxbHbmHibernateMapping back to xml).              n        n    n"},{"commnet_id":"comment-75396","commnet_date":"2016-02-24T19:06:11-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 24\/Feb\/2016 19:06 PM    n        n        Same general comments as n    n                n        n            n            HHH-10532n        n                                                    Closed n             n n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 24\/Feb\/2016 19:06 PM                      Same general comments as n     n                 n         n             n            HHH-10532n         n                                                     Closed n             n              n        n    n"},{"commnet_id":"comment-81653","commnet_date":"2016-07-26T01:24:39-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 26\/Jul\/2016 01:24 AM    n        n        Applied PR upstream. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 26\/Jul\/2016 01:24 AM                      Applied PR upstream.              n        n    n"}]}},{"HHH-10530":{"info":{"issue_title":"Add support for calling SQL functions and retrieving the function result","issue_key":"HHH-10530","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.1.0","issue_component":"5.1.0","issue_labels":"5.1.0","issue_description":"There's been a discussion on the Hibernate mailing list regarding this topic, and I'll simply copy Steve's concusions:  I think too that we need to keep the native\/JPA split in mind.  We are much more limited in how we might support this in JPA due to not being able to change those contracts.  So in JPA that means either hints or an extension contract. Let's model the native API first since there we have the most flexibility.  Again, it really comes down to whether it makes sense to model the distinction between \"call return\" and \"call arguments\" (arguments might also retrieve values back).  Technically the existing registerParameter\/ParameterRegistration infrastructure could handle modeling the idea of a \"call return\" assuming that: The parameters are always registered by position, not name The first parameter is the \"call return\" We are given some indication (hint, etc) that we need to be dealing with the `{?=call(...)}` syntax  Or we could instead model the \"call return\" as separate from \"call arguments\", whether directly on ProcedureCall or on a separate contract FunctionCall.  And in fact if we go the route of modeling this \"call return\" separately, we can have a single-point trigger for the type of executable call to make: ProcedureCall call = session.createStoredProcedureCall( ... ); call.registerCallReturn( Integer.class ); call.registerParameter( ... ); In fact if we end up going this route, I'd suggest deprecating `#registerParameter` in favor of `#registerCallArgument`.  Anyway, above the call to `#registerCallReturn` tells us completely everything we need to make a `{?=call(...)}` call instead of the `{call(...)}` form. For JPA the only options really are a hint or an extension.  With the hint approach, we pretty much have to follow the 3-point assumptions I set above in terms of the JPA object.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10530?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2093":{"info":{"issue_title":"Clarify meaning of constant names on IndexSchemaManagementStrategy","issue_key":"HSEARCH-2093","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta1","issue_labels":"5.6.0.Beta1","issue_description":"The new enum IndexManagementStrategy presents various options regarding to drop,create,.. existing indexes on an Elasticsearch cluster.  We need to discuss these names; for example I'm not sure that it's clear enough that using \"CREATE\" will wipe out existing data.  Regarding \"MERGE\": it looks like a nice idea but we don't implement that yet, so I wonder if we should rather not have this option yet.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2093?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-77464","commnet_date":"2016-05-02T23:32:56-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 02\/May\/2016 23:32 PM    n        n        nI'm not sure that it's clear enough that using \"CREATE\" will wipe out existing data.nnI used it as that value and its behavior will be familiar to users of ORM's hbm2ddl settings. \"DELETE_CREATE\" sounds good, too.nnnRegarding \"MERGE\": it looks like a nice idea but we don't implement that yetnnThat's the default behavior actually. Is there anything you think is missing? n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 02\/May\/2016 23:32 PM                      n I'm not sure that it's clear enough that using \"CREATE\" will wipe out existing data.  nn I used it as that value and its behavior will be familiar to users of ORM's hbm2ddl settings. \"DELETE_CREATE\" sounds good, too. nn n Regarding \"MERGE\": it looks like a nice idea but we don't implement that yet  nn That's the default behavior actually. Is there anything you think is missing?              n        n    n"},{"commnet_id":"comment-78253","commnet_date":"2016-05-20T14:10:36-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 20\/May\/2016 14:10 PM    n        n        Sounds reasonable. I'll keep these names then, and just clarify some things in javadoc. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 20\/May\/2016 14:10 PM                      Sounds reasonable. I'll keep these names then, and just clarify some things in javadoc.              n        n    n"}]}},{"HSEARCH-2092":{"info":{"issue_title":"Map the optimize() operation to Elasticsearch &#39;force merge&#39; requests","issue_key":"HSEARCH-2092","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta3","issue_labels":"5.6.0.Beta3","issue_description":"Technically our concept of \"Index optimisation\" maps to Elasticsearch's \"force merge\", so this should be easy to implement.  Documentation wise, we should make sure to point out that the need for optimisation is rarely real nowadays: an alternative would be to consider index optimisation a deprecated concept, however I think we can keep it for the sake of the minimal improvement it provides to people who deal with an index which really is meant to stay in \"read only\" for a long time, in which case it might still be a good idea to force the merge operation.  https:\/\/www.elastic.co\/guide\/en\/elasticsearch\/reference\/2.x\/indices-forcemerge.html","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2092?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2091":{"info":{"issue_title":"ElasticSearchIndexWorkVisitor should not be allocated for each operation","issue_key":"HSEARCH-2091","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Alpha3","issue_labels":"5.6.0.Alpha3","issue_description":"The intention of the WorkVisitor system is to minimize object allocation, and benefit from other reuse capabilities; for example we could make sure to lookup the JestClient only once.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2091?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-75385","commnet_date":"2016-02-24T08:58:48-0800","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Gunnar Morlingn added a comment  - 24\/Feb\/2016 08:58 AM     - edited  n        n        Nice optimization, but keep in mind folks this is the time to make this stuff thriving feature-wise. So I'd rather see us working on things with high end-user impact such as support for nested queries, analyzers, the API\/SPI overhaul etc. etc. All the perf honing can come at another time, IMHO. This is not to say to not do it if it's a quick thing, but let's keep the priorities right. n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Gunnar Morlingn added a comment  - 24\/Feb\/2016 08:58 AM     - edited                    Nice optimization, but keep in mind folks this is the time to make this stuff thriving feature-wise. So I'd rather see us working on things with high end-user impact such as support for nested queries, analyzers, the API\/SPI overhaul etc. etc. All the perf honing can come at another time, IMHO. This is not to say to not do it if it's a quick thing, but let's keep the priorities right.              n        n    n"},{"commnet_id":"comment-75387","commnet_date":"2016-02-24T09:43:58-0800","commnet_user":"Guillaume Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Guillaume Smetn added a comment  - 24\/Feb\/2016 09:43 AM    n        n        Yes, looked like a no brainer and I like to keep the number of issues open low so I use to work on quick fixes part of the day.nnWould have been even better with the brain on though. n    n    n        n            Show  n            n                        n    n    n    n                nn       Guillaume Smetn added a comment  - 24\/Feb\/2016 09:43 AM                      Yes, looked like a no brainer and I like to keep the number of issues open low so I use to work on quick fixes part of the day. nn Would have been even better with the brain on though.              n        n    n"},{"commnet_id":"comment-75388","commnet_date":"2016-02-24T09:48:44-0800","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 24\/Feb\/2016 09:48 AM    n        n        It is not my intention to start performance testing already. To me this is just an aspect of making sure we're designing it right, and don't stray too far away from the existing patterns, especially if there is an intent to reuse them. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 24\/Feb\/2016 09:48 AM                      It is not my intention to start performance testing already. To me this is just an aspect of making sure we're designing it right, and don't stray too far away from the existing patterns, especially if there is an intent to reuse them.              n        n    n"}]}},{"HHH-10523":{"info":{"issue_title":"2.3.20. SQL quoted identifiers in User Guide should discuss explicit enclosure in double-quotes (JPA)","issue_key":"HHH-10523","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.1,                                            5.0.11,                                            5.2.3","issue_labels":"5.1.1,                                            5.0.11,                                            5.2.3","issue_description":"2.3.20. SQL quoted identifiers of the User Guide discusses quoted identifiers by means of an explicit name using Hibernate's backtick handling.  It should also discuss using double-quote, which is the JPA standard  Additionally it does not not discuss globally quoted identifiers at all (another JPA feature) nor implicit-quoting-of-keywords (emerging Hibernate feature)","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10523?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-82255","commnet_date":"2016-08-09T15:26:26-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 09\/Aug\/2016 15:26 PM    n        n        Vlad Mihalcea, I'm wrapping up fixes so I can release 5.1.1. If you can't get to this in the next day or so, please move to 5.1.2. Thanks! n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 09\/Aug\/2016 15:26 PM                       Vlad Mihalcea , I'm wrapping up fixes so I can release 5.1.1. If you can't get to this in the next day or so, please move to 5.1.2. Thanks!              n        n    n"},{"commnet_id":"comment-82264","commnet_date":"2016-08-10T01:26:00-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 10\/Aug\/2016 01:26 AM    n        n        Sure. I fixed it on all 5.x branches. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 10\/Aug\/2016 01:26 AM                      Sure. I fixed it on all 5.x branches.              n        n    n"}]}},{"HSEARCH-2088":{"info":{"issue_title":"Take advantage of ORM&#39;s capability of MultiLoading by list of IDs","issue_key":"HSEARCH-2088","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.7","issue_labels":"5.7","issue_description":"Consider taking advantage of the new   List&lt;User&gt; users = session.byMultipleIds(User.class)      .multiLoad( 1, 2, 3 );   See also https:\/\/hibernate.atlassian.net\/browse\/HHH-7572  Other than maintainability, do we have any other benefit on changing the current proven strategies?  The drawback is that this would require Hibernate ORM 5.1.0","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2088?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-83238","commnet_date":"2016-08-29T23:40:36-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 29\/Aug\/2016 23:40 PM    n        n        Sanne Grinovero, should we adapt the current implementation for FIND_BY_ID then to use multi-load, or rather have a new ObjectInitializer? I slightly lean towards the latter. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 29\/Aug\/2016 23:40 PM                       Sanne Grinovero , should we adapt the current implementation for FIND_BY_ID then to use multi-load, or rather have a new  ObjectInitializer ? I slightly lean towards the latter.              n        n    n"},{"commnet_id":"comment-83331","commnet_date":"2016-08-30T02:11:02-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 30\/Aug\/2016 02:11 AM    n        n        I'd adapt the current implementation, as ORM (OGM?) is in a better position to know how to load these efficiently.nnWhy would you need a new ObjectInitializer ? I see no reason to keep the current implementation. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 30\/Aug\/2016 02:11 AM                      I'd adapt the current implementation, as ORM (OGM?) is in a better position to know how to load these efficiently. nn Why would you need a new  ObjectInitializer  ? I see no reason to keep the current implementation.              n        n    n"},{"commnet_id":"comment-83332","commnet_date":"2016-08-30T02:22:44-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 30\/Aug\/2016 02:22 AM    n        n        My thinking is that we may want to raise a warning when using multi-load on a dialect not supporting it. That way users would be aware of things not behaving as they may have been expecting. Not much sense to this though if HSEARCH would trigger this. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 30\/Aug\/2016 02:22 AM                      My thinking is that we may want to raise a warning when using multi-load on a dialect not supporting it. That way users would be aware of things not behaving as they may have been expecting. Not much sense to this though if HSEARCH would trigger this.              n        n    n"},{"commnet_id":"comment-83333","commnet_date":"2016-08-30T02:34:21-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 30\/Aug\/2016 02:34 AM    n        n        I'm confused on two things:nntwhich library is responsible for the warning? Search is not aware of the OGM dialects and persistence strategies.ntwhy issue a warning? If the underlying datastore doesn't support multi-fetch, then the user doesn't really have options to improve the loading.nnnnThe fact that Search uses the ORM multi-load is just a clean API expressing our need to load all those entities, what happens beyond the API invocation is up to the persister. It's one of those cases in which I'd prefer a clean abstraction and not have Search meddle with specific knowledge of the implementation, unless there's a clear performance benefit of doing differently but I see no possible advantage in not using the multi-load: as far as I know both ORM and OGM are supposed to \"fall back\" to the most sensible (and efficient) strategies? n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 30\/Aug\/2016 02:34 AM                      I'm confused on two things: n nt which library is responsible for the warning? Search is not aware of the OGM dialects and persistence strategies. nt why issue a warning? If the underlying datastore doesn't support multi-fetch, then the user doesn't really have options to improve the loading. n nnn The fact that Search uses the ORM multi-load is just a clean API expressing our need to load all those entities, what happens beyond the API invocation is up to the persister. It's one of those cases in which I'd prefer a clean abstraction and not have Search meddle with specific knowledge of the implementation, unless there's a clear performance benefit of doing differently but I see no possible advantage in not using the multi-load: as far as I know both ORM and OGM are supposed to \"fall back\" to the most sensible (and efficient) strategies?              n        n    n"},{"commnet_id":"comment-83334","commnet_date":"2016-08-30T03:16:44-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 30\/Aug\/2016 03:16 AM    n        n        My point is about OGM users explicitly using the new multi-load API themselves; should they be presented with a warning (issued by OGM) if the given backend does not actually support that call and we thus need to do an entity-by-entity fallback. Or should we just do that fall-back and don't bother the user. You are right they likely won't have any other options, but you might want to learn about such shortcoming upfront instead of happily using the API and only later on finding out that it's not doing what it's promising. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 30\/Aug\/2016 03:16 AM                      My point is about OGM users explicitly using the new multi-load API themselves; should they be presented with a warning (issued by OGM) if the given backend does not actually support that call and we thus need to do an entity-by-entity fallback. Or should we just do that fall-back and don't bother the user. You are right they likely won't have any other options, but you might want to learn about such shortcoming upfront instead of happily using the API and only later on finding out that it's not doing what it's promising.              n        n    n"},{"commnet_id":"comment-83335","commnet_date":"2016-08-30T03:44:52-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 30\/Aug\/2016 03:44 AM    n        n        Ok, so if you'd do that, it would be an OGM only patch. I have no strong opinion on it other than I'd not do it myself as I don't see big value in it.\r\nnJust make sure that Search doesn't trigger this warning when it invokes the multi-load API, as that would confuse people. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 30\/Aug\/2016 03:44 AM                      Ok, so if you'd do that, it would be an OGM only patch. I have no strong opinion on it other than I'd not do it myself as I don't see big value in it. nJust make sure that Search doesn't trigger this warning when it invokes the multi-load API, as that would confuse people.              n        n    n"},{"commnet_id":"comment-83336","commnet_date":"2016-08-30T03:55:42-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 30\/Aug\/2016 03:55 AM    n        n        nJust make sure that Search doesn't trigger this warningnnHow would we do that, though? We don't know who's calling us. That's exactly why I'd prefer to have a new initializer implementation in HSEARCH. Should there be such warning? Not sure really, but having two initializer impls would leave the door open to do so. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 30\/Aug\/2016 03:55 AM                      n Just make sure that Search doesn't trigger this warning  nn How would we do that, though? We don't know who's calling us. That's exactly why I'd prefer to have a new initializer implementation in HSEARCH. Should there be such warning? Not sure really, but having two initializer impls would leave the door open to do so.              n        n    n"},{"commnet_id":"comment-83344","commnet_date":"2016-08-30T08:30:19-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 30\/Aug\/2016 08:30 AM    n        n        I don't think a warning in OGM is necessary. n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 30\/Aug\/2016 08:30 AM                      I don't think a warning in OGM is necessary.              n        n    n"}]}},{"HHH-10509":{"info":{"issue_title":"Wrong HHH000207 warning when declaring id generator in orm.xml","issue_key":"HHH-10509","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"5.0.7","issue_component":"5.0.7","issue_labels":"5.0.7","issue_description":"Declaring the following entity:     @Entity  public  class MyEntity {    @Id    Long  id;  }     with the following content inside orm.xml:     &lt;entity class=\"...MyEntity\" &gt;    &lt;attributes&gt;      &lt;id name=\"id\" &gt;        &lt;generated-value generator=\"entitySequence\"  strategy=\"SEQUENCE\"  \/&gt;        &lt;sequence-generator name=\"entitySequence\"  sequence-name=\"entity_sequence\"  allocation-size=\"1\"  \/&gt;      &lt;\/id&gt;    &lt;\/attributes&gt;  &lt;\/entity&gt;     will give the warning:     WARN: HHH000207: Property ...MyEntity.id not found in class but described in &lt;mapping-file\/&gt; (possible typo error)","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10509?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10503":{"info":{"issue_title":"Allow entity-joins and implicit joins in same query","issue_key":"HHH-10503","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"Follow up to                                                          HHH-16                                                              Closed                .  The initial work for                                                          HHH-16                                                              Closed                 does allow for entity-joins to be specified in a query.  However, defining a query that combines entity-joins and implicit joins leads to the generation of SQL that databases will have varying support for.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10503?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10497":{"info":{"issue_title":"Allow duplicate table mapping for creating DTO&#39;s","issue_key":"HHH-10497","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.0.7","issue_component":"5.0.7","issue_labels":"5.0.7","issue_description":"To create DTO's (lighter object, that don't map the whole table\/jointable of an object) it should be possible to map multiple entities to the same table.\r\n This would be a very convenient way to create DTO's!  Right now it's not possible to create a schema like this due to the following exception:  Caused by: org.hibernate.DuplicateMappingException: Duplicate table mapping SubClass1  Could this become a warning instead of an exeception?\r\n Or a @IgnoreDuplicateTableMapping annotation of some sort?  See also the following stackoverflow issue that goes into more detail:\r\n http:\/\/stackoverflow.com\/questions\/30071394\/data-transfer-object-dto-hibernate-duplicate-table-mapping","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10497?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-75234","commnet_date":"2016-02-16T03:49:00-0800","commnet_user":"Christian Beikov","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Christian Beikovn added a comment  - 16\/Feb\/2016 03:49 AM    n        n        If read-only access to your DTOs is enough for you, take a look at blaze-persistence. Write-support is currently under development. n    n    n        n            Show  n            n                        n    n    n    n                nn       Christian Beikovn added a comment  - 16\/Feb\/2016 03:49 AM                      If read-only access to your DTOs is enough for you, take a look at  blaze-persistence . Write-support is currently under development.              n        n    n"},{"commnet_id":"comment-76276","commnet_date":"2016-03-26T11:45:55-0700","commnet_user":"Chris Cranford","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Chris Cranfordn added a comment  - 26\/Mar\/2016 11:45 AM    n        n        There are also two other read-only alternatives.nnThe HQL\/JPQL new operator:nnrnSELECT new  com.company.dtos.MySimpleDTO(o.fieldA, o.fieldB) FROM MyEntity o rnnnnThe JPA construct API:nnrnCriteriaBuilder cb = entityManager.getCriteriaBuilder();rnCriteriaQuery&lt;MySimpleDTO&gt; cq = cb.createQuery(MySimpleDTO.class);rnRoot&lt;MyEntity&gt; root = cq.from(MyEntity.class);rncq.select(cb.construct(MySimpleDTO.class, root.get(MyEntity_.fieldA), root.get(MyEntity_.fieldB)));rn...rnn n    n    n        n            Show  n            n                        n    n    n    n                nn       Chris Cranfordn added a comment  - 26\/Mar\/2016 11:45 AM                      There are also two other read-only alternatives. nn The HQL\/JPQL new operator: n  n rnSELECT  new  com.company.dtos.MySimpleDTO(o.fieldA, o.fieldB) FROM MyEntity o rn n  nn The JPA construct API: n  n rnCriteriaBuilder cb = entityManager.getCriteriaBuilder();rnCriteriaQuery&lt;MySimpleDTO&gt; cq = cb.createQuery(MySimpleDTO.class);rnRoot&lt;MyEntity&gt; root = cq.from(MyEntity.class);rncq.select(cb.construct(MySimpleDTO.class, root.get(MyEntity_.fieldA), root.get(MyEntity_.fieldB)));rn...rn n               n        n    n"}]}},{"HHH-10496":{"info":{"issue_title":"Allow RevisionTimestamp to be of type java.time.LocalDateTime","issue_key":"HHH-10496","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.7 ,                                            5.1.0 ,                                            5.2.0","issue_component":"5.0.7 ,                                            5.1.0 ,                                            5.2.0","issue_labels":"5.0.7","issue_description":"Currently the RevisionTimestamp must be of type long, Long, java.util.Date or java.sql.Date. But - following Hibernate's general support for Java 8 date and time types introduced in Hibernate 5 (see                                                          HHH-8844                                                              Closed                ) - it would be great to have RevisionTimestamp support java.time.LocalDateTime as possible type as well.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10496?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-79154","commnet_date":"2016-06-10T04:06:04-0700","commnet_user":"Marcelo Glasberg","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Marcelo Glasbergn added a comment  - 10\/Jun\/2016 04:06 AM    n        n        I didn't notice this issue before, and made a duplicate here: n    n                n        n            n            HHH-10827n        n                                                    Closed n             n. n    n    n        n            Show  n            n                        n    n    n    n                nn       Marcelo Glasbergn added a comment  - 10\/Jun\/2016 04:06 AM                      I didn't notice this issue before, and made a duplicate here: n     n                 n         n             n            HHH-10827n         n                                                     Closed n             n.              n        n    n"},{"commnet_id":"comment-79155","commnet_date":"2016-06-10T04:07:27-0700","commnet_user":"Marcelo Glasberg","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Marcelo Glasbergn added a comment  - 10\/Jun\/2016 04:07 AM    n        n        This should also deprecate: n    n                n        n            n            HHH-8069n        n                                                    Closed n             n. n    n    n        n            Show  n            n                        n    n    n    n                nn       Marcelo Glasbergn added a comment  - 10\/Jun\/2016 04:07 AM                      This should also deprecate: n     n                 n         n             n            HHH-8069n         n                                                     Closed n             n.              n        n    n"},{"commnet_id":"comment-79156","commnet_date":"2016-06-10T04:08:25-0700","commnet_user":"Marcelo Glasberg","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Marcelo Glasbergn added a comment  - 10\/Jun\/2016 04:08 AM    n        n        Another related (but independent) issue is: n    n                n        n            n            HHH-10828n        n                                                    Closed n             n. n    n    n        n            Show  n            n                        n    n    n    n                nn       Marcelo Glasbergn added a comment  - 10\/Jun\/2016 04:08 AM                      Another related (but independent) issue is: n     n                 n         n             n            HHH-10828n         n                                                     Closed n             n.              n        n    n"},{"commnet_id":"comment-79161","commnet_date":"2016-06-10T05:35:55-0700","commnet_user":"Marcelo Glasberg","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Marcelo Glasbergn added a comment  - 10\/Jun\/2016 05:35 AM    n        n        Here I posted some code to help fixing this problem: http:\/\/stackoverflow.com\/questions\/37748142\/how-to-save-utc-instead-of-local-timestamps-for-hibernate-envers-revision-info\/37748143#37748143 n    n    n        n            Show  n            n                        n    n    n    n                nn       Marcelo Glasbergn added a comment  - 10\/Jun\/2016 05:35 AM                      Here I posted some code to help fixing this problem:  http:\/\/stackoverflow.com\/questions\/37748142\/how-to-save-utc-instead-of-local-timestamps-for-hibernate-envers-revision-info\/37748143#37748143               n        n    n"}]}},{"HHH-10494":{"info":{"issue_title":"Add @Import annotation to mirror the &lt;import\/&gt; hbm.xml behavior","issue_key":"HHH-10494","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"Just like we have an &lt;import\/&gt; hbm.xml tag for supplying custom imports, we could have one or more annotations that serve this purpose as well.   \tWe need to support it on a package-level    @Import( target=MyDTO.class, rename=\"MyDTO\"  )    \tWe can support it on a class-level too    @Import( rename=\"MyDTO\" ) class MyDTO {...}","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10494?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-75061","commnet_date":"2016-02-09T12:56:04-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 09\/Feb\/2016 12:56 PM    n        n        As I mentioned on HipChat I do wonder if we ought to split these annotations based on target.  Maybe I am in the minority amongst Java devs (not sure) but I really dislike these annotations that can be used at multiple levels where at one level an attribute is required and at another its wrong to set it.  I.e. here at the package-level user would need to specify the target (class name) to import; but at the class level we all of a sudden infer the name.  It opens up all kinds of questions like:nnIs this valid?  And if so, what does it mean?nnrn@Import( fqn = Address.class, rename=\"MyDTO\"  )rnclass MyDTO { ... }rnnnnI'd also get away from \"target\" as the attribute name.  \"fqn\"?  \"clazz\"?  \"referencedClass\"? n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 09\/Feb\/2016 12:56 PM                      As I mentioned on HipChat I do wonder if we ought to split these annotations based on target.  Maybe I am in the minority amongst Java devs (not sure) but I really dislike these annotations that can be used at multiple levels where at one level an attribute is required and at another its wrong to set it.  I.e. here at the package-level user would need to specify the target (class name) to import; but at the class level we all of a sudden infer the name.  It opens up all kinds of questions like: nn Is this valid?  And if so, what does it mean? n  n rn@Import( fqn = Address.class, rename= \"MyDTO\"  )rnclass MyDTO { ... }rn n  nn I'd also get away from \"target\" as the attribute name.  \"fqn\"?  \"clazz\"?  \"referencedClass\"?              n        n    n"}]}},{"HHH-10489":{"info":{"issue_title":"DB2400Dialect could use the same LimitHandler as DB2Dialect","issue_key":"HHH-10489","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"5.0.7 ,                                            5.0.11","issue_component":"5.0.7 ,                                            5.0.11","issue_labels":"5.0.7","issue_description":"If using Query.setFirstResult(int) with DB2400Dialect an Exception is thrown:   java.lang.UnsupportedOperationException: query result offset is not supported  This problem didn't occur in previous versions (prior to Hibernate version 5).  Working with DB2Dialect Query.setFirstResult(int) works. Looking at the code of DB2Dialect, I assume that DB2400Dialect could use the same LimitHandler as DB2Dialect.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10489?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84878","commnet_date":"2016-10-11T01:35:01-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 11\/Oct\/2016 01:35 AM    n        n        Applied PR upstream.nnGail Badner, you might want to backport this issue to 5.1 and 5.0. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 11\/Oct\/2016 01:35 AM                      Applied  PR  upstream. nn  Gail Badner , you might want to backport this issue to 5.1 and 5.0.              n        n    n"}]}},{"OGM-980":{"info":{"issue_title":"Map IDENTITY id generation strategy to inline uuid() call in Cassandra","issue_key":"OGM-980","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"cassandra","issue_description":"Similar to the mapping of ObjectId in the MongoDB backend, it should be possible to map the IDENTITY strategy to uuid() calls within the INSERT statement.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-980?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10487":{"info":{"issue_title":"Add @Incubating annotation","issue_key":"HHH-10487","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0","issue_labels":"5.1.0","issue_description":"Add a new @Incubating annotation intended to mark an API as incubating to advertise to developers that the API is still being actively developed and that while it is ok for them to use, they should expect changes in it.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10487?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-74941","commnet_date":"2016-01-29T09:48:28-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Steve Ebersolen added a comment  - 29\/Jan\/2016 09:48 AM     - edited  n        n        nrn@Target({PACKAGE, TYPE, METHOD})rn@Retention(CLASS)rnpublic  @interface  Incubating {rn}rnnnnLook reasonable?  Especially the use of java.lang.annotation.RetentionPolicy#CLASS... n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Steve Ebersolen added a comment  - 29\/Jan\/2016 09:48 AM     - edited                     n rn@Target({PACKAGE, TYPE, METHOD})rn@Retention(CLASS)rn public  @ interface  Incubating {rn}rn n  nn Look reasonable?  Especially the use of  java.lang.annotation.RetentionPolicy#CLASS ...              n        n    n"}]}},{"OGM-978":{"info":{"issue_title":"Map java.util.UUID to Cassandra&#39;s native uuid type","issue_key":"OGM-978","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.CR1","issue_labels":"5.0.0.CR1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-978?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10485":{"info":{"issue_title":"Lazy collections fetched with EntityGraph load with JOIN","issue_key":"HHH-10485","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.0.6 ,                                            5.2.2 ,                                            5.1.1","issue_component":"5.0.6 ,                                            5.2.2 ,                                            5.1.1","issue_labels":"5.0.6","issue_description":"When a @OneToMany(fetch = FetchType.LAZY) List&lt;Bean&gt; beans is included with an EntityGraph, it is loaded with the owner entity with a JOIN. Is this configurable? I tried adding @Fetch(FetchMode.SELECT) but it gets ignored.\r\n Since I need to skip\/limit using firstResult()\/maxResults(), using EntityGraphs I get firstResult\/maxResults specified with collection fetch; applying in memory! and having huge result set (over 100000 records, without skip\/limit) the query takes minutes.\r\n Using FetchType.EAGER the collection is fetched with a second query, without JOIN.  Is the JOIN fetching hardcoded when using {{EntityGraph}}s? Or is it configurable?","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10485?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-83371","commnet_date":"2016-08-31T07:19:06-0700","commnet_user":"Giovanni Lovato","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Giovanni Lovaton added a comment  - 31\/Aug\/2016 07:19 AM    n        n        Thank you both, I agree about having a dynamic definition of the fetch style. BUT, @FetchProfile only accepts FetchMode.JOIN:nnrnorg.hibernate.MappingException: Only FetchMode.JOIN is currently supportedrnnnso I see no workaround either with @FetchProfile. n    n    n        n            Show  n            n                        n    n    n    n                nn       Giovanni Lovaton added a comment  - 31\/Aug\/2016 07:19 AM                      Thank you both, I agree about having a dynamic definition of the fetch style. BUT,  @FetchProfile  only accepts  FetchMode.JOIN : n  n rnorg.hibernate.MappingException: Only FetchMode.JOIN is currently supportedrn n  n so I see no workaround either with  @FetchProfile .              n        n    n"},{"commnet_id":"comment-83372","commnet_date":"2016-08-31T07:25:06-0700","commnet_user":"Giovanni Lovato","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Giovanni Lovaton added a comment  - 31\/Aug\/2016 07:25 AM     - edited  n        n        Also, the Criteria API follows a completely different implementation for entity graphs, i.e.nnnrn\/**rn * Encapsulates a JPA EntityGraph provided through a JPQL query hint.  Converts the fetches into a list of ASTrn * FromElements.  The logic is kept here as much as possible in order to make it easy to remove this  in the future ,rn * once our AST is improved and this  \"hack\"  is no longer needed.rn *rn * @author Brett Meyerrn *\/rnpublic  class EntityGraphQueryHint { \/\/ ... rnnnnwhich won't even take into account the graph type (fetch\/load) and simply updates the query with joins, killing pagination and failing with multiple collections in the graph. n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Giovanni Lovaton added a comment  - 31\/Aug\/2016 07:25 AM     - edited                    Also, the Criteria API follows a completely different implementation for entity graphs, i.e. nn  n rn\/**rn * Encapsulates a JPA EntityGraph provided through a JPQL query hint.  Converts the fetches into a list of ASTrn * FromElements.  The logic is kept here as much as possible in order to make it easy to remove  this  in the  future ,rn * once our AST is improved and  this   \"hack\"  is no longer needed.rn *rn * @author Brett Meyerrn *\/rn public  class EntityGraphQueryHint {  \/\/ ... rn n  nn which won't even take into account the graph type (fetch\/load) and simply updates the query with joins, killing pagination and failing with multiple collections in the graph.              n        n    n"},{"commnet_id":"comment-83373","commnet_date":"2016-08-31T07:25:19-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 31\/Aug\/2016 07:25 AM    n        n        You're right. I checked it and this is what I found:nnnrnorg.hibernate.annotations.FetchMode mode = fetch.mode();rnif  ( !mode.equals( org.hibernate.annotations.FetchMode.JOIN ) ) {rn    <span class=\"code-keyword\">throw<\/span> <span class=\"code-keyword\">new<\/span> MappingException( <span class=\"code-quote\">\"Only FetchMode.JOIN is currently supported\"<\/span> );rn}rnnnnWe could add support for that and wait for JPA spec to catch up. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 31\/Aug\/2016 07:25 AM                      You're right. I checked it and this is what I found: nn  n rnorg.hibernate.annotations.FetchMode mode = fetch.mode();rn if  ( !mode.equals( org.hibernate.annotations.FetchMode.JOIN ) ) {rn     throw   new  MappingException(  \"Only FetchMode.JOIN is currently supported\"  );rn}rn n  nn We could add support for that and wait for JPA spec to catch up.              n        n    n"},{"commnet_id":"comment-83374","commnet_date":"2016-08-31T08:10:53-0700","commnet_user":"Giovanni Lovato","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Giovanni Lovaton added a comment  - 31\/Aug\/2016 08:10 AM     - edited  n        n        That would be cool, but FetchProfile needs to be defined statically where EntityGraph could be built upon a list of attributes coming from an external request (e.g. HTTP\/RESTful API).nnTo sum this issue up, I think that collection attributes in EntityGraph should be SELECT queried and not JOIN, to:nntprevent exceptions when multiple collections are involved in the same graph;ntavoid in-memeory pagination, which kills every query with entity graphs over large tables.nnnnThis would come as simple as:nntin AbstractEntityGraphVisitationStrategynnUnable to find source-code formatter for language: diff.  Available languages are: actionscript, html, java, javascript, none, sql, xhtml, xmlrn--- a\/hibernate-core\/src\/main\/java\/org\/hibernate\/loader\/plan\/build\/internal\/AbstractEntityGraphVisitationStrategy.javarn+++ b\/hibernate-core\/src\/main\/java\/org\/hibernate\/loader\/plan\/build\/internal\/AbstractEntityGraphVisitationStrategy.javarn@@ -29,6 +29,7 @@ import  org.hibernate.loader.plan.spi.EntityReturn;rn import  org.hibernate.loader.plan.spi.LoadPlan;rn import  org.hibernate.loader.plan.spi.Return;rn import  org.hibernate.persister.walking.spi.AssociationAttributeDefinition;rn+import  org.hibernate.persister.walking.spi.AssociationAttributeDefinition.AssociationNature;rn import  org.hibernate.persister.walking.spi.AttributeDefinition;rn import  org.hibernate.persister.walking.spi.CollectionElementDefinition;rn import  org.hibernate.persister.walking.spi.CollectionIndexDefinition;rn@@ -65,7 +66,8 @@ public  abstract  class AbstractEntityGraphVisitationStrategyrn         * NOTE: this  may be changed in the near further, though ATM I have no idea how this  will be changed to :)rn         * -- stliurn         *\/rn-       protected  static  final  FetchStrategy DEFAULT_EAGER = new  FetchStrategy( FetchTiming.IMMEDIATE, FetchStyle.JOIN );rn+       protected  static  final  FetchStrategy DEFAULT_EAGER_JOIN = new  FetchStrategy( FetchTiming.IMMEDIATE, FetchStyle.JOIN );rn+       protected  static  final  FetchStrategy DEFAULT_EAGER_SELECT = new  FetchStrategy( FetchTiming.IMMEDIATE, FetchStyle.SELECT );rn        protected  static  final  FetchStrategy DEFAULT_LAZY = new  FetchStrategy( FetchTiming.DELAYED, FetchStyle.SELECT );rn        protected  final  LoadQueryInfluencers loadQueryInfluencers;rn        \/\/ Queue containing entity\/sub graphs to be visited.rn @@ -235,7 +237,9 @@ public  abstract  class AbstractEntityGraphVisitationStrategyrn        @Overridern        protected  FetchStrategy determineFetchStrategy(rn                        final  AssociationAttributeDefinition attributeDefinition) {rn-               <span class=\"code-keyword\">return<\/span> attributeStack.peekLast() != NON_EXIST_ATTRIBUTE_NODE ? DEFAULT_EAGER : resolveImplicitFetchStrategyFromEntityGraph(rn+               FetchStrategy fetchStrategy = attributeDefinition.getAssociationNature().equals(AssociationNature.ENTITY) ?rn+                       DEFAULT_EAGER_JOIN : DEFAULT_EAGER_SELECT;rn+               <span class=\"code-keyword\">return<\/span> attributeStack.peekLast() != NON_EXIST_ATTRIBUTE_NODE ? fetchStrategy : resolveImplicitFetchStrategyFromEntityGraph(rn                                attributeDefinitionrn                );rn        }rnnntin EntityGraphQueryHint it adds a left outer join explicitly and I don't know how to do a subsequent select instead (I summon @brmeyer for that).nn n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Giovanni Lovaton added a comment  - 31\/Aug\/2016 08:10 AM     - edited                    That would be cool, but  FetchProfile  needs to be defined statically where  EntityGraph  could be built upon a list of attributes coming from an external request (e.g. HTTP\/RESTful API). nn To sum this issue up, I think that collection attributes in  EntityGraph  should be  SELECT  queried and not  JOIN , to: n nt prevent exceptions when multiple collections are involved in the same graph; nt avoid in-memeory pagination, which kills every query with entity graphs over large tables. n nnn This would come as simple as: n nt in  AbstractEntityGraphVisitationStrategy n  n  Unable to find source-code formatter for language: diff.  Available languages are: actionscript, html, java, javascript, none, sql, xhtml, xml  rn--- a\/hibernate-core\/src\/main\/java\/org\/hibernate\/loader\/plan\/build\/internal\/AbstractEntityGraphVisitationStrategy.javarn+++ b\/hibernate-core\/src\/main\/java\/org\/hibernate\/loader\/plan\/build\/internal\/AbstractEntityGraphVisitationStrategy.javarn@@ -29,6 +29,7 @@  import  org.hibernate.loader.plan.spi.EntityReturn;rn  import  org.hibernate.loader.plan.spi.LoadPlan;rn  import  org.hibernate.loader.plan.spi.Return;rn  import  org.hibernate.persister.walking.spi.AssociationAttributeDefinition;rn+ import  org.hibernate.persister.walking.spi.AssociationAttributeDefinition.AssociationNature;rn  import  org.hibernate.persister.walking.spi.AttributeDefinition;rn  import  org.hibernate.persister.walking.spi.CollectionElementDefinition;rn  import  org.hibernate.persister.walking.spi.CollectionIndexDefinition;rn@@ -65,7 +66,8 @@  public   abstract  class AbstractEntityGraphVisitationStrategyrn         * NOTE:  this  may be changed in the near further, though ATM I have no idea how  this  will be changed to :)rn         * -- stliurn         *\/rn-        protected   static   final  FetchStrategy DEFAULT_EAGER =  new  FetchStrategy( FetchTiming.IMMEDIATE, FetchStyle.JOIN );rn+        protected   static   final  FetchStrategy DEFAULT_EAGER_JOIN =  new  FetchStrategy( FetchTiming.IMMEDIATE, FetchStyle.JOIN );rn+        protected   static   final  FetchStrategy DEFAULT_EAGER_SELECT =  new  FetchStrategy( FetchTiming.IMMEDIATE, FetchStyle.SELECT );rn         protected   static   final  FetchStrategy DEFAULT_LAZY =  new  FetchStrategy( FetchTiming.DELAYED, FetchStyle.SELECT );rn         protected   final  LoadQueryInfluencers loadQueryInfluencers;rn         \/\/ Queue containing entity\/sub graphs to be visited.rn @@ -235,7 +237,9 @@  public   abstract  class AbstractEntityGraphVisitationStrategyrn        @Overridern         protected  FetchStrategy determineFetchStrategy(rn                         final  AssociationAttributeDefinition attributeDefinition) {rn-                return  attributeStack.peekLast() != NON_EXIST_ATTRIBUTE_NODE ? DEFAULT_EAGER : resolveImplicitFetchStrategyFromEntityGraph(rn+               FetchStrategy fetchStrategy = attributeDefinition.getAssociationNature().equals(AssociationNature.ENTITY) ?rn+                       DEFAULT_EAGER_JOIN : DEFAULT_EAGER_SELECT;rn+                return  attributeStack.peekLast() != NON_EXIST_ATTRIBUTE_NODE ? fetchStrategy : resolveImplicitFetchStrategyFromEntityGraph(rn                                attributeDefinitionrn                );rn        }rn n   nt in  EntityGraphQueryHint  it adds a left outer join explicitly and I don't know how to do a subsequent select instead (I summon @brmeyer for that). n n             n        n    n"},{"commnet_id":"comment-83375","commnet_date":"2016-08-31T08:33:13-0700","commnet_user":"Giovanni Lovato","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Giovanni Lovaton added a comment  - 31\/Aug\/2016 08:33 AM    n        n        I have refactored https:\/\/github.com\/heruan\/testcase-entitygraph as unit test, as suggested. n    n    n        n            Show  n            n                        n    n    n    n                nn       Giovanni Lovaton added a comment  - 31\/Aug\/2016 08:33 AM                      I have refactored  https:\/\/github.com\/heruan\/testcase-entitygraph  as unit test, as suggested.              n        n    n"}]}},{"HHH-10484":{"info":{"issue_title":"Add hibernate.jdbc.log.warnings configuration property","issue_key":"HHH-10484","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.7","issue_component":"5.0.7","issue_labels":"5.0.7","issue_description":"According to the hibernate-dev mailing discussion, we need to add a new hibernate.jdbc.log.warnings configuration property that controls whether we try to fetch JDBC statement warning.  By default, this property will be false, and this way we can overcome the MySQL JDBC driver performance issue associated to getting database-generated wanings.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10484?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-74923","commnet_date":"2016-01-28T10:34:10-0800","commnet_user":"Andrea Boriero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Andrea Borieron added a comment  - 28\/Jan\/2016 10:34 AM    n        n        PR https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1251 n    n    n        n            Show  n            n                        n    n    n    n                nn       Andrea Borieron added a comment  - 28\/Jan\/2016 10:34 AM                      PR  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1251               n        n    n"},{"commnet_id":"comment-74927","commnet_date":"2016-01-28T13:02:40-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 28\/Jan\/2016 13:02 PM    n        n        I really struggle with this being false by default.  Oracle for example (used to, at least) only report \"errors\" from certain DDL operations by SQLWarning.  So we are potentially keeping valuable information (that they used to get by default btw!) from the user just because MySQL has a bad implementation of this method.  nnDo we know if there are other drivers that have a similar problem?  As I said in the hibernate-dev discussion, my searches only showed hits talking about MySQL. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 28\/Jan\/2016 13:02 PM                      I really struggle with this being false by default.  Oracle for example (used to, at least) only report \"errors\" from certain DDL operations by SQLWarning.  So we are potentially keeping valuable information (that they used to get by default btw!) from the user just because MySQL has a bad implementation of this method.   nn Do we know if there are other drivers that have a similar problem?  As I said in the hibernate-dev discussion, my searches only showed hits talking about MySQL.              n        n    n"},{"commnet_id":"comment-74930","commnet_date":"2016-01-28T23:34:13-0800","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 28\/Jan\/2016 23:34 PM    n        n        That's a good point. We could move this flag into Dialect and, by default, it could be set to true. Then we set it to false in MySQLDialect, and other databases whose JDBC drivers behave like MySQL (if any). What do you think? Is this a better approach? n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 28\/Jan\/2016 23:34 PM                      That's a good point. We could move this flag into Dialect and, by default, it could be set to true. Then we set it to false in MySQLDialect, and other databases whose JDBC drivers behave like MySQL (if any). What do you think? Is this a better approach?              n        n    n"},{"commnet_id":"comment-74931","commnet_date":"2016-01-29T00:19:49-0800","commnet_user":"Andrea Boriero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Andrea Borieron added a comment  - 29\/Jan\/2016 00:19 AM    n        n        Do you mean add to the Dialect a property for the default value of hibernate.jdbc.log.warnings property or to remove this setting an use just the property of the Dialect to control the logging? n    n    n        n            Show  n            n                        n    n    n    n                nn       Andrea Borieron added a comment  - 29\/Jan\/2016 00:19 AM                      Do you mean add to the Dialect a property for the default value of hibernate.jdbc.log.warnings property or to remove this setting an use just the property of the Dialect to control the logging?              n        n    n"},{"commnet_id":"comment-74932","commnet_date":"2016-01-29T00:54:36-0800","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 29\/Jan\/2016 00:54 AM    n        n        I wasn't aware that Oracle might handle error messages via warnings, in which case the global property becomes too restrictive.nnI was thinking of handling this in the Dialect and removing the property so that most drivers can benefit from logging warn messages except for MySQL. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 29\/Jan\/2016 00:54 AM                      I wasn't aware that Oracle might handle error messages via warnings, in which case the global property becomes too restrictive. nn I was thinking of handling this in the Dialect and removing the property so that most drivers can benefit from logging warn messages except for MySQL.              n        n    n"},{"commnet_id":"comment-74933","commnet_date":"2016-01-29T01:14:35-0800","commnet_user":"Andrea Boriero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Andrea Borieron added a comment  - 29\/Jan\/2016 01:14 AM    n        n        I think the property gives more options, the user can decide to disable the warnings logs if not usefull for him while the Dialect default value gives us the ability to disable it for MySQL while keeping the logging the default behaviour for the other drivers. n    n    n        n            Show  n            n                        n    n    n    n                nn       Andrea Borieron added a comment  - 29\/Jan\/2016 01:14 AM                      I think the property gives more options, the user can decide to disable the warnings logs if not usefull for him while the Dialect default value gives us the ability to disable it for MySQL while keeping the logging the default behaviour for the other drivers.              n        n    n"},{"commnet_id":"comment-74934","commnet_date":"2016-01-29T05:39:55-0800","commnet_user":"Andrea Boriero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Andrea Borieron added a comment  - 29\/Jan\/2016 05:39 AM    n        n        PR https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1252 takes the default value for hibernate.jdbc.log.warnings from the Dialect#isJdbcLogWarningsEnabledByDefault() n    n    n        n            Show  n            n                        n    n    n    n                nn       Andrea Borieron added a comment  - 29\/Jan\/2016 05:39 AM                      PR  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1252  takes the default value for hibernate.jdbc.log.warnings from the Dialect#isJdbcLogWarningsEnabledByDefault()              n        n    n"}]}},{"OGM-977":{"info":{"issue_title":"MongoDB - add support for more types of native queries","issue_key":"OGM-977","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.0.Beta1","issue_component":"5.0.0.Beta1","issue_labels":"5.0.0.Beta1","issue_description":"I was in the urgent need to use findOne, findAndModify, and update native queries. Usage would be analogous the find query type using CLI syntax.  I have implemented this in my local clone. Im close to creating a pull request. Just want to add some tests and probably some documentation.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-977?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-74911","commnet_date":"2016-01-28T05:37:49-0800","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 28\/Jan\/2016 05:37 AM    n        n        Hi Thorsten, awesome, any help is more than welcome! Looking forward to your pull request.nnRegarding update queries, it might be a bit trickier than findOne() as I think the machinery around Query#executeUpdate() isn't working for Hibernate OGM yet (at least it's untested). But it shouldn't be super-hard to do  n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 28\/Jan\/2016 05:37 AM                      Hi Thorsten, awesome, any help is more than welcome! Looking forward to your pull request. nn Regarding update queries, it might be a bit trickier than findOne() as I think the machinery around  Query#executeUpdate()  isn't working for Hibernate OGM yet (at least it's untested). But it shouldn't be super-hard to do                n        n    n"},{"commnet_id":"comment-74915","commnet_date":"2016-01-28T07:02:13-0800","commnet_user":"Thorsten Mu00F6ller","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Thorsten Mu00F6llern added a comment  - 28\/Jan\/2016 07:02 AM    n        n        My implementation kind of abuses Query.getSingleResult() to also allow executing an update query. Let me know, if this is not acceptable. Otherwise, I would be glad to get some hints on what would be needed to allow an update query to be executable only with Query.executeUpdate(). nnAlso, findAndUpdate is a kind of corner case, clearly. Do you think that it is ok to allow it with Query.getSingleResult()? n    n    n        n            Show  n            n                        n    n    n    n                nn       Thorsten Mu00F6llern added a comment  - 28\/Jan\/2016 07:02 AM                      My implementation kind of abuses  Query.getSingleResult()  to also allow executing an update query. Let me know, if this is not acceptable. Otherwise, I would be glad to get some hints on what would be needed to allow an update query to be executable only with  Query.executeUpdate() .  nn Also,  findAndUpdate  is a kind of corner case, clearly. Do you think that it is ok to allow it with  Query.getSingleResult() ?              n        n    n"},{"commnet_id":"comment-74968","commnet_date":"2016-02-02T00:36:50-0800","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 02\/Feb\/2016 00:36 AM    n        n        Thorsten Mu00F6ller, yes, I think we should use executeUpdate() for update().nnIf you try to run Query#executeUpdate() with OGM you'll get an UnsupportedOperationException, so that'd be the starting point. Essentially, from there you'd have to run the query through the grid dialect. We'll need a new method on QueryableGridDialect which doesn't return an iterator but just the number of affected rows.nnAs far as findAndModify() is concerned, yes, a normal query is probably as good as it gets.nnAlso check out this document with some more general info on getting started with contributing to Hibernate OGM. If you run into any issues, just let me know; We hang out on #hibernate-dev on FreeNode or you send a mail to the \"hibernate-dev\" mailing list. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 02\/Feb\/2016 00:36 AM                       Thorsten Mu00F6ller , yes, I think we should use executeUpdate() for update(). nn If you try to run  Query#executeUpdate()  with OGM you'll get an  UnsupportedOperationException , so that'd be the starting point. Essentially, from there you'd have to run the query through the grid dialect. We'll need a new method on  QueryableGridDialect  which doesn't return an iterator but just the number of affected rows. nn As far as  findAndModify()  is concerned, yes, a normal query is probably as good as it gets. nn Also check out  this document  with some more general info on getting started with contributing to Hibernate OGM. If you run into any issues, just let me know; We hang out on #hibernate-dev on FreeNode or you send a mail to the \"hibernate-dev\" mailing list.              n        n    n"},{"commnet_id":"comment-75231","commnet_date":"2016-02-16T02:36:19-0800","commnet_user":"Thorsten Mu00F6ller","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Thorsten Mu00F6llern added a comment  - 16\/Feb\/2016 02:36 AM    n        n        Done (implementation, tests, documentation). All tests, including new ones, pass. Pull request created on Github.nnAdditional notes on the implementation:nnntIn addition to originally announced, I have added even two more types of queries. Altogether the implementation now adds findOne, findAndModify, insert, remove, update to the list of supported native query types, all supported using CLI syntax.ntAs indicated by comment-74968, I have added a new method called executeBackendUpdateQuery to QueryableGridDialect, which is currently implemented only by MongoDBDialect. All other implementations throw a UOE.ntRegarding, update queries, the implementation current does simply return -1 if the update was not acknowledged by the underlying Mongo node. It might be better or even needed to throw an exception instead. This is currently not done because I simply don't know which one should be thrown then. Anyway, it can be changed easily.ntI have added defensive checks whether there are named or positional parameters in a query to executeBackendQuery and executeBackendUpdateQuery. I'm not sure whether this is the right place to do such things, and whether it should be done at all. If you think this is not appropriate there then simply remove them, or add a note.ntFinally, I have resolved some (minor) issues along the way:ntnttMongoDBDialect make all methods static that can be static.nttNativeQueryParser two minor bugs (typos) fixed.ntntnnnnnAside, I have two more wishes:nntIf there are no further issues with my implementation, would you please rollout a new Beta version soon. I'm currently hacking in my branch into another project manually, but it would be much more convenient to upgrade dependencies to the new version.ntThe implementation could take advantage of upgrading the MongoDB Java driver to the latest release 3.2.x. This would make it possible to better support findAndModify and remove queries.nn n    n    n        n            Show  n            n                        n    n    n    n                nn       Thorsten Mu00F6llern added a comment  - 16\/Feb\/2016 02:36 AM                      Done (implementation, tests, documentation). All tests, including new ones, pass. Pull request created on Github. nn Additional notes on the implementation: nn nt In addition to originally announced, I have added even two more types of queries. Altogether the implementation now adds  findOne ,  findAndModify ,  insert ,  remove ,  update  to the list of supported native query types, all supported using CLI syntax. nt As indicated by  comment-74968 , I have added a new method called  executeBackendUpdateQuery  to  QueryableGridDialect , which is currently implemented only by  MongoDBDialect . All other implementations throw a UOE. nt Regarding, update queries, the implementation current does simply return  -1  if the update was not acknowledged by the underlying Mongo node. It might be better or even needed to throw an exception instead. This is currently not done because I simply don't know which one should be thrown then. Anyway, it can be changed easily. nt I have added defensive checks whether there are named or positional parameters in a query to  executeBackendQuery  and  executeBackendUpdateQuery . I'm not sure whether this is the right place to do such things, and whether it should be done at all. If you think this is not appropriate there then simply remove them, or add a note. nt Finally, I have resolved some (minor) issues along the way:nt ntt  MongoDBDialect  make all methods static that can be static. ntt  NativeQueryParser  two minor bugs (typos) fixed. nt nt n nnnn Aside, I have two more wishes: n nt If there are no further issues with my implementation, would you please rollout a new Beta version soon. I'm currently hacking in my branch into another project manually, but it would be much more convenient to upgrade dependencies to the new version. nt The implementation could take advantage of upgrading the MongoDB Java driver to the latest release 3.2.x. This would make it possible to better support  findAndModify  and  remove  queries. n n             n        n    n"},{"commnet_id":"comment-75637","commnet_date":"2016-03-01T08:47:43-0800","commnet_user":"Thorsten Mu00F6ller","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Thorsten Mu00F6llern added a comment  - 01\/Mar\/2016 08:47 AM    n        n        Anyone can have a look at my pull request? n    n    n        n            Show  n            n                        n    n    n    n                nn       Thorsten Mu00F6llern added a comment  - 01\/Mar\/2016 08:47 AM                      Anyone can have a look at my pull request?              n        n    n"},{"commnet_id":"comment-75638","commnet_date":"2016-03-01T08:52:54-0800","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 01\/Mar\/2016 08:52 AM    n        n        Hi Thorsten Mu00F6ller, thanks for the reminder and sorry for the radio silence :-\/ I was busy preparing a conference talk, which luckily is done now. I will look into the PR tomorrow. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 01\/Mar\/2016 08:52 AM                      Hi  Thorsten Mu00F6ller , thanks for the reminder and sorry for the radio silence :-\/ I was busy preparing a conference talk, which luckily is done now. I will look into the PR tomorrow.              n        n    n"},{"commnet_id":"comment-75659","commnet_date":"2016-03-03T03:54:27-0800","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 03\/Mar\/2016 03:54 AM    n        n        nIf there are no further issues with my implementation, would you please rollout a new Beta version soon. I'm currently hacking in my branch into another project manually, but it would be much more convenient to upgrade dependencies to the new version.nnYes, a new release is coming soon. Specifically, I'm planning to do one in the week from March 14h. Would that work for you?nnnThe implementation could take advantage of upgrading the MongoDB Java driver to the latest release 3.2.x. This would make it possible to better support findAndModify and remove queries.nnSounds good. Could you open a JIRA issue for this one and if you like also send in a patch? n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 03\/Mar\/2016 03:54 AM                      n If there are no further issues with my implementation, would you please rollout a new Beta version soon. I'm currently hacking in my branch into another project manually, but it would be much more convenient to upgrade dependencies to the new version.  nn Yes, a new release is coming soon. Specifically, I'm planning to do one in the week from March 14h. Would that work for you? nn n The implementation could take advantage of upgrading the MongoDB Java driver to the latest release 3.2.x. This would make it possible to better support findAndModify and remove queries.  nn Sounds good. Could you open a JIRA issue for this one and if you like also send in a patch?              n        n    n"}]}},{"HHH-10483":{"info":{"issue_title":"Add support for ordering DELETE statements for batch updates","issue_key":"HHH-10483","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"5.0.7","issue_component":"5.0.7","issue_labels":"5.0.7","issue_description":"Currently, we can order INSERT and UPDATE statements for batch updates, but we might want to extend this behavior to batch DELETE statements as well.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10483?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-976":{"info":{"issue_title":"Update chapter about Supported entity mapping ","issue_key":"OGM-976","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"documentation","issue_description":"The documentaiotn (mapping.asciidoc) says:  The various inheritance strategies are not supported by Hibernate OGM,                              \r\n only the table per concrete class strategy is used.   This is not true, or at least not for every datastore.\r\n We should update it.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-976?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-975":{"info":{"issue_title":"It&#39;s not possible to set a SocketFactory for the MongoClient","issue_key":"OGM-975","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.1","issue_labels":"5.1","issue_description":"We should provide the user a way to set properties that are not primitives to the MongoDBClient.  An example in the documentation would be nice.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-975?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-75031","commnet_date":"2016-02-08T04:42:11-0800","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 08\/Feb\/2016 04:42 AM    n        n        As for the whynnnOur application needs to communicate with MongoDB over SSL. We're planning on deploying in Docker containers and I want our images to be non-environment specific so would like the ability to provide a reference to the SSL certificates when the container is started and for the application to programmatically retrieve the certificates and install them in a trust store. In order to use these certificates for connecting to MongoDB we'd need to use an instance of an SSLSocketFactory which used this specific trust store rather than the default one. n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 08\/Feb\/2016 04:42 AM                      As for the why nn n Our application needs to communicate with MongoDB over SSL. We're planning on deploying in Docker containers and I want our images to be non-environment specific so would like the ability to provide a reference to the SSL certificates when the container is started and for the application to programmatically retrieve the certificates and install them in a trust store. In order to use these certificates for connecting to MongoDB we'd need to use an instance of an SSLSocketFactory which used this specific trust store rather than the default one.               n        n    n"}]}},{"HHH-10481":{"info":{"issue_title":"Support Universal Connection Pool (ucp) a Java Connection Pool configuratoin ","issue_key":"HHH-10481","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Critical","issue_affects_version":"Unresolved","issue_fix_version":"4.3.8 ,                                            4.2.20 ,                                            5.0.1 ,                                            5.0.2 ,                                            5.0.3 ,                                            4.2.21 ,                                            5.0.4 ,                                            5.0.5 ,                                            5.0.6 ,                                            5.0.7","issue_component":"4.3.8 ,                                            4.2.20 ,                                            5.0.1 ,                                            5.0.2 ,                                            5.0.3 ,                                            4.2.21 ,                                            5.0.4 ,                                            5.0.5 ,                                            5.0.6 ,                                            5.0.7","issue_labels":"4.3.8","issue_description":"Hi All,   I am Nirmala Sundarappa, Product Manager for JDBC driver and Universal Connection Pool (UCP) - Java Connection Pool from Oracle.     We want to make using UCP easy in all application containers.   As part of this effort, we are reaching out to you to see we can both can collaborate and make configuring UCP in Hibernate a simple configuration to all customers.    We have a blog which talks about using UCP in Hibernate.  It is at https:\/\/blogs.oracle.com\/dev2dev\/entry\/how_to_use_oracle_universal  Also, more details about UCP is found at UCP Developer's Guide at https:\/\/docs.oracle.com\/database\/121\/JJUCP\/toc.htm  ucp.jar can be downloaded from http:\/\/www.oracle.com\/technetwork\/database\/features\/jdbc\/default-2280470.html  My contact number is 650-506-6865 and my email address is nirmala.sundarappa@oracle.com   Looking forward to hearing from you.   Regards,\r\n Nirmala","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10481?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10480":{"info":{"issue_title":"Support (bytecode) lazy attributes on composites\/embeddables","issue_key":"HHH-10480","issue_type":"Improvement","issue_status":"Reopened","issue_priority":"Reopened","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.0.7 ,                                            5.1.0","issue_component":"5.0.7 ,                                            5.1.0","issue_labels":"5.0.7","issue_description":"Initially I had an entity with a basic property marked as lazy (didn't work at first, fixed in                                                          HHH-5255                                                              Closed                ).  The another entity was necessary, so I moved some common fields into an embeddable entity, but now the lazy basic property is loaded eagerly.     public  class Entity {  \t\/\/ this  works   \t@Basic(fetch = FetchType.LAZY)  \tprivate  String  description;    \t@Embedded  \tprivate  RecordData data;  }    @Embeddable  public  class RecordData {  \t\/\/ this  fails, it is loaded eagerly   \t@Basic(fetch = FetchType.LAZY)  \t@Lob  \tprivate  byte [] content;  }     If you add a 2-nd field typed RecordData (as can be seen in my PR), an error in the bytecode enhancer is triggered:  java.lang.NoClassDefFoundError: org\/hibernate\/test\/bytecode\/enhancement\/lazy\/basic\/LazyBasicFieldAccessTestTask$Entity  \tat org.hibernate.test.bytecode.enhancement.lazy.basic.LazyBasicFieldAccessTestTask.getAnnotatedClasses(LazyBasicFieldAccessTestTask.java:40)  \tat org.hibernate.test.bytecode.enhancement.AbstractEnhancerTestTask.prepare(AbstractEnhancerTestTask.java:30)  \tat org.hibernate.test.bytecode.enhancement.lazy.basic.LazyBasicFieldAccessTestTask.prepare(LazyBasicFieldAccessTestTask.java:47)  \tat org.hibernate.test.bytecode.enhancement.EnhancerTestUtils.runEnhancerTestTask(EnhancerTestUtils.java:98)  \tat org.hibernate.test.bytecode.enhancement.EnhancerTest.testLazy(EnhancerTest.java:72)  \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)  \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)  \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)  \tat java.lang.reflect.Method.invoke(Method.java:498)  \tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)  \tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)  \tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)  \tat org.hibernate.testing.junit4.ExtendedFrameworkMethod.invokeExplosively(ExtendedFrameworkMethod.java:45)  \tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)  \tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)  \tat org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)  Caused by: java.lang.ClassNotFoundException: org.hibernate.test.bytecode.enhancement.lazy.basic.LazyBasicFieldAccessTestTask$Entity not found  \tat org.hibernate.test.bytecode.enhancement.EnhancerTestUtils$1.loadClass(EnhancerTestUtils.java:160)  \t... 16 more  Caused by: java.lang.ClassFormatError: Duplicate interface name in class file org\/hibernate\/test\/bytecode\/enhancement\/lazy\/basic\/LazyBasicFieldAccessTestTask$Entity  \tat java.lang.ClassLoader.defineClass1(Native Method)  \tat java.lang.ClassLoader.defineClass(ClassLoader.java:760)  \tat java.lang.ClassLoader.defineClass(ClassLoader.java:642)  \tat org.hibernate.test.bytecode.enhancement.EnhancerTestUtils$1.loadClass(EnhancerTestUtils.java:157)  \t... 16 more","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10480?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-76231","commnet_date":"2016-03-23T02:35:57-0700","commnet_user":"Andrei Ivanov","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Andrei Ivanovn added a comment  - 23\/Mar\/2016 02:35 AM    n        n        Luis? Any thoughts?  n    n    n        n            Show  n            n                        n    n    n    n                nn       Andrei Ivanovn added a comment  - 23\/Mar\/2016 02:35 AM                      Luis? Any thoughts?                n        n    n"},{"commnet_id":"comment-76241","commnet_date":"2016-03-23T18:30:05-0700","commnet_user":"Luis Barreiro","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Luis Barreiron added a comment  - 23\/Mar\/2016 18:30 PM    n        n        There dosn't seem to be anything wrong with the way the classes are bytecode enhanced. There is a field for the lazy interceptor on the embeddable class, and all the hooks are in place.nnWhat seems to be going on in here is the way the entity is handled in hibernate, namely in SingleTableEntityPersister and ComponentType. The support for lazy properties in embedded entities seems to missing in this classes.nnRight now, the defeniton of the lazyProperty* variables in the constructor of AbstractEntityPersister does not take into account ComponentType. Even if it did, ComponentType does not cary enouth information on the 'lazyness' of the attributes.nnI've came up with a test case: https:\/\/github.com\/barreiro\/hibernate-orm\/commits\/HHH-10480 n    n    n        n            Show  n            n                        n    n    n    n                nn       Luis Barreiron added a comment  - 23\/Mar\/2016 18:30 PM                      There dosn't seem to be anything wrong with the way the classes are bytecode enhanced. There is a field for the lazy interceptor on the embeddable class, and all the hooks are in place. nn What seems to be going on in here is the way the entity is handled in hibernate, namely in  SingleTableEntityPersister  and  ComponentType . The support for lazy properties in embedded entities seems to missing in this classes. nn Right now, the defeniton of the  lazyProperty*  variables in the constructor of  AbstractEntityPersister  does not take into account  ComponentType . Even if it did,  ComponentType  does not cary enouth information on the 'lazyness' of the attributes. nn I've came up with a test case:  https:\/\/github.com\/barreiro\/hibernate-orm\/commits\/HHH-10480               n        n    n"},{"commnet_id":"comment-80332","commnet_date":"2016-07-04T03:24:39-0700","commnet_user":"Andrei Ivanov","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Andrei Ivanovn added a comment  - 04\/Jul\/2016 03:24 AM    n        n        Luis Barreiro Any chance to get this issue fixed?  n    n    n        n            Show  n            n                        n    n    n    n                nn       Andrei Ivanovn added a comment  - 04\/Jul\/2016 03:24 AM                       Luis Barreiro  Any chance to get this issue fixed?                n        n    n"},{"commnet_id":"comment-82741","commnet_date":"2016-08-18T02:08:45-0700","commnet_user":"Andrei Ivanov","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Andrei Ivanovn added a comment  - 18\/Aug\/2016 02:08 AM    n        n        Luis Barreiro Pretty please?  n    n    n        n            Show  n            n                        n    n    n    n                nn       Andrei Ivanovn added a comment  - 18\/Aug\/2016 02:08 AM                       Luis Barreiro  Pretty please?                n        n    n"},{"commnet_id":"comment-82747","commnet_date":"2016-08-18T09:30:15-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Steve Ebersolen added a comment  - 18\/Aug\/2016 09:30 AM     - edited  n        n        I believe this needs to wait for the type system and SQL-gen changes we are working on for 6.0.  nnThe type system, as currently designed, tries to handle the composite values the same as any other value.  So, for example, you could make the entire composite\/embedded on a entity lazy and it would work; however lazy within those will not work.nnThe other piece is the SQL generation.  That could possibly re-work that to support this within 5.x, but the SQL generation code is very difficult to introduce changes to (VERY brittle) which is actually the main impetus for 6.0 - the type changes are just a pre-requisite part of that. n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Steve Ebersolen added a comment  - 18\/Aug\/2016 09:30 AM     - edited                    I believe this needs to wait for the type system and SQL-gen changes we are working on for 6.0.   nn The type system, as currently designed, tries to handle the composite values the same as any other value.  So, for example, you could make the entire composite\/embedded on a entity lazy and it would work; however lazy within those will not work. nn The other piece is the SQL generation.  That could possibly re-work that to support this within 5.x, but the SQL generation code is very difficult to introduce changes to (VERY brittle) which is actually the main impetus for 6.0 - the type changes are just a pre-requisite part of that.              n        n    n"}]}},{"OGM-974":{"info":{"issue_title":"Support HA clusters with Neo4j Remote","issue_key":"OGM-974","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"neo4j","issue_description":"Creating this issue to collect information and thoughts around this topic, not so much to follow up on it right away.   \t\"If you use &#91;the transactional Cypher&#93;  endpoint in an HA cluster, you must ensure that all requests for a given transaction are sent to the same Neo4j instance\" (from the docs)","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-974?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10478":{"info":{"issue_title":"Introduce an OperationContext to cache data needed while an operation is in progress","issue_key":"HHH-10478","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6.0.0.Alpha1","issue_labels":"6.0.0.Alpha1","issue_description":"As a first step, the caches passed by the anything argument by  {org.hibernate.engine.spi.CascadingActions#cascade}} will be moved to an OperationContext and will be accessible by calling SessionImplementor#getOperationContext(OperationContextType)  {{public enum OperationContextType <\/p> {  \tSAVE_UPDATE, MERGE, LOCK, DELETE, REFRESH, REPLICATE  } }}  New OperationType values and OperationContext subclasses can be added for data cached in StatefulPersistenceContext that is only relevant while an operation in progress (e.g., load contexts for a LOAD operation).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10478?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-74858","commnet_date":"2016-01-25T13:42:47-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 25\/Jan\/2016 13:42 PM    n        n        This is a massive change.  We are going to need at least a week to do any real review of the PR for this.  Considering the release date is in 2 weeks, will this PR be ready in one week?  If not we should push this to a 5.2. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 25\/Jan\/2016 13:42 PM                      This is a massive change.  We are going to need at least a week to do any real review of the PR for this.  Considering the release date is in 2 weeks, will this PR be ready in one week?  If not we should push this to a 5.2.              n        n    n"},{"commnet_id":"comment-75005","commnet_date":"2016-02-05T14:32:06-0800","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 05\/Feb\/2016 14:32 PM    n        n        Steve Ebersole, sorry, I missed your comment above.nnI've made a lot of progress creating OperationContexts for the event listeners that cascade and pass \"anything\"; I have not moved load context data out of StatefulPersistenceContext. What I've implemented is fairly simple in concept, although it impacts quite a bit of code. nnI'm working on a gist to give an overview and I'll create a PR today. I know I'm down to the wire on this. I'm pretty happy with what I have, although there is still one fairly important point that may need to be addressed. If necessary, I'm OK with pushing it to 5.2. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 05\/Feb\/2016 14:32 PM                       Steve Ebersole , sorry, I missed your comment above. nn I've made a lot of progress creating OperationContexts for the event listeners that cascade and pass \"anything\"; I have not moved load context data out of StatefulPersistenceContext. What I've implemented is fairly simple in concept, although it impacts quite a bit of code.  nn I'm working on a gist to give an overview and I'll create a PR today. I know I'm down to the wire on this. I'm pretty happy with what I have, although there is still one fairly important point that may need to be addressed. If necessary, I'm OK with pushing it to 5.2.              n        n    n"},{"commnet_id":"comment-75074","commnet_date":"2016-02-10T09:01:05-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 10\/Feb\/2016 09:01 AM    n        n        I don't know what the next feature release will be (5.2, 6.0, ....).  So for now just unscheduled.  Also, is this really a bug?  I think this is more an improvement that possibly addresses some bugs. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 10\/Feb\/2016 09:01 AM                      I don't know what the next feature release will be (5.2, 6.0, ....).  So for now just unscheduled.  Also, is this  really  a bug?  I think this is more an improvement that possibly addresses some bugs.              n        n    n"},{"commnet_id":"comment-75555","commnet_date":"2016-03-01T00:01:18-0800","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 01\/Mar\/2016 00:01 AM    n        n        The fix for n    n                n        n            n            HHH-9512n        n                                                    Closed n             n needs to be propagated to this fix. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 01\/Mar\/2016 00:01 AM                      The fix for n     n                 n         n             n            HHH-9512n         n                                                     Closed n             n needs to be propagated to this fix.              n        n    n"},{"commnet_id":"comment-76951","commnet_date":"2016-04-12T06:32:12-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 12\/Apr\/2016 06:32 AM    n        n        Gail Badner Should we close this PR which was submitted for n    n                n        n            n            HHH-9512n        n                                                    Closed n             n? n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 12\/Apr\/2016 06:32 AM                       Gail Badner  Should we close this  PR  which was submitted for n     n                 n         n             n            HHH-9512n         n                                                     Closed n             n?              n        n    n"},{"commnet_id":"comment-76963","commnet_date":"2016-04-12T18:01:18-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 12\/Apr\/2016 18:01 PM    n        n        Vlad Mihalcea, I think that n    n                n        n            n            HHH-9512n        n                                                    Closed n             n can be fixed before this. I haven't had a chance to review the PR yet though. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 12\/Apr\/2016 18:01 PM                       Vlad Mihalcea , I think that n     n                 n         n             n            HHH-9512n         n                                                     Closed n             n can be fixed before this. I haven't had a chance to review the PR yet though.              n        n    n"},{"commnet_id":"comment-83348","commnet_date":"2016-08-30T13:40:13-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 30\/Aug\/2016 13:40 PM    n        n        Some things may be out of date with respect the current state of Hibernate 6. The following is the content of an email I sent that assumed the changes were going to be made for Hibernate 5.nnOverview: https:\/\/gist.github.com\/gbadner\/f0e635e8fba7b84af233\r\nnPOC: https:\/\/github.com\/hibernate\/hibernate-orm\/commit\/3d0e2378cb998788b3205afb1e15c443c5ba77e8nnThe POC assumes that we only need a single OperationContext for each type of operation. OperationContextManager has a Map of OperationContext by OperationContextType. Each OperationContext object is lazily created on the first occurence of the corresponding type of operation.nnCurrently, when an operation is initiated (e.g., by Session.merge( entity )), OperationContextManager &#91;2&#93;  does the following:nntcalls ManageableOperationContext#beforeOperation, which puts the OperationContext \"in progress\";ntexecutes the operation, which performs cascades according to mappings;ntcalls ManageableOperationContext#afterOperation, which puts the OperationContext in an invalid state that is \"not in progress\".nnnnWhen an operation cascades to other entities, the same OperationContext is used.nnObviously, OperationContextManager needs to know if an operation is \"top-level\" (meaning that the operation is on the original entity, and not cascaded). In the POC, if the relevant OperationContext is not in progress at the time that an opeation is initiated, then OperationContextManager assumes that the operation is top-level. If the OperationContext is \"in progress\", then OperationContextManager assumes that this is a cascaded operation.nnI am not sure this is always correct. Can anyone think of a case where this could break down?nnIn the POC, the following EventSource methods that contain an argument for the operation cache has been deprecated and is no longer used because the contents of that argument has been moved into an OperationContext:nnpublic void merge(String entityName, Object object, Map copiedAlready)\r\nnpublic void persist(String entityName, Object object, Map createdAlready)\r\nnpublic void persistOnFlush(String entityName, Object object, Map copiedAlready)\r\nnpublic void refresh(String entityName, Object object, Map refreshedAlready)\r\nnpublic void delete(String entityName, Object child, boolean isCascadeDeleteEnabled, Set transientEntities)nnBefore the POC, it was the above methods that indicated that it was not top-level. If it turns out that having a single OperationContext is not valid, then there needs to be some other way to determine if the operation was top-level.nnI had originally planned to use PersistenceContext#getCascadeLevel == 0 to indicate an operation was at the top-level, but I found that won't work for some operations. For example, the cascade level for a top-level delete can be &gt; 1 when deleting orphans due to merge or save-or-update operations. Another example is that cascade level is not 0 on top-level save-or-update while flushing.nnI have some ideas to work around this, but I didn't want to get too far down that path if it wasn't an issue. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 30\/Aug\/2016 13:40 PM                      Some things may be out of date with respect the current state of Hibernate 6. The following is the content of an email I sent that assumed the changes were going to be made for Hibernate 5. nn Overview:  https:\/\/gist.github.com\/gbadner\/f0e635e8fba7b84af233  nPOC:  https:\/\/github.com\/hibernate\/hibernate-orm\/commit\/3d0e2378cb998788b3205afb1e15c443c5ba77e8  nn The POC assumes that we only need a single OperationContext for each type of operation. OperationContextManager has a Map of OperationContext by OperationContextType. Each OperationContext object is lazily created on the first occurence of the corresponding type of operation. nn Currently, when an operation is initiated (e.g., by Session.merge( entity )),  OperationContextManager   &#91;2&#93;  does the following: n nt calls ManageableOperationContext#beforeOperation, which puts the OperationContext \"in progress\"; nt executes the operation, which performs cascades according to mappings; nt calls ManageableOperationContext#afterOperation, which puts the OperationContext in an invalid state that is \"not in progress\". n nnn When an operation cascades to other entities, the same OperationContext is used. nn Obviously, OperationContextManager needs to know if an operation is \"top-level\" (meaning that the operation is on the original entity, and not cascaded). In the POC, if the relevant OperationContext is not in progress at the time that an opeation is initiated, then OperationContextManager assumes that the operation is top-level. If the OperationContext is \"in progress\", then OperationContextManager assumes that this is a cascaded operation. nn I am not sure this is always correct. Can anyone think of a case where this could break down? nn In the POC, the following EventSource methods that contain an argument for the operation cache has been deprecated and is no longer used because the contents of that argument has been moved into an OperationContext: nn public void merge(String entityName, Object object, Map copiedAlready) npublic void persist(String entityName, Object object, Map createdAlready) npublic void persistOnFlush(String entityName, Object object, Map copiedAlready) npublic void refresh(String entityName, Object object, Map refreshedAlready) npublic void delete(String entityName, Object child, boolean isCascadeDeleteEnabled, Set transientEntities) nn Before the POC, it was the above methods that indicated that it was not top-level. If it turns out that having a single OperationContext is not valid, then there needs to be some other way to determine if the operation was top-level. nn I had originally planned to use PersistenceContext#getCascadeLevel == 0 to indicate an operation was at the top-level, but I found that won't work for some operations. For example, the cascade level for a top-level delete can be &gt; 1 when deleting orphans due to merge or save-or-update operations. Another example is that cascade level is not 0 on top-level save-or-update while flushing. nn I have some ideas to work around this, but I didn't want to get too far down that path if it wasn't an issue.              n        n    n"}]}},{"HHH-10477":{"info":{"issue_title":"Setting to allow delayed access to CDI","issue_key":"HHH-10477","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0,                                            5.0.8","issue_labels":"5.1.0,                                            5.0.8","issue_description":"HHH-8706                                                              Closed                 defines the best case option for handling the chicken\/egg problem between CDI and JPA using a specific notification event (as a BeanManager lifecycle event) that the BeanManager is ready for use.    However, it is also possible to define a setting that allows telling Hibernate to delay access to the CDI BeanManager until it is needed on first use.  There is some danger in this solution as it moves the throwing of potential exceptions that should fail the deployment until runtime after deployment has succeeded.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10477?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10472":{"info":{"issue_title":"Avoid or report collision of join table names","issue_key":"HHH-10472","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"When having two entities with multiple to-many associations between them (say entities User and Address and two associations User#primaryAddresses() and User#secondaryAddresses()), the same join table name (\"User_Address\") will be used, causing a constraint violation exception upon insertion for one of the association types, as the column(s) of the other type will be null in that case.  So it'd be nice if automatically either two join tables with unique names were used or at least an error was issued during bootstrap, requesting the user to explicitly specify unique names via @JoinTable.  It might technically also be possible to actually use one join table only, if the columns where nullable. I don't think that's a desirable mapping, though.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10472?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10471":{"info":{"issue_title":"Enhance ScrollableResult to wrap the underlying data stream in a java.util.stream","issue_key":"HHH-10471","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"It would be useful for developpers to be able to build a java.util.stream over a scrollable results in order to use java8 stream's capabilities. Especially it could permit to rely on stream's lazyness nature and offer a way to build more efficients data processing pipelines upon hibernate, i.e. load data only as needed vs load all data.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10471?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-77139","commnet_date":"2016-04-21T04:21:12-0700","commnet_user":"christophe taret","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       christophe taretn added a comment  - 21\/Apr\/2016 04:21 AM    n        n        Made a pull request for this feature: https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1347\r\nnIf accepted, will need to write documentation about this. n    n    n        n            Show  n            n                        n    n    n    n                nn       christophe taretn added a comment  - 21\/Apr\/2016 04:21 AM                      Made a pull request for this feature:  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1347  nIf accepted, will need to write documentation about this.              n        n    n"},{"commnet_id":"comment-77149","commnet_date":"2016-04-22T01:34:07-0700","commnet_user":"christophe taret","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       christophe taretn added a comment  - 22\/Apr\/2016 01:34 AM    n        n        A second PR : https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1350 , after team members advices.  n    n    n        n            Show  n            n                        n    n    n    n                nn       christophe taretn added a comment  - 22\/Apr\/2016 01:34 AM                      A second PR :  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1350  , after team members advices.               n        n    n"}]}},{"OGM-972":{"info":{"issue_title":"Upgrade to Neo4j 2.3","issue_key":"OGM-972","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.CR1","issue_labels":"5.0.0.CR1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-972?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10470":{"info":{"issue_title":"Mark bytecode enhancement fields as synthetic","issue_key":"HHH-10470","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"5.0.7","issue_component":"5.0.7","issue_labels":"5.0.7","issue_description":"Hi,\r\n Trying to upgrade Hibernate from 4.3 to 5.0, I've stumbled into this issue:  org.springframework.ldap.odm.core.impl.InvalidEntryException: Missing converter from class java.lang.String to interface org.hibernate.bytecode.enhance.spi.CollectionTracker, this is needed for field $$_hibernate_collectionTracker on Entry class com.ericsson.gscro.eohs.entity.Person  \tat org.springframework.ldap.odm.core.impl.DefaultObjectDirectoryMapper.verifyConversion(DefaultObjectDirectoryMapper.java:168)  \tat org.springframework.ldap.odm.core.impl.DefaultObjectDirectoryMapper.addManagedClass(DefaultObjectDirectoryMapper.java:144)  \tat org.springframework.ldap.odm.core.impl.DefaultObjectDirectoryMapper.getEntityData(DefaultObjectDirectoryMapper.java:107)  \tat org.springframework.ldap.odm.core.impl.DefaultObjectDirectoryMapper.filterFor(DefaultObjectDirectoryMapper.java:447)  \tat org.springframework.ldap.core.LdapTemplate.find(LdapTemplate.java:1824)  \tat org.springframework.ldap.core.LdapTemplate.find(LdapTemplate.java:1857)     I'm trying to use the same entity class to populate it using the ODM support from Spring LDAP.  As far as I see, it tries to detect if it can convert the fields of the entity and it finds the ones added by the Hibernate enhancer and it throws an exception as it can't handle them.  Looking at the detection code, it ignores synthetic fields, and, in my opinion, these fields should be marked as synthetic.\r\n Would that create any issues?","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10470?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10467":{"info":{"issue_title":"Provide SessionFactory to UserTypes","issue_key":"HHH-10467","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.0.5","issue_component":"5.0.5","issue_labels":"5.0.5","issue_description":"We have a custom UserType implementation which is used by our HBM files and is instantiated by Hibernate using reflection.  The UserType needs to do some post-construction configuration and validation. In particular it needs a reference to the SessionFactory so that it can obtain the ClassLoaderService.  Currently we are implementing ParameterizedType.setParameterValues() and using some clunky work-around code to obtain the SessionFactory out-of-band.  It would be helpful if Hibernate could provide the SessionFactory to UserTypes early in their life-cycle.  A few ideas about how that could be provided:   \tUserTypes could optionally provide a constructor which accepts a SessionFactory \tUserTypes could optionally implement some interface with setSessionFactory() method (which would be invoked before setParameterValues()).    Hopefully this makes sense.  Thanks to the Hibernate team for a great product.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10467?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-966":{"info":{"issue_title":"Refactor test for Neo4j sequence generation","issue_key":"OGM-966","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.CR1","issue_labels":"5.0.0.CR1","issue_description":"This is in preparation of the Neo4j remote dialect  In Neo4j, we test that the table strategy is thread safe but we don't test the sequence strategy.\r\n The test should also read the properties from the file and consider the initial value in the assert.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-966?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-964":{"info":{"issue_title":"Support multi-load-by-id new in ORM 5.1","issue_key":"OGM-964","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.1","issue_labels":"5.1","issue_description":"It might work out of the box provided the loader resolution is routed through entity persister as discussed on the ML, but at least we should a test for it.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-964?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10462":{"info":{"issue_title":"org.hibernate.mapping.Constraint does not use ImplicitNamingStrategy","issue_key":"HHH-10462","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"5.0.7","issue_component":"5.0.7","issue_labels":"5.0.7","issue_description":"While we are now able to determine non-specific names in a more granular way, through the ImplicitNamingStrategy, than before it seems that some code is still using their own implementation.\r\n I have found at least one occurrence where this is the case:   org.hibernate.mapping.Constraint contains still some generateName methods which are essentially doing the same as the naming strategy.   In particular Primary and (some) UniqueConstraints are not running through the ImplicitNamingStrategy.   It seems that ForeignConstraints are directed \"correctly\" to the naming strategy, but I did not investigate deeply why this is the case.  This means that we currently do not have a way to interfere with primary and (some) unique constraints name generation. Is that correct?","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10462?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10458":{"info":{"issue_title":"Better encapsulate SchemaManagementTool (OGM) - unify JPA schema generation and hbm2ddl capabilities","issue_key":"HHH-10458","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0","issue_labels":"5.1.0","issue_description":"At the end of the day, the point of this enhancement request is to better encapsulate SchemaManagementTool such that OGM etal can really truly replace that service.  This is a multi-faceted request.    The main consideration is the org.hibernate.tool.schema.spi.Target contract as it is passed to the individual delegates of the SchemaManagementTool.  Target assumes that schema management commands are representable as Strings as they are in RDBMS\/JDBC environment.  For OGM however that is often not the case.  To cater for that, Target should no longer be passed into the SchemaManagementTool delegates.  Instead, the SchemaManagementTool implementation or its delegates should interpret any config and decide itself what to do.  In that sense, Target would become an internal detail within the standard ORM SchemaManagementTool implementation.  Another facet involves unifying the JPA schema generation and hbm2ddl capabilities.  At the moment OGM would not be able to override how JPA schema generation works.  We obviously need to account for that.  The corollary to Target on the JPA schema-gen  side is org.hibernate.jpa.internal.schemagen.GenerationTarget.  They are pretty equivalent except that Target accepts commands one by one, whereas GenerationTarget accepts them all at once.  Seeing how org.hibernate.jpa.internal.schemagen.JpaSchemaGenerator is not replaceable by the user or integrations at all anyway, dramatically changing these contracts and\/or moving them around is not a major concern.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10458?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-74926","commnet_date":"2016-01-28T12:47:11-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 28\/Jan\/2016 12:47 PM    n        n        Gunnar Morling I do worry about putting the onus on each and every SchemaManagementTool implementation to parse and interpret the plethora of config options for JPA-schema-gen and hbm2ddl.  Maybe its better if we defined a \"parameter object\" that represents the parsed configuration information and passed that into the calls to SchemaManagementTool to get the delegates.nnSo today we parse all that config outside of SchemaManagementTool (in JpaSchemaGenerator, SchemaExport, etc) and then use that to drive how we interact with SchemaManagementTool to get certain delegates and to build the things we pass into those delegates (Target, etc).  I think the first part still needs to be true : whatever drives this process needs to know that the user wants to drop and recreate the schema or validate the schema etc; so it needs to at least parse and interpret hibernate.hbm2ddl.auto, javax.persistence.schema-generation.database.action and javax.persistence.schema-generation.scripts.action to understand what actiosn (if any) need to be run.  nnFrom there we have a few options  We could let each delegate configure itself.  So e.g. we'd call SchemaCreator#doCreation passing the Map\/ServiceRegistry for SchemaCreator to be able to configure itself.  Like I said above, I worry about each and every SchemaCreator implementation (and the other delegate implementations) having to do this on their own since 90%+ of these config options are the same.  The other option I see is to have the \"driver\" do that all parsing\/interpretation and passing a parameter-object representation of that into the SchemaCreator, etc.  n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 28\/Jan\/2016 12:47 PM                       Gunnar Morling  I do worry about putting the onus on each and every  SchemaManagementTool  implementation to parse and interpret the plethora of config options for JPA-schema-gen and hbm2ddl.  Maybe its better if we defined a \"parameter object\" that represents the parsed configuration information and passed that into the calls to  SchemaManagementTool  to get the delegates. nn So today we parse all that config outside of  SchemaManagementTool  (in  JpaSchemaGenerator ,  SchemaExport , etc) and then use that to drive how we interact with  SchemaManagementTool  to get certain delegates and to build the things we pass into those delegates ( Target , etc).  I think the first part still needs to be true : whatever drives this process needs to know that the user wants to drop and recreate the schema or validate the schema etc; so it needs to at least parse and interpret  hibernate.hbm2ddl.auto ,  javax.persistence.schema-generation.database.action  and  javax.persistence.schema-generation.scripts.action  to understand what actiosn (if any) need to be run.   nn From there we have a few options  We could let each delegate configure itself.  So e.g. we'd call  SchemaCreator#doCreation  passing the Map\/ServiceRegistry for SchemaCreator to be able to configure itself.  Like I said above, I worry about each and every SchemaCreator implementation (and the other delegate implementations) having to do this on their own since 90%+ of these config options are the same.  The other option I see is to have the \"driver\" do that all parsing\/interpretation and passing a parameter-object representation of that into the SchemaCreator, etc.               n        n    n"},{"commnet_id":"comment-74939","commnet_date":"2016-01-29T08:13:25-0800","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 29\/Jan\/2016 08:13 AM    n        n        Hey Steve Ebersole,nnnwhatever drives this process needs to know that the user wants to drop and recreate the schema or validate the schema etcnn+1 That makes sense.nnnThe other option I see is to have the \"driver\" do that all parsing\/interpretation and passing a parameter-object representation of that into the SchemaCreator, etc. nnThe parameter object seems good. I suppose we'll still need a representation of the \"target\" as part of that parameter object, but just as an enum or so, so impls SchemaCreator et al. can decide whether to write to the DB or file (or console). It should also allow to have just one method on each of SchemaCreator instead of the plethora of overloaded methods. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 29\/Jan\/2016 08:13 AM                      Hey  Steve Ebersole , nn n whatever drives this process needs to know that the user wants to drop and recreate the schema or validate the schema etc  nn +1 That makes sense. nn n The other option I see is to have the \"driver\" do that all parsing\/interpretation and passing a parameter-object representation of that into the SchemaCreator, etc.   nn The parameter object seems good. I suppose we'll still need a representation of the \"target\" as part of that parameter object, but just as an enum or so, so impls  SchemaCreator  et al. can decide whether to write to the DB or file (or console). It should also allow to have just one method on each of  SchemaCreator  instead of the plethora of overloaded methods.              n        n    n"},{"commnet_id":"comment-74940","commnet_date":"2016-01-29T08:16:34-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 29\/Jan\/2016 08:16 AM    n        n        Well remember that we also support output to files.  For files output I think even more than \"just an enum\".  But I have not mind modeled the whole thing yet; just wanted to get opinions of the overall idea. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 29\/Jan\/2016 08:16 AM                      Well remember that we also support output to files.  For files output I think even more than \"just an enum\".  But I have not mind modeled the whole thing yet; just wanted to get opinions of the overall idea.              n        n    n"}]}},{"OGM-963":{"info":{"issue_title":"Remove SessionFactoryLifecycleAwareDialect","issue_key":"OGM-963","issue_type":"Remove Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.1","issue_labels":"5.1","issue_description":"There will be a single grid dialect instance living in a standard service registry, while multiple session factories can be created from that. So I believe the contract SessionFactoryLifecycleAwareDialect is potentially dangerous because it allows to hold a dialect constant stated based on the initialization from one factory, which may be incorrect.  In practice it's probably not a problem, but we should avoid the mixture of different scopes.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-963?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10456":{"info":{"issue_title":"Invalid PrimaryKeyJoinColumn annotation warning should report the class name","issue_key":"HHH-10456","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"5.0.7","issue_component":"5.0.7","issue_labels":"5.0.7","issue_description":"It would be useful to report on which class the invalid PrimaryKeyJoinColumn annotation is present to allow to someone to fix the problem more easily.  Example:\r\n Current message : HHH000137: Root entity should not hold an PrimaryKeyJoinColum(s), will be ignored\r\n Proposed message: HHH000137: Root entity should not hold an PrimaryKeyJoinColum(s), will be ignored: com.yourcompany.classname  Files to modify to my knowledge:  \thibernate-core\/src\/main\/java\/org\/hibernate\/internal\/CoreMessageLogger.java \thibernate-core\/src\/main\/java\/org\/hibernate\/cfg\/AnnotationBinder.java","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10456?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-76256","commnet_date":"2016-03-24T13:23:33-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 24\/Mar\/2016 13:23 PM    n        n        Hi, Dominique. To merge this, I need you to sign the CLA. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 24\/Mar\/2016 13:23 PM                      Hi, Dominique. To merge this, I need you to sign the  CLA .              n        n    n"},{"commnet_id":"comment-76332","commnet_date":"2016-03-30T04:47:26-0700","commnet_user":"Dominique Toupin","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Dominique Toupinn added a comment  - 30\/Mar\/2016 04:47 AM    n        n        Hi, Vlad. Just to let you know I signed the Hibernate CLA last week and the status is currently \"Awaiting approval by project lead\". n    n    n        n            Show  n            n                        n    n    n    n                nn       Dominique Toupinn added a comment  - 30\/Mar\/2016 04:47 AM                      Hi, Vlad. Just to let you know I signed the Hibernate CLA last week and the status is currently \"Awaiting approval by project lead\".              n        n    n"},{"commnet_id":"comment-76333","commnet_date":"2016-03-30T04:59:06-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 30\/Mar\/2016 04:59 AM    n        n        Thanks. I'll ping Steve because he's the only one who can approve those requests. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 30\/Mar\/2016 04:59 AM                      Thanks. I'll ping Steve because he's the only one who can approve those requests.              n        n    n"},{"commnet_id":"comment-76336","commnet_date":"2016-03-30T08:03:29-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 30\/Mar\/2016 08:03 AM    n        n        PR applied upstream. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 30\/Mar\/2016 08:03 AM                      PR applied upstream.              n        n    n"}]}},{"HHH-10453":{"info":{"issue_title":"SchemaUpdate to export schema changes like change constraint","issue_key":"HHH-10453","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"At the moment the hibernate SchemaUpdate tool will export changes like this:   \tcreate a new table \tadd a new column    The hibernate schema update will not:   \tdrop a table \tdrop a column \tchange a constraint on a column \tadd a column with a not-null constraint to an existing table    For example if I change my column definition from this:    @JoinColumn(name = \"unit\" , nullable = false , referencedColumnName = \"pk\" )     to this:    @JoinColumn(name = \"unit\" , nullable = true , referencedColumnName = \"pk\" )    and then I run schemaupdate there will be no changes detected. This proposal wants to improve the schemaupdate tool to also track changes like change constraints, drop a column or drop a table.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10453?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2080":{"info":{"issue_title":"Provide an API to keep a frozen view of the index open for some user defined scope","issue_key":"HSEARCH-2080","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.7","issue_labels":"5.7","issue_description":"An idea after discussing reliable pagination strategies and the need for repeatable-read in some scenarios. Not reopening the index might be useful in other cases too, for example to provide repeatable-read within a Session when no changes have been flushed to the index, not least it will improve performance as it will avoid some IO hits to verify if the IndexReader is still up to date (or in worst case when it's not up to date that would even force a refresh).  So overall this could improve usability by better matching repeatable-read semantics within a Session, and improve performance by reducing the index reopening ratio.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2080?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-961":{"info":{"issue_title":"Refactor Cassandra row handling","issue_key":"OGM-961","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.CR1","issue_labels":"5.0.0.CR1","issue_description":"groundwork for embedding collection cols","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-961?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10450":{"info":{"issue_title":"Refactor the way configuration is read","issue_key":"HHH-10450","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0","issue_labels":"5.1.0","issue_description":"Currently there's the default configuration file, but this is completely ignored when user sets his own configuration file or when createCacheManager() is overridden. There are no warnings and no sensible defaults when certain cache configuration is not present. Also, pending puts cache configuration needs to be wired into the code.  2LC should use configuration from the cache manager (started with provided configuration file if the region factor is not overridden) and if the cache config is not present, load the default from infinispan-config.xml.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10450?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-74810","commnet_date":"2016-01-24T18:17:13-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 24\/Jan\/2016 18:17 PM    n        n        Radim Vansa I assume you want this in 5.1? n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 24\/Jan\/2016 18:17 PM                       Radim Vansa  I assume you want this in 5.1?              n        n    n"},{"commnet_id":"comment-74811","commnet_date":"2016-01-24T18:18:17-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 24\/Jan\/2016 18:18 PM    n        n        Also is this related to n    n                n        n            n            HHH-10449n        n                                                    Closed n             n?  Does this depend on Infinispan 8.1? n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 24\/Jan\/2016 18:18 PM                      Also is this related to n     n                 n         n             n            HHH-10449n         n                                                     Closed n             n?  Does this depend on Infinispan 8.1?              n        n    n"},{"commnet_id":"comment-74834","commnet_date":"2016-01-25T02:52:05-0800","commnet_user":"Radim Vansa","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Radim Vansan added a comment  - 25\/Jan\/2016 02:52 AM    n        n        It does not depend exactly on 8.1, but there's an issue with 8.0.1 (affecting the PR) which was fixed in 8.0.2 and 8.1. I thought it would be better to upgrade to the most recent one when it's possible and the upgrade is happening. n    n    n        n            Show  n            n                        n    n    n    n                nn       Radim Vansan added a comment  - 25\/Jan\/2016 02:52 AM                      It does not depend exactly on 8.1, but there's an issue with 8.0.1 (affecting the PR) which was fixed in 8.0.2 and 8.1. I thought it would be better to upgrade to the most recent one when it's possible and the upgrade is happening.              n        n    n"},{"commnet_id":"comment-74856","commnet_date":"2016-01-25T13:39:42-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 25\/Jan\/2016 13:39 PM    n        n        I am asking not just in terms of Jira.  Also in terms of GitHub; is there an order I need to apply the related PRs?  Since Galder has not replied, I am guessing he will not.  And I rather not be stuck trying to stuff all of these in at the last moment.  So I will apply them, just need to know if there is an order they need to be done in. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 25\/Jan\/2016 13:39 PM                      I am asking not just in terms of Jira.  Also in terms of GitHub; is there an order I need to apply the related PRs?  Since Galder has not replied, I am guessing he will not.  And I rather not be stuck trying to stuff all of these in at the last moment.  So I will apply them, just need to know if there is an order they need to be done in.              n        n    n"},{"commnet_id":"comment-74866","commnet_date":"2016-01-26T00:39:27-0800","commnet_user":"Radim Vansa","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Radim Vansan added a comment  - 26\/Jan\/2016 00:39 AM     - edited  n        n        Steve Ebersole No, hibernate-infinispan testsuite is not run in CI, therefore there won't be any test failures reported. Compilation-wise it's fine, there's no 8.1-specific API. n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Radim Vansan added a comment  - 26\/Jan\/2016 00:39 AM     - edited                     Steve Ebersole  No, hibernate-infinispan testsuite is not run in CI, therefore there won't be any test failures reported. Compilation-wise it's fine, there's no 8.1-specific API.              n        n    n"}]}},{"HHH-10445":{"info":{"issue_title":"FlushMode.AUTO doesn&#39;t trigger a flush for a pending child entity when fetching a collection of entities ","issue_key":"HHH-10445","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.0.6","issue_component":"5.0.6","issue_labels":"5.0.6","issue_description":"Assuming we have the following entities:     @Entity  public  class Person {        @Id      @GeneratedValue      private  Long  id;        private  String  name;        @OneToMany(mappedBy = \"person\" , cascade = CascadeType.ALL)      private  List&lt;Phone&gt; phones = new  ArrayList&lt;&gt;(  );        public  Person() {}        public  Person(String  name) {          this .name = name;      }        public  Long  getId() {          return  id;      }        public  String  getName() {          return  name;      }        public  List&lt;Phone&gt; getPhones() {          return  phones;      }        public  void addPhone(Phone phone) {          phones.add( phone );          phone.setPerson( this  );      }  }    @Entity  public  class Phone {        @Id      @GeneratedValue      private  Long  id;        @ManyToOne      private  Person person;        private  String  number;        public  Phone() {      }        public  Phone(String  number) {          this .number = number;      }        public  Long  getId() {          return  id;      }        public  String  getNumber() {          return  number;      }        public  Person getPerson() {          return  person;      }        public  void setPerson(Person person) {          this .person = person;      }  }     When running the following test case:     final  Person vlad = doInJPA( this ::entityManagerFactory, entityManager -&gt; {      Person person = new  Person( \"Vlad\"  );      entityManager.persist( person );      return  person;  } );    doInJPA( this ::entityManagerFactory, entityManager -&gt; {      Phone phone = new  Phone( \"1234567890\"  );      vlad.addPhone( phone );      entityManager.persist( phone );      Person person = entityManager.createQuery( \"select p from Person p\" , Person.class).getSingleResult();      assertEquals(1, person.getPhones().size());  } );     The EntityManager is notified to persist the new phone entity, which is queued and waits for a flush to be inserted into the database.  Meanwhile, we retrieve its parent entity (which hasn't been loaded before in the current persistence context - we were just using a detached object for setting the person @ManyToOne relationship).  When getting the child entity collection, Hibernate doesn't trigger a flush since it considers there's no overlapping between the person child entity and the person parent one.  This leads to an inconsistency because the child entity collection is empty and the test fails. If the flush were triggered, the parent entity should have seen the newly persisted child entity.  Test case will be added after knowing the issue number.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10445?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-960":{"info":{"issue_title":"Allow to configure partition and clustering key for Cassandra-mapped entities","issue_key":"OGM-960","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"cassandra","issue_description":"When using a composite primary key for a Cassandra-mapped entity, it should be possible to define which column(s) should form the partition key and the order of columns in the partition and clustering key.  Maybe something like this:     @Entity  class OrderLine {        @EmbeddedId      public  OrderLinePk pk;        ...  }        @Embeddable  class OrderLinePk {        @PartitionKey      public  long  orderNo;        public  short  serialNo;  }     The primary key created in Cassandra would be (orderno, serialno) (the first column given is the partition key).  Or with a compound partition key:     @Embeddable  class OrderLinePk {        @PartitionKey(order=1)      public  String  customer;        @PartitionKey(order=2)      public  long  orderNo;        public  short  serialNo;  }     The primary key created in Cassandra would be ((customerno, orderno), serialno) (the columns in the first brackets form the partition key).  Similarly for @ClusteringKey(order=123) if there is more than one clustering key column.  Some useful resources:   \thttp:\/\/www.datastax.com\/dev\/blog\/basic-rules-of-cassandra-data-modeling \thttp:\/\/stackoverflow.com\/questions\/24949676\/difference-between-partition-key-composite-key-and-clustering-key-in-cassandra","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-960?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-74675","commnet_date":"2016-01-13T01:37:56-0800","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 13\/Jan\/2016 01:37 AM    n        n        An alternative would be simply CassandraPrimaryKey(\"((partKey1, partKey2), clustKey1, clustKey2, clustKey3)\") on the entity level. A bit shorter and resembling the Cassandra representation, but more prone to errors. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 13\/Jan\/2016 01:37 AM                      An alternative would be simply  CassandraPrimaryKey(\"((partKey1, partKey2), clustKey1, clustKey2, clustKey3)\")  on the entity level. A bit shorter and resembling the Cassandra representation, but more prone to errors.              n        n    n"}]}},{"HHH-10440":{"info":{"issue_title":"Raise warning in case mapping annotations are ignored due to default access type","issue_key":"HHH-10440","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"jandex-binding","issue_labels":"jandex-binding","issue_description":"Raise a warning or error in cases where mapping annotations are given on an element not matching the default access type for that entity and @Access has not been given explicitly either.  The most common case of this issue which I saw several times happen is where @Id is given at the field level but some other mapping annotations are given on property getters. The latter are silently ignored in that case, resulting in mapping errors tough to understand especially for beginners. A warning might help them.  Discussion on hibernate-dev: http:\/\/lists.jboss.org\/pipermail\/hibernate-dev\/2016-January\/014023.html","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10440?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-74681","commnet_date":"2016-01-13T06:10:18-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 13\/Jan\/2016 06:10 AM    n        n        May have already been covered under the work I have done for n    n                n        n            n            HHH-10176n        n                                                    Open n             n and friends as pushed to my fork : https:\/\/github.com\/sebersole\/hibernate-core\/commits\/jandex-binding n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 13\/Jan\/2016 06:10 AM                      May have already been covered under the work I have done for n     n                 n         n             n            HHH-10176n         n                                                     Open n             n and friends as pushed to my fork :  https:\/\/github.com\/sebersole\/hibernate-core\/commits\/jandex-binding               n        n    n"}]}},{"HHH-10439":{"info":{"issue_title":"Log  a message which prints the name of the import script being imported","issue_key":"HHH-10439","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.7,                                            5.1.0","issue_labels":"5.0.7,                                            5.1.0","issue_description":"A user has requested that the import scripts that are imported into the database be logged since it helps to know if the import scripts were indeed picked up. More details here https:\/\/developer.jboss.org\/thread\/241596","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10439?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10436":{"info":{"issue_title":"Create Maven-published OBR descriptor","issue_key":"HHH-10436","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Rejected","issue_fix_version":"None","issue_component":"None","issue_labels":"build,                                            hibernate-osgi","issue_description":"This functionality already exists written by Tim Ward.  Unfortunately at the moment it is only in the form of a Maven plugin.  Tim tells me there is already a plan for a Gradle plugin as well.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10436?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-74658","commnet_date":"2016-01-12T07:37:37-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 12\/Jan\/2016 07:37 AM    n        n        Tentatively scheduling this for 5.1, assuming the Gradle plugin is ready by then. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 12\/Jan\/2016 07:37 AM                      Tentatively scheduling this for 5.1, assuming the Gradle plugin is ready by then.              n        n    n"},{"commnet_id":"comment-78242","commnet_date":"2016-05-19T10:37:58-0700","commnet_user":"Tim Ward","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Tim Wardn added a comment  - 19\/May\/2016 10:37 AM    n        n        Unfortunately we had to give up on a Gradle version of the indexer - apparently there is no way to find a download URL for a given dependency in Gradle.nnSee bnd issue #1288 n    n    n        n            Show  n            n                        n    n    n    n                nn       Tim Wardn added a comment  - 19\/May\/2016 10:37 AM                      Unfortunately we had to give up on a Gradle version of the indexer - apparently there is no way to find a download URL for a given dependency in Gradle. nn See  bnd issue #1288               n        n    n"},{"commnet_id":"comment-78243","commnet_date":"2016-05-19T19:42:25-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 19\/May\/2016 19:42 PM    n        n        You mind if I ask why you need the artifact's repo URL?  Seems like the local artifacts and \"resolution graph\" ought to be enough info. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 19\/May\/2016 19:42 PM                      You mind if I ask why you need the artifact's repo URL?  Seems like the local artifacts and \"resolution graph\" ought to be enough info.              n        n    n"},{"commnet_id":"comment-78244","commnet_date":"2016-05-20T00:39:29-0700","commnet_user":"Tim Ward","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Tim Wardn added a comment  - 20\/May\/2016 00:39 AM    n        n        You mind if I ask why you need the artifact's repo URL? Seems like the local artifacts and \"resolution graph\" ought to be enough info.nnAn OSGi repository index file contains information about a set of bundles. The resolution graph allows us to define the set of bundles, and we can then introspect the bundles to gather relevant dependency information. nnThe problem comes with the definition of the osgi.content namespace. Every resource in an OSGi repository has to have a  \"content capability\" which contains the SHA-256 digest of the resource, and the location that it can be downloaded from. Without this information the index is more or less useless to external users. Specifically provisioning systems like Karaf need to know where the bundle can be downloaded from in order to install it \"on demand\" to satisfy a feature or its dependencies.  n    n    n        n            Show  n            n                        n    n    n    n                nn       Tim Wardn added a comment  - 20\/May\/2016 00:39 AM                       You mind if I ask why you need the artifact's repo URL? Seems like the local artifacts and \"resolution graph\" ought to be enough info.  nn An OSGi repository index file contains information about a set of bundles. The resolution graph allows us to define the set of bundles, and we can then introspect the bundles to gather relevant dependency information.  nn The problem comes with the definition of the  osgi.content  namespace. Every resource in an OSGi repository has to have a  \"content capability\" which contains the SHA-256 digest of the resource, and the location that it can be downloaded from. Without this information the index is more or less useless to external users. Specifically provisioning systems like Karaf need to know where the bundle can be downloaded from in order to install it \"on demand\" to satisfy a feature or its dependencies.               n        n    n"},{"commnet_id":"comment-78246","commnet_date":"2016-05-20T06:42:12-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 20\/May\/2016 06:42 AM    n        n        OBR is not what I thought it was then.  Too bad. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 20\/May\/2016 06:42 AM                      OBR is not what I thought it was then.  Too bad.              n        n    n"}]}},{"OGM-959":{"info":{"issue_title":"Remove dead code in TestHelper","issue_key":"OGM-959","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.CR1","issue_labels":"5.0.0.CR1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-959?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-958":{"info":{"issue_title":"Map non-PK indexes to separate look-up tables in Cassandra","issue_key":"OGM-958","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"cassandra","issue_description":"Mapping indexes to look-up tables instead of secondary indexes in Cassandra may be a good first step on the path to the denormalization engine.  The performance of secondary indexes in Cassandra highly depends on the cardinality of indexed fields, as e.g. described in this blog post. So it may be beneficial in many cases to create a separate look-up table keyed by the field of interest.  This would also allow to map multi-column indexes if the index fields allow to create a combined key representation.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-958?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-957":{"info":{"issue_title":"Revisit quote handling in Cassandra","issue_key":"OGM-957","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"cassandra","issue_description":"Currently all table etc. names are quoted in Cassandra.  This is due to the fact that Cassandra will lower-case all non-quoted names. Should we allow some configurability here? E.g. a user may prefer to work with a table \"customer\" instead of \"\\\"Customer\\\"\" for an entity Customer.  We also may raise a warning if the user has given no lower-cased table name and thus quoting\/lowe-casing on OGM's end is required.  See the discussion in PR #613(https:\/\/github.com\/hibernate\/hibernate-ogm\/pull\/613#discussion_r49316487).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-957?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10431":{"info":{"issue_title":"Session-level configurable batch size support","issue_key":"HHH-10431","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.0","issue_labels":"5.2.0","issue_description":"Based on this mailing list discussion, it would be useful to configure the batch size on a Session level so that the batch size is configurable per business use case.  So, probably the Session could define setBatchSize(int batchSize) and getBatchSize() methods, which will overwrite the default global batch size given by the hibernate.jdbc.batch_size configuration property.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10431?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-78373","commnet_date":"2016-05-24T11:35:11-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 24\/May\/2016 11:35 AM    n        n        Applied PR on master. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 24\/May\/2016 11:35 AM                      Applied PR on master.              n        n    n"}]}},{"HHH-10429":{"info":{"issue_title":"Incorrect detection of identity column during schema generation when using custom IdentityGenerator class","issue_key":"HHH-10429","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"5.0.6","issue_component":"5.0.6","issue_labels":"5.0.6","issue_description":"See the stack overflow issue:\r\n http:\/\/stackoverflow.com\/questions\/3194721\/bypass-generatedvalue-in-hibernate-merge-data-not-in-db  which is a method for bypassing the @GeneratedValue when you set it explicitly on an entity before persisting it.  There is no other method I've found to be able to achieve the same results.  While this method works great for a functioning system, it unfortunately breaks the HBM2DDL and JPA 2.1 schema generation by excluding the script to set the column to auto generate.  The defect is in the org.hibernate.mapping.SimpleValue class in the isIdentityColumn method which is:     public  boolean  isIdentityColumn(IdentifierGeneratorFactory identifierGeneratorFactory, Dialect dialect) {      identifierGeneratorFactory.setDialect( dialect );      return  identifierGeneratorFactory.getIdentifierGeneratorClass( identifierGeneratorStrategy ).equals(IdentityGenerator.class);  }       If we simply change the function to be slightly less restrictive and include subclasses of IdentityGenerator, we get:     public  boolean  isIdentityColumn(IdentifierGeneratorFactory identifierGeneratorFactory, Dialect dialect) {      identifierGeneratorFactory.setDialect( dialect );      return  IdentityGenerator.class.isAssignableFrom(identifierGeneratorFactory.getIdentifierGeneratorClass( identifierGeneratorStrategy ));  }","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10429?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-74898","commnet_date":"2016-01-27T08:38:16-0800","commnet_user":"Matthew Morrissette","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Matthew Morrissetten added a comment  - 27\/Jan\/2016 08:38 AM    n        n        Here is the commit that fixes this issue. n    n    n        n            Show  n            n                        n    n    n    n                nn       Matthew Morrissetten added a comment  - 27\/Jan\/2016 08:38 AM                      Here is the commit that fixes this issue.              n        n    n"},{"commnet_id":"comment-75035","commnet_date":"2016-02-08T13:49:04-0800","commnet_user":"Matthew Morrissette","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Matthew Morrissetten added a comment  - 08\/Feb\/2016 13:49 PM    n        n        While I wouldn't normally call this problem a show stopper, for my team it's causing a real problem with our development workflow and we cannot continue without modifying hibernate source.nnWe use MySQL databases in production and use the schema generation functionality in Hibernate\/JPA 2.1 to create our databases.  If that was our only schema and data base provider I have work arounds to make it function. However, we are using an in memory HSQL database during Unit testing and because of this defect, all our test cases are failing because the columns are not correctly set to be identity columns.   If I was only using HSQL DB I could fix this issue as well. n    n    n        n            Show  n            n                        n    n    n    n                nn       Matthew Morrissetten added a comment  - 08\/Feb\/2016 13:49 PM                      While I wouldn't normally call this problem a show stopper, for my team it's causing a real problem with our development workflow and we cannot continue without modifying hibernate source. nn We use MySQL databases in production and use the schema generation functionality in Hibernate\/JPA 2.1 to create our databases.  If that was our only schema and data base provider I have work arounds to make it function. However, we are using an in memory HSQL database during Unit testing and because of this defect, all our test cases are failing because the columns are not correctly set to be identity columns.   If I was only using HSQL DB I could fix this issue as well.              n        n    n"},{"commnet_id":"comment-76230","commnet_date":"2016-03-23T01:35:42-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Vlad Mihalcean added a comment  - 23\/Mar\/2016 01:35 AM     - edited  n        n        Hi, Matthew Morrissette! Did you sign the CLA? I need you to sign it to merge the PR. n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Vlad Mihalcean added a comment  - 23\/Mar\/2016 01:35 AM     - edited                    Hi,  Matthew Morrissette ! Did you sign the  CLA ? I need you to sign it to merge the PR.              n        n    n"},{"commnet_id":"comment-76236","commnet_date":"2016-03-23T11:30:42-0700","commnet_user":"Matthew Morrissette","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Matthew Morrissetten added a comment  - 23\/Mar\/2016 11:30 AM    n        n        Yes, I did on January 14th. n    n    n        n            Show  n            n                        n    n    n    n                nn       Matthew Morrissetten added a comment  - 23\/Mar\/2016 11:30 AM                      Yes, I did on January 14th.              n        n    n"},{"commnet_id":"comment-76242","commnet_date":"2016-03-23T23:27:01-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 23\/Mar\/2016 23:27 PM    n        n        Merged PR on master. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 23\/Mar\/2016 23:27 PM                      Merged PR on master.              n        n    n"}]}},{"HSEARCH-2078":{"info":{"issue_title":"Upgrade to Apache Lucene 5.4.0","issue_key":"HSEARCH-2078","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Alpha1","issue_labels":"5.6.0.Alpha1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2078?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-953":{"info":{"issue_title":"Convert query parameter types to grid types in core","issue_key":"OGM-953","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.CR1","issue_labels":"5.0.0.CR1","issue_description":"This will avoid the service dependency from Neo4jDialect to TypeTranslator, allowing the latter to become an SF-scoped service.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-953?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-74647","commnet_date":"2016-01-12T01:05:23-0800","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 12\/Jan\/2016 01:05 AM    n        n        Implemented by introducing an OGM-specific QueryParameters object. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 12\/Jan\/2016 01:05 AM                      Implemented by introducing an OGM-specific  QueryParameters  object.              n        n    n"}]}},{"HHH-10423":{"info":{"issue_title":"Raise early error if attribute converter is applied to property of unsupported type","issue_key":"HHH-10423","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"When applying a AttributeConverter&lt;Foo, Bar&gt; to a property of another type than Foo it'd be nice to get an early failure during bootstrap. Atm. an ClassCastException is raised at conversion time.  Minor improvement which'd help to detect this sort of mis-configuration.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10423?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10419":{"info":{"issue_title":"Better error report upon JPA AttributeConverter instantiation error","issue_key":"HHH-10419","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"5.0.6","issue_component":"5.0.6","issue_labels":"5.0.6","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10419?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-74544","commnet_date":"2016-01-06T11:51:51-0800","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 06\/Jan\/2016 11:51 AM    n        n        Fixed in master. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 06\/Jan\/2016 11:51 AM                      Fixed in master.              n        n    n"}]}},{"HHH-10416":{"info":{"issue_title":"Drop superfluous immutable-entity cache configuration","issue_key":"HHH-10416","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.6","issue_component":"5.0.6","issue_labels":"5.0.6","issue_description":"The entity and immutable-entity cache configurations are exactly the same.  Rather than force users to define them, let's default the immutable-entity configuration to the entity configuration - the same way we do for the collection and natural id regions.  We just need to change org.hibernate.cache.infinispan.InfinispanRegionFactory from:    immutableEntityOverrides.setCacheName( DEF_IMMUTABLE_ENTITY_RESOURCE );    To:    immutableEntityOverrides.setCacheName( DEF_ENTITY_RESOURCE );     So that the immutableEntity defaults to the \"entity\" cache settings.    And remove DEF_IMMUTABLE_ENTITY_RESOURCE.   from irc conversation:  &lt;pferraro&gt; smarlow: question - what is the point of the immutable-entity cache configuration?\r\n &lt;pferraro&gt; smarlow: the config looks to be the same as for the entity cache configuration\r\n &lt;smarlow&gt; yup, weird huh? \r\n &lt;smarlow&gt; the problem is that its sort of immutable\r\n &lt;pferraro&gt; smarlow: are immutable entities stored in a separate region?\r\n &lt;smarlow&gt; Hibernate application code is not allowed to update the entity but can remove it\r\n &lt;pferraro&gt; where remove = evict?\r\n &lt;smarlow&gt; pferraro: @Immutable entities are stored in a separate cache.  I mean \"remove\" as in delete from the database\r\n &lt;pferraro&gt; smarlow: I see, but why do we need a separate cache configuration?  why can't we reuse the entity cache configuration?  like we do for the collection region?\r\n &lt;pferraro&gt; smarlow: it would still get its own cache - but it would be configured the same as for mutable entities\r\n &lt;smarlow&gt; that sounds good, is that a code change or config file?\r\n &lt;smarlow&gt; the Hibernate equivalent is at https:\/\/github.com\/hibernate\/hibernate-orm\/blob\/master\/hibernate-infinispan\/src\/main\/resources\/org\/hibernate\/cache\/infinispan\/builder\/infinispan-configs.xml#L30\r\n &lt;pferraro&gt; it would be logic to be handled via the infinispan region factory\r\n &lt;pferraro&gt; so - with the collection region - the InfinispanRegionFactory creates a cache based on a configuration called \"entity\", unless overridden\r\n &lt;pferraro&gt; I don't understand why we wouldn't do the same for immutable entities\r\n &lt;pferraro&gt; I'm thinking this should be changed here: https:\/\/github.com\/hibernate\/hibernate-orm\/blob\/master\/hibernate-infinispan\/src\/main\/java\/org\/hibernate\/cache\/infinispan\/InfinispanRegionFactory.java#L520\r\n &lt;pferraro&gt; lines 527-529, dictate the cache configuration used for collections if there is no \"collection\" cache config defined\r\n &lt;pferraro&gt; So, line 525 should do the same for immutable entities\r\n &lt;pferraro&gt; meaning, it should read: immutableEntityOverrides.setCacheName( DEF_ENTITY_RESOURCE );\r\n &lt;pferraro&gt; that way, we don't need to define an superfluous \"immutable-entity\" cache configuration anywhere, since it is just a copy of the entity configuration","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10416?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-74460","commnet_date":"2016-01-05T14:12:37-0800","commnet_user":"Paul Ferraro","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Paul Ferraron added a comment  - 05\/Jan\/2016 14:12 PM    n        n        Master PR is: https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1209 n    n    n        n            Show  n            n                        n    n    n    n                nn       Paul Ferraron added a comment  - 05\/Jan\/2016 14:12 PM                      Master PR is:  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1209               n        n    n"},{"commnet_id":"comment-74670","commnet_date":"2016-01-12T15:50:13-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 12\/Jan\/2016 15:50 PM    n        n        I applied both of these Pull Requests upstream.  Thanks Paul. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 12\/Jan\/2016 15:50 PM                      I applied both of these Pull Requests upstream.  Thanks Paul.              n        n    n"}]}},{"HHH-10415":{"info":{"issue_title":"org.hibernate.cache.infinispan.InfinispanRegionFactory should default the &quot;immutable-entity&quot; to the &quot;entity&quot; cache settings","issue_key":"HHH-10415","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Rejected","issue_fix_version":"None","issue_component":"5.0.7","issue_labels":"5.0.7","issue_description":"Instead of WildFly cloning the \"entity\" cache configuration for \"immutable-entity\", it would be better if Hibernate defaulted to use the \"entity\" cache settings.  We just need to change org.hibernate.cache.infinispan.InfinispanRegionFactory from:    immutableEntityOverrides.setCacheName( DEF_IMMUTABLE_ENTITY_RESOURCE );    To:    immutableEntityOverrides.setCacheName( DEF_ENTITY_RESOURCE );     So that the immutableEntity defaults to the \"entity\" cache settings.    And remove DEF_IMMUTABLE_ENTITY_RESOURCE.   from irc conversation:  &lt;pferraro&gt; smarlow: question - what is the point of the immutable-entity cache configuration?\r\n &lt;pferraro&gt; smarlow: the config looks to be the same as for the entity cache configuration\r\n &lt;smarlow&gt; yup, weird huh? \r\n &lt;smarlow&gt; the problem is that its sort of immutable\r\n &lt;pferraro&gt; smarlow: are immutable entities stored in a separate region?\r\n &lt;smarlow&gt; Hibernate application code is not allowed to update the entity but can remove it\r\n &lt;pferraro&gt; where remove = evict?\r\n &lt;smarlow&gt; pferraro: @Immutable entities are stored in a separate cache.  I mean \"remove\" as in delete from the database\r\n &lt;pferraro&gt; smarlow: I see, but why do we need a separate cache configuration?  why can't we reuse the entity cache configuration?  like we do for the collection region?\r\n &lt;pferraro&gt; smarlow: it would still get its own cache - but it would be configured the same as for mutable entities\r\n &lt;smarlow&gt; that sounds good, is that a code change or config file?\r\n &lt;smarlow&gt; the Hibernate equivalent is at https:\/\/github.com\/hibernate\/hibernate-orm\/blob\/master\/hibernate-infinispan\/src\/main\/resources\/org\/hibernate\/cache\/infinispan\/builder\/infinispan-configs.xml#L30\r\n &lt;pferraro&gt; it would be logic to be handled via the infinispan region factory\r\n &lt;pferraro&gt; so - with the collection region - the InfinispanRegionFactory creates a cache based on a configuration called \"entity\", unless overridden\r\n &lt;pferraro&gt; I don't understand why we wouldn't do the same for immutable entities\r\n &lt;pferraro&gt; I'm thinking this should be changed here: https:\/\/github.com\/hibernate\/hibernate-orm\/blob\/master\/hibernate-infinispan\/src\/main\/java\/org\/hibernate\/cache\/infinispan\/InfinispanRegionFactory.java#L520\r\n &lt;pferraro&gt; lines 527-529, dictate the cache configuration used for collections if there is no \"collection\" cache config defined\r\n &lt;pferraro&gt; So, line 525 should do the same for immutable entities\r\n &lt;pferraro&gt; meaning, it should read: immutableEntityOverrides.setCacheName( DEF_ENTITY_RESOURCE );\r\n &lt;pferraro&gt; that way, we don't need to define an superfluous \"immutable-entity\" cache configuration anywhere, since it is just a copy of the entity configuration","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10415?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-74456","commnet_date":"2016-01-05T12:52:23-0800","commnet_user":"Scott Marlow","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Scott Marlown added a comment  - 05\/Jan\/2016 12:52 PM    n        n        Galder Zamarreno Radim Vansa Should we make this change for 5.0.7? n    n    n        n            Show  n            n                        n    n    n    n                nn       Scott Marlown added a comment  - 05\/Jan\/2016 12:52 PM                       Galder Zamarreno   Radim Vansa  Should we make this change for 5.0.7?              n        n    n"},{"commnet_id":"comment-74461","commnet_date":"2016-01-05T14:17:28-0800","commnet_user":"Scott Marlow","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Scott Marlown added a comment  - 05\/Jan\/2016 14:17 PM    n        n        Please review https:\/\/hibernate.atlassian.net\/browse\/HHH-10416 instead, thanks.   n    n    n        n            Show  n            n                        n    n    n    n                nn       Scott Marlown added a comment  - 05\/Jan\/2016 14:17 PM                      Please review  https:\/\/hibernate.atlassian.net\/browse\/HHH-10416  instead, thanks.                n        n    n"},{"commnet_id":"comment-74462","commnet_date":"2016-01-05T14:18:02-0800","commnet_user":"Scott Marlow","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Scott Marlown added a comment  - 05\/Jan\/2016 14:18 PM    n        n        instead refer to n    n                n        n            n            HHH-10416n        n                                                    Closed n             n n    n    n        n            Show  n            n                        n    n    n    n                nn       Scott Marlown added a comment  - 05\/Jan\/2016 14:18 PM                      instead refer to n     n                 n         n             n            HHH-10416n         n                                                     Closed n             n              n        n    n"}]}},{"HHH-10407":{"info":{"issue_title":"Allow PostCollectionUpdateEventListener to track deltas on collections","issue_key":"HHH-10407","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"5.0.6","issue_component":"5.0.6","issue_labels":"5.0.6","issue_description":"We're trying to integrate SOLR into hibernate via event-listeners. In the process, we're hitting an issue with our @ManyToMany relationships via @JoinTable. The issue is the event system is not providing access to \"what\" changed when the relationship is modified, just that the owning entity was modified. This can mean that if the collection has 10,000 items in it, we don't have access to what was added or removed.  Currently, there's no easy or clear way to get access to the deltas of changes to a collection update event.  The PostCollectionUpdateEventListener provides access to the PersistentCollection, but for a @ManyToMany collection, the only way to guarantee you can access just the items that have been added or removed is to also listen to the PreCollectionUpdateEventListener and compare the collections.  You appear to be able to get the orphans (removals) by asking the PersistentCollection for its Orphans.   The problem with the Pre\/Post issue is that for a collection of 10,000 objects it requires the initialization of all items to properly do a diff (because you can't get at the identifiers). From what I can see this could be solved in a few different ways &#8211;  \tformally exposing the additions and removals on a PersistentCollection \tallowing subscription to more detailed events that expose the additions and removals","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10407?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10406":{"info":{"issue_title":"Provide @CreationTimestamp and @UpdateTimestamp for Instant and LocalDateTime","issue_key":"HHH-10406","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.6","issue_component":"5.0.6","issue_labels":"5.0.6","issue_description":"@CreationTimestamp and @UpdateTimestamp are pretty useful. However, they don't support the new datatypes of JSR 310. Especially, support for Instant and LocalDateTime would be helpful.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10406?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-75394","commnet_date":"2016-02-24T18:55:39-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 24\/Feb\/2016 18:55 PM    n        n        By definition not a bug n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 24\/Feb\/2016 18:55 PM                      By definition not a bug              n        n    n"},{"commnet_id":"comment-78731","commnet_date":"2016-06-02T10:53:34-0700","commnet_user":"Juergen Zimmermann","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Juergen Zimmermannn added a comment  - 02\/Jun\/2016 10:53 AM    n        n        Do you see a chance that this feature can be included in the next release? n    n    n        n            Show  n            n                        n    n    n    n                nn       Juergen Zimmermannn added a comment  - 02\/Jun\/2016 10:53 AM                      Do you see a chance that this feature can be included in the next release?              n        n    n"},{"commnet_id":"comment-83363","commnet_date":"2016-08-31T05:37:50-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 31\/Aug\/2016 05:37 AM    n        n        Applied PR upstream. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 31\/Aug\/2016 05:37 AM                      Applied PR upstream.              n        n    n"}]}},{"HHH-10403":{"info":{"issue_title":"Serialized classes annotated with @Lob are mapped as tinyblob in MySQL.","issue_key":"HHH-10403","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.0.6","issue_component":"5.0.6","issue_labels":"5.0.6","issue_description":"The attached application has a binary[] field that is properly mapped as longblob, but a class that should be serialized to the database as a longblob but is mapped as tinyblob.  The @Lob annotation defines a large object, should be mapped to a longblob or at least as a blob.  See instructions on how to run this code at:  https:\/\/hibernate.atlassian.net\/browse\/HHH-10402","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10403?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-75417","commnet_date":"2016-02-25T12:02:04-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 25\/Feb\/2016 12:02 PM    n        n        Serializable + @Lob is not currently supported.  This cannot be a bug.  You are asking for it to be supported, that would be a feature\/improvement.nnThat said you can force Hibernate to use a blob, mediumblob or longblob using @Column to indicate a size.  If you want to store as longblob give a value greater than 16777215. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 25\/Feb\/2016 12:02 PM                      Serializable +  @Lob  is not currently supported.  This cannot be a bug.  You are asking for it to be supported, that would be a feature\/improvement. nn That said you can force Hibernate to use a blob, mediumblob or longblob using  @Column  to indicate a size.  If you want to store as longblob give a value greater than 16777215.              n        n    n"}]}},{"HHH-10400":{"info":{"issue_title":"Allow defaultForType in TypeDefs for interfaces\/abstract classes","issue_key":"HHH-10400","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"I noticed (or perhaps I'm doing something wrong), that the parameter \"defaultForType\" on the annotation @TypeDef only applies to concrete classes. I tried setting that to an interface class and it was completely ignored.  Is there any chance we can get an implementation that takes into account interfaces and abstract classes as well?","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10400?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-948":{"info":{"issue_title":"Update Redis driver library to 4.0.2.Final","issue_key":"OGM-948","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.CR1","issue_labels":"5.0.0.CR1","issue_description":"Update the lettuce driver library to 4.0.2.Final. This change requires some changes within the code as the newer version deprecates the RedisConnection interfaces and decouples the connection from the particular API (sync\/async).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-948?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-947":{"info":{"issue_title":"Implement Redis Cluster support","issue_key":"OGM-947","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.CR1","issue_labels":"5.0.0.CR1","issue_description":"Support Redis Cluster by using the underlying driver library.  Configuration of Redis Cluster:  \tAdd new property hibernate.ogm.redis.cluster=true\/false, defaults to false \tAllow multiple connection points in hibernate.ogm.datastore.host as cluster seeds    Test:  \tCreate a Makefile  to spin up a test cluster","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-947?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10399":{"info":{"issue_title":"Add support for specifying TimeZone for ZonedDateTime type","issue_key":"HHH-10399","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"5.0.6","issue_component":"5.0.6","issue_labels":"5.0.6","issue_description":"The new native support for JSR-310 is great, but a feature that's missing is the ability to specify the timezone of the database.  Currently my database has implicit date times in UTC. No zoned data is appended to the end of the string (e.g. \"2013-10-14 04:00:00\").  When Hibernate reads this as a ZonedDateTime, it incorrectly reads it in as EST, as that is the TimeZone of the JVM.  It would be nice to be able to specify the TimeZone of a field by an annotation perhaps.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10399?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-83381","commnet_date":"2016-08-31T22:56:58-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 31\/Aug\/2016 22:56 PM    n        n        We had a discussion on HipChat, and this is a summary that Steve Ebersole had come up with:nnnnWe discussed this on HipChat, but for the benefit of all on this discussion...rnrnPart of this (the original report) speaks to a difference in how we map (org.hibernate.type.Type) java.time temporal versus a java.util temporal - specifically java.util.Calendar.  When we are passed a Calendar (the model defines its attribute as Calendar) we pass along that Calendar reference to the JDBC driver which forces the driver to use that Calendar's TZ.  For java.time temporal types, we always resolve them to UTC values mainly because of how we get to the java.sql.Timestamp value from the java.time value.  For example, for ZonedDateTime we call:rnrn    return (X) Timestamp.from( zonedDateTime.toInstant() );rn rnThe call to #toInstant there essentially forces the value to UTC because it converted directly to epoch-based numeric.rnrnThinking about this some more and \"stepping back\", the real problem is that there are a few different timezones in play here that need to be balanced and handled:rnrn1.tThe database default TZrn2.tThe stored TZrn3.tThe JVM\/JDBC TZrn4.tThe application TZrnThe whole idea of \"stored TZ\" really depends on how the database\/driver treats TIMESTAMP and whether it supports a \"TIMESTAMP_WITH_TIMEZONE\" type.  I personally think it is a huge mistake to save the specific TZ differences to the DB, so I would personally continue to not support TIMESTAMP_WITH_TIMEZONE types.  This would mean we never have to bind the Calendar because we could simply convert the value to to the JVM\/JDBC TZ ourselves.  Specifically I would suggest that we (continue to) assume that the driver has been set up such that the same TZ is used when rnrn1.twhen binding a Timestamp (without passing a Calendar) rn2.treading a Timestamp (without passing a Calendar).rnSpecifically this would mean setting the JVM TZ, or for JDBC drivers that support it setting the \"default TZ\" on the driver.  If we start storing values in the TZ specific to the Calendar we really have no idea how to properly read those values back because we'd lose context to that TZ.  For that reason I suggest we drop passing along the Calender and instead perform all these conversions in memory and pass the converted Timestamp to JDBC.  When reading back, that should mean the driver would return us Timestamps relative to that same TZ.rnrnThe last piece is \"application TZ\" which would be an optional setting indicating the TZ zone-based values should be returned in.  rnrnE.g., let's say a user maps a ZonedDataTime using @Temporal(TIMESTAMP).  If following my suggestions, when saving these values we would:rn1.tconvert the ZonedDateTime to a ZonedDateTime in the \"JVM\/JDBC TZ\" (if different from the incoming ZonedDateTime's TZ)rn2.tuse that to construct a Timestamp to bind to JDBCrnWhen reading back these values, we would:rn1.tget back the Timestamp from JDBCrn2.tassume the value is relative to the \"JVM\/JDBC TZ\" and build the ZonedDateTime via `ZonedDateTime.ofInstant( timestamp.toInstant(), jvmJdbcZoneId )`rn3.tconvert that built ZonedDateTime to the application TZ: `builtZonedDateTime.withZoneSameInstant( applicationZoneId )` - it might be possible to combine this step with the previous, not sure...rnrnSome if this is type-specific.  Assuming the suggestions above:rnu2022tInstant - inherently epoch-based.  rn    otto convert this to a Timestamp for binding we would use `Timestamp#from(Instant).  Because of the above assumptions, the driver would interpret this relative to JVM\/JDBC TZrn    otReading back we simply use `Timestamp#toInstant()`rnu2022tLocalDateTime - is the relative idea of a date+time outside the context of any specific TZ.  rn    otWhen binding we would resolve this into the JVM\/JDBC TZ (using LocalDateTime#atZone(jvmJdbcZoneId), convert to an Instant and create a Timestamp and bind that Timestamp to JDBC.rn    otWhen reading back we'd get the Instant from Timestamp and use that in `LocalDateTime#ofInstant` using the application TZrnu2022tLocalDate - relative idea of a date outside of any specific TZ.  Of course this could also be mapped to a JDBC DATE which circumvents some of this, but mapped to a TIMESTAMP...rn    otWhen binding we'd convert to a LocalDateTime using `LocalDate#atStartOfDay` and treat that LocalDateTime as above.rn    otWhen reading back we would create a LocalDateTime using `LocalDateTime.ofInstant(timestamp.toInstant(), applicationZoneId )`rnu2022tLocalTime - relative idea of a time outside any specific TZ.  Could also be mapped to a JDBC TIME...rn    otWhen binding we'd create a LocalDateTime using `LocalTime.atDate( LocalDate.of( 1970, 1, 1 ) )`, converting that to a ZonedDateTime using `LocalDateTime#atZone( jvmJdbcZoneId )` and finally converting that to a Timestamprn    otWhen reading we would call `LocalDateTime.ofInstant( timestamp.toInstant(), applicationZoneId ).toLocalTime()`rnu2022tZonedDateTime - like a Calendar bundles a date+time with a TZ, and so is directly convertible to an epoch-based value (Instant, Timestamp, etc).  rn    otWhen binding we would convert this to an Instant and then to a Timestamprn    otWhen reading we would convert the Timestamp to an Instant and then convert the Instant to a ZonedDateTime using `ZonedDateTime.ofInstant( timestamp.toInstant(), applicationZoneId )`rnu2022tOffsetDateTime - handled similar to ZonedDateTime.  rn    otWhen binding we would convert the value to a ZonedDateTime using `OffsetDateTime#atZoneSameInstant( jvmJdbcZoneId )` and then follows ZonedDateTimern    otWhen reading we would use `OffsetDateTime.ofInstant( timestamp.toInstant(), applicationZoneId )`rnu2022tOffsetTime - atm we just drop the ZoneOffsetrnu2022tfor java.util.Date and java.sql.Timstamp mapping we have to decide what those concepts model in regards to their value relative to a TZ.  Are they a LocalDateTime relative to the system TimeZone?  Are they a LocalDateTime relative to UTC?  At the moment how we handled these \"legacy Java temporal types\" ends up answering this question as them being \"a LocalDateTime relative to the system TimeZone\".rnu2022twhat about java.sql.Time?  Is this a LocalTime?  An OffsetTime relative to UTC (+0)?rnu2022tand java.sql.Date?rnrnLot of moving parts when you actually start looking deep at \"supporting timezones\".rnrnrn[1] http:\/\/stackoverflow.com\/questions\/18447995\/postgresql-9-2-jdbc-driver-uses-client-time-zone, etcrnrnn n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 31\/Aug\/2016 22:56 PM                      We had a discussion on HipChat, and this is a summary that  Steve Ebersole  had come up with: nnn  n We discussed this on HipChat, but for the benefit of all on this discussion...rnrnPart of this (the original report) speaks to a difference in how we map (org.hibernate.type.Type) java.time temporal versus a java.util temporal - specifically java.util.Calendar.  When we are passed a Calendar (the model defines its attribute as Calendar) we pass along that Calendar reference to the JDBC driver which forces the driver to use that Calendar's TZ.  For java.time temporal types, we always resolve them to UTC values mainly because of how we get to the java.sql.Timestamp value from the java.time value.  For example, for ZonedDateTime we call:rnrn    return (X) Timestamp.from( zonedDateTime.toInstant() );rn rnThe call to #toInstant there essentially forces the value to UTC because it converted directly to epoch-based numeric.rnrnThinking about this some more and \"stepping back\", the real problem is that there are a few different timezones in play here that need to be balanced and handled:rnrn1.tThe database default TZrn2.tThe stored TZrn3.tThe JVM\/JDBC TZrn4.tThe application TZrnThe whole idea of \"stored TZ\" really depends on how the database\/driver treats TIMESTAMP and whether it supports a \"TIMESTAMP_WITH_TIMEZONE\" type.  I personally think it is a huge mistake to save the specific TZ differences to the DB, so I would personally continue to not support TIMESTAMP_WITH_TIMEZONE types.  This would mean we never have to bind the Calendar because we could simply convert the value to to the JVM\/JDBC TZ ourselves.  Specifically I would suggest that we (continue to) assume that the driver has been set up such that the same TZ is used when rnrn1.twhen binding a Timestamp (without passing a Calendar) rn2.treading a Timestamp (without passing a Calendar).rnSpecifically this would mean setting the JVM TZ, or for JDBC drivers that support it setting the \"default TZ\" on the driver.  If we start storing values in the TZ specific to the Calendar we really have no idea how to properly read those values back because we'd lose context to that TZ.  For that reason I suggest we drop passing along the Calender and instead perform all these conversions in memory and pass the converted Timestamp to JDBC.  When reading back, that should mean the driver would return us Timestamps relative to that same TZ.rnrnThe last piece is \"application TZ\" which would be an optional setting indicating the TZ zone-based values should be returned in.  rnrnE.g., let's say a user maps a ZonedDataTime using @Temporal(TIMESTAMP).  If following my suggestions, when saving these values we would:rn1.tconvert the ZonedDateTime to a ZonedDateTime in the \"JVM\/JDBC TZ\" (if different from the incoming ZonedDateTime's TZ)rn2.tuse that to construct a Timestamp to bind to JDBCrnWhen reading back these values, we would:rn1.tget back the Timestamp from JDBCrn2.tassume the value is relative to the \"JVM\/JDBC TZ\" and build the ZonedDateTime via `ZonedDateTime.ofInstant( timestamp.toInstant(), jvmJdbcZoneId )`rn3.tconvert that built ZonedDateTime to the application TZ: `builtZonedDateTime.withZoneSameInstant( applicationZoneId )` - it might be possible to combine this step with the previous, not sure...rnrnSome if this is type-specific.  Assuming the suggestions above:rnu2022tInstant - inherently epoch-based.  rn    otto convert this to a Timestamp for binding we would use `Timestamp#from(Instant).  Because of the above assumptions, the driver would interpret this relative to JVM\/JDBC TZrn    otReading back we simply use `Timestamp#toInstant()`rnu2022tLocalDateTime - is the relative idea of a date+time outside the context of any specific TZ.  rn    otWhen binding we would resolve this into the JVM\/JDBC TZ (using LocalDateTime#atZone(jvmJdbcZoneId), convert to an Instant and create a Timestamp and bind that Timestamp to JDBC.rn    otWhen reading back we'd get the Instant from Timestamp and use that in `LocalDateTime#ofInstant` using the application TZrnu2022tLocalDate - relative idea of a date outside of any specific TZ.  Of course this could also be mapped to a JDBC DATE which circumvents some of this, but mapped to a TIMESTAMP...rn    otWhen binding we'd convert to a LocalDateTime using `LocalDate#atStartOfDay` and treat that LocalDateTime as above.rn    otWhen reading back we would create a LocalDateTime using `LocalDateTime.ofInstant(timestamp.toInstant(), applicationZoneId )`rnu2022tLocalTime - relative idea of a time outside any specific TZ.  Could also be mapped to a JDBC TIME...rn    otWhen binding we'd create a LocalDateTime using `LocalTime.atDate( LocalDate.of( 1970, 1, 1 ) )`, converting that to a ZonedDateTime using `LocalDateTime#atZone( jvmJdbcZoneId )` and finally converting that to a Timestamprn    otWhen reading we would call `LocalDateTime.ofInstant( timestamp.toInstant(), applicationZoneId ).toLocalTime()`rnu2022tZonedDateTime - like a Calendar bundles a date+time with a TZ, and so is directly convertible to an epoch-based value (Instant, Timestamp, etc).  rn    otWhen binding we would convert this to an Instant and then to a Timestamprn    otWhen reading we would convert the Timestamp to an Instant and then convert the Instant to a ZonedDateTime using `ZonedDateTime.ofInstant( timestamp.toInstant(), applicationZoneId )`rnu2022tOffsetDateTime - handled similar to ZonedDateTime.  rn    otWhen binding we would convert the value to a ZonedDateTime using `OffsetDateTime#atZoneSameInstant( jvmJdbcZoneId )` and then follows ZonedDateTimern    otWhen reading we would use `OffsetDateTime.ofInstant( timestamp.toInstant(), applicationZoneId )`rnu2022tOffsetTime - atm we just drop the ZoneOffsetrnu2022tfor java.util.Date and java.sql.Timstamp mapping we have to decide what those concepts model in regards to their value relative to a TZ.  Are they a LocalDateTime relative to the system TimeZone?  Are they a LocalDateTime relative to UTC?  At the moment how we handled these \"legacy Java temporal types\" ends up answering this question as them being \"a LocalDateTime relative to the system TimeZone\".rnu2022twhat about java.sql.Time?  Is this a LocalTime?  An OffsetTime relative to UTC (+0)?rnu2022tand java.sql.Date?rnrnLot of moving parts when you actually start looking deep at \"supporting timezones\".rnrnrn[1] http:\/\/stackoverflow.com\/questions\/18447995\/postgresql-9-2-jdbc-driver-uses-client-time-zone, etcrnrn n               n        n    n"},{"commnet_id":"comment-83946","commnet_date":"2016-09-12T01:50:49-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 12\/Sep\/2016 01:50 AM    n        n        Add support for JDBC setTimestamp with Calendar parameter according to the configured TimeZone. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 12\/Sep\/2016 01:50 AM                      Add support for JDBC setTimestamp with Calendar parameter according to the configured TimeZone.              n        n    n"}]}},{"HHH-10398":{"info":{"issue_title":"_MOD columns not named correctly when using custom column names","issue_key":"HHH-10398","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"4.3.11 ,                                            5.1.0 ,                                            5.0.10 ,                                            5.2.2","issue_component":"4.3.11 ,                                            5.1.0 ,                                            5.0.10 ,                                            5.2.2","issue_labels":"4.3.11","issue_description":"My envers configuration is:     properties.setProperty(EnversSettings.AUDIT_TABLE_SUFFIX, \"_history\" );  properties.setProperty(EnversSettings.AUDIT_STRATEGY, \"org.hibernate.envers.strategy.ValidityAuditStrategy\" );  properties.setProperty(EnversSettings.GLOBAL_WITH_MODIFIED_FLAG, \"true \" );  properties.setProperty(EnversSettings.MODIFIED_FLAG_SUFFIX, \"_mod\" );      Now, I have the following entity:     @Audited  @Entity(name = \"orders\" )  public  final  class Order {             \t@ManyToOne  \t@JoinColumn(name = \"customer_account_id\" , nullable = false )  \tprivate  CustomerAccount customerAccount;            \/\/ And many more ... (including an id, ...)   }        Now, running hibernate creates the following tables:  1. A table `orders` is created with the column (among others)  \t'customer_account_id'    2. A table `orders_history` is created with the following columns (among others)  \t`customer_account_id` \t`customer_account_mod`.     But, I think, the name of second column, storing the modification flag, should be `customer_account_id_mod` instead.  So, I think, envers is ignoring the custom column name for the '_mod' fields defined by '@JoinColumn(name = \"customer_account_id\" ...).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10398?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-74350","commnet_date":"2015-12-21T14:14:07-0800","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 21\/Dec\/2015 14:14 PM    n        n        We are no longer maintaining 4.3 branch. Please confirm that your issue still exists in master branch by creating a pull request and modifying org.hibernate.envers.test.integration.modifiedflags.ModifiedFlagSuffix test to reproduce your issue. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 21\/Dec\/2015 14:14 PM                      We are no longer maintaining 4.3 branch. Please confirm that your issue still exists in master branch by creating a pull request and modifying org.hibernate.envers.test.integration.modifiedflags.ModifiedFlagSuffix test to reproduce your issue.              n        n    n"},{"commnet_id":"comment-74402","commnet_date":"2016-01-03T17:56:00-0800","commnet_user":"Chris Cranford","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Chris Cranfordn added a comment  - 03\/Jan\/2016 17:56 PM    n        n        Thomas Kuhlmann, Envers does not use the Column nor JoinColumn name as the basis for the MODIFIED_FLAG_SUFFIX field name.  In fact, it actually defaults to using the field\/property name on the actual audited class when this configuration is setup.   n    n    n        n            Show  n            n                        n    n    n    n                nn       Chris Cranfordn added a comment  - 03\/Jan\/2016 17:56 PM                       Thomas Kuhlmann , Envers does not use the Column nor JoinColumn name as the basis for the  MODIFIED_FLAG_SUFFIX  field name.  In fact, it actually defaults to using the field\/property name on the actual audited class when this configuration is setup.                n        n    n"},{"commnet_id":"comment-82463","commnet_date":"2016-08-12T07:15:11-0700","commnet_user":"Chris Cranford","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Chris Cranfordn added a comment  - 12\/Aug\/2016 07:15 AM    n        n        Modified column naming happens based on a deterministic order of values.  nnCurrently, we look for whether an @Audited annotation exists for that property and if the modifiedColumnName attribute is provided.  If the annotation is provided and the attribute is non-empty, the column name will be taken as a literal value, meaning we won't append the suffix value.  However, if that attribute isn't provided or is empty, we'll take the property name as defined in the class and append the suffix value to it when defining the database column in the schema.nnAs a work around, you could easily amend your field's annotations to include the following:nnrn\/\/ this  would work for  global specified modified flags settingrn @Audited(modifiedColumnName = \"customer_account_id_mod\" )rnrn\/\/ this  would work for  nonglobal modified flags but with configured '_mod' suffix.rn @Audited(withModifiedFlag = true , modifiedColumnName = \"customer_account_id_mod\" )rnnnnFor 6.0, I'll be adding the following new configuration setting: org.hibernate.envers.modified_flag_naming_strategynnThe DefaultModifiedFlagNamingStrategy will continue to use the existing logic we have where we prioritize the literal modifiedColumnName value with the fallback of using the property name appended by the configured suffix value.nnA new ImprovedModifiedFlagNamingStrategy will alter the behavior slightly such that we will prioritize the naming as follows:nnntUse @Audited(modifiedColumnName=\"...\") first if provided.  The column name will be taken literal based on the annotation value. (just like the default strategy)ntUse @Column or @JoinColumn annotation name attributes if provided.  The column name will be appended with the configured Envers settings suffix.ntUse the property name appended with the configured Envers settings suffix (just like the default strategy).nnnnThis should help simplify the necessary configuration for users who want to use this feature but prefer the column names to differ simply by the configured suffix without having to be overly explicit in their annotation binding configurations. n    n    n        n            Show  n            n                        n    n    n    n                nn       Chris Cranfordn added a comment  - 12\/Aug\/2016 07:15 AM                      Modified column naming happens based on a deterministic order of values.   nn Currently, we look for whether an  @Audited  annotation exists for that property and if the  modifiedColumnName  attribute is provided.  If the annotation is provided and the attribute is non-empty, the column name will be taken as a literal value, meaning we won't append the  suffix  value.  However, if that attribute isn't provided or is empty, we'll take the property name as defined in the class and append the  suffix  value to it when defining the database column in the schema. nn As a work around, you could easily amend your field's annotations to include the following: n  n rn \/\/  this  would work  for  global specified modified flags settingrn @Audited(modifiedColumnName =  \"customer_account_id_mod\" )rnrn \/\/  this  would work  for  nonglobal modified flags but with configured '_mod' suffix.rn @Audited(withModifiedFlag =  true , modifiedColumnName =  \"customer_account_id_mod\" )rn n  nn For 6.0, I'll be adding the following new configuration setting:  org.hibernate.envers.modified_flag_naming_strategy  nn The  DefaultModifiedFlagNamingStrategy  will continue to use the existing logic we have where we prioritize the literal  modifiedColumnName  value with the fallback of using the property name appended by the configured suffix value. nn A new  ImprovedModifiedFlagNamingStrategy  will alter the behavior slightly such that we will prioritize the naming as follows: nn nt Use  @Audited(modifiedColumnName=\"...\")  first if provided.  The column name will be taken literal based on the annotation value. (just like the default strategy) nt Use  @Column  or  @JoinColumn  annotation name attributes if provided.  The column name will be appended with the configured Envers settings suffix. nt Use the property name appended with the configured Envers settings suffix (just like the default strategy). n nnn This should help simplify the necessary configuration for users who want to use this feature but prefer the column names to differ simply by the configured suffix without having to be overly explicit in their annotation binding configurations.              n        n    n"},{"commnet_id":"comment-82471","commnet_date":"2016-08-12T13:39:24-0700","commnet_user":"Chris Cranford","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Chris Cranfordn added a comment  - 12\/Aug\/2016 13:39 PM    n        n        I believe I may need to tweak the strategy a bit based on the following concerns I am seeing:nnntWhen multiple properties may use the same join columnnnrnt@OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, orphanRemoval = true )rnt@JoinColumn(name = \"MCE_ID\" , nullable = false )rnt@AuditJoinTable(name = \"MCE_RE1_AUD\" , inverseJoinColumns = @JoinColumn(name = \"RE1_ID\" ))rntprivate  List&lt;MultipleCollectionRefEntity1&gt; refEntities1 = new  ArrayList&lt;MultipleCollectionRefEntity1&gt;();rnrnt@OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, orphanRemoval = true )rnt@JoinColumn(name = \"MCE_ID\" , nullable = false )rnt@AuditJoinTable(name = \"MCE_RE2_AUD\" , inverseJoinColumns = @JoinColumn(name = \"RE2_ID\" ))rntprivate  List&lt;MultipleCollectionRefEntity2&gt; refEntities2 = new  ArrayList&lt;MultipleCollectionRefEntity2&gt;();rnnnFor this case, I'm not sure what Envers should really do here.  I suspect may be one reason why Envers delegated to @Audited's modifiedColumnName attribute.  This allows users to explicitly define their column names to avoid these cases.nnnnntQueries using hasChanged().\r\nnHere the problem is exposing the right data needed to leverage the strategy.nnn n    n    n        n            Show  n            n                        n    n    n    n                nn       Chris Cranfordn added a comment  - 12\/Aug\/2016 13:39 PM                      I believe I may need to tweak the strategy a bit based on the following concerns I am seeing: nn nt When multiple properties may use the same join columnn  n rnt@OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, orphanRemoval =  true )rnt@JoinColumn(name =  \"MCE_ID\" , nullable =  false )rnt@AuditJoinTable(name =  \"MCE_RE1_AUD\" , inverseJoinColumns = @JoinColumn(name =  \"RE1_ID\" ))rnt private  List&lt;MultipleCollectionRefEntity1&gt; refEntities1 =  new  ArrayList&lt;MultipleCollectionRefEntity1&gt;();rnrnt@OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, orphanRemoval =  true )rnt@JoinColumn(name =  \"MCE_ID\" , nullable =  false )rnt@AuditJoinTable(name =  \"MCE_RE2_AUD\" , inverseJoinColumns = @JoinColumn(name =  \"RE2_ID\" ))rnt private  List&lt;MultipleCollectionRefEntity2&gt; refEntities2 =  new  ArrayList&lt;MultipleCollectionRefEntity2&gt;();rn n  n For this case, I'm not sure what Envers should really do here.  I suspect may be one reason why Envers delegated to  @Audited 's  modifiedColumnName  attribute.  This allows users to explicitly define their column names to avoid these cases.  n nnn nt Queries using hasChanged(). nHere the problem is exposing the right data needed to leverage the strategy. n nn             n        n    n"}]}},{"HHH-10394":{"info":{"issue_title":"Allow result set over-commit holdability","issue_key":"HHH-10394","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.0.0.Final","issue_component":"5.0.0.Final","issue_labels":"5.0.0.Final","issue_description":"As a result of a major redesign in Hibernate 5.x, the LogicalConnectionImplementor implementation classes were introduced. These classes now have the property of releasing JDBC resources on logical transaction commit through the ResourceRegistryStandardImpl (via implementations of org.hibernate.resource.jdbc.internal.AbstractLogicalConnectionImplementor#afterTransaction). This includes closing all ResultSets which were created inside the transaction even though the ResultSets where created with over-commit holdability (java.sql.ResultSet#HOLD_CURSORS_OVER_COMMIT). \r\n Pre 5.x Hibernate did not have this issue as org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction#doCommit did not close the ResultSets and allowed the ResultSets to be open until Session close.  Please consider respecting the holdability setting and allowing the ResultSet to outlive the transaction scope.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10394?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-74337","commnet_date":"2015-12-21T04:47:13-0800","commnet_user":"Matko Medenjak","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Matko Medenjakn added a comment  - 21\/Dec\/2015 04:47 AM    n        n        Added test case. Passes on Hibernate 4.3.6.Final, throws exception on 5.0.x. n    n    n        n            Show  n            n                        n    n    n    n                nn       Matko Medenjakn added a comment  - 21\/Dec\/2015 04:47 AM                      Added test case. Passes on Hibernate 4.3.6.Final, throws exception on 5.0.x.              n        n    n"}]}},{"HHH-10390":{"info":{"issue_title":"Allow for populating child collections based on native query results only","issue_key":"HHH-10390","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.0.6","issue_component":"5.0.6","issue_labels":"5.0.6","issue_description":"When working with SQL and tree data structures, hierarchical SQL queries are typically used to materialise an entire tree or subtree.  Assuming the following table and example data (in Oracle):     CREATE TABLE t_directory (    id           number(7) NOT NULL,    parent_id    number(7),    is_directory number(7),    \"name\"        varchar2(50),      CONSTRAINT pk_t_directory PRIMARY KEY (ID),    CONSTRAINT pk_t_directory_self FOREIGN KEY (PARENT_ID)       REFERENCES t_directory(ID) ON DELETE CASCADE  );    INSERT INTO t_directory VALUES                     ( 1, null , 1, 'C:');      INSERT INTO t_directory VALUES                 ( 2,    1, 1, 'eclipse');          INSERT INTO t_directory VALUES             ( 3,    2, 1, 'configuration');          INSERT INTO t_directory VALUES             ( 4,    2, 1, 'dropins');          INSERT INTO t_directory VALUES             ( 5,    2, 1, 'features');          INSERT INTO t_directory VALUES             ( 7,    2, 1, 'plugins');          INSERT INTO t_directory VALUES             ( 8,    2, 1, 'readme');              INSERT INTO t_directory VALUES         ( 9,    8, 0, 'readme_eclipse.html');          INSERT INTO t_directory VALUES             (10,    2, 1, 'src');          INSERT INTO t_directory VALUES             (11,    2, 0, 'eclipse.exe');          INSERT INTO t_directory VALUES             (12,    2, 0, 'eclipse.ini');      INSERT INTO t_directory VALUES                 (13,    1, 1, 'Program Files');          INSERT INTO t_directory VALUES             (14,   13, 1, 'Internet Explorer');              INSERT INTO t_directory VALUES         (15,   14, 1, 'de-DE');              INSERT INTO t_directory VALUES         (16,   14, 0, 'ielowutil.exe');              INSERT INTO t_directory VALUES         (17,   14, 0, 'iexplore.exe');          INSERT INTO t_directory VALUES             (18,   13, 1, 'Java');              INSERT INTO t_directory VALUES         (19,   18, 1, 'jre6');                  INSERT INTO t_directory VALUES     (20,   19, 1, 'bin');                      INSERT INTO t_directory VALUES (21,   20, 0, 'java.exe');                      INSERT INTO t_directory VALUES (22,   20, 0, 'javaw.exe');                      INSERT INTO t_directory VALUES (23,   20, 0, 'javaws.exe');                  INSERT INTO t_directory VALUES     (24,   19, 1, 'lib');                      INSERT INTO t_directory VALUES (25,   24, 0, 'javaws.jar');                      INSERT INTO t_directory VALUES (26,   24, 0, 'rt.jar');     In Oracle SQL, I would now query the table via:     SELECT *  FROM t_directory  CONNECT BY PRIOR id = parent_id  START WITH parent_id IS NULL  ORDER SIBLINGS BY \"name\"      or with jOOQ     DSL.using(configuration)     .select()     .from(T_DIRECTORY)     .connectBy(prior(T_DIRECTORY.ID).eq(T_DIRECTORY.PARENT_ID))     .startWith(T_DIRECTORY.PARENT_ID.isNull())     .orderSiblingsBy(T_DIRECTORY.NAME)     If I wanted to use the above native query with Hibernate via JPA, I would create the following entity:     @Entity  @Table(name = \"t_directory\" )  public  class JPADirectory {        @Id      public  int                 id;        @ManyToOne      @JoinColumn(name = \"parent_id\" )      public  JPADirectory       parent;        @OneToMany(mappedBy = \"parent\" )      public  List&lt;JPADirectory&gt; children;        @Column(name = \"`name`\" )      public  String              name;  }     ... and then run     List&lt;JPADirectory&gt; result = em.createNativeQuery(sql, JPADirectory.class).getResultList();     With Hibernate, the above will nicely associate parents with their children, but not children with their parents, because Hibernate cannot guarantee that all children are present (see also http:\/\/stackoverflow.com\/a\/34374600\/521799).  However, because I wrote the \"right thing\" in SQL, I know that all the children per parent are present, and I don't want Hibernate to run any additional queries when I access some JPADirectory.children collection.  TL;DR: I would like to be able to specify that for this particular native query, all children collections should be materialised and considered complete.  Nice-to-have: Currently, the order specified in ORDER SIBLINGS BY is lost - it would be great if that were maintained.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10390?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-74252","commnet_date":"2015-12-20T08:03:58-0800","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 20\/Dec\/2015 08:03 AM    n        n        I added a solution for this issue on GitHub.nnBasically, we need to disable the collection fetching mechanism and override its mechanism like in the following result set transformer example:nnnrnNode root = (Node) doInHibernate(session -&gt; {rn    <span class=\"code-keyword\">return<\/span> sessionrn        .createSQLQuery(rn                <span class=\"code-quote\">\"SELECT * \"<\/span> +rn                <span class=\"code-quote\">\"FROM Node \"<\/span> +rn                <span class=\"code-quote\">\"CONNECT BY PRIOR id = parent_id \"<\/span> +rn                <span class=\"code-quote\">\"START WITH parent_id IS NULL \"<\/span>)rn        .addEntity(Node.class)rn        .setResultTransformer(<span class=\"code-keyword\">new<\/span> ResultTransformer() {rn            @Overridern            <span class=\"code-keyword\">public<\/span> <span class=\"code-object\">Object<\/span> transformTuple(<span class=\"code-object\">Object<\/span>[] tuple, <span class=\"code-object\">String<\/span>[] aliases) {rn                Node node = (Node) tuple[0];rn                <span class=\"code-keyword\">if<\/span>(node.parent != <span class=\"code-keyword\">null<\/span>) {rn                    node.parent.addChild(node);rn                }rn                return  node;rn            }rnrn            @Overridern            public  List transformList(List collection) {rn                <span class=\"code-keyword\">return<\/span> Collections.singletonList(collection.get(0));rn            }rn        })rn        .uniqueResult();rn});rnnnnThis requires some modifications in the hibernate-core because this cannot work if the children association is a @OneToMany association, as it will trigger an additional query upon being traversed. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 20\/Dec\/2015 08:03 AM                      I added a solution for this issue on  GitHub . nn Basically, we need to disable the collection fetching mechanism and override its mechanism like in the following result set transformer example: nn  n rnNode root = (Node) doInHibernate(session -&gt; {rn     return  sessionrn        .createSQLQuery(rn                 \"SELECT * \"  +rn                 \"FROM Node \"  +rn                 \"CONNECT BY PRIOR id = parent_id \"  +rn                 \"START WITH parent_id IS NULL \" )rn        .addEntity(Node.class)rn        .setResultTransformer( new  ResultTransformer() {rn            @Overridern             public   Object  transformTuple( Object [] tuple,  String [] aliases) {rn                Node node = (Node) tuple[0];rn                 if (node.parent !=  null ) {rn                    node.parent.addChild(node);rn                }rn                 return  node;rn            }rnrn            @Overridern             public  List transformList(List collection) {rn                 return  Collections.singletonList(collection.get(0));rn            }rn        })rn        .uniqueResult();rn});rn n  nn This requires some modifications in the hibernate-core because this cannot work if the children association is a @OneToMany association, as it will trigger an additional query upon being traversed.              n        n    n"}]}},{"OGM-945":{"info":{"issue_title":"Batch-fetch association elements if supported by dialect","issue_key":"OGM-945","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.CR1","issue_labels":"5.0.0.CR1","issue_description":"When accessing the elements of a *-to-many association, a getTuple() call for each element contained in the association will be issued. Instead a getTuples() call should be used if the dialect supports it in order to avoid the number of datastore roundtrips.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-945?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10388":{"info":{"issue_title":"UnsupportedOperationException at transaction rollback on WebSphere Liberty","issue_key":"HHH-10388","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"5.0.4","issue_component":"5.0.4","issue_labels":"5.0.4","issue_description":"An UnsupportedOperationException is thrown on WebSphere Liberty, if an entity is persisted with a value, that causes a constaint violation in database (for example, if a column cannot hold a too long value).  Pseudo example:    \/*  * create table APP_JOBS {  *    ID NUMBER(*,0) NOT NULL PRIMARY KEY,  *    JOB VARCHAR2(10 CHAR)  * }  * \/    appJobsEntity.setJob(\"IAmTooLongForColumn\" );    @TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)  saveMethod(appJobsEntity) {     em.save(appJobsEntity);  }     \/\/On save a exception is thrown:\r\n javax.ejb.EJBTransactionRolledbackException: nested exception is: javax.transaction.RollbackException\r\n  at com.ibm.ejs.container.BusinessExceptionMappingStrategy.mapCSIException(BusinessExceptionMappingStrategy.java:124)\r\n  at com.ibm.ejs.container.BusinessExceptionMappingStrategy.mapCSITransactionRolledBackException(BusinessExceptionMappingStrategy.java:584)\r\n  at com.ibm.ejs.container.EJSDeployedSupport.mapCSITransactionRolledBackException(EJSDeployedSupport.java:600)\r\n  at com.ibm.ejs.container.EJSContainer.postInvokeRolledbackException(EJSContainer.java:4382)\r\n  at com.ibm.ejs.container.EJSContainer.postInvoke(EJSContainer.java:4073)\r\n ....\r\n Caused by: java.lang.UnsupportedOperationException\r\n  at org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform$TransactionManagerAdapter.setRollbackOnly(WebSphereExtendedJtaPlatform.java:121)\r\n  at org.hibernate.resource.transaction.backend.jta.internal.JtaTransactionAdapterTransactionManagerImpl.markRollbackOnly(JtaTransactionAdapterTransactionManagerImpl.java:100)   Unlike the prior versions WebSphere Liberty 8.5.5.7 seems to provide access to the TransactionManager to support the rollback operation. \r\n Suggested improvement of Hibernate: Add a WebSphereLibertyJtaPlatform like the one below (working example; jndi lookup didnt worked in my environment):     import  javax.transaction.TransactionManager;  import  javax.transaction.UserTransaction;  import  org.hibernate.engine.transaction.jta.platform.internal.AbstractJtaPlatform;  \/\/Get rid of this  dependencies with reflection   import  com.ibm.tx.jta.TransactionManagerFactory;  import  com.ibm.tx.jta.UserTransactionFactory;    public  class WebSphereLibertyJtaPlatform extends  AbstractJtaPlatform {  \t@Override  \tprotected  TransactionManager locateTransactionManager() {  \t\treturn  TransactionManagerFactory.getTransactionManager();  \t}  \t@Override  \tprotected  UserTransaction locateUserTransaction() {  \t\treturn  UserTransactionFactory.getUserTransaction();  \t}  }","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10388?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1040":{"info":{"issue_title":"Field-level constraint performance impairment","issue_key":"HV-1040","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.1.3.Final","issue_component":"5.1.3.Final","issue_labels":"5.1.3.Final","issue_description":"Using Hibernate Validator to validate all Strings fields in an entity as we pull data from our Oracle database.  There is a significant slow down when performing field-level validation on a collection of entities with multiple field constraints.  While retrieving ~72,000 entities from the database, each with 8 constraints, it takes 47 seconds to perform validation (only 3 seconds to retrieve data from the database).\r\n Using only custom constraints and using only built-in constraints (@NotNull) show the same performance issue.\r\n Some debugging shows that 46.5 seconds is spent after calling Validator.validate() and before reaching isValid().  However, when setting the annotation at class-level, manually performing the required reflection and string validation on the entity inside isValid(), it only takes 0.5 seconds to complete validation for all 72,000 entities.  Hibernate should be able to naively handle this magnitude of field-level validations without resorting to manual validation at a class-level.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1040?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-74213","commnet_date":"2015-12-16T14:39:33-0800","commnet_user":"Hardy Ferentschik","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Hardy Ferentschikn added a comment  - 16\/Dec\/2015 14:39 PM    n        n        Can you provide some more context, in particular how your entities look like and how you validate them manually? Are the approaches comparable? Hibernate Validator might have to to more work doing validation as per Bean Validation compared to a hand-rolled specific solution.nnnHibernate should be able to naively handle this magnitude of field-level validations without resorting to manual validation at a class-level.nIt handles the validation, right? As far as I understand the result is correct. The intend of Bean Validation is not necessarily bulk validation as you are trying to attempt. I am all up for performance improvements, but we first have to a establish a baseline. n    n    n        n            Show  n            n                        n    n    n    n                nn       Hardy Ferentschikn added a comment  - 16\/Dec\/2015 14:39 PM                      Can you provide some more context, in particular how your entities look like and how you validate them manually? Are the approaches comparable? Hibernate Validator might have to to more work doing validation as per Bean Validation compared to a hand-rolled specific solution. nn n Hibernate should be able to naively handle this magnitude of field-level validations without resorting to manual validation at a class-level.  n It handles the validation, right? As far as I understand the result is correct. The intend of Bean Validation is not necessarily bulk validation as you are trying to attempt. I am all up for performance improvements, but we first have to a establish a baseline.              n        n    n"},{"commnet_id":"comment-74214","commnet_date":"2015-12-16T15:39:10-0800","commnet_user":"Hardy Ferentschik","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Hardy Ferentschikn added a comment  - 16\/Dec\/2015 15:39 PM    n        n        And another important question is of course how you call Validator. n    n    n        n            Show  n            n                        n    n    n    n                nn       Hardy Ferentschikn added a comment  - 16\/Dec\/2015 15:39 PM                      And another important question is of course how you call  Validator .              n        n    n"},{"commnet_id":"comment-74219","commnet_date":"2015-12-17T03:07:32-0800","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 17\/Dec\/2015 03:07 AM    n        n        nHowever, when setting the annotation at class-level, manually performing the required reflection and string validation on the entity inside isValid(), it only takes 0.5 seconds to complete validation for all 72,000 entities.nnThat one is interesting, why do you use reflection in your class-level constraint? I'd expect you could access the entity state via normal field\/getter accesses?nnFor sure it'd help to see your entity and constraint definitions and how you invoke validation. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 17\/Dec\/2015 03:07 AM                      n However, when setting the annotation at class-level, manually performing the required reflection and string validation on the entity inside isValid(), it only takes 0.5 seconds to complete validation for all 72,000 entities.  nn That one is interesting, why do you use reflection in your class-level constraint? I'd expect you could access the entity state via normal field\/getter accesses? nn For sure it'd help to see your entity and constraint definitions and how you invoke validation.              n        n    n"},{"commnet_id":"comment-74220","commnet_date":"2015-12-17T03:08:49-0800","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 17\/Dec\/2015 03:08 AM    n        n        On a related note, there is an interesting optimization going on in HCANN: https:\/\/github.com\/hibernate\/hibernate-commons-annotations\/pull\/9\/filesnnIt's about avoiding un-boxing primitives when accessing field values via reflection, HV should benefit from this as well. But as this report is about String fields, it should not make a difference for the specific case. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 17\/Dec\/2015 03:08 AM                      On a related note, there is an interesting optimization going on in HCANN:  https:\/\/github.com\/hibernate\/hibernate-commons-annotations\/pull\/9\/files  nn It's about avoiding un-boxing primitives when accessing field values via reflection, HV should benefit from this as well. But as this report is about String fields, it should not make a difference for the specific case.              n        n    n"},{"commnet_id":"comment-74221","commnet_date":"2015-12-17T03:14:16-0800","commnet_user":"Hardy Ferentschik","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Hardy Ferentschikn added a comment  - 17\/Dec\/2015 03:14 AM    n        n        nOn a related note, there is an interesting optimization going on in HCANN:nWe should open a dedicated issue for this. However, I would love to she JMH benchmark to see the actual effects as well  n    n    n        n            Show  n            n                        n    n    n    n                nn       Hardy Ferentschikn added a comment  - 17\/Dec\/2015 03:14 AM                      n On a related note, there is an interesting optimization going on in HCANN:  n We should open a dedicated issue for this. However, I would love to she JMH benchmark to see the actual effects as well                n        n    n"},{"commnet_id":"comment-74226","commnet_date":"2015-12-17T09:17:28-0800","commnet_user":"Andre Hernandez","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Andre Hernandezn added a comment  - 17\/Dec\/2015 09:17 AM     - edited  n        n        Nevermind the entities, JPA, and custom constraints. This issue can be seen using normal beans with built-in validators.\r\nnWorking on getting you a test case. You'll have to bear with me, as I have to set this up from scratch (including my solution) on a new system.nnThis is an example of how we are calling the validator:nnnrntprivate  TestBean testBeanBuiltIn;rntprivate  ValidatorFactory factory = Validation.buildDefaultValidatorFactory();rntrntprivate  Validator validator = factory.getValidator();rntrntprivate  static  final  int  MAX_ITERATIONS = 1000000;rnrn        ...rnrn        Set&lt;ConstraintViolation&lt;TestBean&gt;&gt; constraintViolations = null ;rntfor (int  i = 0; i &lt; MAX_ITERATIONS; i++)rnt{rnttrnttconstraintViolations = validateBean(testBeanBuiltIn);rn        }trn        ...rnrntprivate  &lt;T&gt; Set&lt;ConstraintViolation&lt;T&gt;&gt; validateBean(rntttT bean) {rnttrnttSet&lt;ConstraintViolation&lt;T&gt;&gt; constraintViolations = <span class=\"code-keyword\">null<\/span>;rnttrn               <span class=\"code-comment\">\/\/ Call validatorrn<\/span>ttconstraintViolations = validator.validate(bean);rnttrntt<span class=\"code-keyword\">return<\/span> constraintViolations;rnt}trnrnnnnThat one is interesting, why do you use reflection in your class-level constraint? I'd expect you could access the entity state via normal field\/getter accesses?nnShown in the code above, we have a method that can take any bean class, and we have over 500 different bean types that can be passed.\r\nnI've attached an example bean using built-in validators.nn TestBean.java   n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Andre Hernandezn added a comment  - 17\/Dec\/2015 09:17 AM     - edited                    Nevermind the entities, JPA, and custom constraints. This issue can be seen using normal beans with built-in validators. nWorking on getting you a test case. You'll have to bear with me, as I have to set this up from scratch (including my solution) on a new system. nn This is an example of how we are calling the validator: nn  n rnt private  TestBean testBeanBuiltIn;rnt private  ValidatorFactory factory = Validation.buildDefaultValidatorFactory();rntrnt private  Validator validator = factory.getValidator();rntrnt private   static   final   int  MAX_ITERATIONS = 1000000;rnrn        ...rnrn        Set&lt;ConstraintViolation&lt;TestBean&gt;&gt; constraintViolations =  null ;rnt for ( int  i = 0; i &lt; MAX_ITERATIONS; i++)rnt{rnttrnttconstraintViolations = validateBean(testBeanBuiltIn);rn        }trn        ...rnrnt private  &lt;T&gt; Set&lt;ConstraintViolation&lt;T&gt;&gt; validateBean(rntttT bean) {rnttrnttSet&lt;ConstraintViolation&lt;T&gt;&gt; constraintViolations =  null ;rnttrn                \/\/ Call validatorrn ttconstraintViolations = validator.validate(bean);rnttrntt return  constraintViolations;rnt}trnrn n  nn  That one is interesting, why do you use reflection in your class-level constraint? I'd expect you could access the entity state via normal field\/getter accesses?  nn Shown in the code above, we have a method that can take any bean class, and we have over 500 different bean types that can be passed. nI've attached an example bean using built-in validators. nn    TestBean.java                    n        n    n"},{"commnet_id":"comment-74228","commnet_date":"2015-12-17T13:41:09-0800","commnet_user":"Andre Hernandez","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Andre Hernandezn added a comment  - 17\/Dec\/2015 13:41 PM    n        n        I attached a test case. \r\nnI have yet to look at the HV source code.\r\nnThat being said, my solution is for my specific use case and might not be the solution to increase all field-level performance.nnAlthough the performance gain is not as drastic as seen when handling entities, there is still ~25% gain when handling regular beans.\r\nnIn the test case, I use ValidationService to handle class-level validation, and perform validation only on the required field-level annotations.nn BeanValidationSpeedTest.zip   n    n    n        n            Show  n            n                        n    n    n    n                nn       Andre Hernandezn added a comment  - 17\/Dec\/2015 13:41 PM                      I attached a test case.  nI have yet to look at the HV source code. nThat being said, my solution is for my specific use case and might not be the solution to increase all field-level performance. nn Although the performance gain is not as drastic as seen when handling entities, there is still ~25% gain when handling regular beans. nIn the test case, I use ValidationService to handle class-level validation, and perform validation only on the required field-level annotations. nn    BeanValidationSpeedTest.zip                    n        n    n"},{"commnet_id":"comment-74235","commnet_date":"2015-12-18T01:05:34-0800","commnet_user":"Hardy Ferentschik","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Hardy Ferentschikn added a comment  - 18\/Dec\/2015 01:05 AM    n        n        Looking at your code, it is indeed very specific. You really only do what is necessary for your particular use case. In Hibernate Validator you need to deal with a generic approach and you will need to do metadata creation and caching,  ConstraintValidator resolution, message interpolation, call to traversable resolver, etc. I don't really see how this is directly comparable.nnnI have yet to look at the HV source code.nSure, any additional pair of eyes are welcome. Really to make any improvements as part of this issue, we would need to pin point some concrete problems in the Validator code. There are probably many things which can be improved.nnnAlthough the performance gain is not as drastic as seen when handling entities, there is still ~25% gain when handling regular beans.nI am a bit confused here on what you are saying? When you say entities, do you mean JPA entities opposed to plain Pojos? If so, there will always be a difference. In the context of JPA, you need to call as per spec the TraversableResolver as well. That adds another overhead. So what are you really saying here? That using your custom solution is ~25% faster for plain Pojos than using Hibernate Validator? If so, that would not be so bad imo. n    n    n        n            Show  n            n                        n    n    n    n                nn       Hardy Ferentschikn added a comment  - 18\/Dec\/2015 01:05 AM                      Looking at your code, it is indeed very specific. You really only do what is necessary for your particular use case. In Hibernate Validator you need to deal with a generic approach and you will need to do metadata creation and caching,   ConstraintValidator  resolution, message interpolation, call to traversable resolver, etc. I don't really see how this is directly comparable. nn n I have yet to look at the HV source code.  n Sure, any additional pair of eyes are welcome. Really to make any improvements as part of this issue, we would need to pin point some concrete problems in the Validator code. There are probably many things which can be improved. nn n Although the performance gain is not as drastic as seen when handling entities, there is still ~25% gain when handling regular beans.  n I am a bit confused here on what you are saying? When you say entities, do you mean JPA entities opposed to plain Pojos? If so, there will always be a difference. In the context of JPA, you need to call as per spec the  TraversableResolver  as well. That adds another overhead. So what are you really saying here? That using your custom solution is ~25% faster for plain Pojos than using Hibernate Validator? If so, that would not be so bad imo.              n        n    n"}]}},{"HHH-10382":{"info":{"issue_title":"GetterFieldImpl creates unnecessary objects","issue_key":"HHH-10382","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.0","issue_labels":"5.2.0","issue_description":"Current implementation of the Reflection API does not use the same caching as used for auto-boxing. This has been fixed in JDK 9 (see https:\/\/bugs.openjdk.java.net\/browse\/JDK-5043030 for details) but not in JDK 8 or 7. Therefore, when GetterFieldImpl reads for example a primitive field of the type \"boolean\", it creates every time a new object of type \"Boolean\". We can workaround this problem by using getter-methods of the Field class, which return primitive values, and wrapping the result using the valueOf-methods of the wrapper classes.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10382?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-77352","commnet_date":"2016-04-28T01:18:48-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 28\/Apr\/2016 01:18 AM    n        n        PR applied on master. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 28\/Apr\/2016 01:18 AM                      PR applied on master.              n        n    n"}]}},{"HHH-10379":{"info":{"issue_title":"Remove dependency to rhq-pluginAnnotations","issue_key":"HHH-10379","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.6,                                            5.1.0","issue_labels":"5.0.6,                                            5.1.0","issue_description":"The dependency to org.rhq.helpers:rhq-pluginAnnotations:3.0.4 is a left over from needs of older Infinispan versions.  It should be safe to be removed now, especially as it causes trouble such as                                                          HHH-10377                                                              Awaiting Response","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10379?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-943":{"info":{"issue_title":"Let WildFly download required modules itself","issue_key":"OGM-943","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"There is a way to let a module.xml point to Maven GAV coordinates instead of a provided JAR. The module environment will then fetch that JAR automatically. This would allow us to provide a much smaller module ZIP.  Question: Should we fully rely on this or provide the full ZIP as an alternative, too? I am not familiar with that new mechanism, so I don't know whether it requires a local Maven install (which may not be the case in prod environments) or works with Aether or whatever programmatic resolver, not requiring a local Maven install.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-943?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-76058","commnet_date":"2016-03-16T16:07:34-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 16\/Mar\/2016 16:07 PM    n        n        In many places app servers wouldn't be allowed to freely download stuff so I don't think we should stop distributing the \"heavy edition\" of the modules.nnWe could provide the lean version too, but I suspect it would be just one-more-option to document in the already very verbose documentation about our modules. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 16\/Mar\/2016 16:07 PM                      In many places app servers wouldn't be allowed to freely download stuff so I don't think we should stop distributing the \"heavy edition\" of the modules. nn We could provide the lean version too, but I suspect it would be just one-more-option to document in the already very verbose documentation about our modules.              n        n    n"}]}},{"HV-1039":{"info":{"issue_title":"Improve OSGi integration addressing class loading issues","issue_key":"HV-1039","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.2.2.Final","issue_component":"5.2.2.Final","issue_labels":"5.2.2.Final","issue_description":"Please see https:\/\/issues.apache.org\/jira\/browse\/CXF-6706.  I, and others, have encountered some problems.  SPI and class loading  As with some other JSRs, javax.validation suffers from classloader problems when used in OSGi. At very least, one must manipulate the thread context classloader. I have never succeeded in making the SPI work; all the examples I have seem end up using a customized provider that references HibernateValidator. If there is a way to get this to work, many would benefit from documentation of it.  However, the problem gets worse. Hibernate goes and calls the API for javax.el _at the time the application calls validate. So, the application has to come up with a classloader that 'sees' com.sun.el (or whatever) when it calls validate, not just when it builds a validator. This is really a pain.  Karaf feature  The Karaf feature provided uses the &lt;wrap&gt; mechanism. This is not desirable, and, in fact, causes Karaf 4 to hang in some cases. It's not needed; see https:\/\/github.com\/apache\/cxf\/blob\/3.1.x-fixes\/osgi\/karaf\/features\/src\/main\/resources\/features.xml#L443 for a working feature that does not use wrap.  However, also note that this depends on the ServiceMix bundle that provides a solution to the SPI classloading problem","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1039?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-74253","commnet_date":"2015-12-20T08:21:25-0800","commnet_user":"Benson Margulies","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Benson Marguliesn added a comment  - 20\/Dec\/2015 08:21 AM    n        n        When my failing test fails, the TCCL is:nnResourceDelegatingBundleClassLoader{bundle=org.apache.cxf.cxf-rt-transports-http <span class=\"error\">&#91;109&#93;<\/span>,parent=BundleClassLoader{bundle=org.ops4j.pax.web.pax-web-jetty <span class=\"error\">&#91;225&#93;<\/span>,parent=null}}nnAnd the reason constraint failing is an @DecimalMin. I think I see how to make a failing small test case. n    n    n        n            Show  n            n                        n    n    n    n                nn       Benson Marguliesn added a comment  - 20\/Dec\/2015 08:21 AM                      When my failing test fails, the TCCL is: nn ResourceDelegatingBundleClassLoader{bundle=org.apache.cxf.cxf-rt-transports-http  &#91;109&#93; ,parent=BundleClassLoader{bundle=org.ops4j.pax.web.pax-web-jetty  &#91;225&#93; ,parent=null}} nn And the reason constraint failing is an @DecimalMin. I think I see how to make a failing small test case.              n        n    n"},{"commnet_id":"comment-74254","commnet_date":"2015-12-20T12:21:15-0800","commnet_user":"Benson Margulies","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Benson Marguliesn added a comment  - 20\/Dec\/2015 12:21 PM    n        n        I've added a commit that demonstrates the problem. I will now attempt to fix it. n    n    n        n            Show  n            n                        n    n    n    n                nn       Benson Marguliesn added a comment  - 20\/Dec\/2015 12:21 PM                      I've added a commit that demonstrates the problem. I will now attempt to fix it.              n        n    n"},{"commnet_id":"comment-74255","commnet_date":"2015-12-20T13:23:00-0800","commnet_user":"Benson Margulies","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Benson Marguliesn added a comment  - 20\/Dec\/2015 13:23 PM    n        n        This is hard to fix, and I'd appreciate some guidance.nnExpressionFactory.newInstance() lacks any way to pass in a class loader. It always uses the TCCL. Setting the TCCL is a privileged action. nnSo, can the code HV set the context classloader to the external classloader before creating an expression factory? Or do we need to add an ExpressionFactory to the configuration, and leave it to the caller to fiddle with the TCCL to obtain it? n    n    n        n            Show  n            n                        n    n    n    n                nn       Benson Marguliesn added a comment  - 20\/Dec\/2015 13:23 PM                      This is hard to fix, and I'd appreciate some guidance. nn ExpressionFactory.newInstance() lacks any way to pass in a class loader. It always uses the TCCL. Setting the TCCL is a privileged action.  nn So, can the code HV set the context classloader to the external classloader before creating an expression factory? Or do we need to add an ExpressionFactory to the configuration, and leave it to the caller to fiddle with the TCCL to obtain it?              n        n    n"},{"commnet_id":"comment-74330","commnet_date":"2015-12-21T02:44:39-0800","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 21\/Dec\/2015 02:44 AM    n        n        Benson Margulies, why is it that you set the TCCL in MockService to begin with? If I remove this, your test passes.nnBut it also works with the TCCL when adding \"com.sun.el\" as import package to the \"mockwhiteboard\" bundle (whose bundle loader you pass in, I suppose by accident, and you meant to pass in the loader of \"mockservice\" which already has that import?).nnSo AFAICS don't tinker with the TCCL and all is good  We should adapt OsgiIntegrationTest though so it uses @DecimalMin and the test covers the EL usage that way, too. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 21\/Dec\/2015 02:44 AM                       Benson Margulies , why is it that you set the TCCL in  MockService  to begin with? If I remove this, your test passes. nn But it also works with the TCCL when adding \"com.sun.el\" as import package to the \"mockwhiteboard\" bundle (whose bundle loader you pass in, I suppose by accident, and you meant to pass in the loader of \"mockservice\" which already has that import?). nn So AFAICS don't tinker with the TCCL and all is good   We should adapt  OsgiIntegrationTest  though so it uses  @DecimalMin  and the test covers the EL usage that way, too.              n        n    n"},{"commnet_id":"comment-74334","commnet_date":"2015-12-21T04:32:45-0800","commnet_user":"Benson Margulies","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Benson Marguliesn added a comment  - 21\/Dec\/2015 04:32 AM     - edited  n        n        @Gunnar, the code you are looking at simulated the real world situation. Pax-web runs the whiteboard. it does not import com.sun.el. I can't make it import com.sun.el. It sets the TCCL to its class loader. I can't change that.  It calls my service code, and my service code calls HV. That's why the test case sets the TCCL and has the classpath it has.nnThe idea here was to make a small test case, so I didn't make you one that has an actual servlet with actual pax-web or CXF. I could ...nnIn any case, think of it from first principles. The ELTermResolver calls ExpressionFactory. ExpressionFactory uses the TCCL to look for the META-INF file or com.sun.el.Ex.... That means that the TCCL has to contain that class or the META-INF file at the time of the call, which can be as late as 'validate'. nnThis leads to my thought of allowing an ExpressionFactory to be pushed into the configuration class.n n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Benson Marguliesn added a comment  - 21\/Dec\/2015 04:32 AM     - edited                    @Gunnar, the code you are looking at simulated the real world situation. Pax-web runs the whiteboard. it does not import com.sun.el. I can't make it import com.sun.el. It sets the TCCL to its class loader. I can't change that.  It calls my service code, and my service code calls HV. That's why the test case sets the TCCL and has the classpath it has. nn The idea here was to make a  small  test case, so I didn't make you one that has an actual servlet with actual pax-web or CXF. I could ... nn In any case, think of it from first principles. The ELTermResolver calls ExpressionFactory. ExpressionFactory uses the TCCL to look for the META-INF file or com.sun.el.Ex.... That means that the TCCL has to contain that class or the META-INF file at the time of the call, which can be as late as 'validate'.  nn This leads to my thought of allowing an ExpressionFactory to be pushed into the configuration class. n             n        n    n"}]}},{"HHH-10376":{"info":{"issue_title":"Add columns in ORDER BY clause to select list if not already present","issue_key":"HHH-10376","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"4.3.11 ,                                            5.2.5","issue_component":"4.3.11 ,                                            5.2.5","issue_labels":"4.3.11","issue_description":"Hi,  When you use \"order\" + \"projection\" that create a SQL error :     Criteria criteria = session.createCriteria(A.class, \"a\" );  criteria.createAlias(\"a.b\" , \"b\" , JoinType.LEFT_OUTER_JOIN);  criteria.addOrder(Order.asc(\"b.code\" ));  criteria.setProjection(Projections.distinct(Projections.property(\"b\" )));    criteria.list();      Caused by: org.h2.jdbc.JdbcSQLException: Order by expression \"B1_.CODE\" must be in the result list in this case; SQL statement:\r\n select distinct this_.b_id as y0_ from A this_ left outer join B b1_ on this_.b_id=b1_.id order by b1_.code asc &#91;90068-190&#93;   Note that works with mysql.   Edit : \r\n tests are attached, \r\n you can also find them in github :  https:\/\/github.com\/alexisgayte\/hibernate-test-case-HHH-10376\r\n https:\/\/github.com\/alexisgayte\/hibernate-test-case-HHH-10376-orm-5  Regards,\r\n Alexis GAYTE","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10376?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-74367","commnet_date":"2015-12-22T13:23:18-0800","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 22\/Dec\/2015 13:23 PM    n        n        It looks like this will fail in some cases on SQL Server. &#91;1&#93; nnThe obvious workaround is to add the column in the ORDER BY clause as a projection to Projections#distinct.nnI don't consider this a bug in Hibernate. An improvement would be for Hibernate to add any columns in the ORDER BY clause to the select list if they are not there already.nn&#91;1&#93;  https:\/\/msdn.microsoft.com\/en-us\/library\/ms188385.aspxnn n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 22\/Dec\/2015 13:23 PM                      It looks like this will fail in some cases on SQL Server.  &#91;1&#93;  nn The obvious workaround is to add the column in the ORDER BY clause as a projection to  Projections#distinct . nn I don't consider this a bug in Hibernate. An improvement would be for Hibernate to add any columns in the ORDER BY clause to the select list if they are not there already. nn  &#91;1&#93;   https:\/\/msdn.microsoft.com\/en-us\/library\/ms188385.aspx  nn             n        n    n"},{"commnet_id":"comment-86512","commnet_date":"2016-11-28T06:30:00-0800","commnet_user":"gayte","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       gayten added a comment  - 28\/Nov\/2016 06:30 AM    n        n        Hi Gail,\r\nnI agree that would not be a bug if hibernate will react in the same behaviour for all type of database. \r\nnBut right now, the same query works for mysql but doesn't work with H2, microsoft.nnPS : I ve updated the test to match with the hibernate template.nnAlexis n    n    n        n            Show  n            n                        n    n    n    n                nn       gayten added a comment  - 28\/Nov\/2016 06:30 AM                      Hi Gail, nI agree that would not be a bug if hibernate will react in the same behaviour for all type of database.  nBut right now, the same query works for mysql but doesn't work with H2, microsoft. nn PS : I ve updated the test to match with the hibernate template. nn Alexis              n        n    n"},{"commnet_id":"comment-86514","commnet_date":"2016-11-28T08:06:04-0800","commnet_user":"Chris Cranford","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Chris Cranfordn added a comment  - 28\/Nov\/2016 08:06 AM    n        n        I believe that works only on versions of MySQL prior to 5.7.nnStarting with MySQL 5.7 and later, it now behaves just like other databases in that when you apply a distinct as a part of your select-clause, the fields contained in your order-by-clause must also be included in the select-clause column list.nnThat said, I concur with Gail that adding the columns specified as part of the order-by-clause in the select-clause is an enhancement rather than a bug.  n n    n    n        n            Show  n            n                        n    n    n    n                nn       Chris Cranfordn added a comment  - 28\/Nov\/2016 08:06 AM                      I believe that works only on versions of MySQL prior to 5.7. nn Starting with MySQL 5.7 and later, it now behaves just like other databases in that when you apply a  distinct  as a part of your  select-clause , the fields contained in your  order-by-clause  must also be included in the  select-clause  column list. nn That said, I concur with Gail that adding the columns specified as part of the  order-by-clause  in the  select-clause  is an enhancement rather than a bug.   n             n        n    n"},{"commnet_id":"comment-86600","commnet_date":"2016-11-29T02:52:31-0800","commnet_user":"gayte","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       gayten added a comment  - 29\/Nov\/2016 02:52 AM     - edited  n        n        Ok thanks,nnThat makes sense so, as mysql doesn't use sql standard.\r\nnhowever, that means hibernate doesn't allow to order any request with a distinct projection,\r\nnThat looks a quite big feature issue.n n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       gayten added a comment  - 29\/Nov\/2016 02:52 AM     - edited                    Ok thanks, nn That makes sense so, as mysql doesn't use sql standard. nhowever, that means hibernate doesn't allow to order any request with a distinct projection, nThat looks a quite big feature issue. n             n        n    n"},{"commnet_id":"comment-86602","commnet_date":"2016-11-29T04:51:20-0800","commnet_user":"Chris Cranford","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Chris Cranfordn added a comment  - 29\/Nov\/2016 04:51 AM    n        n        gayte that's not true, Hibernate does support ordering a distinct projection result set.  It just requires that the user place the appropriate columns manually in the select-clause that which you also place in your order-by-clause, just like Gail suggested . n    n    n        n            Show  n            n                        n    n    n    n                nn       Chris Cranfordn added a comment  - 29\/Nov\/2016 04:51 AM                       gayte  that's not true, Hibernate does support ordering a distinct projection result set.  It just requires that the user place the appropriate columns manually in the  select-clause  that which you also place in your  order-by-clause , just like Gail suggested  .              n        n    n"}]}},{"OGM-940":{"info":{"issue_title":"Avoid client side sorting for multi-get","issue_key":"OGM-940","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"See the discussion in PR #585:  As the order of results returned from MongoDB\/Neo4j is not guaranteed to be the same as the order of the requested keys, sub-optimal client-side processing of the result set is needed. This could be avoided if there was a way to obtain the results in the order of requested keys.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-940?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-74137","commnet_date":"2015-12-14T07:47:36-0800","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 14\/Dec\/2015 07:47 AM    n        n        Ok, as discussed with Emmanuel Bernard, there will be no duplicates in the key array passed to getTuples(). This means we can abort the inner loop for assigning result rows to requested keys as soon as the first (and only) matching key has been found. That'll improve perf of this a bit. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 14\/Dec\/2015 07:47 AM                      Ok, as discussed with  Emmanuel Bernard , there will be no duplicates in the key array passed to  getTuples() . This means we can abort the inner loop for assigning result rows to requested keys as soon as the first (and only) matching key has been found. That'll improve perf of this a bit.              n        n    n"},{"commnet_id":"comment-74138","commnet_date":"2015-12-14T07:49:12-0800","commnet_user":"Davide D&#39;Alto","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Davide D&#39;Alton added a comment  - 14\/Dec\/2015 07:49 AM    n        n        Ok, I'll update the pull request n    n    n        n            Show  n            n                        n    n    n    n                nn       Davide D&#39;Alton added a comment  - 14\/Dec\/2015 07:49 AM                      Ok, I'll update the pull request              n        n    n"},{"commnet_id":"comment-74139","commnet_date":"2015-12-14T07:54:06-0800","commnet_user":"Davide D&#39;Alto","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Davide D&#39;Alton added a comment  - 14\/Dec\/2015 07:54 AM     - edited  n        n        Oops, didn't notice it was the other JIRA n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Davide D&#39;Alton added a comment  - 14\/Dec\/2015 07:54 AM     - edited                    Oops, didn't notice it was the other JIRA              n        n    n"},{"commnet_id":"comment-74140","commnet_date":"2015-12-14T07:56:10-0800","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 14\/Dec\/2015 07:56 AM    n        n        The 907 one has been merged already, but yes, if you sent another one for that improvement that'd be cool. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 14\/Dec\/2015 07:56 AM                      The 907 one has been merged already, but yes, if you sent another one for that improvement that'd be cool.              n        n    n"},{"commnet_id":"comment-74181","commnet_date":"2015-12-16T02:13:53-0800","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 16\/Dec\/2015 02:13 AM    n        n        As a reminder, see the discussions in PRs #604 and #585; We could likely speed up things by consuming the result cursor into a map and then assigning values to requested keys by map look-ups. For larger number of keys - with the threshold to be defined - this should be faster than the nested looping. The idea is to use one or the other approach depending on the number of requested keys.nnThis all is assuming we cannot find a way to get back the results in the order we expect. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 16\/Dec\/2015 02:13 AM                      As a reminder, see the discussions in PRs  #604  and  #585 ; We could likely speed up things by consuming the result cursor into a map and then assigning values to requested keys by map look-ups. For larger number of keys - with the threshold to be defined - this should be faster than the nested looping. The idea is to use one or the other approach depending on the number of requested keys. nn This all is assuming we cannot find a way to get back the results in the order we expect.              n        n    n"}]}},{"HV-1038":{"info":{"issue_title":"Update to ClassMate 1.3.0","issue_key":"HV-1038","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Duplicate","issue_fix_version":"None","issue_component":"5.3.0.CR1","issue_labels":"5.3.0.CR1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1038?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-74951","commnet_date":"2016-01-31T23:56:56-0800","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 31\/Jan\/2016 23:56 PM    n        n        Hey cemalettin koc, out of interest, are you having any issues with 1.1? Are you having specific problems which would be solved by shading? n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 31\/Jan\/2016 23:56 PM                      Hey  cemalettin koc , out of interest, are you having any issues with 1.1? Are you having specific problems which would be solved by shading?              n        n    n"},{"commnet_id":"comment-74952","commnet_date":"2016-02-01T00:12:07-0800","commnet_user":"Hardy Ferentschik","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Hardy Ferentschikn added a comment  - 01\/Feb\/2016 00:12 AM    n        n        Note, we used shading before and decided to remove it for multiple reasons. See also n    n                n        n            n            HV-534n        n                                                    Closed n             n. n    n    n        n            Show  n            n                        n    n    n    n                nn       Hardy Ferentschikn added a comment  - 01\/Feb\/2016 00:12 AM                      Note, we used shading before and decided to remove it for multiple reasons. See also n     n                 n         n             n            HV-534n         n                                                     Closed n             n.              n        n    n"},{"commnet_id":"comment-74955","commnet_date":"2016-02-01T03:56:45-0800","commnet_user":"cemalettin koc","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       cemalettin kocn added a comment  - 01\/Feb\/2016 03:56 AM    n        n        I do not have any issue currently. The only problem I am dealing with is dependency convergence.  n    n    n        n            Show  n            n                        n    n    n    n                nn       cemalettin kocn added a comment  - 01\/Feb\/2016 03:56 AM                      I do not have any issue currently. The only problem I am dealing with is dependency convergence.               n        n    n"},{"commnet_id":"comment-74969","commnet_date":"2016-02-02T00:48:55-0800","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 02\/Feb\/2016 00:48 AM    n        n        Ok, let's wait then till 1.3 is in WildFly. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 02\/Feb\/2016 00:48 AM                      Ok, let's wait then till 1.3 is in WildFly.              n        n    n"},{"commnet_id":"comment-83366","commnet_date":"2016-08-31T07:04:54-0700","commnet_user":"Guillaume Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Guillaume Smetn added a comment  - 31\/Aug\/2016 07:04 AM    n        n        Classmate has been updated to 1.3.1 as part of n    n                n        n            n            HV-1086n        n                                                    Closed n             n. n    n    n        n            Show  n            n                        n    n    n    n                nn       Guillaume Smetn added a comment  - 31\/Aug\/2016 07:04 AM                      Classmate has been updated to 1.3.1 as part of n     n                 n         n             n            HV-1086n         n                                                     Closed n             n.              n        n    n"}]}},{"OGM-935":{"info":{"issue_title":"Upgrade to Hibernate ORM 5.0.5.Final","issue_key":"OGM-935","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.Beta1","issue_labels":"5.0.0.Beta1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-935?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2072":{"info":{"issue_title":"Add checkstyle rule for import order","issue_key":"HSEARCH-2072","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Won&#39;t Fix","issue_fix_version":"None","issue_component":"None","issue_labels":"build","issue_description":"Static imports are some times added after regular imports and sometimes before them.  Eclipse (and IDEA I think), by default, will add the static imports before the regular ones.  It would be nice to have a rule in checkstyle that make sure that the static import are consistently added. Possibly before the regular ones as it will avoid reordering when the imports are re-organized.   See CheckStyle ImportOrder rule: http:\/\/checkstyle.sourceforge.net\/config_imports.html#ImportOrder","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2072?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10370":{"info":{"issue_title":"Add support for @Immutable in the bytecode enhancer","issue_key":"HHH-10370","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.0.5","issue_component":"5.0.5","issue_labels":"5.0.5","issue_description":"Having support for immutable fields \/ entities in the bytecode enhancer allows for optimizations like skipping dirty tracking.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10370?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10366":{"info":{"issue_title":"Improve performance and reduce CPU load when fetching reference cached objects","issue_key":"HHH-10366","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.5","issue_component":"5.0.5","issue_labels":"5.0.5","issue_description":"When reference cached entities are fetched from cache, both a postLoad and afterInitialize calls are made which add up a lot of CPU time.  Several methods on DefaultLoadEventListener can be refactored to more easily be inlined, the LOG.isTracingEnabled call can be cached.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10366?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2066":{"info":{"issue_title":"Support the Spatial Queries over Elasticsearch","issue_key":"HSEARCH-2066","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Duplicate","issue_fix_version":"None","issue_component":"None","issue_labels":"elasticsearch","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2066?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2065":{"info":{"issue_title":"Support the Faceting feature over Elasticsearch","issue_key":"HSEARCH-2065","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Alpha2","issue_labels":"5.6.0.Alpha2","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2065?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2064":{"info":{"issue_title":"Implement filters in Elasticsearch backend","issue_key":"HSEARCH-2064","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta1","issue_labels":"5.6.0.Beta1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2064?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-77141","commnet_date":"2016-04-21T07:44:50-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 21\/Apr\/2016 07:44 AM    n        n        Filter is gone in Lucene 6 and are already deprecated in version 5. It should be possible to simply convert all our internal usage of Filter to boolean clauses first using org.apache.lucene.search.BooleanClause.Occur.FILTER , then we could simply have this converted to the Elasticsearch query. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 21\/Apr\/2016 07:44 AM                       Filter  is gone in Lucene 6 and are already deprecated in version 5. It should be possible to simply convert all our internal usage of  Filter  to boolean clauses first using  org.apache.lucene.search.BooleanClause.Occur.FILTER  , then we could simply have this converted to the Elasticsearch query.              n        n    n"},{"commnet_id":"comment-77158","commnet_date":"2016-04-24T14:37:01-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Sanne Grinoveron added a comment  - 24\/Apr\/2016 14:37 PM     - edited  n        n        No need to implement this one in ElasticsearchHSQueryImpl :nnpublic  HSQuery filter(Filter filter) nn, let's expedite its deprecation instead. nnhttps:\/\/github.com\/hibernate\/hibernate-search\/pull\/1079 n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Sanne Grinoveron added a comment  - 24\/Apr\/2016 14:37 PM     - edited                    No need to implement this one in  ElasticsearchHSQueryImpl  : n  n  public  HSQuery filter(Filter filter)  n  n , let's expedite its deprecation instead.  nn  https:\/\/github.com\/hibernate\/hibernate-search\/pull\/1079               n        n    n"},{"commnet_id":"comment-77234","commnet_date":"2016-04-26T06:17:23-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 26\/Apr\/2016 06:17 AM    n        n        I changed the title accordingly. We raise an UnsupportedOperationException already, just let's make clear that one should not expect that it ever will be actually implemented. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 26\/Apr\/2016 06:17 AM                      I changed the title accordingly. We raise an  UnsupportedOperationException  already, just let's make clear that one should not expect that it ever will be actually implemented.              n        n    n"},{"commnet_id":"comment-77241","commnet_date":"2016-04-26T11:47:48-0700","commnet_user":"Guillaume Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Guillaume Smetn added a comment  - 26\/Apr\/2016 11:47 AM    n        n        FWIW, I have an implementation in a branch. Worked on it a month ago or so.nnGoing to refresh it and see why I didn't create a PR. n    n    n        n            Show  n            n                        n    n    n    n                nn       Guillaume Smetn added a comment  - 26\/Apr\/2016 11:47 AM                      FWIW, I have an implementation in a branch. Worked on it a month ago or so. nn Going to refresh it and see why I didn't create a PR.              n        n    n"}]}},{"HV-1037":{"info":{"issue_title":"General code quality improvements","issue_key":"HV-1037","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.3.0.Alpha1","issue_labels":"5.3.0.Alpha1","issue_description":"https:\/\/github.com\/hibernate\/hibernate-validator\/pull\/449\r\n squid:S1132 - \u201cStrings literals should be placed on the left side when checking for equality\u201d  https:\/\/github.com\/hibernate\/hibernate-validator\/pull\/450\r\n squid:S1699 - \u201cConstructors should only call non-overridable methods\u201d","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1037?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10363":{"info":{"issue_title":"The Cascade class makes unnecessary calls to the Reflection API.","issue_key":"HHH-10363","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.6","issue_labels":"5.0.6","issue_description":"There are two places in Cascade class where unnecessary calls to the Reflection API are made:  1. In the method Cascade#cascade(CascadingAction, CascadePoint, EventSource, EntityPersister, Object, Object):\r\n When the CascadingAction PERSIST_ON_FLUSH is used, then for some CascadeStyles of a property the method CascadingAction#noCascade may be called. This method requires now the current value of a property. But the property value is only used when the property type is an EntityType. Therefore we can reduce the number of calls to the Reflection API if we change the signature of the method CascadingAction#noCascade to take the property type instead of the property value and the property value can be looked up in the CascadingAction#noCascade if it is really needed.  2. In the method Cascade#cascadeComponent(CascadingAction, CascadePoint, EventSource, int, Object, Object, CompositeType, Object):\r\n Here is a similar problem: not all CascadeStyles of a component property require cascading. There are situations where all CascadeStyles of all component properties do not require cascading. Therefore we can delay getting the property values of a component until they are needed and reduce so the number of calls to the Reflection API.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10363?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-74207","commnet_date":"2015-12-16T13:04:23-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 16\/Dec\/2015 13:04 PM    n        n        Applied Andrej's PR upstream n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 16\/Dec\/2015 13:04 PM                      Applied Andrej's PR upstream              n        n    n"},{"commnet_id":"comment-74830","commnet_date":"2016-01-24T23:48:39-0800","commnet_user":"Frank Prumbaum","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Frank Prumbaumn added a comment  - 24\/Jan\/2016 23:48 PM    n        n        After upgrading from 5.0.5.Final we see many errors like this nnnjava.lang.NullPointerException \r\nn     at org.hibernate.collection.internal.AbstractPersistentCollection$5.hasNext(AbstractPersistentCollection.java:764) \r\nn     at org.hibernate.engine.internal.Cascade.cascadeCollectionElements(Cascade.java:430) \r\nn     at org.hibernate.engine.internal.Cascade.cascadeCollection(Cascade.java:363) \r\nn     at org.hibernate.engine.internal.Cascade.cascadeAssociation(Cascade.java:326) \r\nn     at org.hibernate.engine.internal.Cascade.cascadeProperty(Cascade.java:162) \r\nn     at org.hibernate.engine.internal.Cascade.cascade(Cascade.java:111) nnThis may be due to some incorrect data mapping on our side but  there should not be any NPE? nnSorry for capturing this issue, but after seeing through the changes for 5.0.6 and 5.0.7 this issue seemed to be the propable cause. n    n    n        n            Show  n            n                        n    n    n    n                nn       Frank Prumbaumn added a comment  - 24\/Jan\/2016 23:48 PM                      After upgrading from 5.0.5.Final we see many errors like this  nn n java.lang.NullPointerException  n     at org.hibernate.collection.internal.AbstractPersistentCollection$5.hasNext(AbstractPersistentCollection.java:764)  n     at org.hibernate.engine.internal.Cascade.cascadeCollectionElements(Cascade.java:430)  n     at org.hibernate.engine.internal.Cascade.cascadeCollection(Cascade.java:363)  n     at org.hibernate.engine.internal.Cascade.cascadeAssociation(Cascade.java:326)  n     at org.hibernate.engine.internal.Cascade.cascadeProperty(Cascade.java:162)  n     at org.hibernate.engine.internal.Cascade.cascade(Cascade.java:111)   nn This may be due to some incorrect data mapping on our side but  there should not be any NPE?  nn Sorry for capturing this issue, but after seeing through the changes for 5.0.6 and 5.0.7 this issue seemed to be the propable cause.              n        n    n"},{"commnet_id":"comment-74845","commnet_date":"2016-01-25T07:33:55-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 25\/Jan\/2016 07:33 AM    n        n        Going to need a test case that reproduces this.  If you can create a testcase that reproduces it, please open a new bug report and attach the testcase there.  Thanks. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 25\/Jan\/2016 07:33 AM                      Going to need a test case that reproduces this.  If you can create a testcase that reproduces it, please open a new bug report and attach the testcase there.  Thanks.              n        n    n"},{"commnet_id":"comment-74885","commnet_date":"2016-01-27T01:11:19-0800","commnet_user":"Frank Prumbaum","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Frank Prumbaumn added a comment  - 27\/Jan\/2016 01:11 AM    n        n        While trying to do just that we found the cause to be an @Async-Spring-Annotation while not providing the necessary transactional context for doing a entityManager.merge(entity). \r\nnPlease excuse the noise. n    n    n        n            Show  n            n                        n    n    n    n                nn       Frank Prumbaumn added a comment  - 27\/Jan\/2016 01:11 AM                      While trying to do just that we found the cause to be an @Async-Spring-Annotation while not providing the necessary transactional context for doing a entityManager.merge(entity).  nPlease excuse the noise.              n        n    n"}]}},{"HHH-10358":{"info":{"issue_title":"EntityLoader is contended when calling AbstractLoadPlanBasedLoader.wrapResultSetIfEnabled","issue_key":"HHH-10358","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.5","issue_component":"5.0.5","issue_labels":"5.0.5","issue_description":"AbstractLoadPlanBasedLoader.wrapResultSetIfEnabled(..) is a syncronized method and always called. There is an if-check in that method to determine if it needs to be wrapped or not. That should be called before the method.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10358?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10356":{"info":{"issue_title":"Make runtime bytecode enhancement configurable","issue_key":"HHH-10356","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.5","issue_component":"5.0.5","issue_labels":"5.0.5","issue_description":"The maven and gradle plugins for build time bytecode enhancement are configurable so that the user can select what features to enable.  The runtime enhancer it's not configurable. If enabled it depends on the DefaultEnhancementContext to determine the features.  It should be discussed what is the best way to expose that configuration.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10356?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-74211","commnet_date":"2015-12-16T13:52:51-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 16\/Dec\/2015 13:52 PM    n        n        Applied upstream n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 16\/Dec\/2015 13:52 PM                      Applied upstream              n        n    n"}]}},{"HSEARCH-2058":{"info":{"issue_title":"Hibernate 5 Migration Issue : isActive Method Not Found in Transaction Interface","issue_key":"HSEARCH-2058","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Blocker","issue_affects_version":"Rejected","issue_fix_version":"None","issue_component":"None","issue_labels":"backend","issue_description":"I have migrating Hibernate 3 to Hibernate 5. As isActive() method is available in Hibernate 3 and we are using session.getTransaction().isActive(). As as alternative I am using \r\n TransactionStatus.ACTIVE.equals(session.getTransaction().getStatus())  Please let me know if this one is right approach to check Is this transaction still active or not.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2058?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-73918","commnet_date":"2015-12-04T02:41:22-0800","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 04\/Dec\/2015 02:41 AM    n        n        Hi,\r\nnyou opened an issue on Hibernate Search but it looks like you just want to ask a question regarding Hibernate ORM. If so, please use the forums or IRC channels as described here:\r\nn http:\/\/hibernate.org\/community\/nnFor help on migrations, you should be able to find some guidance in the migration guide:\r\nn http:\/\/hibernate.org\/orm\/documentation\/5.0\/nnI'll close this issue as it's not related to Hibernate Search, please let me know if I have misunderstood. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 04\/Dec\/2015 02:41 AM                      Hi, nyou opened an issue on  Hibernate Search  but it looks like you just want to ask a question regarding  Hibernate ORM . If so, please use the forums or IRC channels as described here: n  http:\/\/hibernate.org\/community\/  nn For help on migrations, you should be able to find some guidance in the migration guide: n  http:\/\/hibernate.org\/orm\/documentation\/5.0\/  nn I'll close this issue as it's not related to  Hibernate Search , please let me know if I have misunderstood.              n        n    n"}]}},{"HHH-10355":{"info":{"issue_title":"Make &quot;Scrub known-sensitive settings from EMF.getProperties()&quot; configurable","issue_key":"HHH-10355","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"4.2.1 ,                                            4.2.21","issue_component":"4.2.1 ,                                            4.2.21","issue_labels":"4.2.1","issue_description":"Since                                                          HHH-8122                                                              Closed                , the values of javax.persistence.jdbc.password and hibernate.connection.password are \"masked\" with ****.  This breaks components re-using that information for data initialization etc.\r\n In my case it is a JUnit rule which triggers Liquibase. In that test scenario, the password is not sensitive at all!  Please introduce a new EMF property to control whether or not to \"scrub\" settings (default value can be true).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10355?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10354":{"info":{"issue_title":"Rename &#39;field access&#39; bytecode enhancement","issue_key":"HHH-10354","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"5.0.5","issue_component":"5.0.5","issue_labels":"5.0.5","issue_description":"Rename feature added in                                                          HHH-9938                                                              Closed                 from 'field access' to something less prone to confusion.  Following the previous convention, I suggest renaming it to ''extended enhancement\"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10354?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-73907","commnet_date":"2015-12-03T09:14:09-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 03\/Dec\/2015 09:14 AM    n        n        And unilaterally suggested it not be used! nnI agree on the naming.  Its why I changed that to \"extended\" in the older code.nnWe also need to be sure to discuss the ramifications, that access outside classes should always go through getter\/setter. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 03\/Dec\/2015 09:14 AM                      And unilaterally suggested it not be used!   nn I agree on the naming.  Its why I changed that to \"extended\" in the older code. nn We also need to be sure to discuss the ramifications, that access outside classes should always go through getter\/setter.              n        n    n"},{"commnet_id":"comment-73914","commnet_date":"2015-12-03T21:16:07-0800","commnet_user":"Luis Barreiro","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Luis Barreiron added a comment  - 03\/Dec\/2015 21:16 PM    n        n        PR created. I added a warn message to the maven and gradle plugins.nnI also like the fact that is not documented. It's a feature that is there for whoever really needs, and looks for it. n    n    n        n            Show  n            n                        n    n    n    n                nn       Luis Barreiron added a comment  - 03\/Dec\/2015 21:16 PM                      PR created. I added a warn message to the maven and gradle plugins. nn I also like the fact that is not documented. It's a feature that is there for whoever really needs, and looks for it.              n        n    n"},{"commnet_id":"comment-74205","commnet_date":"2015-12-16T12:12:14-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 16\/Dec\/2015 12:12 PM    n        n        Applied Luis' PR upstream.  Luis Barreiro I ran into conflicts porting that to 5.0, so double check my resolutions on 5.0 please. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 16\/Dec\/2015 12:12 PM                      Applied Luis' PR upstream.   Luis Barreiro  I ran into conflicts porting that to 5.0, so double check my resolutions on 5.0 please.              n        n    n"}]}},{"HHH-10350":{"info":{"issue_title":"st_setsrid missing in Postgis dialect","issue_key":"HHH-10350","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Trivial","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"hibernate-spatial","issue_description":"The st_setsrid is missing in Postgis dialect. Is there a reason for this or would a dialect extension PR be appreciated? I haven't migrated to 5x yet, so I would like to patch it for 4x as well, would that be possible? (It affects both versions).  Quick fix:  \tExtend the Postgis dialect with your own version, and add\r\n this.registerFunction(\"setsrid\", new StandardSQLFunction(\"st_setsrid\", GeometryType.INSTANCE));    (For 5x the syntax seems slightly different)","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10350?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10349":{"info":{"issue_title":"PersistenceUtilHelper should call getDeclaredField\/Method inside of privileged block","issue_key":"HHH-10349","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.5","issue_component":"5.0.5","issue_labels":"5.0.5","issue_description":"PersistenceUtilHelper calls clazz.getDeclaredField\/Method without doPrivileged(). Because of this, deployments in EE needs to have RuntimePermission(\"accessDeclaredMembers\") when using Hibernate Validator and running with Security Manager enabled.  It would be nice if getDeclaredField\/Method calling can be done inside of doPrivileged() block.  I am not sure if the component assigned to this Jira is correct. PersistenceUtilHelper is located at Hibernate EntityManager, but I hit this issue through Hibernate Validator used by a deployment in WildFly server, see the following stacktrace:  javax.validation.ValidationException: HV000041: Call to TraversableResolver.isReachable() threw an exception.          at org.wildfly.security.manager.WildFlySecurityManager.checkPermission(WildFlySecurityManager.java:273)          at org.wildfly.security.manager.WildFlySecurityManager.checkPermission(WildFlySecurityManager.java:175)          at java.lang.Class.checkMemberAccess(Class.java:2348)          at java.lang.Class.getDeclaredField(Class.java:2067)          at org.hibernate.jpa.internal.util.PersistenceUtilHelper$ClassMetadataCache.buildAttributeAccess(PersistenceUtilHelper.java:348)          at org.hibernate.jpa.internal.util.PersistenceUtilHelper$ClassMetadataCache.getAttributeAccess(PersistenceUtilHelper.java:339)          at org.hibernate.jpa.internal.util.PersistenceUtilHelper.isLoadedWithReference(PersistenceUtilHelper.java:202)          at org.hibernate.jpa.HibernatePersistenceProvider$1.isLoadedWithReference(HibernatePersistenceProvider.java:175)          at javax.persistence.Persistence$1.isLoaded(Persistence.java:116)          at org.hibernate.validator.internal.engine.resolver.JPATraversableResolver.isReachable(JPATraversableResolver.java:46)          at org.hibernate.validator.internal.engine.resolver.DefaultTraversableResolver.isReachable(DefaultTraversableResolver.java:128)          at org.hibernate.validator.internal.engine.resolver.CachingTraversableResolverForSingleValidation.isReachable(CachingTraversableResolverForSingleValidation.java:36)          at org.hibernate.validator.internal.engine.ValidatorImpl.isReachable(ValidatorImpl.java:1522)          at org.hibernate.validator.internal.engine.ValidatorImpl.isValidationRequired(ValidatorImpl.java:1507)          at org.hibernate.validator.internal.engine.ValidatorImpl.validateMetaConstraint(ValidatorImpl.java:584)          at org.hibernate.validator.internal.engine.ValidatorImpl.validateConstraint(ValidatorImpl.java:555)          at org.hibernate.validator.internal.engine.ValidatorImpl.validateConstraintsForDefaultGroup(ValidatorImpl.java:490)          at org.hibernate.validator.internal.engine.ValidatorImpl.validateConstraintsForCurrentGroup(ValidatorImpl.java:454)          at org.hibernate.validator.internal.engine.ValidatorImpl.validateInContext(ValidatorImpl.java:406)          at org.hibernate.validator.internal.engine.ValidatorImpl.validate(ValidatorImpl.java:204)          at org.jboss.as.test.integration.beanvalidation.hibernate.validator.MessageInterpolationValidationTestCase.testCustomMessageInterpolation(MessageInterpolationValidationTestCase.java:56)","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10349?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-74174","commnet_date":"2015-12-15T22:33:32-0800","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 15\/Dec\/2015 22:33 PM    n        n        Fixed in master and 5.0 branches. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 15\/Dec\/2015 22:33 PM                      Fixed in master and 5.0 branches.              n        n    n"}]}},{"OGM-934":{"info":{"issue_title":"Dialects need to know the fetch type for associations","issue_key":"OGM-934","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"core","issue_description":"Some dialects, like Neo4j, might use this information to get all the assocations needed when loading a node","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-934?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2057":{"info":{"issue_title":"Avoid fetching associated entity during mass indexing if possible","issue_key":"HSEARCH-2057","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6","issue_labels":"6","issue_description":"When mass indexing an entity containing an @IndexedEmbedded *-to-one association which only includes the associated id into the index, fetching the associated entity from the database is not needed. So we can optimize that particular case.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2057?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-73770","commnet_date":"2015-11-27T00:55:48-0800","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 27\/Nov\/2015 00:55 AM    n        n        More specifically, the unproxying in o.h.s.engine.spi.DocumentBuilderIndexedEntity.buildDocumentFields() should happen in a smarter way, i.e. it should not be done if all we need is the id and we can get it from the proxy. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 27\/Nov\/2015 00:55 AM                      More specifically, the unproxying in  o.h.s.engine.spi.DocumentBuilderIndexedEntity.buildDocumentFields()  should happen in a smarter way, i.e. it should not be done if all we need is the id and we can get it from the proxy.              n        n    n"}]}},{"HHH-10338":{"info":{"issue_title":"Use an explicit empty object array to prevent the varargs method allocating one","issue_key":"HHH-10338","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"5.0.4","issue_component":"5.0.4","issue_labels":"5.0.4","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10338?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2055":{"info":{"issue_title":"FieldBridge 2.0: generalize FieldBridge contract to deal with other backends","issue_key":"HSEARCH-2055","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Critical","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6","issue_labels":"6","issue_description":"Creating this issue to capture ideas\/discussions around \"FB 2.0\".   \tFor index-embedded collections we need to keep the tree structure so we can properly feed ES \t...    &#8212;  Identified use cases for bridges so far:   \tSimple bridge that map a single value (the entity itself or a property) to a single field. It may be a builtin bridge (for instance for primitive types) or a custom one. Declaring the field name and setting field properties (index, docvalues, analysis, ...) directly when applying the bridge (in the mapping) may come handy. \tMore complex bridge that maps a single value to multiple, pre-defined fields. Those fields should be declared somewhere, along with their properties (index, docvalues, analysis). Declaring the fields in the mapping would not be practical, since users would need to know about the exact content of the bridge implementation. The best place to declare the fields is probably inside the bridge implementation. \tMore complex bridge that maps a single value to multiple, runtime-generated fields (\"dynamic\" fields). For instance the field names could be extracted from a string in the entity, and thus could not be declared before indexing. Those fields should be declared somewhere, along with their properties (index, docvalues, analysis), and the only place we can do that is inside the bridge implementation.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2055?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-85807","commnet_date":"2016-11-09T09:16:44-0800","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 09\/Nov\/2016 09:16 AM    n        n        Copying a snippet from n    n                n        n            n            HSEARCH-2460n        n                                                    Open n             n. I imagined something like this for complex field bridges:nnnrnpublic  class MyBridge implements  HibernateSearchComplexBridge {rn <span class=\"code-keyword\">private<\/span> FieldDefinition myField1;rn <span class=\"code-keyword\">private<\/span> FieldDefinition myField2;rn <span class=\"code-keyword\">private<\/span> FieldDefinition myField3;rn <span class=\"code-keyword\">public<\/span> void register(FieldRegistry registry, <span class=\"code-object\">String<\/span> defaultRelativeName) {rnu2002u2002 myField1 = registry.addInteger(<span class=\"code-quote\">\"name1\"<\/span>, Types.SOME_TYPE). ...u2002u2002.build();rnu2002u2002 myField2 = registry.start(<span class=\"code-quote\">\"name2\"<\/span>, Types.SOME_TYPE). ...u2002u2002.build();rnu2002u2002 myField3 = registry.start(<span class=\"code-quote\">\"name3\"<\/span>, Types.SOME_TYPE). ...u2002u2002.build();rn }rn public  void set(org.hibernate.search.Document document, Object  value) {rn   document.set(myField1, \/* someValue *\/);rn   document.set(myField2, \/* someValue *\/);rn   document.set(myField3, \/* someValue *\/);rn }rn}rnn n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 09\/Nov\/2016 09:16 AM                      Copying a snippet from n     n                 n         n             n            HSEARCH-2460n         n                                                     Open n             n. I imagined something like this for complex field bridges: nn  n rn public  class MyBridge  implements  HibernateSearchComplexBridge {rn  private  FieldDefinition myField1;rn  private  FieldDefinition myField2;rn  private  FieldDefinition myField3;rn  public  void register(FieldRegistry registry,  String  defaultRelativeName) {rnu2002u2002 myField1 = registry.addInteger( \"name1\" , Types.SOME_TYPE). ...u2002u2002.build();rnu2002u2002 myField2 = registry.start( \"name2\" , Types.SOME_TYPE). ...u2002u2002.build();rnu2002u2002 myField3 = registry.start( \"name3\" , Types.SOME_TYPE). ...u2002u2002.build();rn }rn  public  void set(org.hibernate.search.Document document,  Object  value) {rn   document.set(myField1, \/* someValue *\/);rn   document.set(myField2, \/* someValue *\/);rn   document.set(myField3, \/* someValue *\/);rn }rn}rn n               n        n    n"},{"commnet_id":"comment-86021","commnet_date":"2016-11-15T01:10:30-0800","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 15\/Nov\/2016 01:10 AM    n        n        Also, very interesting idea from Emmanuel Bernard: use custom annotations to apply those custom field bridges, not standard annotations: n    n                n        n            n            HSEARCH-175n        n                                                    Open n             n\r\nnThis would in particular remove the constraint we imposed on users to only use String parameters. n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 15\/Nov\/2016 01:10 AM                      Also, very interesting idea from  Emmanuel Bernard : use custom annotations to apply those custom field bridges, not standard annotations: n     n                 n         n             n            HSEARCH-175n         n                                                     Open n             n nThis would in particular remove the constraint we imposed on users to only use String parameters.              n        n    n"},{"commnet_id":"comment-86030","commnet_date":"2016-11-15T06:44:07-0800","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 15\/Nov\/2016 06:44 AM    n        n        I added a list of use cases to the ticket description. n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 15\/Nov\/2016 06:44 AM                      I added a list of use cases to the ticket description.              n        n    n"}]}},{"HHH-10332":{"info":{"issue_title":"Schema validation: ambiguous table name","issue_key":"HHH-10332","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"5.0.1 ,                                            5.0.4 ,                                            5.1.0","issue_component":"5.0.1 ,                                            5.0.4 ,                                            5.1.0","issue_labels":"5.0.1","issue_description":"When performing the schema validation (when property \"hibernate.hbm2ddl.auto\" is worth \"validate\"), when reporting that a table is missing, only the table name is appended to the SchemaManagementException thrown. The fully qualified name would be much more useful.  Method to modify: org.hibernate.tool.schema.internal.SchemaValidatorImpl.validateTable","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10332?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-77363","commnet_date":"2016-04-28T07:43:39-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 28\/Apr\/2016 07:43 AM    n        n        Applied PR on master branch. Thanks for contributing. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 28\/Apr\/2016 07:43 AM                      Applied PR on master branch. Thanks for contributing.              n        n    n"}]}},{"OGM-933":{"info":{"issue_title":"Implement PostLoad annotation support","issue_key":"OGM-933","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.Beta1","issue_labels":"5.0.0.Beta1","issue_description":"Implement support in OGM for the PostLoad annotation which is currently supported in ORM. The annotation allows for entity methods to be automatically called following an instance's initialization from the underlying datasource and thus provides the ability to carry out post-processing on the object.  Some discussion on this feature:\r\n https:\/\/forum.hibernate.org\/viewtopic.php?f=31&amp;t=1042455","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-933?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-73744","commnet_date":"2015-11-24T00:27:33-0800","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 24\/Nov\/2015 00:27 AM    n        n        Hi David Williams, thanks for opening this issue and your interest in implementing it!nnPlease check out this page for some pointers wrt. getting the code, building it etc. For your change to be integrated we'll also need a signed contributor license agreement, it's a simple web app at http:\/\/cla.jboss.org\/.nnRegarding the implementation itself I suppose it'd be a good start to check how it's done in ORM and try to find the correlating part in OGM. Loaders\/persisters have evolved on the ORM side since the original copying into OGM, so it may take a bit to find the right place.nnIf you run into any road blocks, just reach out, we usally hang out on IRC@FreeNode or shoot a mail to hibernate-dev and we will be glad to help. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 24\/Nov\/2015 00:27 AM                      Hi  David Williams , thanks for opening this issue and your interest in implementing it! nn Please check out  this page  for some pointers wrt. getting the code, building it etc. For your change to be integrated we'll also need a signed contributor license agreement, it's a simple web app at  http:\/\/cla.jboss.org\/ . nn Regarding the implementation itself I suppose it'd be a good start to check how it's done in ORM and try to find the correlating part in OGM. Loaders\/persisters have evolved on the ORM side since the original copying into OGM, so it may take a bit to find the right place. nn If you run into any road blocks, just reach out, we usally hang out on IRC@FreeNode or shoot a mail to hibernate-dev and we will be glad to help.              n        n    n"},{"commnet_id":"comment-73753","commnet_date":"2015-11-24T08:09:29-0800","commnet_user":"David Williams","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       David Williamsn added a comment  - 24\/Nov\/2015 08:09 AM    n        n        Thanks Gunnar; I'll reach out if I run into any problems. n    n    n        n            Show  n            n                        n    n    n    n                nn       David Williamsn added a comment  - 24\/Nov\/2015 08:09 AM                      Thanks Gunnar; I'll reach out if I run into any problems.              n        n    n"},{"commnet_id":"comment-73849","commnet_date":"2015-11-30T13:05:25-0800","commnet_user":"David Williams","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       David Williamsn added a comment  - 30\/Nov\/2015 13:05 PM    n        n        I've created a PR with the changes and a unit test (https:\/\/github.com\/hibernate\/hibernate-ogm\/pull\/598). Also submitted signed contributor license agreement. n    n    n        n            Show  n            n                        n    n    n    n                nn       David Williamsn added a comment  - 30\/Nov\/2015 13:05 PM                      I've created a PR with the changes and a unit test ( https:\/\/github.com\/hibernate\/hibernate-ogm\/pull\/598 ). Also submitted signed contributor license agreement.              n        n    n"}]}},{"HSEARCH-2052":{"info":{"issue_title":"Avoid allocating an empty array on hot vararg invocation on ReflectionHelper","issue_key":"HSEARCH-2052","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"5.5.0.Final","issue_component":"5.5.0.Final","issue_labels":"5.5.0.Final","issue_description":"See also https:\/\/hibernate.atlassian.net\/browse\/HCANN-74\r\n this change in Search avoids half of the problem; the full fix requires to upgrade to an Hibernate Commons Annotations version which includes the above fix.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2052?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10319":{"info":{"issue_title":"HikariCP + Javamelody","issue_key":"HHH-10319","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"4.2.19","issue_component":"4.2.19","issue_labels":"4.2.19","issue_description":"Our application can embed\/use link javamelody library, This enables us to gather some information about production context.\r\n About link jdbc configuration, everything works as expected when   \tno pool framework is used (or default one) \tc3p0 pool is used\r\n But using link HikariCP, neither sql requests \/nor jdbc calls are logged.    Having a look at the HikariConnectionProvider and HikariConfigurationUtil classes (we are using 4.2 branches), we successfully make it work.  Changes we applyied   \tmethod HibernateConfigurationUtil#loadConfiguration(Map props) \t   \/\/ Do not move this  line !       HikariConfig hikariConfig = new  HikariConfig(hikariProps);        \/\/ if  javamelody is used       if (props.containsKey(DRIVER_ONLY)) {        hikariConfig.addDataSourceProperty(\"driver\" , props.get(DRIVER_ONLY));      }      return  hikariConfig;       where DRIVER_ONLY == hibernate.connection.driver  I didn't look further why this property can not be set as the previous ones, but it only works tihs way right now.  Let me know if you need any information.\r\n Thanks,\r\n Nicolas","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10319?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2050":{"info":{"issue_title":"Avoid allocation cost of FacetConfig during creation of Document","issue_key":"HSEARCH-2050","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.5.1.Final,                                            5.6.0.Alpha1","issue_labels":"5.5.1.Final,                                            5.6.0.Alpha1","issue_description":"When we're building the Document to be indexed, the FacetConfig initialization and it's org.apache.lucene.facet.FacetsConfig.build(Document) require quite some memory.\r\n We should investigate how to avoid creating a new FacetConfig instance for each document, avoid it unless faceting is used, and see if it can be used more efficiently when faceting is being used.  It looks like the FacetConfig implementation was designed to be threadsafe and configured with index specific options, so it seems the developer's intention was for it to be created only once per index.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2050?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10318":{"info":{"issue_title":"Envers: Missing support of CriteriaDelete and CriteriaUpdate","issue_key":"HHH-10318","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.0.4","issue_component":"5.0.4","issue_labels":"5.0.4","issue_description":"I am using Hibernate Envers in my project along with a lot of CriteriaDelete and CriteriaUpdate queries.  The problem now is, that with CriteriaDelete and CriteriaUpdate the auditing does not work properly! That makes using an auditing tool worthless.  Example:    @Audited  public  class A {    \/\/...     @Basic    private  String  myString;  }    public  class AManager {    \/\/ ...     @Transactional    public  void deleteByMyString(String  myString) {      CriteriaBuilder cb = getEntityManager().getCriteriaBuilder();      CriteriaDelete&lt;A&gt; query = cb.createCriteriaDelete(A.class);      Root&lt;A&gt; root = query.from(A.class);      getEntityManager().createQuery(query.where(cb.equal(root.get(\"myString\" ), myString))).executeUpdate();    }  }     After executing aManager.deleteByMyString(\"xyz\") which deletes at least 1 row, no A_AUD entry with revtype=2 is created.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10318?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-75503","commnet_date":"2016-02-27T17:30:55-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 27\/Feb\/2016 17:30 PM    n        n        Seriously, stop arguing.  Its not a bug.  Period.  nnNow either we can move on from there, or you can continue to argue and I'll just reject the issue.  Up to you. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 27\/Feb\/2016 17:30 PM                      Seriously, stop arguing.  Its not a bug.  Period.   nn Now either we can move on from there, or you can continue to argue and I'll just reject the issue.  Up to you.              n        n    n"},{"commnet_id":"comment-75504","commnet_date":"2016-02-27T17:43:10-0800","commnet_user":"Marcel","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Marceln added a comment  - 27\/Feb\/2016 17:43 PM    n        n        That is up to you, I am using my own solution now, so do as you wish. But keep in mind, that I just tried to make Envers better, not to offend you in any way. Maybe someone else should have a look onto this. Just my opinion. This was my last comment to this. Period. n    n    n        n            Show  n            n                        n    n    n    n                nn       Marceln added a comment  - 27\/Feb\/2016 17:43 PM                      That is up to you, I am using my own solution now, so do as you wish. But keep in mind, that I just tried to make Envers better, not to offend you in any way. Maybe someone else should have a look onto this. Just my opinion. This was my last comment to this. Period.              n        n    n"},{"commnet_id":"comment-75505","commnet_date":"2016-02-28T04:06:56-0800","commnet_user":"Martin Braun","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Martin Braunn added a comment  - 28\/Feb\/2016 04:06 AM    n        n        Note: I am no Hibernate ORM developer.nnI don't think you will need this feature on a lot of entities, so you could just add triggers on the database level that does the auditing for you. I agree with Steve that this can not be considered a bug in any way.nnIn fact I wouldn't trust a solution that did this kind of auditing in Java code. n    n    n        n            Show  n            n                        n    n    n    n                nn       Martin Braunn added a comment  - 28\/Feb\/2016 04:06 AM                      Note: I am no Hibernate ORM developer. nn I don't think you will need this feature on a lot of entities, so you could just add triggers on the database level that does the auditing for you. I agree with Steve that this can not be considered a bug in any way. nn In fact I wouldn't trust a solution that did this kind of auditing in Java code.              n        n    n"},{"commnet_id":"comment-78260","commnet_date":"2016-05-21T16:47:15-0700","commnet_user":"Chris Cranford","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Chris Cranfordn added a comment  - 21\/May\/2016 16:47 PM    n        n        The fundamental issue with bulk operations (regardless of source) is there is no knowledge of prior row state before the bulk statement is executed unlike all other operations and how Envers interacts with Hibernate's Session &amp; Event subsystems. nnAs you indicated in an earlier comment, such a solution would involve Hibernate\/Envers fetching state for each eligible row prior to executing the bulk operation.  It isn't as simple as selecting the primary keys based on the supplied predicate clauses as Envers stores audit history in different ways depending on user chosen global settings, audit strategy, and operation being performed.  Furthermore, I'd be concerned that any solution like this would be equally or at least comparatively as slow as the code you were concerned about above, particularly when the volume of rows in question is significant.nnLong-term, could support be added to abstract this away from users, absolutely.  nnBut just because something can be done a specific way doesn't necessarily mean that is the right and most efficient, appropriate way.  It's like trying to argue that one can use a stateful Hibernate session to bulk insert data.  It's doable, but is that the right tool for large volumes of data?  This is why Steve was implying database constructs, such as triggers or even a stored procedure, may be a better route from a sheer performance perspective. n    n    n        n            Show  n            n                        n    n    n    n                nn       Chris Cranfordn added a comment  - 21\/May\/2016 16:47 PM                      The fundamental issue with bulk operations (regardless of source) is there is no knowledge of prior row state before the bulk statement is executed unlike all other operations and how Envers interacts with Hibernate's Session &amp; Event subsystems.  nn As you indicated in an earlier comment, such a solution would involve Hibernate\/Envers fetching state for each eligible row prior to executing the bulk operation.  It isn't as simple as selecting the primary keys based on the supplied predicate clauses as Envers stores audit history in different ways depending on user chosen global settings, audit strategy, and operation being performed.  Furthermore, I'd be concerned that any solution like this would be equally or at least comparatively as slow as the code you were concerned about above, particularly when the volume of rows in question is significant. nn Long-term, could support be added to abstract this away from users, absolutely.   nn But just because something can be done a specific way doesn't necessarily mean that is the right and most efficient, appropriate way.  It's like trying to argue that one can use a stateful Hibernate session to bulk insert data.  It's doable, but is that the right tool for large volumes of data?  This is why Steve was implying database constructs, such as triggers or even a stored procedure, may be a better route from a sheer performance perspective.              n        n    n"},{"commnet_id":"comment-78263","commnet_date":"2016-05-22T02:03:22-0700","commnet_user":"Marcel","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Marceln added a comment  - 22\/May\/2016 02:03 AM    n        n        Well, it may be slower, but better slower, than no auditing. Maybe one could introduce a parameter to enable\/disable that behavior.nnBut nevertheless, I think this issue can be solved with this little pseudo code:nnrnOn CriteriaDelete: delete from TABLE where CONDITIONSrnOne could do  (before the delete executes): insert into TABLE_AUDIT select AUDIT_COLOMS from TABLE where CONDITIONSrnrnFor CriteriaUpdate: update TABLE set COLUMNS=VALUES where CONDITIONSrnOne could do  (before executing the update): rnif  one of COLOMS is audited {rn    insert into TABLE_AUDIT select AUDIT_COLOMS from TABLE where CONDITIONSrn}rnnnnThat is the way I am doing it now, so it is possible. And it is not that slow. But of course, Envers is a bit more complex, so this pseudo code may not work for every use case. n    n    n        n            Show  n            n                        n    n    n    n                nn       Marceln added a comment  - 22\/May\/2016 02:03 AM                      Well, it may be slower, but better slower, than no auditing. Maybe one could introduce a parameter to enable\/disable that behavior. nn But nevertheless, I think this issue can be solved with this little pseudo code: n  n rnOn CriteriaDelete: delete from TABLE where CONDITIONSrnOne could  do  (before the delete executes): insert into TABLE_AUDIT select AUDIT_COLOMS from TABLE where CONDITIONSrnrnFor CriteriaUpdate: update TABLE set COLUMNS=VALUES where CONDITIONSrnOne could  do  (before executing the update): rn if  one of COLOMS is audited {rn    insert into TABLE_AUDIT select AUDIT_COLOMS from TABLE where CONDITIONSrn}rn n  nn That is the way I am doing it now, so it is possible. And it is not that slow. But of course, Envers is a bit more complex, so this pseudo code may not work for every use case.              n        n    n"}]}},{"HV-1033":{"info":{"issue_title":"Provide OSGi-compatible validation provider resolver","issue_key":"HV-1033","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Out of Date","issue_fix_version":"None","issue_component":"6.0-next","issue_labels":"6.0-next","issue_description":"Currently a custom validation provider resolver (like this) is required for using HV in OSGi (e.g. see this description in the Red Hat knowledge base). It's simple, but we should provide one for the sake of easier usage.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1033?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-73731","commnet_date":"2015-11-23T02:09:58-0800","commnet_user":"Hardy Ferentschik","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Hardy Ferentschikn added a comment  - 23\/Nov\/2015 02:09 AM    n        n        +1 n    n    n        n            Show  n            n                        n    n    n    n                nn       Hardy Ferentschikn added a comment  - 23\/Nov\/2015 02:09 AM                      +1              n        n    n"},{"commnet_id":"comment-86710","commnet_date":"2016-11-30T08:03:04-0800","commnet_user":"Guillaume Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Guillaume Smetn added a comment  - 30\/Nov\/2016 08:03 AM    n        n        Not required anymore thanks to: https:\/\/hibernate.atlassian.net\/browse\/BVAL-486 . n    n    n        n            Show  n            n                        n    n    n    n                nn       Guillaume Smetn added a comment  - 30\/Nov\/2016 08:03 AM                      Not required anymore thanks to:  https:\/\/hibernate.atlassian.net\/browse\/BVAL-486  .              n        n    n"}]}},{"HSEARCH-2049":{"info":{"issue_title":"Make @DocumentId not needed if @EmbeddedId is given","issue_key":"HSEARCH-2049","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Duplicate","issue_fix_version":"None","issue_component":"None","issue_labels":"engine","issue_description":"If JPA's @Id annotation is given, one can omit the @DocumentId annotation. I suppose the same should be doable for @EmbeddedId.  From the forum: https:\/\/forum.hibernate.org\/viewtopic.php?f=9&amp;t=1042468","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2049?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-73764","commnet_date":"2015-11-25T07:08:27-0800","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 25\/Nov\/2015 07:08 AM    n        n        Just seeing this has been reported before. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 25\/Nov\/2015 07:08 AM                      Just seeing this has been reported before.              n        n    n"}]}},{"HHH-10317":{"info":{"issue_title":"Allow to bind custom types that implement the Collection interface through JPA APIs","issue_key":"HHH-10317","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.4","issue_component":"5.0.4","issue_labels":"5.0.4","issue_description":"Right now, when a value that is an instance of java.util.Collection is passed as parameter value, it will be added as parameter list as can be seen here: https:\/\/github.com\/hibernate\/hibernate-orm\/blob\/master\/hibernate-entitymanager\/src\/main\/java\/org\/hibernate\/jpa\/internal\/QueryImpl.java#L237\r\n When having a custom user type that implements java.util.Collection this will obviously not work as expected. The parameter will be expanded and binding the values will not use the custom user type.\r\n Since the parameter metadata is already known, it shouldn't be that hard to check if a parameter should be bound as collection or as a single parameter.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10317?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-73757","commnet_date":"2015-11-24T12:50:34-0800","commnet_user":"Christian Beikov","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Christian Beikovn added a comment  - 24\/Nov\/2015 12:50 PM    n        n        Since the parameter can be passed as argument in a function, I guess this is not really possible.\r\nnAnyway, my use case was binding an array type that I mapped. My current workaround is to bind the collection as string and cast it to the array.\r\nnThe hibernate query API offers a setParameter method that also takes the org.hibernate.type.Type but I can't really use that one.nnI would expect a parameter only to be expanded, when used with an IN predicate, but that wouldn't help in my case either unfortunately. It would be nice if there was a wrapper type into which I could wrap my actual value into to get the semantics of a TypedValue. n    n    n        n            Show  n            n                        n    n    n    n                nn       Christian Beikovn added a comment  - 24\/Nov\/2015 12:50 PM                      Since the parameter can be passed as argument in a function, I guess this is not really possible. nAnyway, my use case was binding an array type that I mapped. My current workaround is to bind the collection as string and cast it to the array. nThe hibernate query API offers a  setParameter  method that also takes the  org.hibernate.type.Type  but I can't really use that one. nn I would expect a parameter only to be expanded, when used with an  IN  predicate, but that wouldn't help in my case either unfortunately. It would be nice if there was a wrapper type into which I could wrap my actual value into to get the semantics of a  TypedValue .              n        n    n"},{"commnet_id":"comment-73917","commnet_date":"2015-12-04T01:39:47-0800","commnet_user":"Christian Beikov","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Christian Beikovn added a comment  - 04\/Dec\/2015 01:39 AM    n        n        I attached a testcase showing what I would like to achieve. By the way, please also take a look at the FunctionIntegrator. I tried various different methods to integrate my custom function with the session factory but only a reflection hack worked.. n    n    n        n            Show  n            n                        n    n    n    n                nn       Christian Beikovn added a comment  - 04\/Dec\/2015 01:39 AM                      I attached a testcase showing what I would like to achieve. By the way, please also take a look at the FunctionIntegrator. I tried various different methods to integrate my custom function with the session factory but only a reflection hack worked..              n        n    n"},{"commnet_id":"comment-74195","commnet_date":"2015-12-16T09:48:45-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 16\/Dec\/2015 09:48 AM    n        n        Sorry, going to have to push this to 5.0.7.  The holidays, these short dev cycles and my other work have made it hard to get to some of these. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 16\/Dec\/2015 09:48 AM                      Sorry, going to have to push this to 5.0.7.  The holidays, these short dev cycles and my other work have made it hard to get to some of these.              n        n    n"},{"commnet_id":"comment-74669","commnet_date":"2016-01-12T15:39:49-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 12\/Jan\/2016 15:39 PM    n        n        I ended up not liking using an SPI contract for this.  So I created a new specific contract org.hibernate.jpa.TypedParameterValue n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 12\/Jan\/2016 15:39 PM                      I ended up not liking using an SPI contract for this.  So I created a new specific contract  org.hibernate.jpa.TypedParameterValue               n        n    n"}]}},{"OGM-932":{"info":{"issue_title":"Add support for @Lob List&lt;byte[]&gt;","issue_key":"OGM-932","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"core","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-932?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-931":{"info":{"issue_title":"Allow to persist an entity with association to non-managed entity","issue_key":"OGM-931","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.Beta1","issue_labels":"5.0.0.Beta1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-931?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10315":{"info":{"issue_title":"Add caching support for Caffeine","issue_key":"HHH-10315","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Out of Date","issue_fix_version":"None","issue_component":"None","issue_labels":"hibernate-core","issue_description":"Caffeine is a Java 8 rewrite of Guava's cache to provide significantly higher performance and a near optimal hit rate. Previously I co-authored Guava's Cache and ConcurrentLinkedHashMap (used by Cassandra, etc).  Caffeine's policy takes into account both the recency and frequency in O(1) time, retaining the popularity history by using a compact sketch. The concurrent throughput scales linearly (tested with 32-core) at 33% of an unbounded Java 8 `ConcurrentHashMap`. The implementation passes Guava's test suite, JSR166's TCK, and its own (consisting of over 1M test execution variants). There is about 95% code coverage and is well documented.  In comparison, Ehcache has poor performance and in v3 the hit rate was dramatically reduced. Instead of taking a random sample, an MRU heavy distribution is sampled and then the priority strategy (LRU, etc) is applied. This leads to very a poor hit rate for small caches, raising to a random policy's hit rate for large caches. Infinispan is much better in regards to efficiency, but with even worse concurrent performance due to being optimized for cache misses (not hits).  If there is interest, I'd like to contribute a module with some guidance on how to implement it.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10315?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-73765","commnet_date":"2015-11-25T12:03:22-0800","commnet_user":"Ben Manes","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Ben Manesn added a comment  - 25\/Nov\/2015 12:03 PM    n        n        See this Ehcache performance short analysis of the performance problems in v2 and v3. It describes why v3 is significantly worse overall. In fact, v3 is arguably worse than using LinkedHashMap in LRU mode. n    n    n        n            Show  n            n                        n    n    n    n                nn       Ben Manesn added a comment  - 25\/Nov\/2015 12:03 PM                      See this  Ehcache performance  short analysis of the performance problems in v2 and v3. It describes why v3 is significantly worse overall. In fact, v3 is arguably worse than using LinkedHashMap in LRU mode.              n        n    n"},{"commnet_id":"comment-74041","commnet_date":"2015-12-08T08:31:09-0800","commnet_user":"Petar Tahchiev","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Petar Tahchievn added a comment  - 08\/Dec\/2015 08:31 AM    n        n        I'm really +1 for this. However the hibernate team will probably ignore this - I spoke with them about adding a Hazelcast hibernate5 support and I believe their response was to delegate this to the hazelcast team. So I think here it would be the same case. n    n    n        n            Show  n            n                        n    n    n    n                nn       Petar Tahchievn added a comment  - 08\/Dec\/2015 08:31 AM                      I'm really +1 for this. However the hibernate team will probably ignore this - I spoke with them about adding a Hazelcast hibernate5 support and I believe their response was to delegate this to the hazelcast team. So I think here it would be the same case.              n        n    n"},{"commnet_id":"comment-75834","commnet_date":"2016-03-10T08:11:59-0800","commnet_user":"Neale Upstone","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Neale Upstonen added a comment  - 10\/Mar\/2016 08:11 AM    n        n        I would have thought that the relatively small number of classes in hibernate-ehcache gives a pretty solid platform from which to build things.nnThe question is really whether to go directly for hibernate-caffeine or to create a hibernate-jcache adaptor to allow any Jcache provider to be used. n    n    n        n            Show  n            n                        n    n    n    n                nn       Neale Upstonen added a comment  - 10\/Mar\/2016 08:11 AM                      I would have thought that the relatively small number of classes in hibernate-ehcache gives a pretty solid platform from which to build things. nn The question is really whether to go directly for hibernate-caffeine or to create a hibernate-jcache adaptor to allow any Jcache provider to be used.              n        n    n"},{"commnet_id":"comment-75835","commnet_date":"2016-03-10T09:30:30-0800","commnet_user":"Ben Manes","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Ben Manesn added a comment  - 10\/Mar\/2016 09:30 AM    n        n        A reason why I didn't proceed forward is that I realized that Hibernate's integration expects the cache to provide its own configuration file. This leads into the classic framework vs. library debate. Caffeine takes a library design by providing integration hooks, but is not overly opinionated or act like a subsystem. Instead of a file format, a specification parser is provided to simplify working in the application's configuration format (e.g. Spring's properties, Dropwizard's yaml, Play's hcon).nnJCache (JEE) is meant to adapt to a framework design, so the provider does specify a configuration file. It seems that JCache would be the easiest way to integrate into Hibernate and avoids the pain of supporting N cache implementations. It looks like the Ehcache 3.0 team has started to work on JCache support, so that may be the best path forward. n    n    n        n            Show  n            n                        n    n    n    n                nn       Ben Manesn added a comment  - 10\/Mar\/2016 09:30 AM                      A reason why I didn't proceed forward is that I realized that Hibernate's integration expects the cache to provide its own configuration file. This leads into the classic framework vs. library debate. Caffeine takes a library design by providing integration hooks, but is not overly opinionated or act like a subsystem. Instead of a file format, a specification parser is provided to simplify working in the application's configuration format (e.g. Spring's properties, Dropwizard's yaml, Play's hcon). nn JCache (JEE) is meant to adapt to a framework design, so the provider does specify a configuration file. It seems that JCache would be the easiest way to integrate into Hibernate and avoids the pain of supporting N cache implementations. It looks like the Ehcache 3.0 team has started to work on  JCache support , so that may be the best path forward.              n        n    n"},{"commnet_id":"comment-78450","commnet_date":"2016-05-26T05:09:50-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 26\/May\/2016 05:09 AM    n        n        Ben Manes Should I close this then in favor of n    n                n        n            n            HHH-10770n        n                                                    Closed n             n (and integrating Caffeine via that JCache integration)? n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 26\/May\/2016 05:09 AM                       Ben Manes  Should I close this then in favor of n     n                 n         n             n            HHH-10770n         n                                                     Closed n             n (and integrating Caffeine via that JCache integration)?              n        n    n"},{"commnet_id":"comment-78459","commnet_date":"2016-05-26T08:41:13-0700","commnet_user":"Ben Manes","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Ben Manesn added a comment  - 26\/May\/2016 08:41 AM    n        n        Lets close. I think integrating cache providers through a JCache layer is the best strategy. Thanks! n    n    n        n            Show  n            n                        n    n    n    n                nn       Ben Manesn added a comment  - 26\/May\/2016 08:41 AM                      Lets close. I think integrating cache providers through a JCache layer is the best strategy. Thanks!              n        n    n"},{"commnet_id":"comment-78460","commnet_date":"2016-05-26T08:50:56-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 26\/May\/2016 08:50 AM    n        n        Focus on integration via JCache API. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 26\/May\/2016 08:50 AM                      Focus on integration via JCache API.              n        n    n"}]}},{"HHH-10314":{"info":{"issue_title":"In some cases BatchFetchQueue is created just to try and remove a key","issue_key":"HHH-10314","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.5,                                            5.1.0","issue_labels":"5.0.5,                                            5.1.0","issue_description":"If the queue is still null there is no need to create it, as it clearly cannot contain the key being removed.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10314?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10313":{"info":{"issue_title":"Make SessionImplementor extend WrapperOptions","issue_key":"HHH-10313","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.5","issue_labels":"5.0.5","issue_description":"As per the TODO in AbstractStandardBasicType, have SessionImplementor expose WrapperOptions via a new WrapperOptionsContext contract.  This removes the need to allocate a new WrapperOptions for every call and saves a lot of allocations.  There are 2 pieces 2 this:  \tIntroduction of the new WrapperOptionsContext contract (composition\/delegation) \tHaving SessionImplementor implement WrapperOptionsContext    5.1 will have both.  In the interest of compatibility, for 5.0 I will do this slightly differently, namely limiting the implementation of WrapperOptionsContext to just SessionImpl, StatelessSessionImpl and SessionDelegatprBaseImpl specifically.  This allows custom Session implementors to continue to work as is.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10313?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2048":{"info":{"issue_title":"Generalize MetadataProvidingFieldBridge contract to return types and names of created fields","issue_key":"HSEARCH-2048","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.5.1.Final,                                            5.6.0.Alpha1","issue_labels":"5.5.1.Final,                                            5.6.0.Alpha1","issue_description":"In order to properly initialize the index mapping with the ES backend also for fields created by custom (class-level) bridges, bridges need to return some more metadata:   \tfield names \tfield types (numeric encoding types) \t?","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2048?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10308":{"info":{"issue_title":"Don&#39;t make deep copy of property with AttributeConverter if Java type is known to be immutable","issue_key":"HHH-10308","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.5","issue_labels":"5.0.5","issue_description":"Due to                                                          HHH-10111                                                              Closed                , if a property has an AttributeConverter, it's MutabilityPlan is  a MutableMutabilityPlan, which results in doing deep copies of those properties.  It would be more efficient to not do a deep copy if the property Java type is known to be immutable.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10308?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-73622","commnet_date":"2015-11-20T12:19:09-0800","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 20\/Nov\/2015 12:19 PM    n        n        Fixed in master and 5.0 branches. nnThis jira covers the case where Hibernate \"knows\" that  the Java type of attribute with an AttributeConverter is immutable, for example:nn{{\/\/ Hibernate knows that Integer is immutable;\r\nn@Converter(converter=ValueTypeConverter.class\r\nnInteger aValue;}}nnn    n                n        n            n            HHH-10127n        n                                                    Closed n             n will cover the case where an application can explicitly indicate that the Java type of attribute with an AttributeConverter is immutable, for example:nn{{\/\/ Hibernate has no way of knowing if ValueType is immutable\r\nn@Converter(converter=ValueTypeConverter.class\r\nnValueType aValue;}} n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 20\/Nov\/2015 12:19 PM                      Fixed in master and 5.0 branches.  nn This jira covers the case where Hibernate \"knows\" that  the Java type of attribute with an AttributeConverter is immutable, for example: nn {{\/\/ Hibernate knows that Integer is immutable; n@Converter(converter=ValueTypeConverter.class nInteger aValue;}} nn n     n                 n         n             n            HHH-10127n         n                                                     Closed n             n will cover the case where an application can explicitly indicate that the Java type of attribute with an AttributeConverter is immutable, for example: nn {{\/\/ Hibernate has no way of knowing if ValueType is immutable n@Converter(converter=ValueTypeConverter.class nValueType aValue;}}              n        n    n"},{"commnet_id":"comment-73624","commnet_date":"2015-11-20T13:33:59-0800","commnet_user":"Scott Marlow","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Scott Marlown added a comment  - 20\/Nov\/2015 13:33 PM    n        n        Thanks Gail! n    n    n        n            Show  n            n                        n    n    n    n                nn       Scott Marlown added a comment  - 20\/Nov\/2015 13:33 PM                      Thanks Gail!              n        n    n"}]}},{"HHH-10306":{"info":{"issue_title":"Use module initializer to add Hibernate 2LC externalizers","issue_key":"HHH-10306","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.4","issue_component":"5.0.4","issue_labels":"5.0.4","issue_description":"As a result of adding read\/write and non-strict read\/write support, externalizers were added. These should be added via module initializer instead of during the Infinispan RegionFactory construction so that the externalizer initialization can happen easily both standalone and within container. Similar approach is used for lucene externalizers and other modules that add externalizers.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10306?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-73767","commnet_date":"2015-11-26T08:08:21-0800","commnet_user":"Galder Zamarreno","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Galder Zamarrenon added a comment  - 26\/Nov\/2015 08:08 AM    n        n        https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1168 n    n    n        n            Show  n            n                        n    n    n    n                nn       Galder Zamarrenon added a comment  - 26\/Nov\/2015 08:08 AM                       https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1168               n        n    n"}]}},{"HHH-10302":{"info":{"issue_title":"Lots of allocations of LoadEvent and PostLoadEvent","issue_key":"HHH-10302","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.5,                                            5.1.0","issue_labels":"5.0.5,                                            5.1.0","issue_description":"If these events can be re-used it could reduce allocations by a significant amount.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10302?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-73596","commnet_date":"2015-11-18T16:49:59-0800","commnet_user":"Stuart Douglas","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Stuart Douglasn added a comment  - 18\/Nov\/2015 16:49 PM    n        n        https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1159 n    n    n        n            Show  n            n                        n    n    n    n                nn       Stuart Douglasn added a comment  - 18\/Nov\/2015 16:49 PM                       https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1159               n        n    n"}]}},{"HHH-10301":{"info":{"issue_title":"HQLQueryPlan allocates a new ArrayList every time even if it is not required","issue_key":"HHH-10301","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.4","issue_component":"5.0.4","issue_labels":"5.0.4","issue_description":"HQLQueryPlan creates a new ArrayList to return every time, however if there is only one translator then it should be possible to just directly return the results list.   Note that this actually results in two additional array allocations, as the ArrayList.addAll() invocation calls .toArray() internally.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10301?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-73595","commnet_date":"2015-11-18T16:49:26-0800","commnet_user":"Stuart Douglas","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Stuart Douglasn added a comment  - 18\/Nov\/2015 16:49 PM    n        n        https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1158 n    n    n        n            Show  n            n                        n    n    n    n                nn       Stuart Douglasn added a comment  - 18\/Nov\/2015 16:49 PM                       https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1158               n        n    n"}]}},{"HHH-10297":{"info":{"issue_title":"Cache HashMap in AbstractRowReader instead of re-creating for each row that is read","issue_key":"HHH-10297","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.4","issue_labels":"5.0.4","issue_description":"A HashMap&lt;EntityReference, EntityReferenceInitializer&gt; is currently allocated each time a ResultSet row is read. This HashMap helps for doing lookups when resolving bidirectional EntityReferences and fetches.  Rather than allocating for each row, the HashMap will be allocated once and cached as a field in AbstractRowReader.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10297?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-73574","commnet_date":"2015-11-17T21:54:53-0800","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 17\/Nov\/2015 21:54 PM    n        n        Fixed in master and 5.0 branches. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 17\/Nov\/2015 21:54 PM                      Fixed in master and 5.0 branches.              n        n    n"}]}},{"HSEARCH-2044":{"info":{"issue_title":"Make spatial fields sortable by distance without index uninverting","issue_key":"HSEARCH-2044","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.5.1.Final,                                            5.6.0.Alpha1","issue_labels":"5.5.1.Final,                                            5.6.0.Alpha1","issue_description":"Sorting on spatial fields (\"_hibernate_default_coordinates\") currently requires index uninverting as there is no means for marking them as sortable.  Not sure how it could look like, I'd be inclined to just add the required doc value field automatically and be done with it.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2044?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-73543","commnet_date":"2015-11-17T00:37:32-0800","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 17\/Nov\/2015 00:37 AM    n        n        I don't think we should be adding unnecessary fields by default, unless you think it's a very common use case? Did someone ask to sort on such fields?nnConsidering that we offer multiple ways to index the spatial coordinates, I think it would be acceptable to allow sorting exclusively on the mapping strategy with explicit lat\/long fields:nnn@Entityrn@Indexedrn@Spatialrnpublic  class Hotel {rnrn  @Latitude @SortableFieldrn  Double  latitudernrn  @Longitudern  Double  longitudernrn  n n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 17\/Nov\/2015 00:37 AM                      I don't think we should be adding unnecessary fields by default, unless you think it's a very common use case? Did someone ask to sort on such fields? nn Considering that we offer multiple ways to index the spatial coordinates, I think it would be acceptable to allow sorting exclusively on the mapping strategy with explicit lat\/long fields: nn  n @Entityrn@Indexedrn@Spatialrn public  class Hotel {rnrn  @Latitude @SortableFieldrn   Double  latitudernrn  @Longitudern   Double  longitudernrn   n               n        n    n"},{"commnet_id":"comment-73544","commnet_date":"2015-11-17T04:03:17-0800","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 17\/Nov\/2015 04:03 AM    n        n        Turns out sorting by distance happens via a custom comparator. So no physical doc value field is needed actually, it suffices if the spatial bridges expose the meta-data making sort field validation pass. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 17\/Nov\/2015 04:03 AM                      Turns out sorting by distance happens via a custom comparator. So no physical doc value field is needed actually, it suffices if the spatial bridges expose the meta-data making sort field validation pass.              n        n    n"},{"commnet_id":"comment-73549","commnet_date":"2015-11-17T09:17:29-0800","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 17\/Nov\/2015 09:17 AM    n        n        Right, sorry I should have remembered that  Cool that means we have a non intrusive yet optimal solution! n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 17\/Nov\/2015 09:17 AM                      Right, sorry I should have remembered that   Cool that means we have a non intrusive yet optimal solution!              n        n    n"}]}},{"HSEARCH-2043":{"info":{"issue_title":"Provide option to raise an exception in case uncovered sorts are detected","issue_key":"HSEARCH-2043","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.5.1.Final,                                            5.6.0.Alpha1","issue_labels":"5.5.1.Final,                                            5.6.0.Alpha1","issue_description":"If that option is enabled, any uncovered sort detected during query execution will raise an exception as opposed to the warning which is currently logged. The setting should be disabled by default for now, but e.g. it could be enabled by default in HSEARCH 6 and beyond. Users would typically enable it during testing to spot sort requests not covered by @SortableField nor a custom field bridge (see                                                          HSEARCH-2021                                                              Closed                ) more easily. It will also be useful for testing the implementation of                                                          HSEARCH-2021                                                              Closed                .","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2043?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2042":{"info":{"issue_title":"Don&#39;t uninvert index when sorting by doc id or score","issue_key":"HSEARCH-2042","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.5.1.Final,                                            5.6.0.Alpha1","issue_labels":"5.5.1.Final,                                            5.6.0.Alpha1","issue_description":"Due to a coding glitch (boolean AND instead of OR) we unnecessarily uninvert when sorting by doc id or score.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2042?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-930":{"info":{"issue_title":"Map basic properties annotated with @Lob","issue_key":"OGM-930","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.Beta1","issue_labels":"5.0.0.Beta1","issue_description":"There is not a corresponding GridType for a field mapped as    @Lob String   .","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-930?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-74153","commnet_date":"2015-12-15T03:26:06-0800","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 15\/Dec\/2015 03:26 AM    n        n        @Lob-annotated basic properties are now mapped as defined by the @Lob contract: Using a character type for String\/char and as binary stream for others. For element collections of basic LOB types there is n    n                n        n            n            OGM-942n        n                                                    Open n             n as a follow-up: It works already for some stores (e.g. Redis, MongoDB) but at least not on Cassandra. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 15\/Dec\/2015 03:26 AM                       @Lob -annotated basic properties are now mapped as defined by the  @Lob  contract: Using a character type for String\/char and as binary stream for others. For element collections of basic LOB types there is n     n                 n         n             n            OGM-942n         n                                                     Open n             n as a follow-up: It works already for some stores (e.g. Redis, MongoDB) but at least not on Cassandra.              n        n    n"}]}},{"HHH-10294":{"info":{"issue_title":"EntityGraph improvement: For each jpa attribute, generate also a String constant holding the attribute field name","issue_key":"HHH-10294","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"hibernate-jpamodelgen","issue_description":"Hello,  Today, while building EntityGraph annotations, we cannot use attributes provided by the generated metamodels.  If metamodels contained also each attribute name as a String constant, we could use them while building EntityGraphs.\r\n Something like:    @Generated(value = \"org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor\" )  @StaticMetamodel(UserWithPassword.class)  public  abstract  class UserWithPassword_ {    \tpublic  static  volatile  SingularAttribute&lt;UserWithPassword, String &gt; password;          public  static  final  String  PASSWORD = \"password\" ;  }    I hope you will accept it as I am going to create a pull request for this feature.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10294?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-929":{"info":{"issue_title":"Refactor test runners for skip by provider and skip by dialect","issue_key":"OGM-929","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.Beta1","issue_labels":"5.0.0.Beta1","issue_description":"The current implementation skips tests by the available data store class on the class path even the name says SkipByGridDialectType.   The idea is to refactor the name to SkipByGridDialectModule and introduce a true SkipByGridDialect annotation which checks the grid dialect type within the session factory.  Tasks:  \tRefactor annotations and testrunner \tAdjust datastore provider lookup within the test to support class names\/short names and to deal with type hierarchies \tAdd SkipByGridDialect annotation that evaluates the dialect from the configuration","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-929?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-73771","commnet_date":"2015-11-27T01:34:12-0800","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 27\/Nov\/2015 01:34 AM    n        n        Ok, so we ended up with not skipping by module but with proper skipping by dialect and\/or datastore provider. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 27\/Nov\/2015 01:34 AM                      Ok, so we ended up with not skipping by module but with proper skipping by dialect and\/or datastore provider.              n        n    n"}]}},{"HHH-10282":{"info":{"issue_title":"AttributeConverter for Enum within JPQL query","issue_key":"HHH-10282","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.0.3","issue_component":"5.0.3","issue_labels":"5.0.3","issue_description":"After upgrade Hibernate ORM from 5.0.2 to 5.0.3 I can't make to work JPQL query which uses Enum value with AttributeConverter as part of WHERE clause.  Given this classes:     package  point.data.jpa.entities;    public  class DeskTransaction {      public  enum  Type {      TYPE1(1), TYPE2(2);      private  int  code;      private  static  Map&lt;Integer , Type&gt; typesByCode = new  HashMap&lt;&gt;();      static  {        for  (Type type : Type.values()) {          typesByCode.put(type.code, type);        }      }      public  Type(int  code) {        this .code = code;      }      public  int  code getCode() {        return  this .code;      }      public  static  Type fromCode(int  code) {        return  typesByCode.get(code);      }    }      @Converter(autoApply = true )    public  static  class TypeConverter implements  AttributeConverter&lt;Type, Integer &gt; {      @Override      public  Integer  convertToDatabaseColumn(Type attribute) {        return  attribute == null  ? null  : attribute.getCode();      }      @Override      public  Type convertToEntityAttribute(Integer  dbData) {        return  dbData == null  ? null  : Type.fromCode(dbData);      }    }      @Column(nullable = false )    private  Type type;      @ManyToOne(optional = true )    @JoinColumn(name = \"worker_id\" )    private  Employee employee;      @Column(name = \"money\" , nullable = false )    private  BigDecimal sum;      \/\/ getters and setters     }     Before 5.0.3 (up to 5.0.2 inclusive) this JPQL query works (in 4.x it also worked fine):\r\n SELECT dt.employee, -SUM(dt.sum) FROM point.data.jpa.entities.DeskTransaction dt WHERE dt.type = 1 GROUP BY dt.employee  After upgrading to 5.0.3 it don't work anymore and raises exception at application launch:  Caused by: org.hibernate.QueryException: AttributeConverter domain-model attribute type [point.data.jpa.entities.DeskTransaction$Type] did not match query literal type [java.lang.Integer]   I think that before 5.0.3 AttributeConverters were not applied for this JPQL WHERE clause so literal \"1\" worked because in DB this is INTEGER field. So I tried to replace literal \"1\" to Enum in this query.  I tried this:\r\n SELECT dt.employee, -SUM(dt.sum) FROM point.data.jpa.entities.DeskTransaction dt WHERE dt.type = TYPE1 GROUP BY dt.employee\r\n In this case application starts fine but when this query executes it raises the exception:   Column \"TYPE1\" not found; SQL statement:  select desktransa0_.worker_id as col_0_0_, -sum(desktransa0_.money) as col_1_0_, employee1_.id as id1_30_, employee1_.enable_adminka as enable_a2_30_, employee1_.enable_switch as enable_s3_30_, employee1_.enable_vpn as enable_v4_30_, employee1_.active as active5_30_, employee1_.birthday as birthday6_30_, employee1_.firstname as firstnam7_30_, employee1_.lastname as lastname8_30_, employee1_.login as login9_30_, employee1_.password as passwor10_30_, employee1_.patronymic as patrony11_30_, employee1_.position as positio12_30_, employee1_.com_config_notifications as com_con13_30_, employee1_.ip_address as ip_addr14_30_ from buhuchet desktransa0_ inner join workers employee1_ on desktransa0_.worker_id=employee1_.id where desktransa0_.type=TYPE1 and (desktransa0_.worker_id is not null) group by desktransa0_.worker_id [42122-190]    (take no note of additional fields as my real DeskTransaction and Employee classes are little bigger)  The real problem here is desktransa0_.type=TYPE1. Of course this is not correct SQL.  Then I tried to wrote full qualified class name for enum:\r\n SELECT dt.employee, -SUM(dt.sum) FROM point.data.jpa.entities.DeskTransaction dt WHERE dt.type = point.data.jpa.entities.DeskTransaction.Type.TYPE1 GROUP BY dt.employee  This causes exception:  Caused by: org.hibernate.hql.internal.ast.QuerySyntaxException: Invalid path: 'point.data.jpa.entities.DeskTransaction.Type.TYPE1' [SELECT dt.employee, -SUM(dt.sum) FROM point.data.jpa.entities.DeskTransaction dt WHERE dt.type = point.data.jpa.entities.DeskTransaction.Type.TYPE1 AND dt.employee IS NOT NULL GROUP BY dt.employee]   Then I changed nested class divider from dot to \"$\" sign:\r\n SELECT dt.employee, -SUM(dt.sum) FROM point.data.jpa.entities.DeskTransaction dt WHERE dt.type = point.data.jpa.entities.DeskTransaction$Type.TYPE1 GROUP BY dt.employee  And finally it works fine!  I find this last solution while wroting this report and now not sure if it is bug at all. Maybe wroting nested classes in class-loader format with \"$\" as divider is right solution?  But even if this is true then when this has been changed? I check all changes between 5.0.2 and 5.0.3 and found only                                                          HHH-9074                                                              Closed                . But it is for boolean and not enums.  Maybe it should be documented somewhere as many JPQL queries became broken after upgrading to 5.0.3. I think it is bug that type = 1 worked before (skipping AttributeConverters) but it worked quite a while...  And maybe it is possible to make type = TYPE1 (without FQCN) also works? If class of type is known at runtime then we can deduce enum class for TYPE1.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10282?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-75543","commnet_date":"2016-02-29T11:48:59-0800","commnet_user":"Ruslan Stelmachenko","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Ruslan Stelmachenkon added a comment  - 29\/Feb\/2016 11:48 AM     - edited  n        n        I created testcase with enum which uses AttributeConverter hibernate-enum-attribute-converter.zip .nnI confirm that in 4.11 this works:nnrnSELECT  e FROM  Entity e WHERE  e.type = com.sample.EntityType.TYPE1rnnnnAnd this not:nnrnSELECT  e FROM  Entity e WHERE  e.type = EntityType.TYPE1rnnnnSo you are right. Integer value worked before 5.0.3 just by accident and we can ignore this fact because this is not documented functionality.\r\nnMaybe some words about this in changelog is still be useful. For those like me who accidentally used this functionality. Maybe not...nnI think you can close this issue. Sorry for the inconvenience.\r\nnOr maybe use it to implement improvement which allows use enums without FQN (if it does not contradict the specification). n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Ruslan Stelmachenkon added a comment  - 29\/Feb\/2016 11:48 AM     - edited                    I created testcase with enum which uses AttributeConverter   hibernate-enum-attribute-converter.zip     . nn I confirm that in 4.11 this works: n  n rn SELECT  e  FROM  Entity e  WHERE  e.type = com.sample.EntityType.TYPE1rn n  nn And this not: n  n rn SELECT  e  FROM  Entity e  WHERE  e.type = EntityType.TYPE1rn n  nn So you are right. Integer value worked before 5.0.3 just by accident and we can ignore this fact because this is not documented functionality. nMaybe some words about this in changelog is still be useful. For those like me who accidentally used this functionality. Maybe not... nn I think you can close this issue. Sorry for the inconvenience. nOr maybe use it to implement improvement which allows use enums without FQN (if it does not contradict the specification).              n        n    n"},{"commnet_id":"comment-75647","commnet_date":"2016-03-02T05:37:28-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 02\/Mar\/2016 05:37 AM    n        n        For an inner class you have to give the complete simple name, which includes the containing class name.  E.g. for the following:nnnrnpackage  com.acme;rnrnclass Outer {rn    ...rnrn   <span class=\"code-keyword\">public<\/span> <span class=\"code-keyword\">static<\/span> <span class=\"code-keyword\">enum<\/span> Inner {rn       TYPE1,rn        ...rn    }rn}rnnnnYou'd use SELECT e FROM Entity e WHERE e.type = Outer$Inner.TYPE1 (or Outer.Inner.TYPE1, I always forget).n n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 02\/Mar\/2016 05:37 AM                      For an inner class you have to give the complete simple name, which includes the containing class name.  E.g. for the following: nn  n rn package  com.acme;rnrnclass Outer {rn    ...rnrn    public   static   enum  Inner {rn       TYPE1,rn        ...rn    }rn}rn n  nn You'd use  SELECT e FROM Entity e WHERE e.type = Outer$Inner.TYPE1  (or  Outer.Inner.TYPE1 , I always forget). n             n        n    n"},{"commnet_id":"comment-75648","commnet_date":"2016-03-02T05:52:57-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 02\/Mar\/2016 05:52 AM    n        n        nquote Ju00F6rg Hohwiller\r\nnActually I would consider the spec to be buggy. It is absolutely not DRY (do not repeat yourself) to require FQN here. In that context the qualified enum type is already known. The name of the enum constant would be fully sufficient.nnThis gets into language parsing as well as the JPA design of AttributeConverter.  Take a query like select p from Person p where p.sex = MALE and assume Person#sex is an enum value with a named value MALE...  Yes the type of the \"parse node\" MALE can be known relative to its relationship to the p.sex parse node.  That's not always the case, but here it is and for now lets assume it is always determinable thusly.  So given the AttributeConverter contract as defined by JPA, how would one \"consume\" the String \"MALE\" into a value of type Sex?  Generically speaking..nnAnd in terms of parsing, its simply less efficient\/performant to handle this case.  If the MALE is fully qualified I can know immediately that it is a literal.  If it is not, then I have to treat it generally and resolve it later.nnIn general I would be ok with exploring support for unqualified enum literal references in the query.  This would certainly be:nntan enhancementntbeyond the scope of JPA (provider portability)nnnnIt's not something I am going to spend a lot of time on right now.  We are however currently rewriting the query parser, so I will consider ways to possibly allow this in the new parser. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 02\/Mar\/2016 05:52 AM                      n quote  Ju00F6rg Hohwiller  nActually I would consider the spec to be buggy. It is absolutely not DRY (do not repeat yourself) to require FQN here. In that context the qualified enum type is already known. The name of the enum constant would be fully sufficient.  nn This gets into language parsing as well as the JPA design of AttributeConverter.  Take a query like  select p from Person p where p.sex = MALE  and assume  Person#sex  is an enum value with a named value MALE...  Yes the type of the \"parse node\"  MALE  can be known relative to its relationship to the  p.sex  parse node.  That's not always the case, but here it is and for now lets assume it is always determinable thusly.  So given the AttributeConverter contract as defined by JPA, how would one \"consume\" the String  \"MALE\"  into a value of type  Sex ?  Generically speaking.. nn And in terms of parsing, its simply less efficient\/performant to handle this case.  If the  MALE  is fully qualified I can know immediately that it is a literal.  If it is not, then I have to treat it generally and resolve it later. nn In general I would be ok with exploring support for unqualified enum literal references in the query.  This would certainly be: n nt an enhancement nt beyond the scope of JPA (provider portability) n nnn It's not something I am going to spend a lot of time on right now.  We are however currently rewriting the query parser, so I will consider ways to possibly allow this in the new parser.              n        n    n"},{"commnet_id":"comment-75669","commnet_date":"2016-03-03T08:35:56-0800","commnet_user":"Ruslan Stelmachenko","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Ruslan Stelmachenkon added a comment  - 03\/Mar\/2016 08:35 AM    n        n        You'd use SELECT e FROM Entity e WHERE e.type = Outer$Inner.TYPE1 (or Outer.Inner.TYPE1, I always forget).nnThis doesn't work. Both variants doesn't work. I tried it with 4.11, 5.0.3 and 5.1.0.nnWith Outer$Inner.TYPE1 the exception is org.hibernate.hql.internal.ast.InvalidPathException: Invalid path: 'Outer$Inner.TYPE1'.\r\nnWith Outer.Inner.TYPE1 the exception is org.hibernate.hql.internal.ast.InvalidPathException: Invalid path: 'null.Inner.TYPE1'.nnMy attachment with test case from previous post shows this. It uses 4.11 version of hibernate. But you can easily change this adding gradle.properties file into root project folder with this content:nnrnhibernate.version = 5.1.0.Finalrnnnand then gradlew test again.nnIf you decide to fix this, I think the syntax with $ sign is more correct because it is how it works now with FQN (i.e. com.acme.Outer$Inner.TYPE1 works now). n    n    n        n            Show  n            n                        n    n    n    n                nn       Ruslan Stelmachenkon added a comment  - 03\/Mar\/2016 08:35 AM                       You'd use  SELECT e FROM Entity e WHERE e.type = Outer$Inner.TYPE1  (or  Outer.Inner.TYPE1 , I always forget).  nn This doesn't work. Both variants doesn't work. I tried it with 4.11, 5.0.3 and 5.1.0. nn With  Outer$Inner.TYPE1  the exception is  org.hibernate.hql.internal.ast.InvalidPathException: Invalid path: 'Outer$Inner.TYPE1' . nWith  Outer.Inner.TYPE1  the exception is  org.hibernate.hql.internal.ast.InvalidPathException: Invalid path: 'null.Inner.TYPE1' . nn My attachment with test case from previous post shows this. It uses 4.11 version of hibernate. But you can easily change this adding  gradle.properties  file into root project folder with this content: n  n rnhibernate.version = 5.1.0.Finalrn n  n and then  gradlew test  again. nn If you decide to fix this, I think the syntax with  $  sign is more correct because it is how it works now with FQN (i.e.  com.acme.Outer$Inner.TYPE1  works now).              n        n    n"},{"commnet_id":"comment-75954","commnet_date":"2016-03-14T18:39:56-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 14\/Mar\/2016 18:39 PM    n        n        I've mentioned this in the migration guide: https:\/\/github.com\/hibernate\/hibernate-orm\/blob\/5.0\/migration-guide.adoc#migration-from-502final-to-503final n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 14\/Mar\/2016 18:39 PM                      I've mentioned this in the migration guide:  https:\/\/github.com\/hibernate\/hibernate-orm\/blob\/5.0\/migration-guide.adoc#migration-from-502final-to-503final               n        n    n"}]}},{"HSEARCH-2038":{"info":{"issue_title":"Performance: avoid scoring on operations which don&#39;t need scores to be computed","issue_key":"HSEARCH-2038","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.5.1.Final,                                            5.6.0.Alpha1","issue_labels":"5.5.1.Final,                                            5.6.0.Alpha1","issue_description":"There are several automatically generated queries which are not explicitly disabling Lucene's scoring features, and yet don't need scoring.  \tdelete and update operations which need usage of a Query (shared indexes) \tthe spatial filtering using box ranges \tfiltering on tenantId \tfiltering on types to target the requested entities","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2038?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10278":{"info":{"issue_title":"Schema script generated with Persistence.generateSchema() does not include semicolons","issue_key":"HHH-10278","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Out of Date","issue_fix_version":"5.0.3","issue_component":"5.0.3","issue_labels":"5.0.3","issue_description":"Generating a schema script with Persistence.generateSchema() does not include semicolons.  Unlike with org.hibernate.tool.hbm2ddl.SchemaExport, there doesn't seem to be a configuration option to include semicolons when generating the database schema to a script with the JPA API.  A minimal test-case is available on github: https:\/\/github.com\/bedag\/hibernate-schema-generation","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10278?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-75499","commnet_date":"2016-02-27T17:11:05-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 27\/Feb\/2016 17:11 PM    n        n        This should be fixed in 5.1.  Please give it a try.nnPreviously we tried to keep the JPA schema generation as plain as possible in regards to the spec.  In 5.1 I did a lot of work to marry the features JPA schema generation and Hibernate's more mature and broader HBM2DDL tooling.  In other words, running JPA schema generation should now understand the various (non-conflicting) HBM2DDL options as well n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 27\/Feb\/2016 17:11 PM                      This should be fixed in 5.1.  Please give it a try. nn Previously we tried to keep the JPA schema generation as plain as possible in regards to the spec.  In 5.1 I did a lot of work to marry the features JPA schema generation and Hibernate's more mature and broader HBM2DDL tooling.  In other words, running JPA schema generation should now understand the various (non-conflicting) HBM2DDL options as well              n        n    n"},{"commnet_id":"comment-75500","commnet_date":"2016-02-27T17:13:32-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 27\/Feb\/2016 17:13 PM    n        n        See n    n                n        n            n            HHH-10458n        n                                                    Closed n             n n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 27\/Feb\/2016 17:13 PM                      See n     n                 n         n             n            HHH-10458n         n                                                     Closed n             n              n        n    n"}]}},{"HSEARCH-2036":{"info":{"issue_title":"Extract base class with commonly used code from HSQueryImpl","issue_key":"HSEARCH-2036","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Alpha1","issue_labels":"5.6.0.Alpha1","issue_description":"In preparation of                                                          HSEARCH-1188                                                              Closed                 (ES backend).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2036?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2035":{"info":{"issue_title":"Avoiding dependency to Lucene&#39;s Query type in TimeoutManagerImpl","issue_key":"HSEARCH-2035","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Alpha1","issue_labels":"5.6.0.Alpha1","issue_description":"In preparation of                                                          HSEARCH-1188                                                              Closed                 (ElasticSearch backend).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2035?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2034":{"info":{"issue_title":"Allow the QueryBuilder DSL to disable scoring for must clauses","issue_key":"HSEARCH-2034","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.5.1.Final,                                            5.6.0.Alpha1","issue_labels":"5.5.1.Final,                                            5.6.0.Alpha1","issue_description":"The BooleanClause.Occur enum in Lucene now offers a Filter option, which is similar to Must but has it disable scoring.  Scoring can be CPU intensive, and when used as filtering criteria might not be desirable.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2034?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10272":{"info":{"issue_title":"Make pending-puts cache template configurable","issue_key":"HHH-10272","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.3","issue_component":"5.0.3","issue_labels":"5.0.3","issue_description":"In order to utilize Infinispan's simple cache we need to make the pending-puts cache template configurable.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10272?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10271":{"info":{"issue_title":"Improve performance of EventListenerRegistry","issue_key":"HHH-10271","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.3","issue_component":"5.0.3","issue_labels":"5.0.3","issue_description":"EventListenerRegistry has a Map for EventType -&gt; EventListenerGroup that has high number of lookups. This can be sped up since there are a limited number of EventType.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10271?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10267":{"info":{"issue_title":"Support defining lazy attribute fetch groups","issue_key":"HHH-10267","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0","issue_labels":"5.1.0","issue_description":"When using bytecode enhanced lazy loading, the current scheme is to fetch all lazy attributes when one is accessed.  There are many times it would be great to define groupings of attributes to be fetched when one of the group is accessed.    In a sense, the current scheme is a single \"fetch group\".  This is about adding the ability for the user to explicitly control the definition of other groups.  A single attribute could only belong to one fetch group.  The annotation to control this is org.hibernate.annotations.LazyGroup, e.g.:     @Entity  public  class Customer {      @Id      private  Integer  id;      private  String  name;      @Basic( fetch = FetchType.LAZY )      private  UUID accountsPayableXrefId;      @Lob      @Basic( fetch = FetchType.LAZY )      @LazyGroup( \"lobs\"  )      private  Blob image;        ...  }     Both accountsPayableXrefId and image are lazy, but each is part of a different fetch group (accountsPayableXrefId is part of the default fetch group).  Which means that accessing accountsPayableXrefId will not force the loading of image.  By default all lazy singular attributes are part of a group named \"DEFAULT\" and all plural attributes are their own group.    For many-to-one and one-to-one attributes, it is expected that they also be marked with @LazyToOne(LazyToOneOption.NO_PROXY), for now.  The reason is legacy.  We are discussing relaxing that requirement since I believe bytecode-enhancement + lazy to-ones always want NO_PROXY there.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10267?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-73467","commnet_date":"2015-11-10T20:49:11-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 10\/Nov\/2015 20:49 PM    n        n        Notes to self...nnntMany places in the code base have a concept of \"lazyPropertiesAreUnfetched\".  The simple boolean worked previously because of the fact that there was just one fetch group.  As we transition to multiple fetch groups this needs to change to become the name of all fetched fetch-groups (all unfetched groups works too, but fetched groups is better).ntorg.hibernate.persister.entity.AbstractEntityPersister.initializeLazyPropertiesFromDatastore (as part of the org.hibernate.bytecode.instrumentation.spi.LazyPropertyInitializer#initializeLazyProperty call chain) needs to be re-worked to understand fetch groups.  Which means org.hibernate.persister.entity.AbstractEntityPersister#getSQLLazySelectString needs similar reworkingnn n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 10\/Nov\/2015 20:49 PM                      Notes to self... nn nt Many places in the code base have a concept of \"lazyPropertiesAreUnfetched\".  The simple boolean worked previously because of the fact that there was just one fetch group.  As we transition to multiple fetch groups this needs to change to become the name of all fetched fetch-groups (all unfetched groups works too, but fetched groups is better). nt  org.hibernate.persister.entity.AbstractEntityPersister.initializeLazyPropertiesFromDatastore  (as part of the  org.hibernate.bytecode.instrumentation.spi.LazyPropertyInitializer#initializeLazyProperty  call chain) needs to be re-worked to understand fetch groups.  Which means  org.hibernate.persister.entity.AbstractEntityPersister#getSQLLazySelectString  needs similar reworking n n             n        n    n"}]}},{"HHH-10263":{"info":{"issue_title":"Develop API to initialize more than one collection reference simultaneously","issue_key":"HHH-10263","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Won&#39;t Fix","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"Follow on from the discussion on                                                          HHH-7572                                                              Closed                .  There idea here would be to develop an API similar to the one developed for                                                          HHH-7572                                                              Closed                 for initializing multiple collection references at one shot.  Still waiting on the user to respond in terms of details, but the initial API I proposed was:  CollectionInitializerAccess.java   public  interface  CollectionInitializerAccess {      \/\/ possibly LockMode, etc...         \/\/ allow setting batch size possibly...         void initialize(Map... maps);      void initialize(Collection&lt;Map&gt; maps);        void initialize(Collection... collections);      void initialize(Collection&lt;Collection&gt; collections);  }     Tentatively scheduled for 5.1 pending feedback.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10263?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-74788","commnet_date":"2016-01-21T10:47:47-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 21\/Jan\/2016 10:47 AM    n        n        We never heard back from the original requestor here nor on n    n                n        n            n            HHH-7572n        n                                                    Closed n             n.  So going to reject this one.  We discussed as a team and came to the agreement that long term the best option here is to add entity-graph support to MultiIdLoadAccess. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 21\/Jan\/2016 10:47 AM                      We never heard back from the original requestor here nor on n     n                 n         n             n            HHH-7572n         n                                                     Closed n             n.  So going to reject this one.  We discussed as a team and came to the agreement that long term the best option here is to add entity-graph support to  MultiIdLoadAccess .              n        n    n"}]}},{"OGM-928":{"info":{"issue_title":"Use Strings in RedisConnection instead of byte array","issue_key":"OGM-928","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"5.0.0.Alpha1","issue_component":"5.0.0.Alpha1","issue_labels":"5.0.0.Alpha1","issue_description":"Switch to String as exchange data type (byte[] is used currently with RedisConnection). A pure binary level is not required to map data in a natural style within Redis.  The JSON dialect encapsulates various data types within a UTF-8 string. The upcoming hash dialect does not require byte[] but a switch to String facilitates the further development (i. e. byte[] to String and String to byte[] are not needed anymore).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-928?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1026":{"info":{"issue_title":"Exceptions during execution of LoadClass don&#39;t provide enough context","issue_key":"HV-1026","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"5.2.2.Final","issue_component":"5.2.2.Final","issue_labels":"5.2.2.Final","issue_description":"Following stack trace provides no original cause, hence it can only be diagnosed as a bug in Validator.  org.jboss.as.ee.beanvalidation.LazyValidatorFactoryTestCase.testSpecificProviderCanBeConfiguredInValidationXml: javax.validation.ValidationException: Unable to instantiate Configuration.      at java.lang.ClassLoader.findClass(ClassLoader.java:530)      at java.lang.ClassLoader.loadClass(ClassLoader.java:424)      at java.lang.ClassLoader.loadClass(ClassLoader.java:357)      at java.lang.Class.forName0(Native Method)      at java.lang.Class.forName(Class.java:348)      at org.hibernate.validator.internal.util.privilegedactions.LoadClass.loadClassInValidatorNameSpace(LoadClass.java:84)      at org.hibernate.validator.internal.util.privilegedactions.LoadClass.run(LoadClass.java:61)      at org.hibernate.validator.internal.util.privilegedactions.LoadClass.run(LoadClass.java:29)      at org.hibernate.validator.internal.engine.ConfigurationImpl.run(ConfigurationImpl.java:537)      at org.hibernate.validator.internal.engine.ConfigurationImpl.createJavaFXUnwrapperClass(ConfigurationImpl.java:138)      at org.hibernate.validator.internal.engine.ConfigurationImpl.&lt;init&gt;(ConfigurationImpl.java:118)      at org.hibernate.validator.internal.engine.ConfigurationImpl.&lt;init&gt;(ConfigurationImpl.java:96)      at org.hibernate.validator.HibernateValidator.createGenericConfiguration(HibernateValidator.java:31)      at javax.validation.Validation$GenericBootstrapImpl.configure(Validation.java:276)      at org.jboss.as.ee.beanvalidation.LazyValidatorFactory.initFactory(LazyValidatorFactory.java:80)      at org.jboss.as.ee.beanvalidation.LazyValidatorFactory.getDelegate(LazyValidatorFactory.java:58)      at org.jboss.as.ee.beanvalidation.LazyValidatorFactory.getValidator(LazyValidatorFactory.java:73)      at org.jboss.as.ee.beanvalidation.LazyValidatorFactoryTestCase.testSpecificProviderCanBeConfiguredInValidationXml(LazyValidatorFactoryTestCase.java:70)","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1026?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-73349","commnet_date":"2015-11-06T03:22:25-0800","commnet_user":"Carlo de Wolf","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Carlo de Wolfn added a comment  - 06\/Nov\/2015 03:22 AM    n        n        https:\/\/github.com\/hibernate\/hibernate-validator\/blob\/5.2.2.Final\/engine\/src\/main\/java\/org\/hibernate\/validator\/internal\/util\/privilegedactions\/LoadClass.java#L75 eats away the original exception, making analysis of the real issue impossible.\r\nnBut that's not related to the exception we are seeing. n    n    n        n            Show  n            n                        n    n    n    n                nn       Carlo de Wolfn added a comment  - 06\/Nov\/2015 03:22 AM                       https:\/\/github.com\/hibernate\/hibernate-validator\/blob\/5.2.2.Final\/engine\/src\/main\/java\/org\/hibernate\/validator\/internal\/util\/privilegedactions\/LoadClass.java#L75  eats away the original exception, making analysis of the real issue impossible. nBut that's not related to the exception we are seeing.              n        n    n"},{"commnet_id":"comment-73445","commnet_date":"2015-11-09T16:15:28-0800","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Gail Badnern added a comment  - 09\/Nov\/2015 16:15 PM     - edited  n        n        Carlo de Wolf I am not able to reproduce a failure for org.jboss.as.ee.beanvalidation.LazyValidatorFactoryTestCase.testSpecificProviderCanBeConfiguredInValidationXml.nnIn the debugger, I see that this is the class that is being loaded successfully: \r\nnorg.hibernate.validator.internal.engine.valuehandling.JavaFXPropertyValueUnwrapper n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Gail Badnern added a comment  - 09\/Nov\/2015 16:15 PM     - edited                     Carlo de Wolf  I am not able to reproduce a failure for  org.jboss.as.ee.beanvalidation.LazyValidatorFactoryTestCase.testSpecificProviderCanBeConfiguredInValidationXml . nn In the debugger, I see that this is the class that is being loaded successfully:  n org.hibernate.validator.internal.engine.valuehandling.JavaFXPropertyValueUnwrapper               n        n    n"},{"commnet_id":"comment-73469","commnet_date":"2015-11-11T01:02:32-0800","commnet_user":"Carlo de Wolf","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Carlo de Wolfn added a comment  - 11\/Nov\/2015 01:02 AM     - edited  n        n        It only showed in this specific build: https:\/\/github.com\/jbossas\/jboss-eap7\/pull\/13#issuecomment-154381913nnIt can only be reproduced (\/introduced) by explicitly putting Hibernate Validator in a broken state.nnIt is simply (very) bad practice to eat away exceptions.  n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Carlo de Wolfn added a comment  - 11\/Nov\/2015 01:02 AM     - edited                    It only showed in this specific build:  https:\/\/github.com\/jbossas\/jboss-eap7\/pull\/13#issuecomment-154381913  nn It can only be reproduced (\/introduced) by explicitly putting Hibernate Validator in a broken state. nn It is simply (very) bad practice to eat away exceptions.                n        n    n"},{"commnet_id":"comment-73472","commnet_date":"2015-11-11T02:58:06-0800","commnet_user":"Hardy Ferentschik","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Hardy Ferentschikn added a comment  - 11\/Nov\/2015 02:58 AM    n        n        Carlo de Wolf:nnnhttps:\/\/github.com\/hibernate\/hibernate-validator\/blob\/5.2.2.Final\/engine\/src\/main\/java\/org\/hibernate\/validator\/internal\/util\/privilegedactions\/LoadClass.java#L75 eats away the original exceptionnnTo be fair, the stack trace points to line 84 and the original cause is passed along in this case:nnnrncatch  ( ClassNotFoundException e ) {rnt<span class=\"code-keyword\">throw<\/span> log.getUnableToLoadClassException( className, e );rn}rnnnnThe problem might be that the exception is then caught and re-wrapped ConfigurationImpl line 138, but even there the original cause is preserved. nnWhether we should keep the original cause for line 75 of LoadClass as well and whether we should try to produce a better exception in ConfigurationImpl is a different question, but hardly related to the actual test failure.nnnIt can only be reproduced (\/introduced) by explicitly putting Hibernate Validator in a broken state.nWhat do you mean with putting Hibernate Validator in a broken state?nnnIt is simply (very) bad practice to eat away exceptionsnTrue, except it actually always keeps the original exception cause. It might be a problem how the overall exception is then reported and that is partly related to JBoss Logging and what it does with exceptions passed along using @Cause. n    n    n        n            Show  n            n                        n    n    n    n                nn       Hardy Ferentschikn added a comment  - 11\/Nov\/2015 02:58 AM                       Carlo de Wolf : nn n  https:\/\/github.com\/hibernate\/hibernate-validator\/blob\/5.2.2.Final\/engine\/src\/main\/java\/org\/hibernate\/validator\/internal\/util\/privilegedactions\/LoadClass.java#L75  eats away the original exception  nn To be fair, the stack trace points to line  84  and the original cause is passed along in this case: nn  n rn catch  ( ClassNotFoundException e ) {rnt throw  log.getUnableToLoadClassException( className, e );rn}rn n  nn The problem might be that the exception is then caught and re-wrapped  ConfigurationImpl  line  138 , but even there the original cause is preserved.  nn Whether we should keep the original cause for line 75 of  LoadClass  as well and whether we should try to produce a better exception in  ConfigurationImpl  is a different question, but hardly related to the actual test failure. nn n It can only be reproduced (\/introduced) by explicitly putting Hibernate Validator in a broken state.  n What do you mean with putting Hibernate Validator in a broken state? nn n It is simply (very) bad practice to eat away exceptions  n True, except it actually always keeps the original exception cause. It might be a problem how the overall exception is then reported and that is partly related to JBoss Logging and what it does with exceptions passed along using  @Cause .              n        n    n"},{"commnet_id":"comment-73473","commnet_date":"2015-11-11T03:00:53-0800","commnet_user":"Hardy Ferentschik","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Hardy Ferentschikn added a comment  - 11\/Nov\/2015 03:00 AM    n        n        Btw, I am not saying that we should not improve on the error handling. Looking at the referenced pull request. n    n    n        n            Show  n            n                        n    n    n    n                nn       Hardy Ferentschikn added a comment  - 11\/Nov\/2015 03:00 AM                      Btw, I am not saying that we should not improve on the error handling. Looking at the referenced pull request.              n        n    n"}]}},{"HHH-10258":{"info":{"issue_title":"Performance improvement in check to determine if ImmutableEntityEntry should be reused","issue_key":"HHH-10258","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Rejected","issue_fix_version":"5.0.4","issue_component":"5.0.4","issue_labels":"5.0.4","issue_description":"Changing order of tests to determine if cached ImmutableEntityEntry should be reused reduces CPU load when ImmutableEntities are loaded into 2lc","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10258?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-73592","commnet_date":"2015-11-18T11:23:15-0800","commnet_user":"John O&#39;Hara","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       John O&#39;Haran added a comment  - 18\/Nov\/2015 11:23 AM    n        n        Superseded by https:\/\/hibernate.atlassian.net\/browse\/HHH-10289  n    n    n        n            Show  n            n                        n    n    n    n                nn       John O&#39;Haran added a comment  - 18\/Nov\/2015 11:23 AM                      Superseded by  https:\/\/hibernate.atlassian.net\/browse\/HHH-10289                n        n    n"}]}},{"HHH-10253":{"info":{"issue_title":"Update CallbackRegistry to track JPA callbacks by entity-name, not Class","issue_key":"HHH-10253","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.0.0.Final","issue_component":"5.0.0.Final","issue_labels":"5.0.0.Final","issue_description":"See                                                          HHH-8775                                                              Closed                 for the backstory","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10253?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-73359","commnet_date":"2015-11-06T08:04:58-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 06\/Nov\/2015 08:04 AM    n        n        Re-scheduled for part of the work in jandex-binding.  The reason being that really this needs the unified xsd to be able to apply different groups of callbacks to entities using the same class and\/or dynamic entities. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 06\/Nov\/2015 08:04 AM                      Re-scheduled for part of the work in jandex-binding.  The reason being that really this needs the unified xsd to be able to apply different groups of callbacks to entities using the same class and\/or dynamic entities.              n        n    n"}]}},{"HSEARCH-2029":{"info":{"issue_title":"Hibernate Search does not reuse JavaReflectionManager from Hibernate.","issue_key":"HSEARCH-2029","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.5.0.Final","issue_component":"5.5.0.Final","issue_labels":"5.5.0.Final","issue_description":"The code in the method SearchConfigurationFromHibernateCore#getReflectionManager() was written for the old Hibernate and does not work anymore with Hibernate 5. The ConfigurationService class from Hibernate does not have the method \"getReflectionManager\". And therefore the method SearchConfigurationFromHibernateCore#getReflectionManager() falls back to create its own instance of JavaReflectionManager. This leads to higher memory consumption.  I have prepared a pull request for this issue. But merging the pull request breaks the WildFly integration tests with following message:     Caused by: java.lang.Exception: {\"WFLYCTL0080: Failed services\"  =&gt; {\"jboss.persistenceunit.\\\" MemberRegistrationIT.war#primary\\\"\" =&gt; \" org.jboss.msc.service.StartException in service jboss.persistenceunit.\\\"MemberRegistrationIT.war#primary\\\" : java.lang.LinkageError: loader constraint violation: when resolving interface  method \\\"org.hibernate.boot.spi.MetadataBuildingOptions.getReflectionManager()Lorg\/hibernate\/annotations\/common\/reflection\/ReflectionManager;\\\"  the class loader (instance of org\/jboss\/modules\/ModuleClassLoader) of the current class, org\/hibernate\/search\/cfg\/impl\/SearchConfigurationFromHibernateCore, and the class loader (instance of org\/jboss\/modules\/ModuleClassLoader) for  the method's defining class, org\/hibernate\/boot\/spi\/MetadataBuildingOptions, have different Class  objects for  the type org\/hibernate\/annotations\/common\/reflection\/ReflectionManager used in the signature     Caused by: java.lang.LinkageError: loader constraint violation: when resolving interface  method \\\"org.hibernate.boot.spi.MetadataBuildingOptions.getReflectionManager()Lorg\/hibernate\/annotations\/common\/reflection\/ReflectionManager;\\\"  the class loader (instance of org\/jboss\/modules\/ModuleClassLoader) of the current class, org\/hibernate\/search\/cfg\/impl\/SearchConfigurationFromHibernateCore, and the class loader (instance of org\/jboss\/modules\/ModuleClassLoader) for  the method's defining class, org\/hibernate\/boot\/spi\/MetadataBuildingOptions, have different Class  objects for  the type org\/hibernate\/annotations\/common\/reflection\/ReflectionManager used in the signature\u201d}}     To fix this error the definition of the Hibernate module in WildFly must be changed to export the \"org.hibernate.commons-annotations\" module (s. attached patch for details).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2029?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-77341","commnet_date":"2016-04-27T12:53:41-0700","commnet_user":"Mincong HUANG","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Mincong HUANGn added a comment  - 27\/Apr\/2016 12:53 PM    n        n        The Hibernate module is located at nn$WILDFLY_HOME\/modules\/system\/layers\/base\/org\/hibernate\/main\/module.xml n    n    n        n            Show  n            n                        n    n    n    n                nn       Mincong HUANGn added a comment  - 27\/Apr\/2016 12:53 PM                      The Hibernate module is located at  nn $WILDFLY_HOME\/modules\/system\/layers\/base\/org\/hibernate\/main\/module.xml              n        n    n"}]}},{"HHH-10248":{"info":{"issue_title":"map removed TransactionFactory classes","issue_key":"HHH-10248","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.3","issue_component":"5.0.3","issue_labels":"5.0.3","issue_description":"From dev email discussion:   Its not just org.hibernate.transaction.CMTTransactionFactory that was removed; all of the TransactionFactory classes were removed.  Actually I think we should add them as resolvable names:   \torg.hibernate.transaction.CMTTransactionFactory -&gt; org.hibernate.resource.transaction.backend.jta.internal.JtaTransactionCoordinatorBuilderImpl \torg.hibernate.transaction.JTATransactionFactory -&gt; org.hibernate.resource.transaction.backend.jta.internal.JtaTransactionCoordinatorBuilderImpl \torg.hibernate.transaction.JDBCTransactionFactory -&gt; org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl    Add a Jira if you'd like to see them mapped.  Please do map the removed transaction factory classes.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10248?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10239":{"info":{"issue_title":"Allow insert statements for polymorphic entities","issue_key":"HHH-10239","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"hibernate-core","issue_description":"As the documentation says, insert statements are non-polymorphic. As discussed on IRC, there is no specific reason for this restriction, it just wasn't requested by anyone yet.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10239?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10227":{"info":{"issue_title":"Not possible to add a where clause to a query that check if a tuple is in a tuple list :parameter.","issue_key":"HHH-10227","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Critical","issue_affects_version":"Unresolved","issue_fix_version":"4.1.1","issue_component":"4.1.1","issue_labels":"4.1.1","issue_description":"After some internet search without finding any answer, I think this functionality doesn't exist in any Hibernate version but can be really useful. The code below will fail with \"java.sql.SQLSyntaxErrorException: ORA-00920: op\u00e9rateur relationnel non valide\" when executed on Oracle.\r\n So, it doesn't seem possible to add a where clause to a query that check if a tuple is in a tuple list parameter.  monospaced text\r\n String queryTest = \"select customer from CustomerEntity customer where (customer.fistname, customer.lastname) in (:pairsList)\";\r\n List&lt;Object[]&gt; values = new ArrayList&lt;&gt;();\r\n values.add(new Object[] {\"firstname1\", \"lastname1\"} );\r\n values.add(new Object[] {\"firstname2\", \"lastname2\"} );\r\n Query q = em.createQuery(queryTest);\r\n q.setParameter(\"pairsList\", values);\r\n return q.getResultList();\r\n monospaced text","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10227?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10226":{"info":{"issue_title":"Not possible to add a where clause to a query that check if a tuple is in a tuple list :parameter","issue_key":"HHH-10226","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Critical","issue_affects_version":"Rejected","issue_fix_version":"4.1.1","issue_component":"4.1.1","issue_labels":"4.1.1","issue_description":"After some internet search without finding any answer, I think this functionality doesn't exist in any Hibernate version but can be really useful. The code below will fail with \"java.sql.SQLSyntaxErrorException: ORA-00920: op\u00e9rateur relationnel non valide\" when executed on Oracle.  So, it doesn't seem possible to add a where clause to a query that check if a tuple is in a tuple list parameter.  {{\t  String queryTest = \"select customer from CustomerEntity customer where (customer.fistname, customer.lastname) in (:pairsList)\";      List&lt;Object[]&gt; values = new ArrayList&lt;&gt;();      values.add(new Object[] {\"firstname1\", \"lastname1\"} );\r\n     values.add(new Object[] {\"firstname2\", \"lastname2\"} );      Query q = em.createQuery(queryTest);      q.setParameter(\"pairsList\", values);      return q.getResultList();}}","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10226?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-71265","commnet_date":"2015-10-27T06:53:31-0700","commnet_user":"Yves-Ma. Laine","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yves-Ma. Lainen added a comment  - 27\/Oct\/2015 06:53 AM    n        n        Not really close, just did a mistake...  n    n    n        n            Show  n            n                        n    n    n    n                nn       Yves-Ma. Lainen added a comment  - 27\/Oct\/2015 06:53 AM                      Not really close, just did a mistake...               n        n    n"}]}},{"HHH-10224":{"info":{"issue_title":"Hibernate Intersystems Cache Dialect","issue_key":"HHH-10224","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.0.3 ,                                            4.3.12 ,                                            5.1.0 ,                                            6.0.0-legacy (disregard)","issue_component":"5.0.3 ,                                            4.3.12 ,                                            5.1.0 ,                                            6.0.0-legacy (disregard)","issue_labels":"5.0.3","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10224?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-71241","commnet_date":"2015-10-26T12:38:05-0700","commnet_user":"Dmitry Umansky","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Dmitry Umanskyn added a comment  - 26\/Oct\/2015 12:38 PM     - edited  n        n        The task is unassigned.  I will provide necessary files for new Dialect when work is completed but do not see how I can change assignment. n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Dmitry Umanskyn added a comment  - 26\/Oct\/2015 12:38 PM     - edited                    The task is unassigned.  I will provide necessary files for new Dialect when work is completed but do not see how I can change assignment.              n        n    n"},{"commnet_id":"comment-75966","commnet_date":"2016-03-15T12:37:52-0700","commnet_user":"Marcio Jota Coelho","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Marcio Jota Coelhon added a comment  - 15\/Mar\/2016 12:37 PM    n        n        Hello . I'm moving my application to run in wildfly 10. I found an error which I believe is due to very old version of dialect. I use JavaEE 7 with Intersystems Cache. Currently my application is set up with the dialect \" org.hibernate.dialect.Cache71Dialect \" and this occurs the following error:\r\nnhttp:\/\/pastebin.com\/raw\/2xDM5aJq n    n    n        n            Show  n            n                        n    n    n    n                nn       Marcio Jota Coelhon added a comment  - 15\/Mar\/2016 12:37 PM                      Hello . I'm moving my application to run in wildfly 10. I found an error which I believe is due to very old version of dialect. I use JavaEE 7 with Intersystems Cache. Currently my application is set up with the dialect \" org.hibernate.dialect.Cache71Dialect \" and this occurs the following error: n http:\/\/pastebin.com\/raw\/2xDM5aJq               n        n    n"}]}},{"OGM-927":{"info":{"issue_title":"Native CLI queries don&#39;t support logical operator","issue_key":"OGM-927","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.Beta1","issue_labels":"5.0.0.Beta1","issue_description":"Example:  db.Order.find( { $or: [ { 'foo' : true  }, { 'bar' : '42' } ] } )","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-927?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2025":{"info":{"issue_title":"remove OpenBitSet from documentation","issue_key":"HSEARCH-2025","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.5.0.Final","issue_component":"5.5.0.Final","issue_labels":"5.5.0.Final","issue_description":"OpenBitSet was removed from Lucene 5.0 as noted in LUCENE-6010, but the class is still used in the documentation:  Example 5.21. Defining and implementing a Filter  Please migrate the example in the documentation to the current Lucene API.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2025?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-71182","commnet_date":"2015-10-24T13:01:49-0700","commnet_user":"Matthew D. Frederes","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Matthew D. Frederesn added a comment  - 24\/Oct\/2015 13:01 PM    n        n        It looks like LongBitSet would be the closest match to this class.nnAlso, the latest Lucene API has updated the signature of the getDocIdSet method:nnnrnpublic  DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs)rnn n    n    n        n            Show  n            n                        n    n    n    n                nn       Matthew D. Frederesn added a comment  - 24\/Oct\/2015 13:01 PM                      It looks like  LongBitSet  would be the closest match to this class. nn Also, the latest Lucene API has updated the signature of the getDocIdSet method: nn  n rn public  DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs)rn n               n        n    n"},{"commnet_id":"comment-71183","commnet_date":"2015-10-24T13:05:04-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 24\/Oct\/2015 13:05 PM    n        n        Agreed, thanks for pointing it out! n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 24\/Oct\/2015 13:05 PM                      Agreed, thanks for pointing it out!              n        n    n"}]}},{"HHH-10222":{"info":{"issue_title":"AttributeConverter not applied to @ElementCollection","issue_key":"HHH-10222","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.3","issue_component":"5.0.3","issue_labels":"5.0.3","issue_description":"This is going to be duplicate of                                                          HHH-8529                                                              Closed                . It's been 2 months since I made my first comment \/ created PR. There was no reaction, so I let myself creating this issue. Also, I provided more specific example (see my second comment for details)  I suppose that people watching                                                          HHH-8529                                                              Closed                 are not active developers anymore. I kindly ask you to reopen                                                          HHH-8529                                                              Closed                .","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10222?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-72955","commnet_date":"2015-10-28T14:21:50-0700","commnet_user":"Michau0142 Sobkiewicz","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Michau0142 Sobkiewiczn added a comment  - 28\/Oct\/2015 14:21 PM    n        n        I checked that it affects 5.x. Also, created new PR, as previous was too far behind master. See https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1123. n    n    n        n            Show  n            n                        n    n    n    n                nn       Michau0142 Sobkiewiczn added a comment  - 28\/Oct\/2015 14:21 PM                      I checked that it affects 5.x. Also, created new PR, as previous was too far behind master. See  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1123 .              n        n    n"},{"commnet_id":"comment-72972","commnet_date":"2015-10-28T20:42:29-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 28\/Oct\/2015 20:42 PM    n        n        Nevermind, I see you did that already  n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 28\/Oct\/2015 20:42 PM                      Nevermind, I see you did that already                n        n    n"},{"commnet_id":"comment-72973","commnet_date":"2015-10-28T20:57:10-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 28\/Oct\/2015 20:57 PM    n        n        Thanks for being persistent Michal!  n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 28\/Oct\/2015 20:57 PM                      Thanks for being persistent Michal!                n        n    n"}]}},{"HHH-10216":{"info":{"issue_title":"Support Trafodion Dialect","issue_key":"HHH-10216","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.0.2","issue_component":"5.0.2","issue_labels":"5.0.2","issue_description":"Apache Trafodion (http:\/\/trafodion.incubator.apache.org) is a webscale SQL-on-Hadoop solution enabling transactional or operational workloads on Hadoop. Trafodion builds on the scalability, elasticity, and flexibility of Hadoop. Trafodion extends Hadoop to provide guaranteed transactional integrity, enabling new kinds of big data applications to run on Hadoop. With the rise of Big Data, it would be good for Hibernate to support such a highly scalable RDBMS on Hadoop.  Esgyn Corp, the main contributor of Apache Trafodion, is willing to will maintain the Trafodion dialect in Hibernate for long term.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10216?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10213":{"info":{"issue_title":"Consider caching options for SessionFactory state","issue_key":"HHH-10213","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"hibernate-core","issue_description":"A lot of state is held at the SessionFactory level which in many systems causes the size of the SessionFactory in memory to be prohibitive.  One option to help handle this would be to leverage proper caching via providers to allow overflow-to-storage, eviction, etc.  This could be an extension to the RegionFactory spi to define new Region types for these various states.    Specific states that come to mind include:  \tstate in QueryPlanCache \tvarious state in EntityPersister impls    Anything that can be rebuilt given runtime information...","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10213?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-71166","commnet_date":"2015-10-21T06:16:45-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 21\/Oct\/2015 06:16 AM    n        n        When it comes to overflow-to-storage, I'd agree to push that responsibility to RegionFactory SPIs.\r\nnBut we'd also need to consider the cost of storing &amp; reloading such things vs. simply rebuild them: the 2nd level cache implementations would need some guidance or some weights to figure if it's better to evict things vs hitting disks.nnDo you have precise data of what kind of things are making it \"prohibitive\"? We could also look at slimming the size of certain data structures, if we know which ones need special attention. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 21\/Oct\/2015 06:16 AM                      When it comes to  overflow-to-storage , I'd agree to push that responsibility to RegionFactory SPIs. nBut we'd also need to consider the cost of storing &amp; reloading such things vs. simply rebuild them: the 2nd level cache implementations would need some guidance or some weights to figure if it's better to evict things vs hitting disks. nn Do you have precise data of what kind of things are making it \"prohibitive\"? We could also look at slimming the size of certain data structures, if we know which ones need special attention.              n        n    n"},{"commnet_id":"comment-71168","commnet_date":"2015-10-21T06:36:27-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 21\/Oct\/2015 06:36 AM    n        n        Well as I said in my email, I have no hard numbers.  But complaints about the in-memory size of the SessionFactory have been around forever.  nnThat said, I do eye up suspiciously stuff like the pre-building of SQL statements, Loader instances, etc that occurs within the persister.  One option is to build this stuff on first access\/use, which I think helps.  The cost of reloading versus rebuilding here depends greatly on the SQL being generated which in turn depends greatly on the complexity of the entity.nnThe other use case I think of is the QueryPlanCache and our very narrow internal caching implementation there.  In fact this is the one that really got me thinking it would be best to store in a \"real\" cache to leverage the caches overflow, eviction, etc capabilities.  In fact here, in our internal structure, we actually hard code an eviction policy (yes we allow configuring the parameters of that policy, but the policy itself it hard-coded).  If a lookup fails then we simply rebuild it, as you mention.  So nothing really changes there.  Except the flexibility to more easily (in theory) apply other policies. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 21\/Oct\/2015 06:36 AM                      Well as I said in my email, I have no hard numbers.  But complaints about the in-memory size of the SessionFactory have been around forever.   nn That said, I do eye up suspiciously stuff like the pre-building of SQL statements, Loader instances, etc that occurs within the persister.  One option is to build this stuff on first access\/use, which I think helps.  The cost of reloading versus rebuilding here depends greatly on the SQL being generated which in turn depends greatly on the complexity of the entity. nn The other use case I think of is the QueryPlanCache and our very narrow internal caching implementation there.  In fact this is the one that really got me thinking it would be best to store in a \"real\" cache to leverage the caches overflow, eviction, etc capabilities.  In fact here, in our internal structure, we actually hard code an eviction policy (yes we allow configuring the parameters of that policy, but the policy itself it hard-coded).  If a lookup fails then we simply rebuild it, as you mention.  So nothing really changes there.   Except  the flexibility to more easily (in theory) apply other policies.              n        n    n"}]}},{"HHH-10211":{"info":{"issue_title":"Create Postgis9Dialect, Postgis92Dialect and Postgis94Dialect ","issue_key":"HHH-10211","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.2","issue_component":"5.0.2","issue_labels":"5.0.2","issue_description":"PostgisDialect extends PostgreSQL82Dialect with Postgis specific datatypes but PostgreSQL82Dialect has been extended with PostgreSQL9Dialect which is extended by PostgreSQL92Dialect extended by PostgreSQL94Dialect.  These PostgreSQL9*Dialect classes adds features from newer Postgresql versions.  At the moment one have to choose between using PostgisDialect to get Postgis features and a PostgreSQL9*Dialect to get access to the latest Postgresql features.  I suggest to create a PostgisDialect per PostgreSQL9*Dialect to get both sets of added features.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10211?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10202":{"info":{"issue_title":"Delay resolving TypeScopeImpl#factory after deserialization until resolveFactory() is called.","issue_key":"HHH-10202","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.4","issue_labels":"5.0.4","issue_description":"The SessionFactoryImpl constructor builds the cache entity regions before registering itself using SessionFactoryRegistry#INSTANCE#addSessionFactory. This can cause problems if the cache is a clustered cache and entities with a composite ID are replicated.  IIUC, when an entity region is built by InfinispanRegionFactory#buildEntityRegion for a clustered, replicated cache, then the entities are actually replicated in the process of building the new EntityRegion.   If the entities being replicated to the new EntityRegion have a composite ID and the cache key contains the ID type &#91;1&#93; , then, while deserializing the cache key, Hibernate will attempt to resolve the ComponentType in the cache key. Since ComponentType which has a field, typeScope, that has a reference to SessionFactoryImpl, SessionFactoryImpl#readResolve will be called. Because the SessionFactoryImpl has not been added to SessionFactoryRegistry.INSTANCE yet, the SessionFactoryImpl cannot be found. As a result, java.io.InvalidObjectException is thrown.  ComponentType#typeSope is not actually used and could be removed. This would fix replication of entities with composite keys, unless the composite key contains a *-to-one association. This is  because EntityType also has a field, typeScope, that has a reference to SessionFactoryImpl,   &#91;1&#93;  CacheKey instances in 4.2, 4.3 and cache keys generated by DefaultCacheKeysFactory#createEntityKey in 5.0 contain the ID type.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10202?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-71137","commnet_date":"2015-10-19T17:55:06-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 19\/Oct\/2015 17:55 PM    n        n        Is there any way to indicate that the SessionFactoryImpl that should be resolved is the one that is actually building the EntityRegion? Is there any callback that could do that resolution?nnIf not, a possible fix is to register the SessionFactoryImpl before building entity regions. Doing so would allow looking up a SessionFactory that may not be completely built yet. I'm not sure if that could cause problems.nnAnother possibility would be for org.hibernate.cache.infinispan.entity.EntityRegionImpl to implement SessionFactoryObserver.  If so, it could be added to SessionFactoryImpl#observer and replication could be deferred to {EntityRegionImpl#sessionFactoryCreated. I'm not sure if Infinispan can build the entity region without replicating though. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 19\/Oct\/2015 17:55 PM                      Is there any way to indicate that the SessionFactoryImpl that should be resolved is the one that is actually building the EntityRegion? Is there any callback that could do that resolution? nn If not, a possible fix is to register the SessionFactoryImpl before building entity regions. Doing so would allow looking up a SessionFactory that may not be completely built yet. I'm not sure if that could cause problems. nn Another possibility would be for  org.hibernate.cache.infinispan.entity.EntityRegionImpl  to implement SessionFactoryObserver.  If so, it could be added to  SessionFactoryImpl#observer  and replication could be deferred to { EntityRegionImpl#sessionFactoryCreated . I'm not sure if Infinispan can build the entity region without replicating though.              n        n    n"},{"commnet_id":"comment-73249","commnet_date":"2015-11-02T21:35:04-0800","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 02\/Nov\/2015 21:35 PM    n        n        This issue described above can be fixed by delaying resolution of TypeScopeImpl#factory after deserialization until resolveFactory() is called. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 02\/Nov\/2015 21:35 PM                      This issue described above can be fixed by delaying resolution of TypeScopeImpl#factory after deserialization until resolveFactory() is called.              n        n    n"},{"commnet_id":"comment-73273","commnet_date":"2015-11-03T17:25:42-0800","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 03\/Nov\/2015 17:25 PM    n        n        Fixed in master and 5.0 branches. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 03\/Nov\/2015 17:25 PM                      Fixed in master and 5.0 branches.              n        n    n"}]}},{"HHH-10198":{"info":{"issue_title":"Consider design for annotation for custom IdentifierGenerator declarations","issue_key":"HHH-10198","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"jandex-binding","issue_labels":"jandex-binding","issue_description":"Consider the pattern used for org.hibernate.annotations.ValueGenerationType.  In some ways this is an extension to GenericGenerator.  One option is to define this annotation with the intention that it be attached to the custom org.hibernate.id.IdentifierGenerator implementation class for discovery and some basic configuration.  E.g.     @ThisNewAnnotation  public  class MyCustomGenerator implements  IdentifierGenerator {      ...  }     Like we did with ValueGenerationType, I would love for this to express how the implementation should be configured from annotation values.  Not sure exactly how this would look, but something like:      \/**   * Annotation to identify IdentifierGenerator implementations   *\/  public  @interface  GeneratorImplementation {      \/\/ this  allows non-indexed (Jandex) resolutions.  Do we want\/need it?       \/\/ The Jndex-y option is to simply find instances of this  annotation       \/\/ and look it their targets       Class [] generatorImpls();  }    \/**   * Extended IdentifierGenerator contract to account for  annotation consumption  *\/  public  interface  AnnotationBasedIdentifierGenerator&lt;A extends  Annotation,T extends  Serializable&gt;          extends  IdentifierGenerator {      \/**       * Consume the annotation (configuration)       *\/      void initialize(A ann);        @Override      T generate(SessionImplementor session, Object  object);  }         \/**   * My custom generator annotation   *\/  public  interface  @UuidGenerator {      enum  Strategy( RANDOM, RFC_4122 )        String  name();      Strategy strategy() default  RFC_4122;  }    @GeneratorImplementation  public  class UuidIdentifierGenerator           implements  AnnotationBasedIdentifierGenerator&lt;UuidGenerator,UUID&gt; {        private  String  generatorName;      private  UUIDGenerationStrategy uuidGenStrategy;        @Override      public  void initialize(UuidGenerator ann) {          this .generatorName = ann.name();          this .uuidGenStrategy = decodeStrategy( ann.strategy() );      }        private  UUIDGenerationStrategy decodeStrategy(Strategy strategy) {          switch ( strategy ) {              ...          }      }        @Override      UUID generate(SessionImplementor session, Object  object) {          return  uuidGenStrategy.generateUUID( session );      }  }    public  class MyEntity {      @GeneratedValue      @UuidGenerator(strategy=RANDOM)      private  UUID id;        ...  }","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10198?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-71062","commnet_date":"2015-10-16T00:36:08-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 16\/Oct\/2015 00:36 AM    n        n        Emmanuel Bernard, Gunnar Morling Thoughts? n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 16\/Oct\/2015 00:36 AM                       Emmanuel Bernard ,  Gunnar Morling  Thoughts?              n        n    n"},{"commnet_id":"comment-71261","commnet_date":"2015-10-27T06:12:57-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 27\/Oct\/2015 06:12 AM    n        n        Looks aligned with what we discussed. +1 n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 27\/Oct\/2015 06:12 AM                      Looks aligned with what we discussed. +1              n        n    n"},{"commnet_id":"comment-73014","commnet_date":"2015-10-29T03:07:38-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 29\/Oct\/2015 03:07 AM    n        n        Maybe it could be even based on the new scheme around ValueGenerationType, i.e. considering id generation just as a special case of the more generic value generation engine? Just throwing out the idea, not sure whether it's fully mappable in the end (e.g. the IdentifierGenerator contract may also be invoked for collections, whereas ValueGenerator expects an entity). n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 29\/Oct\/2015 03:07 AM                      Maybe it could be even based on the new scheme around  ValueGenerationType , i.e. considering id generation just as a special case of the more generic value generation engine? Just throwing out the idea, not sure whether it's fully mappable in the end (e.g. the  IdentifierGenerator  contract may also be invoked for collections, whereas  ValueGenerator  expects an entity).              n        n    n"}]}},{"OGM-926":{"info":{"issue_title":"Better error message for when the user uses an aggregate function in JP-QL","issue_key":"OGM-926","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"core,                                            query","issue_description":"In MongoDB, an IndexOutOfBound is thrown:   java.lang.IndexOutOfBoundsException: Index: 0  with       \t@Test  \tpublic  void testAVG() throws  Exception {  \t\tLong  result = session.createQuery( \"SELECT AVG(h.id) from Hypothesis h\"   ).uniqueResult();  \t\tassertThat( result ).onProperty( \"id\"  ).containsOnly( \"14\" , \"15\" , \"17\"  );  \t\tSystem .out.println( result );  \t}       Sometimes no error is thrown but the query does not return the expected result, like:    String  countQuery = \"SELECT COUNT(t.id) FROM \"  + shortClassName + \" t \" ;    TypedQuery&lt;Long &gt; query = __entityManager.createQuery(countQuery, Long .class);    Long  count = query.getSingleResult();  ...","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-926?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10190":{"info":{"issue_title":"org.hibernate.engine.spi.ActionQueue#executeActions() optimization","issue_key":"HHH-10190","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"5.0.2","issue_component":"5.0.2","issue_labels":"5.0.2","issue_description":"public  void executeActions() throws  HibernateException {  \t\tif  ( !unresolvedInsertions.isEmpty() ) {  \t\t\tthrow  new  IllegalStateException( \"About to execute actions, but there are unresolved entity insert actions.\"  );  \t\t}    \t\tfor  ( ExecutableList&lt;?&gt; l : executableLists ) {  \t\t\texecuteActions( l );  \t\t}  \t}    calls     executeActions(l)      without checking if the     list l     is empty causing the execution of unnecessary operations.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10190?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1021":{"info":{"issue_title":"Monitor contention at ValidatorFactoryImpl","issue_key":"HV-1021","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.2.0.Final ,                                            5.2.1.Final ,                                            5.2.2.Final","issue_component":"5.2.0.Final ,                                            5.2.1.Final ,                                            5.2.2.Final","issue_labels":"5.2.0.Final","issue_description":"ResourceBundleMessageInterpolator.class.getClassLoader().loadClass( \"javax.el.ExpressionFactory\"  );   causes synchronization. See screenshot.  It's better to cache the result, beacause the result is static. I create a PR.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1021?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-71042","commnet_date":"2015-10-14T01:20:37-0700","commnet_user":"Lucas POUZAC","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Lucas POUZACn added a comment  - 14\/Oct\/2015 01:20 AM    n        n        PR #440 n    n    n        n            Show  n            n                        n    n    n    n                nn       Lucas POUZACn added a comment  - 14\/Oct\/2015 01:20 AM                       PR #440               n        n    n"},{"commnet_id":"comment-71063","commnet_date":"2015-10-16T04:04:33-0700","commnet_user":"Hardy Ferentschik","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Hardy Ferentschikn added a comment  - 16\/Oct\/2015 04:04 AM    n        n        Thanks Lucas POUZAC. OOI, what is the context in which you found this contention? Did you specifically profile Validator or did you just come across this? n    n    n        n            Show  n            n                        n    n    n    n                nn       Hardy Ferentschikn added a comment  - 16\/Oct\/2015 04:04 AM                      Thanks  Lucas POUZAC . OOI, what is the context in which you found this contention? Did you specifically profile Validator or did you just come across this?              n        n    n"}]}},{"HHH-10178":{"info":{"issue_title":"Make JTA a provided (non-transitive) dependency","issue_key":"HHH-10178","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.4","issue_labels":"5.0.4","issue_description":"Due to the proliferation of JTA artifacts under various GAVs, Hibernate exporting one as a transitive dependency can cause problems in environments where another GAV is used.  This should be marked as provided to make sure people don't get it on classpath without explicitly asking for it.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10178?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-73305","commnet_date":"2015-11-04T13:30:01-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 04\/Nov\/2015 13:30 PM    n        n        Brett Meyer It is in the real feature as of now because we expose it transitively from hibernate-core.  That's what Sanne wants to change though.  So as far as hibernate-osgi, the choices would be to either:nntadd JTA to the test dependenciesntadd JTA to the hibernate-osgi transitively dependenciesntadd JTA to the hibernate-osgi Karaf feature file.nnnnNot sure which is \"best\". n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 04\/Nov\/2015 13:30 PM                       Brett Meyer  It is in the real feature as of now because we expose it transitively from hibernate-core.  That's what Sanne wants to change though.  So as far as hibernate-osgi, the choices would be to either: n nt add JTA to the test dependencies nt add JTA to the hibernate-osgi transitively dependencies nt add JTA to the hibernate-osgi Karaf feature file. n nnn Not sure which is \"best\".              n        n    n"},{"commnet_id":"comment-73546","commnet_date":"2015-11-17T07:29:16-0800","commnet_user":"Brett Meyer","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Brett Meyern added a comment  - 17\/Nov\/2015 07:29 AM    n        n        Hey Steve Ebersole, sorry, didn't see this before now.  I'd argue #3 should be the case, if it's not already &#8211; most Karaf\/Fuse use cases will involve JTA anyway.  Now, how that gets there is up to you.  #1 would be fine, but if it needs to be #2 in order to generate #3, that's fine as well. n    n    n        n            Show  n            n                        n    n    n    n                nn       Brett Meyern added a comment  - 17\/Nov\/2015 07:29 AM                      Hey  Steve Ebersole , sorry, didn't see this before now.  I'd argue #3 should be the case, if it's not already &#8211; most Karaf\/Fuse use cases will involve JTA anyway.  Now, how that gets there is up to you.  #1 would be fine, but if it needs to be #2 in order to generate #3, that's fine as well.              n        n    n"},{"commnet_id":"comment-73547","commnet_date":"2015-11-17T08:21:15-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 17\/Nov\/2015 08:21 AM    n        n        (2) was the route I ended up taking.  (2) automatically feeds (3).  n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 17\/Nov\/2015 08:21 AM                      (2) was the route I ended up taking.  (2) automatically feeds (3).               n        n    n"},{"commnet_id":"comment-74394","commnet_date":"2015-12-30T00:45:40-0800","commnet_user":"Mau00EBl Lavault","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Mau00EBl Lavaultn added a comment  - 30\/Dec\/2015 00:45 AM    n        n        Does this mean we have to provide JTA event if we don't need it ? We just updated to hibernate 5.0.6 and now it complains that JTA is missing, which is weird because we don't use it at all (we use hibernate through spring-transaction\/spring-data-jpa) n    n    n        n            Show  n            n                        n    n    n    n                nn       Mau00EBl Lavaultn added a comment  - 30\/Dec\/2015 00:45 AM                      Does this mean we have to provide JTA event if we don't need it ? We just updated to hibernate 5.0.6 and now it complains that JTA is missing, which is weird because we don't use it at all (we use hibernate through spring-transaction\/spring-data-jpa)              n        n    n"},{"commnet_id":"comment-74568","commnet_date":"2016-01-08T06:59:31-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 08\/Jan\/2016 06:59 AM    n        n        Hibernate exposes javax.transaction.Synchronization from a public API.  Whether you use JTA or not, you can register a JTA Synchronization for transaction callbacks.  So the JTA spec jar is a non-optional dependency.  Allowing this to become non-transitive was a mistake which will be reverted: see n    n                n        n            n            HHH-10307n        n                                                    Closed n             n. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 08\/Jan\/2016 06:59 AM                      Hibernate exposes  javax.transaction.Synchronization  from a public API.  Whether you use JTA or not, you can register a JTA Synchronization for transaction callbacks.  So the JTA spec jar is a non-optional dependency.  Allowing this to become non-transitive was a mistake which will be reverted: see n     n                 n         n             n            HHH-10307n         n                                                     Closed n             n.              n        n    n"}]}},{"HV-1020":{"info":{"issue_title":"ConstraintValidatorContext should allow to attach arbitrary context information to a ConstrainViolation","issue_key":"HV-1020","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.3.0.Alpha1","issue_labels":"5.3.0.Alpha1","issue_description":"HibernateConstraintValidatorContext should allow as a provider specific functionality to attach additional context information to a ConstraintViolation. See also                                                          BVAL-490                                                              Open                .","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1020?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-71040","commnet_date":"2015-10-13T15:24:45-0700","commnet_user":"Julien May","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Julien Mayn added a comment  - 13\/Oct\/2015 15:24 PM    n        n        Updated https:\/\/github.com\/hibernate\/hibernate-validator\/pull\/439nnPlease let me know if there are some other things left.  n    n    n        n            Show  n            n                        n    n    n    n                nn       Julien Mayn added a comment  - 13\/Oct\/2015 15:24 PM                      Updated  https:\/\/github.com\/hibernate\/hibernate-validator\/pull\/439  nn Please let me know if there are some other things left.               n        n    n"}]}},{"OGM-924":{"info":{"issue_title":"Improve CouchDB configuration paragraph","issue_key":"OGM-924","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.1","issue_labels":"5.1","issue_description":"In the paragraph related to couchdb we should add a summary box like the one in the Neo4j paragraph about the dependency to add and the provider identifier to use","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-924?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10161":{"info":{"issue_title":"Allow parameter type for null value to be specified using javax.persistence.Parameter#getParameterType()","issue_key":"HHH-10161","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.4","issue_labels":"5.0.4","issue_description":"Hibernate ignores the return value for javax.persistence.Parameter#getParameterType() when provided to javax.persistence.Query#setParameter(Parameter&lt;T&gt; param, T value).  This can cause problems for Oracle when a null value is bound for a parameter (assumed to be BINARY) that is compared with a NUMBER column, because Oracle does not allow conversion from BINARY to NUMBER. Oracle requires that the null value be bound as a type that is compatible with NUMBER. JPA provides a way to specify the type using javax.persistence.Parameter, but since Hibernate ignores the return value from javax.persistence.Parameter#getParameterType(), the query will fail because the value continues to be bound as a BINARY value.  For example, the following native query work on Oracle, but it is apparently broken:  String sql = \"SELECT * FROM schema.Tabela WHERE integerColumn = ?  OR integerColumn is null\"\r\n Query query = getEntityManager().createNativeQuery(sql, classe);\r\n Parameter p = new Parameter() {\r\n \t@Override\r\n \tpublic String getName()  {  \t\treturn null;  \t} \t@Override\r\n \tpublic Integer getPosition()  {  \t\treturn 1;  \t} \t@Override\r\n \tpublic Class getParameterType()  {  \t\treturn Integer.TYPE;  \t} };\r\n query.setParameter( p, null );\r\n query.getResultList(); \/\/ fails  A workaround is to get the get underlying org.hibernate.Query and use its API:  String sql = \"SELECT * FROM schema.Tabela WHERE integerColumn = ?\"\r\n Query query = getEntityManager().createNativeQuery(sql, classe);\r\n q.unwrap( HibernateQuery.class ).getHibernateQuery() \/\/ gets org.hibernate.Query\r\n   .setParameter( \r\n       0,                         \/\/ org.hibernate.Query parameters start at 0\r\n       null,                      \/\/ the null value\r\n       StandardBasicTypes.INTEGER \/\/ the parameter type\r\n    );\r\n query.getResultList(); \/\/ succeeds","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10161?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-73391","commnet_date":"2015-11-06T19:36:05-0800","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 06\/Nov\/2015 19:36 PM    n        n        I've created a pull request &#91;1&#93; .  If Hibernate has no information available about the parameter type when binding a null value, the pull request allows using the return value from javax.persistence.Parameter#getParameterType() when provided by javax.persistence.Query#setParameter(Parameter&lt;T&gt; param, T value),nn According to Javadoc for javax.persistenceParameter#getParameterType:nn\"Applications that use this method for Java Persistence query language queries and native queries will not be portable.\"nnAlthough not portable, it is helpful in this case when Hibernate has no information about the property type to use when binding a null value This is especially helpful when using Oracle, because Oracle throws an exception when a null is bound as BINARY (the default) that cannot be converted to the type for an intended column (e.g., a NUMBER column).nn&#91;1&#93;  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1138 n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 06\/Nov\/2015 19:36 PM                      I've created a pull request  &#91;1&#93; .  If Hibernate has no information available about the parameter type when binding a null value, the pull request allows using the return value from  javax.persistence.Parameter#getParameterType()  when provided by  javax.persistence.Query#setParameter(Parameter&lt;T&gt; param, T value) , nn  According to Javadoc for javax.persistenceParameter#getParameterType: nn \"Applications that use this method for Java Persistence query language queries and native queries will not be portable.\" nn Although not portable, it is helpful in this case when Hibernate has no information about the property type to use when binding a null value This is especially helpful when using Oracle, because Oracle throws an exception when a null is bound as BINARY (the default) that cannot be converted to the type for an intended column (e.g., a NUMBER column). nn  &#91;1&#93;   https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1138               n        n    n"},{"commnet_id":"comment-73542","commnet_date":"2015-11-16T20:47:54-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 16\/Nov\/2015 20:47 PM    n        n        Applied Gail's PR upstream n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 16\/Nov\/2015 20:47 PM                      Applied Gail's PR upstream              n        n    n"}]}},{"HSEARCH-2020":{"info":{"issue_title":"Allow to switch off index annotations","issue_key":"HSEARCH-2020","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"engine","issue_description":"It would be great to be able to switch off a single or a group of indexes at runtime. Of course consistency is not given any longer then. On the other hand I have some performance critical indexes that I currently can only switch off by a recompilation of the database layer with the annotation commented. In my use case the performance critical indexes are about logging information that can be written a lot or not at all depending on settings of the application. So in my case consistency is not a big issue. I want to get rid of index information for archived runs anyway. Alternative would be to directly use lucene and manage it myself which would not let me make use of hibernate-search - at least that is how I understand it currently.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2020?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-70873","commnet_date":"2015-10-02T03:08:56-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 02\/Oct\/2015 03:08 AM    n        n        One possible alternative which you have today is to use the programmatic configuration, an alternative for annotations.nnYou could read your own configuration file or a JVM switch and skip \/ not skip adding a @Field annotation on a specific field.nnhttp:\/\/docs.jboss.org\/hibernate\/search\/5.5\/reference\/en-US\/html_single\/#hsearch-mapping-programmaticapi n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 02\/Oct\/2015 03:08 AM                      One possible alternative which you have today is to use the programmatic configuration, an alternative for annotations. nn You could read your own configuration file or a JVM switch and skip \/ not skip adding a  @Field  annotation on a specific field. nn  http:\/\/docs.jboss.org\/hibernate\/search\/5.5\/reference\/en-US\/html_single\/#hsearch-mapping-programmaticapi               n        n    n"},{"commnet_id":"comment-70874","commnet_date":"2015-10-02T03:12:04-0700","commnet_user":"Carsten Hammer","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Carsten Hammern added a comment  - 02\/Oct\/2015 03:12 AM    n        n        Good idea! Is this suitable to switch off\/on at runtime too? n    n    n        n            Show  n            n                        n    n    n    n                nn       Carsten Hammern added a comment  - 02\/Oct\/2015 03:12 AM                      Good idea! Is this suitable to switch off\/on at runtime too?              n        n    n"},{"commnet_id":"comment-70876","commnet_date":"2015-10-02T04:42:29-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 02\/Oct\/2015 04:42 AM    n        n        Is this suitable to switch off\/on at runtime too?nNo, but at least you don't have to re-compile: your configuration code could read an environment variable, or a configuration file.nnTo switch indexing on\/off at runtime, we have the notion of EntityIndexingInterceptor; there is a very simple example here:\r\nnhttp:\/\/docs.jboss.org\/hibernate\/search\/5.5\/reference\/en-US\/html_single\/#example-search-mapping-indexinginterceptor-blognnIf you want to switch off temporarily the indexing of a whole entity (it won't work for single fields unfortunately) you could register such an interceptor and turn indexing off based on some @Transient entity property, for example you could add a boolean getIndex() method. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 02\/Oct\/2015 04:42 AM                       Is this suitable to switch off\/on at runtime too?  n No, but at least you don't have to re-compile: your configuration code could read an environment variable, or a configuration file. nn To switch indexing on\/off at runtime, we have the notion of  EntityIndexingInterceptor ; there is a very simple example here: n http:\/\/docs.jboss.org\/hibernate\/search\/5.5\/reference\/en-US\/html_single\/#example-search-mapping-indexinginterceptor-blog  nn If you want to switch off temporarily the indexing of a whole entity (it won't work for single fields unfortunately) you could register such an interceptor and turn indexing off based on some  @Transient  entity property, for example you could add a  boolean getIndex()  method.              n        n    n"},{"commnet_id":"comment-70877","commnet_date":"2015-10-02T05:03:09-0700","commnet_user":"Carsten Hammer","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Carsten Hammern added a comment  - 02\/Oct\/2015 05:03 AM    n        n        I will have a look at this, thank you very much for your suggestions. If you think about adding something to make it possible to switch off single columns index I would prefer a way where I could either switch off via a system property or programmatically  one or more columns at once. That would be great to reflect the requirements in our test environments. n    n    n        n            Show  n            n                        n    n    n    n                nn       Carsten Hammern added a comment  - 02\/Oct\/2015 05:03 AM                      I will have a look at this, thank you very much for your suggestions. If you think about adding something to make it possible to switch off single columns index I would prefer a way where I could either switch off via a system property or programmatically  one or more columns at once. That would be great to reflect the requirements in our test environments.              n        n    n"},{"commnet_id":"comment-70900","commnet_date":"2015-10-05T01:03:48-0700","commnet_user":"Carsten Hammer","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Carsten Hammern added a comment  - 05\/Oct\/2015 01:03 AM    n        n        Another remark: if possible it would be great if there was a common way to switch off search and validation (hibernate-validation) per column via a similar api call.   n    n    n        n            Show  n            n                        n    n    n    n                nn       Carsten Hammern added a comment  - 05\/Oct\/2015 01:03 AM                      Another remark: if possible it would be great if there was a common way to switch off search and validation (hibernate-validation) per column via a similar api call.                n        n    n"},{"commnet_id":"comment-70902","commnet_date":"2015-10-05T02:26:20-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 05\/Oct\/2015 02:26 AM    n        n        Just curious to try better understand your use case: in case of Hibernate Validator, would you also need to do this for performance reasons? n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 05\/Oct\/2015 02:26 AM                      Just curious to try better understand your use case: in case of Hibernate Validator, would you also need to do this for performance reasons?              n        n    n"},{"commnet_id":"comment-70904","commnet_date":"2015-10-05T03:31:55-0700","commnet_user":"Carsten Hammer","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Carsten Hammern added a comment  - 05\/Oct\/2015 03:31 AM    n        n        No, (maybe yes, but currently It seems performance impact is low enough - needs some testing though) for hibernate validator: 1)there are installations where I need to change a column to be longer than what is configured into the validator annotation. Currently I would have to recompile. Switching off check or only switch off throwing the exception would be fine. 2) there are installations upgrading from an old versions where no hibernate-validator has been used from my side and there are codeparts of customer code not really restricting the column length as required. That should better run through and put records into the database (warning is ok) even if there now is a length restriction checked with hibernate-validator. There are database dialects that require field lengths so you have to apply it even if you do not want it (think of hsql that creates a @lob annotated field to a lenght 256) and there are cases where the database table has been changed after the database has been created to be longer. n    n    n        n            Show  n            n                        n    n    n    n                nn       Carsten Hammern added a comment  - 05\/Oct\/2015 03:31 AM                      No, (maybe yes, but currently It seems performance impact is low enough - needs some testing though) for hibernate validator: 1)there are installations where I need to change a column to be longer than what is configured into the validator annotation. Currently I would have to recompile. Switching off check or only switch off throwing the exception would be fine. 2) there are installations upgrading from an old versions where no hibernate-validator has been used from my side and there are codeparts of customer code not really restricting the column length as required. That should better run through and put records into the database (warning is ok) even if there now is a length restriction checked with hibernate-validator. There are database dialects that require field lengths so you have to apply it even if you do not want it (think of hsql that creates a @lob annotated field to a lenght 256) and there are cases where the database table has been changed after the database has been created to be longer.              n        n    n"}]}},{"HSEARCH-2014":{"info":{"issue_title":"Expose size of the indexes among statistics","issue_key":"HSEARCH-2014","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.7","issue_labels":"5.7","issue_description":"It is very useful for people to be able to monitor the overall size of the index.  People could normally monitor storage space for filesystem based indexes, but it's not that simple for other index storage options so we should provide a consistent metric, to be exposed as other statistics (mbeans).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2014?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10155":{"info":{"issue_title":"ImprovedNamingStrategy functionality lost due to HHH-7078","issue_key":"HHH-10155","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.0.1","issue_component":"5.0.1","issue_labels":"5.0.1","issue_description":"HHH-7078                                                              Closed                 split NamingStrategy into Implicit and Physical classes, but neglected to correct all the descendants such as ImprovedNamingStrategy and EJB3Naming strategy. The original classes are still in the 5.0 source tree but after a long search (including StackOverflow questions along the same line), I cannot find any example of how to either use them in a different context or what replaced them  In my case I was using configuration.setNamingStrategy(ImprovedNamingStrategy.INSTANCE);  This means my existing databases created with Hibernate 4.1 have the \"improved\" format that I still need to read\/write using 5.0.1","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10155?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-78433","commnet_date":"2016-05-25T04:10:42-0700","commnet_user":"Michau0142 Kapu0142on","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Michau0142 Kapu0142onn added a comment  - 25\/May\/2016 04:10 AM    n        n        Steve Ebersole,nnI think key issue here is not simple lack of resources, but lack of back-compatibility with previous major version introduced consciously. Division of strategies was done in purpose, it's even been explained in official documentation, but what stopped you before introducing default, very simple implementation working for most simple cases at once, together with the change? nnI can agree implementing physical strategy is definitely not a rocket science. However, it makes current situation even worse, because the very core functionality of your ORM was to translate between DB and code using convention-over-configuration approach with minimal amount of boilerplate stuff. Now it is impossible, thanks to decision about introducing breaking change to well known and liked library.  n    n    n        n            Show  n            n                        n    n    n    n                nn       Michau0142 Kapu0142onn added a comment  - 25\/May\/2016 04:10 AM                       Steve Ebersole , nn I think key issue here is not simple lack of resources, but lack of back-compatibility with previous major version introduced consciously. Division of strategies was done in purpose, it's even been explained in official documentation, but what stopped you before introducing default, very simple implementation working for most simple cases at once, together with the change?  nn I can agree implementing physical strategy is definitely not a rocket science. However, it makes current situation even worse, because the very core functionality of your ORM was to translate between DB and code using convention-over-configuration approach with minimal amount of boilerplate stuff. Now it is impossible, thanks to decision about introducing breaking change to well known and liked library.               n        n    n"},{"commnet_id":"comment-78437","commnet_date":"2016-05-25T09:08:05-0700","commnet_user":"Todd Richmond","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Todd Richmondn added a comment  - 25\/May\/2016 09:08 AM    n        n        Correct - this change wasn't followed through to a useable state for anyone wanting to work with an existing 4.x database. The problem is that the original classes are still in Hibernate, but not functional and to write my own strategy, I would have to understand the internals of how Hibernate used to do name mapping for tables, columns, foreign keys... Maybe not rocket science, but it entails a long code review\/develop\/test\/debug process that is painful because I will have no idea if my mapping scheme EXACTLY matches the old one or if it will miss some special case that only show up a remote customer sitennFor someone like a Spring core developer that must support potentially millions of existing databases, I can see them having resources to deal with this. However, the rest of us are almost guaranteed to create an 80% correct solution that \"works\" most of the time until it we get a support call showing it doesn't n    n    n        n            Show  n            n                        n    n    n    n                nn       Todd Richmondn added a comment  - 25\/May\/2016 09:08 AM                      Correct - this change wasn't followed through to a useable state for anyone wanting to work with an existing 4.x database. The problem is that the original classes are still in Hibernate, but not functional and to write my own strategy, I would have to understand the internals of how Hibernate used to do name mapping for tables, columns, foreign keys... Maybe not rocket science, but it entails a long code review\/develop\/test\/debug process that is painful because I will have no idea if my mapping scheme EXACTLY matches the old one or if it will miss some special case that only show up a remote customer site nn For someone like a Spring core developer that must support potentially millions of existing databases, I can see them having resources to deal with this. However, the rest of us are almost guaranteed to create an 80% correct solution that \"works\" most of the time until it we get a support call showing it doesn't              n        n    n"},{"commnet_id":"comment-79841","commnet_date":"2016-06-22T08:30:01-0700","commnet_user":"Vladimir Ladynev","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Vladimir Ladynevn added a comment  - 22\/Jun\/2016 08:30 AM     - edited  n        n        @Steve Ebersole, @Todd Richmond, @Michau0142 Kapu0142onnnAs a possible workaround, I have tried to implement an adapter of Hibernate 4 NamingStrategy  for Hibernate 5. But I encounter some problems. Looks like, Hibernate 5 doesn't have a full support of ImplicitNamingStrategy (or I have missed something).nnYou can take a look on my efforts, if you are interested:\r\nnImprovedNamingStrategy for Hibernate 5\r\nnLimitations of ImprovedNamingStrategy for Hibernate 5\r\nnHibernate4To5NamingStrategyAdaptern n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Vladimir Ladynevn added a comment  - 22\/Jun\/2016 08:30 AM     - edited                    @Steve Ebersole, @Todd Richmond, @Michau0142 Kapu0142on nn As a possible workaround, I have tried to implement an adapter of Hibernate 4  NamingStrategy   for Hibernate 5. But I encounter some problems. Looks like, Hibernate 5 doesn't have a full support of  ImplicitNamingStrategy  (or I have missed something). nn You can take a look on my efforts, if you are interested: n ImprovedNamingStrategy for Hibernate 5  n Limitations of ImprovedNamingStrategy for Hibernate 5  n Hibernate4To5NamingStrategyAdapter  n             n        n    n"},{"commnet_id":"comment-88404","commnet_date":"2017-01-05T08:43:12-0800","commnet_user":"Russell Jacobs","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Russell Jacobsn added a comment  - 05\/Jan\/2017 08:43 AM    n        n        @Vladmir Ladynev, @Todd Richmond\r\nnI think that the solution provided by Vladimir is very good for porting all naming strategies across however a physical naming strategy needs to be set as well as the implicit naming strategy in our case which extends the PhysicalNamingStrategyStandardImpl and overwrites the toPhysicalTableName and toPhysicalColumnName methods with the hibernate 4 method addUnderscores and returning the identifier as quoted set to true.\r\nnI would ask why the old interface methods couldn't be delegated to the new interface methods - the naming convention isn't the same so it's quite hard for a non hibernate guru to decipher. n    n    n        n            Show  n            n                        n    n    n    n                nn       Russell Jacobsn added a comment  - 05\/Jan\/2017 08:43 AM                      @Vladmir Ladynev, @Todd Richmond nI think that the solution provided by Vladimir is very good for porting all naming strategies across however a physical naming strategy needs to be set as well as the implicit naming strategy in our case which extends the PhysicalNamingStrategyStandardImpl and overwrites the toPhysicalTableName and toPhysicalColumnName methods with the hibernate 4 method addUnderscores and returning the identifier as quoted set to true. nI would ask why the old interface methods couldn't be delegated to the new interface methods - the naming convention isn't the same so it's quite hard for a non hibernate guru to decipher.              n        n    n"},{"commnet_id":"comment-88406","commnet_date":"2017-01-05T09:38:49-0800","commnet_user":"Todd Richmond","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Todd Richmondn added a comment  - 05\/Jan\/2017 09:38 AM    n        n        I haven't had the day+ to work on this and so have left things @ Hibernate 4. Looks like Spring guys had to hack around this too: https:\/\/github.com\/spring-projects\/spring-boot\/tree\/master\/spring-boot\/src\/main\/java\/org\/springframework\/boot\/orm\/jpa\/hibernatennHopefully theirs is well tested since there must be a huge # of older Spring databases out in the wild n    n    n        n            Show  n            n                        n    n    n    n                nn       Todd Richmondn added a comment  - 05\/Jan\/2017 09:38 AM                      I haven't had the day+ to work on this and so have left things @ Hibernate 4. Looks like Spring guys had to hack around this too:  https:\/\/github.com\/spring-projects\/spring-boot\/tree\/master\/spring-boot\/src\/main\/java\/org\/springframework\/boot\/orm\/jpa\/hibernate  nn Hopefully theirs is well tested since there must be a huge # of older Spring databases out in the wild              n        n    n"}]}},{"HHH-10147":{"info":{"issue_title":"HQL: Make &quot;AS&quot; keyword optional in SELECT part as it&#39;s in FROM part","issue_key":"HHH-10147","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"4.3.10","issue_component":"4.3.10","issue_labels":"4.3.10","issue_description":"Would be nice if \"as\" keyword in SELECT part will be optional too.  I.e. write\r\n SELECT b a FROM Branch b  instead of\r\n SELECT b AS a FROM Branch b  if you'll miss \"AS\" keyword you'll get an exception  org.hibernate.hql.internal.ast.ErrorCounter:73 - line 1:10: unexpected token: a -  \r\n line 1:10: unexpected token: a\r\n \tat org.hibernate.hql.internal.antlr.HqlBaseParser.aliasedExpression(HqlBaseParser.java:2416)\r\n \tat org.hibernate.hql.internal.antlr.HqlBaseParser.selectedPropertiesList(HqlBaseParser.java:1415)\r\n \tat org.hibernate.hql.internal.antlr.HqlBaseParser.selectClause(HqlBaseParser.java:1325)\r\n \tat org.hibernate.hql.internal.antlr.HqlBaseParser.selectFrom(HqlBaseParser.java:1062)\r\n \tat org.hibernate.hql.internal.antlr.HqlBaseParser.queryRule(HqlBaseParser.java:731)\r\n \tat org.hibernate.hql.internal.antlr.HqlBaseParser.selectStatement(HqlBaseParser.java:323)\r\n \tat org.hibernate.hql.internal.antlr.HqlBaseParser.statement(HqlBaseParser.java:186)\r\n \tat org.hibernate.hql.internal.ast.QueryTranslatorImpl.parse(QueryTranslatorImpl.java:295)\r\n \tat org.hibernate.hql.internal.ast.QueryTranslatorImpl.doCompile(QueryTranslatorImpl.java:203)\r\n \tat org.hibernate.hql.internal.ast.QueryTranslatorImpl.compile(QueryTranslatorImpl.java:158)\r\n \tat org.hibernate.engine.query.spi.HQLQueryPlan.&lt;init&gt;(HQLQueryPlan.java:131)\r\n \tat org.hibernate.engine.query.spi.HQLQueryPlan.&lt;init&gt;(HQLQueryPlan.java:93)\r\n \tat org.hibernate.engine.query.spi.QueryPlanCache.getHQLQueryPlan(QueryPlanCache.java:167)\r\n \tat org.hibernate.internal.AbstractSessionImpl.getHQLQueryPlan(AbstractSessionImpl.java:301)\r\n \tat org.hibernate.internal.AbstractSessionImpl.createQuery(AbstractSessionImpl.java:236)\r\n \tat org.hibernate.internal.SessionImpl.createQuery(SessionImpl.java:1836)\r\n \tat com.softgenic.basis.appl.HibernatePersistenceController.createQuery(HibernatePersistenceController.java:214)","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10147?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10144":{"info":{"issue_title":"Defining an Entity with a byte[] @Id does not create the table automatically","issue_key":"HHH-10144","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"4.3.11 ,                                            5.0.1","issue_component":"4.3.11 ,                                            5.0.1","issue_labels":"4.3.11","issue_description":"I've a class that has a byte[] @Id and the table defined by the class is the only one not created when ddl-auto is set to \"create\" or \"create-drop\".  Creating a dummy int @Id property fixes the problem but that's of course suboptimal.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10144?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-70842","commnet_date":"2015-09-28T12:33:36-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 28\/Sep\/2015 12:33 PM    n        n        Hibernate does not support byte[] for identifiers (nor does JPA, for that matter).  Databases have highly inconsistent support for binary comparisons. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 28\/Sep\/2015 12:33 PM                      Hibernate does not support byte[] for identifiers (nor does JPA, for that matter).  Databases have highly inconsistent support for binary comparisons.              n        n    n"},{"commnet_id":"comment-70844","commnet_date":"2015-09-28T12:44:51-0700","commnet_user":"Alessandro Polverini","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Alessandro Polverinin added a comment  - 28\/Sep\/2015 12:44 PM    n        n        I found a workaround: specifing both length and columnDefinition the @Id works correctly, and the table is being generate correctly, for example:nnnrn@Idrn@Column(length = 32, columnDefinition = \"BINARY(32)\" )rnprivate  byte [] hash;rnnnnSo my question becomes: since hibernate knows the length of the column and since it knows that it's using mysql (from the dialect), why it needs the explicit columnDefinition when it could add it himself and leave the source less tied to mysql? n    n    n        n            Show  n            n                        n    n    n    n                nn       Alessandro Polverinin added a comment  - 28\/Sep\/2015 12:44 PM                      I found a workaround: specifing both length and columnDefinition the @Id works correctly, and the table is being generate correctly, for example: nn  n rn@Idrn@Column(length = 32, columnDefinition =  \"BINARY(32)\" )rn private   byte [] hash;rn n  nn So my question becomes: since hibernate knows the length of the column and since it knows that it's using mysql (from the dialect), why it needs the explicit columnDefinition when it could add it himself and leave the source less tied to mysql?              n        n    n"},{"commnet_id":"comment-74465","commnet_date":"2016-01-05T15:11:09-0800","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 05\/Jan\/2016 15:11 PM    n        n        You will probably run into n    n                n        n            n            HHH-8999n        n                                                    Closed n             n if you use an ID with byte[]. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 05\/Jan\/2016 15:11 PM                      You will probably run into n     n                 n         n             n            HHH-8999n         n                                                     Closed n             n if you use an ID with byte[].              n        n    n"}]}},{"HSEARCH-2012":{"info":{"issue_title":"Expose a method to close the IndexWriter (lock) of a specific IndexManager","issue_key":"HSEARCH-2012","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Critical","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Alpha1","issue_labels":"5.6.0.Alpha1","issue_description":"The Infinispan \"index affinity\" plans will need to migrate the owner of a specific index from one node to another, even if the node didn't shut down.\r\n So the existing node which might have an IndexWriter instance open will still need to be able to run queries, but should close the writer and release the index lock.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2012?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10136":{"info":{"issue_title":"Upgrade HikariCP to latest version","issue_key":"HHH-10136","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"5.0.1","issue_component":"5.0.1","issue_labels":"5.0.1","issue_description":"I have noticed maven artifact for hibernate-hikaricp is using an old dependency of hikaricp. The latest java 6 compatible is 2.3.9 (maintenance release). The latest for java 7+ is 2.4.1.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10136?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-70887","commnet_date":"2015-10-02T16:41:42-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 02\/Oct\/2015 16:41 PM    n        n        For 5.x I think we will need to stick with Hakari 2.3.9 (Java 6 compatibility) n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 02\/Oct\/2015 16:41 PM                      For 5.x I think we will need to stick with Hakari 2.3.9 (Java 6 compatibility)              n        n    n"},{"commnet_id":"comment-70916","commnet_date":"2015-10-06T14:30:21-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 06\/Oct\/2015 14:30 PM    n        n        Ugh.  So in trying to set up this upgrade I notice they have upgraded their Javassist and that it no longer matches what we use in Hibernate 3.18.1 versus 3.18.2).  I know that seems like it should be minor, but we have had major headaches in the past with even minor Javassist version changes.nnScott Marlow Any thoughts on this one? n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 06\/Oct\/2015 14:30 PM                      Ugh.  So in trying to set up this upgrade I notice they have upgraded their Javassist and that it no longer matches what we use in Hibernate 3.18.1 versus 3.18.2).  I know that seems like it should be minor, but we have had major headaches in the past with even minor Javassist version changes. nn  Scott Marlow  Any thoughts on this one?              n        n    n"},{"commnet_id":"comment-70919","commnet_date":"2015-10-06T15:03:00-0700","commnet_user":"Scott Marlow","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Scott Marlown added a comment  - 06\/Oct\/2015 15:03 PM    n        n        WildFly 10 is also using javassist 3.18.1-GA.  I expect that 3.18.2-GA will work for us and it has a little more Java 8 support.nnWe should also talk soon about javassist 3.20.x versus 3.18.3-GA.  If we choose to use 3.18.3-GA, we need to do some work to create it.  If 3.20.0-GA is just as compatible, we could consider using that (or even 3.21.0-GA which isn't out yet.)nnnnngit commits from 3.18 branch are herennnn n    n    n        n            Show  n            n                        n    n    n    n                nn       Scott Marlown added a comment  - 06\/Oct\/2015 15:03 PM                      WildFly 10 is also using javassist 3.18.1-GA.  I expect that 3.18.2-GA will work for us and it has a little more Java 8 support. nn We should also talk soon about javassist 3.20.x versus 3.18.3-GA.  If we choose to use 3.18.3-GA, we need to do some work to create it.  If 3.20.0-GA is just as compatible, we could consider using that (or even 3.21.0-GA which isn't out yet.) nn n  n n git commits from  3.18 branch are here  n n  n n             n        n    n"},{"commnet_id":"comment-70924","commnet_date":"2015-10-06T17:21:22-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 06\/Oct\/2015 17:21 PM    n        n        Scott Marlow The reason I ask is that changing just the Hikari version as requested leads to problems running even the verrrrry simple test in hibernate-hikari.  Its one of those strange cases though where I get the failure from the command line, but cannot reproduce from within IDE to debug it.nnThis is is slated for 5.1 which is the next major version, so I am ok with updating some dependency versions.  I just don't want to end up running into the same issues we invariably seem to run into when upgrading Javassist.  In fact I wonder if we should consider (moving forward) doing a shadow\/shade of Javassist for Hibernate's use.  nnFor the short term, I'll try updating Hikari (to 2.3.9)  + Javassist (to both 3.18.2-GA and 3.20.0-GA) and see how that works.  n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 06\/Oct\/2015 17:21 PM                       Scott Marlow  The reason I ask is that changing just the Hikari version as requested leads to problems running even the verrrrry simple test in hibernate-hikari.  Its one of those strange cases though where I get the failure from the command line, but cannot reproduce from within IDE to debug it. nn This is is slated for 5.1 which is the next major version, so I am ok with updating some dependency versions.  I just don't want to end up running into the same issues we invariably seem to run into when upgrading Javassist.  In fact I wonder if we should consider (moving forward) doing a shadow\/shade of Javassist for Hibernate's use.   nn For the short term, I'll try updating Hikari (to 2.3.9)  + Javassist (to both 3.18.2-GA and 3.20.0-GA) and see how that works.               n        n    n"},{"commnet_id":"comment-70926","commnet_date":"2015-10-06T17:35:22-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 06\/Oct\/2015 17:35 PM    n        n        Ok, the test issue was an unrelated brain-fart nnScott Marlow I ran the hibernate-core testsuite using both Javassist 3.18.2-GA and 3.20.0-GA.  Both were fine in our tests.  So as far as WildFly and what y'all want to use there, let me know and we'll sync up. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 06\/Oct\/2015 17:35 PM                      Ok, the test issue was an unrelated brain-fart   nn  Scott Marlow  I ran the hibernate-core testsuite using both Javassist 3.18.2-GA and 3.20.0-GA.  Both were fine  in our tests .  So as far as WildFly and what y'all want to use there, let me know and we'll sync up.              n        n    n"}]}},{"HHH-10130":{"info":{"issue_title":"performance of bulk insert","issue_key":"HHH-10130","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Rejected","issue_fix_version":"5.0.1","issue_component":"5.0.1","issue_labels":"5.0.1","issue_description":"I need maximal performance for bulk insert. Tests show that performance gain for stateless session can be high. But there are some strange  things with sequencegenerator settings with allocationsize &gt;1. Tests with named queries for bulk insert dont throw exceptions but do not write anything into the database.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10130?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-77334","commnet_date":"2016-04-27T06:12:01-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 27\/Apr\/2016 06:12 AM    n        n        The test is making wrong assumptions about how HQL bulk insert should be working. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 27\/Apr\/2016 06:12 AM                      The test is making wrong assumptions about how HQL bulk insert should be working.              n        n    n"},{"commnet_id":"comment-77336","commnet_date":"2016-04-27T06:43:17-0700","commnet_user":"Carsten Hammer","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Carsten Hammern added a comment  - 27\/Apr\/2016 06:43 AM    n        n        Hi Vlad,\r\nnI think I was not able to make myself clear. Searching for the fastest possible bulk insert it does not make sense to copy the data into another table before you import it to the database.\r\nnWhat makes a difference is usage of sequences, sessionless processing and maybe using prepared statements - performance wise.\r\nnSo this test shows and compares performance of different approaches to implement a fast bulk insert. The performance of these implementations cannot be improved without changing how hibernate itself - at least that is my conclusion. \r\nnThe syntax I use in the named query is only there to fullfill the syntax requirements of hibernate. I am intentionally using parameters to fill in the data into the insert statement. I do not want to copy any existing table content! This is new data. I know that it is not working but it should be possible to use a named query for a bulk insert, why not?\r\nnI am not aware of any test like this in hibernate that compares the fastest ways to implement a bulk insert in hibernate. \r\nnIn the meantime I learned that hibernate is not able to use the MSSQL sp_sequence_get_range stored procedure to get full performance on bulk insert.\r\nnSo I am sorry to causing confusion. If there was an explanation why the tests fail without the patch to the hibernate code the pull request contains I would still be interested to know.\r\nnAnyway - thank you for your time! n n    n    n        n            Show  n            n                        n    n    n    n                nn       Carsten Hammern added a comment  - 27\/Apr\/2016 06:43 AM                      Hi Vlad, nI think I was not able to make myself clear. Searching for the fastest possible bulk insert it does not make sense to copy the data into another table before you import it to the database. nWhat makes a difference is usage of sequences, sessionless processing and maybe using prepared statements - performance wise. nSo this test shows and compares performance of different approaches to implement a fast bulk insert. The performance of these implementations cannot be improved without changing how hibernate itself - at least that is my conclusion.  nThe syntax I use in the named query is only there to fullfill the syntax requirements of hibernate. I am intentionally using parameters to fill in the data into the insert statement. I do not want to copy any existing table content! This is new data. I know that it is not working but it should be possible to use a named query for a bulk insert, why not? nI am not aware of any test like this in hibernate that compares the fastest ways to implement a bulk insert in hibernate.  nIn the meantime I learned that hibernate is not able to use the MSSQL sp_sequence_get_range stored procedure to get full performance on bulk insert. nSo I am sorry to causing confusion. If there was an explanation why the tests fail without the patch to the hibernate code the pull request contains I would still be interested to know. nAnyway - thank you for your time!  n             n        n    n"},{"commnet_id":"comment-77337","commnet_date":"2016-04-27T06:51:22-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 27\/Apr\/2016 06:51 AM    n        n        Bulk insert is meant for copying data, so it's not a general-purpose solution such as JDBC batching.nnIf you want to optimize insert statements, I think you should use JDBC batch inserts. In this case, the pooled optimizer performs very well if backed by a database sequence. You also need to make sure you order inserts, in case you are using cascading and also make sure that versioning doesn't prevent you from using JDBC batch updates.nnIf you are interested in this topic, check out this batching chapter from the High-Performance Java Persistence book. You'll find some interesting benchmarks there too. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 27\/Apr\/2016 06:51 AM                      Bulk insert is meant for copying data, so it's not a general-purpose solution such as JDBC batching. nn If you want to optimize insert statements, I think you should use JDBC batch inserts. In this case, the pooled optimizer performs very well if backed by a database sequence. You also need to make sure you order inserts,  in case you are using cascading  and also make sure that versioning doesn't prevent you from using JDBC batch updates. nn If you are interested in this topic, check out this batching chapter from the  High-Performance Java Persistence  book. You'll find some interesting benchmarks there too.              n        n    n"},{"commnet_id":"comment-77338","commnet_date":"2016-04-27T07:12:44-0700","commnet_user":"Carsten Hammer","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Carsten Hammern added a comment  - 27\/Apr\/2016 07:12 AM    n        n        I know your book and I like it However it does not answer the questions this issue is about (at least I do not get it from what I read there .\r\nnI might be used to use a misleading wording because of the \"bulk insert\" command of mssql that does exactly this: batch inserts https:\/\/msdn.microsoft.com\/de-de\/library\/ms188365%28v=sql.120%29.aspx\r\nnThe pull request for this issue is about the usage of the pooled optimizer. I thought everything to understand it is in the code of the pull request. Maybe I come up one day with another try about comparing different approaches to implement \"batch inserts\" in a fast way in hibernate - maybe using some microbenchmarks using jmh. \r\nnThank you so far!n n    n    n        n            Show  n            n                        n    n    n    n                nn       Carsten Hammern added a comment  - 27\/Apr\/2016 07:12 AM                      I know your book and I like it  However it does not answer the questions this issue is about (at least I do not get it from what I read there  . nI might be used to use a misleading wording because of the \"bulk insert\" command of mssql that does exactly this: batch inserts  https:\/\/msdn.microsoft.com\/de-de\/library\/ms188365%28v=sql.120%29.aspx  nThe pull request for this issue is about the usage of the pooled optimizer. I thought everything to understand it is in the code of the pull request. Maybe I come up one day with another try about comparing different approaches to implement \"batch inserts\" in a fast way in hibernate - maybe using some microbenchmarks using jmh.  nThank you so far! n             n        n    n"},{"commnet_id":"comment-77339","commnet_date":"2016-04-27T07:26:24-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 27\/Apr\/2016 07:26 AM    n        n        You're welcome. We've been running some benchmarks, and there were some optimizations being done for multi-tenancy, using a thread-local pooled optimizer. But for the pooled optimizer, if you increase the increment size, it takes around 150 microseconds to call the database sequence which is really fast. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 27\/Apr\/2016 07:26 AM                      You're welcome. We've been running some benchmarks, and there were some optimizations being done for multi-tenancy, using a thread-local pooled optimizer. But for the pooled optimizer, if you increase the increment size, it takes around 150 microseconds to call the database sequence which is really fast.              n        n    n"}]}},{"HHH-10129":{"info":{"issue_title":"Evaluate AttributeConverter tests in hibernate-entitymanager for move to hibernate-core","issue_key":"HHH-10129","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.2","issue_labels":"5.0.2","issue_description":"A lot of the functionality tested in the hibernate-entitymanager test package org.hibernate.jpa.test.convert could (should) really be done in hibernate-core.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10129?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10127":{"info":{"issue_title":"Allow indication that converted types are immutable","issue_key":"HHH-10127","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.5","issue_labels":"5.2.5","issue_description":"The solution for                                                          HHH-10111                                                              Closed                 was to treat all converted (AttributeConverter) types as mutable so that dirty checking, deep copying and second-level caching all work properly no matter what.    However, treating these as immutable (when they really are) is more efficient.  So allow the user some way to indicate whether a converted type is mutable or immutable.    Some initial ideas were:  \tnew optional contract to be implemented by the AttributeConverter impl. \tnew annotation to be applied to the AttributeConverter impl    To be clear this is isolated to custom Java types generally speaking.  Most of the built-in JDK types recognized by Hibernate already have a proper mutability profile on their JavaTypeDescriptor.  Even for custom types, some solutions work today:  \tCertain types (enums, e.g.) are already recognized as immutable. \tAdd @org.hibernate.annotations.Immutable to the Java type that represents the \"domain side\" of the conversion. \tExplicitly add a JavaTypeDescriptor for the Java type that represents the \"domain side\" of the conversion.    (1) is the ideal, where some characteristic of the \"domain side\" Java type indicates that the type is immutable; for example, we know that a (non-@Enumerated) enum is immutable because all enums are immutable.  (2) is a actually a variation of (1), and should be preferred over (3) as it is the simpler solution but it requires that the developer control the \"domain side\" Java type.  An example of this approach:     @Immutable  public  class PostalArea {      ...  }    public  class PostalAreaConverter          implements  AttributeConverter&lt;PostalArea, String &gt; {      ...  }     For this PostalAreaConverter we know the \"domain side\" Java type (PostalArea) is immutable because the presence of the @Immutable annotation tells us it is.  (3) would mean writing a JavaTypeDescriptor for PostalArea and registering that with the JavaTypeDescriptorRegistry.  This JavaTypeDescriptor would indicate immutability via JavaTypeDescriptor#getMutabilityPlan","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10127?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-70528","commnet_date":"2015-09-25T03:22:54-0700","commnet_user":"Jochen Seeber","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Jochen Seebern added a comment  - 25\/Sep\/2015 03:22 AM    n        n        Some thoughts on this:nntAs a user, I would expect Hibernate to choose correctness over performance, and the default case to be \"it just works\". AttributeConverter's API doc says nothing about mutability, so as a user I'd expect that it can be mutable. Therefor the default case should be \"mutable\" (especially if else there are hard to track down errors).ntThe AttributeConverter I choose to use may not be under my control, e.g. because I want to reuse code from a third party library. I would like to have multiple ways to specify mutability:ntnttIf I write the AttributeConverter myself, I can implement a special interface or annotate itnttIf I use a third party attribute converter, I'd like to be able to configure mutability in the Hibernate Configntntnn n    n    n        n            Show  n            n                        n    n    n    n                nn       Jochen Seebern added a comment  - 25\/Sep\/2015 03:22 AM                      Some thoughts on this: n nt As a user, I would expect Hibernate to choose correctness over performance, and the default case to be \"it just works\". AttributeConverter's API doc says nothing about mutability, so as a user I'd expect that it can be mutable. Therefor the default case should be \"mutable\" (especially if else there are hard to track down errors). nt The AttributeConverter I choose to use may not be under my control, e.g. because I want to reuse code from a third party library. I would like to have multiple ways to specify mutability:nt ntt If I write the AttributeConverter myself, I can implement a special interface or annotate it ntt If I use a third party attribute converter, I'd like to be able to configure mutability in the Hibernate Config nt nt n n             n        n    n"},{"commnet_id":"comment-85493","commnet_date":"2016-11-02T08:48:11-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 02\/Nov\/2016 08:48 AM    n        n        Jochen Seeber as mentioned in the summary, n    n                n        n            n            HHH-10111n        n                                                    Closed n             n already covers your first point.nnFor your second, see the list of ways that work today.  This issue is about expanding those available options n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 02\/Nov\/2016 08:48 AM                       Jochen Seeber  as mentioned in the summary, n     n                 n         n             n            HHH-10111n         n                                                     Closed n             n already covers your first point. nn For your second, see the list of ways that work today.  This issue is about expanding those available options              n        n    n"},{"commnet_id":"comment-85902","commnet_date":"2016-11-10T02:35:44-0800","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 10\/Nov\/2016 02:35 AM    n        n        Gail Badner, we should backport this issue to 5.1 and 5.0. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 10\/Nov\/2016 02:35 AM                       Gail Badner , we should backport this issue to 5.1 and 5.0.              n        n    n"}]}},{"OGM-923":{"info":{"issue_title":"Map time ordered series of events in Neo4j","issue_key":"OGM-923","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"neo4j","issue_description":"The idea is to map a series of events as nodes connected by NEXT and\/or PREVIOUS \r\n relationships.  This allows for very rapid traversal of events in time.  More details in \"Graph Database 2nd Edition\" (Chapter 4, Time)","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-923?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-922":{"info":{"issue_title":"Add versioninig of Nodes and Relationships","issue_key":"OGM-922","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"neo4j","issue_description":"Graph  can be versioned adding a timestamp to Node and Relationships, making it possible to retrieve the state of a graph in a particular point in time.  Can this work with enverse?  The drawback of this approach is that it complicates even the simplest query","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-922?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10121":{"info":{"issue_title":"Have EMF#getProperties expose ValidatorFactory injected via 2-phase load","issue_key":"HHH-10121","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.2","issue_labels":"5.0.2","issue_description":"When the ValidatorFactory is passed via EntityManagerFactoryBuilder.withValidatorFactory (WildFly) it would still be nice to expose it under the javax.persistence.validation.factory key in EntityManagerFactory#getProperties.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10121?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10113":{"info":{"issue_title":"Integrate Hibernate Spatial documentation into Hibernate ORM&#39;s","issue_key":"HHH-10113","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Out of Date","issue_fix_version":"5.0.1","issue_component":"5.0.1","issue_labels":"5.0.1","issue_description":"The documentation I could find is all on hibernatespatial.org. The documentation seems rather simple, we probably can integrate most of it into Hibernate ORMs and reference it in the website.\r\n A small alternative is to put it as a how to as it encompasses both mapping and HQL operations.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10113?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-70489","commnet_date":"2015-09-24T08:44:18-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 24\/Sep\/2015 08:44 AM    n        n        Karel Maesen If you could do this, great.  If not, I would at least some pointers on what information to import. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 24\/Sep\/2015 08:44 AM                       Karel Maesen  If you could do this, great.  If not, I would at least some pointers on what information to import.              n        n    n"},{"commnet_id":"comment-84801","commnet_date":"2016-10-06T02:39:18-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 06\/Oct\/2016 02:39 AM    n        n        We already did it. Check out the latest User Guide. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 06\/Oct\/2016 02:39 AM                      We already did it. Check out the  latest User Guide .              n        n    n"}]}},{"HHH-10106":{"info":{"issue_title":"Include source entity name and table name (attribute name too ideally) for associations referencing unmapped classes","issue_key":"HHH-10106","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"5.0.3","issue_component":"5.0.3","issue_labels":"5.0.3","issue_description":"During mapping initialization, if some class references an unmapped class (e.g. in a &lt;set&gt; or @OneToMany declaration where the targetEntity is not known to Hibernate), an exception is thrown:\r\n org.hibernate.MappingException: Association references unmapped class: com.bar.Foo  Probably in most cases, a mapping is actually missing and adding it solves the issue.\r\n However, there may be the case in which you want to remove or modify the mapping containing the association to the unmapped class. Unfortunately there is no information in the stack trace leading to this mapping.\r\n It would be helpful, if the name of the referencing entity and table were part of the message.  These informations are present at the time the exception is thrown which happens in org.hibernate.cfg.HbmBinder.bindCollectionSecondPass (line 2577 in version 4.3.8).\r\n The line\r\n throw new MappingException( \"Association references unmapped class: \" + assocClass );\r\n could be refactored to something like\r\n throw new MappingException(String.format(\"Association %s for table %s references unmapped class: %s\", oneToMany.getReferencedEntityName(), oneToMany.getTable().getName(), assocClass));","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10106?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-70483","commnet_date":"2015-09-24T08:22:07-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 24\/Sep\/2015 08:22 AM    n        n        We no longer maintain 4.x.  If the same issue happens in 5.0 We can address it there.  Can you try against 5.0 and see if the same problem occurs.  In general 5.0 is much better at logging contextual information in case of a mapping problem for hbm mappings; annotation binding has not undergone this same treatment yet, but that is planned for later. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 24\/Sep\/2015 08:22 AM                      We no longer maintain 4.x.  If the same issue happens in 5.0 We can address it there.  Can you try against 5.0 and see if the same problem occurs.  In general 5.0 is much better at logging contextual information in case of a mapping problem  for hbm mappings ; annotation binding has not undergone this same treatment yet, but that is planned for later.              n        n    n"},{"commnet_id":"comment-72510","commnet_date":"2015-10-27T20:25:34-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 27\/Oct\/2015 20:25 PM    n        n        As part of verifying that this issue affects 5.0, please just set the \"Affects version\". Leave the \"verify-affects-5.0\" label and leave the issue in \"Awaiting Response\" status; these are critical for us to be able to track these verifications and triage them. Thanks. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 27\/Oct\/2015 20:25 PM                      As part of verifying that this issue affects 5.0, please just set the \"Affects version\". Leave the \"verify-affects-5.0\" label and leave the issue in \"Awaiting Response\" status; these are critical for us to be able to track these verifications and triage them. Thanks.              n        n    n"},{"commnet_id":"comment-73149","commnet_date":"2015-10-30T08:04:25-0700","commnet_user":"Gu00FCnter Graf","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Gu00FCnter Grafn added a comment  - 30\/Oct\/2015 08:04 AM     - edited  n        n        I just checked this issue against 5.0.3.Final and the exception is as follows:\r\nnorg.hibernate.MappingException: An association from the table QUUX refers to an unmapped class: com.bar.Foo\r\nnwhere QUUX is the table name and com.bar.FOO is the unmapped entity.\r\nnThere's still no word about the referenced entity name, but I guess the information given is sufficient to solve issues like the one described above anyway. n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Gu00FCnter Grafn added a comment  - 30\/Oct\/2015 08:04 AM     - edited                    I just checked this issue against 5.0.3.Final and the exception is as follows: n org.hibernate.MappingException: An association from the table QUUX refers to an unmapped class: com.bar.Foo  nwhere  QUUX  is the table name and  com.bar.FOO  is the unmapped entity. nThere's still no word about the referenced entity name, but I guess the information given is sufficient to solve issues like the one described above anyway.              n        n    n"},{"commnet_id":"comment-82266","commnet_date":"2016-08-10T02:16:17-0700","commnet_user":"Vyacheslav Rarata","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vyacheslav Raratan added a comment  - 10\/Aug\/2016 02:16 AM    n        n        Hi. I'm trying be a new contributor. And get this task.\r\nnI changed MappingException message to:\r\nnString.format(\"Association %s for table %s references unmapped class: %s\", \r\nnoneToMany.getReferencedEntityName(),        oneToMany.getTable().getName(), assocClass).\r\nnand wrote unit test for it. But I find:\r\nn1. String assocClass = oneToMany.getReferencedEntityName();\r\nnAnd every time oneToMany.getReferencedEntityName() and assocClass will return equals value.\r\nnIs it corect for our exception message or need to change oneToMany.getReferencedEntityName() to other method;\r\nn2. There is a part of dead code:\r\nnif ( buildingContext == null ) n{rn    throw new AssertionFailure(rntt\"CollectionSecondPass for oneToMany should not be called with null mappings\"rn    );rn} n    n    n        n            Show  n            n                        n    n    n    n                nn       Vyacheslav Raratan added a comment  - 10\/Aug\/2016 02:16 AM                      Hi. I'm trying be a new contributor. And get this task. nI changed MappingException message to: nString.format(\"Association %s for table %s references unmapped class: %s\",  noneToMany.getReferencedEntityName(),        oneToMany.getTable().getName(), assocClass). nand wrote unit test for it. But I find: n1. String assocClass = oneToMany.getReferencedEntityName(); nAnd every time oneToMany.getReferencedEntityName() and assocClass will return equals value. nIs it corect for our exception message or need to change oneToMany.getReferencedEntityName() to other method; n2. There is a part of dead code: nif ( buildingContext == null )  n{rn    throw new AssertionFailure(rntt\"CollectionSecondPass for oneToMany should not be called with null mappings\"rn    );rn}             n        n    n"},{"commnet_id":"comment-82267","commnet_date":"2016-08-10T02:16:42-0700","commnet_user":"Vyacheslav Rarata","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vyacheslav Raratan added a comment  - 10\/Aug\/2016 02:16 AM    n        n        PR https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1519 n    n    n        n            Show  n            n                        n    n    n    n                nn       Vyacheslav Raratan added a comment  - 10\/Aug\/2016 02:16 AM                      PR  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1519               n        n    n"},{"commnet_id":"comment-82333","commnet_date":"2016-08-10T04:36:02-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 10\/Aug\/2016 04:36 AM    n        n        Applied PR upstream. Gail Badner, you might be interested in this issue. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 10\/Aug\/2016 04:36 AM                      Applied PR upstream.  Gail Badner , you might be interested in this issue.              n        n    n"},{"commnet_id":"comment-83449","commnet_date":"2016-09-01T23:06:53-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 01\/Sep\/2016 23:06 PM    n        n        Fixed in 5.1 branch as well. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 01\/Sep\/2016 23:06 PM                      Fixed in 5.1 branch as well.              n        n    n"}]}},{"HHH-10103":{"info":{"issue_title":"org.hibernate.boot.model.source.internal.hbm.ModelBinder is generating suspicious deprecation warnings","issue_key":"HHH-10103","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Minor","issue_affects_version":"Out of Date","issue_fix_version":"5.0.1","issue_component":"5.0.1","issue_labels":"5.0.1","issue_description":"On startup, ModelBinder is filling logs with warning:  \"HHH90000003: Use of DOM4J entity-mode is considered deprecated\"  even if no DOM4J nodes are defined. By examining the ModelBinder source code, I've found two places (in createEmbeddedAttribute and bindProperty) where those messages are most likely falsely generated. In both places warning is generated when name of source is present. I believe that proper check should check if result of getXmlNodeName (and not getName) is empty. By changing those two lines, I've got rid of warnings.  Small patch is attached.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10103?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-70461","commnet_date":"2015-09-22T14:15:19-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 22\/Sep\/2015 14:15 PM    n        n        This was addressed under n    n                n        n            n            HHH-10115n        n                                                    Closed n             n n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 22\/Sep\/2015 14:15 PM                      This was addressed under n     n                 n         n             n            HHH-10115n         n                                                     Closed n             n              n        n    n"}]}},{"HSEARCH-2009":{"info":{"issue_title":"Document supported types for @FieldBridge#impl()","issue_key":"HSEARCH-2009","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.8","issue_labels":"5.8","issue_description":"That member should be documented, stating the accepted types: sub-types of FieldBridge and StringBridge.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2009?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2008":{"info":{"issue_title":"Upgrade to JGroups 3.6.6","issue_key":"HSEARCH-2008","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Out of Date","issue_fix_version":"None","issue_component":"None","issue_labels":"backend,                                            build","issue_description":"WildFly already is on 3.6.6.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2008?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2007":{"info":{"issue_title":"Add Clirr plug-in configuration for creating API change report","issue_key":"HSEARCH-2007","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Alpha1","issue_labels":"5.6.0.Alpha1","issue_description":"As done for OGM and HV, let's configure the Maven Clirr plug-in so we can create reports about API changes.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2007?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-2006":{"info":{"issue_title":"Allowing to configure implicit id field as numeric through the DSL","issue_key":"HSEARCH-2006","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"engine","issue_description":"DocumentIdMapping#numericField() is missing.  The problem here is that NumericFieldMapping extends FieldMapping which adds itself as a field to the current property. Therefore the check protecting against reconfiguration of the implicit id field will kick in when simply adding the numeric field mapping.  IMO the inheritance relationship should be removed, allowing only the actual numeric field settings to be configured through numericField, whereas everything else such as store() would have to be configured through field() and thus naturally not be accessible through documentId().numericField().","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2006?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-70346","commnet_date":"2015-09-15T02:33:11-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 15\/Sep\/2015 02:33 AM    n        n        ... or you create a DocumentIdNumericFieldMapping. Mapping is the wrong name, we should really be talking about context. We are in a different context. Inheritance in these fluent APIs indeed provide more harm than good. They must be carefully though out as a context extension. n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 15\/Sep\/2015 02:33 AM                      ... or you create a  DocumentIdNumericFieldMapping . Mapping is the wrong name, we should really be talking about context. We are in a different context. Inheritance in these fluent APIs indeed provide more harm than good. They must be carefully though out as a context extension.              n        n    n"},{"commnet_id":"comment-70347","commnet_date":"2015-09-15T02:43:56-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 15\/Sep\/2015 02:43 AM    n        n        Yes, that's an approach, though I still dislike the irregularity of exposing @Field properties through numericField(). Regarding the naming, agreed, but would you do it differently for a new one now, given the pattern is established for all the others. Also agreed on not using inheritance, I've changed that for SortableFieldMapping with my latest PR. It does not expose the field-level settings. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 15\/Sep\/2015 02:43 AM                      Yes, that's an approach, though I still dislike the irregularity of exposing  @Field  properties through  numericField() . Regarding the naming, agreed, but would you do it differently for a new one now, given the pattern is established for all the others. Also agreed on not using inheritance, I've changed that for  SortableFieldMapping  with my latest PR. It does not expose the field-level settings.              n        n    n"}]}},{"OGM-920":{"info":{"issue_title":"Model graph relationship with properties","issue_key":"OGM-920","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"neo4j","issue_description":"Here some ideas requiring further discussion:   \tAttach a relationship property contributor class           @RelationshipContributor(AddressRelationship.class)            \tor \"fix\" a set of property per OO association          @OneToMany      @JoinTable(name=\"has_address\" )      @RelationshipContributor(name=\"type\" , value=\"home\" , ...)      Set&lt;Address&gt; homeAddress        @OneToMany      @JoinTable(name=\"has_address\" )      @RelationshipContributor(name=\"type\" , value=\"work\" , ...)      Set&lt;Address&gt; workAddress            One relationship type is split into two OO associations     \tor have the generic and the specific relationships in Neo4j but only the specific ones in OO. Each assoc is going to create 2 relationships.    For closed set of properties Neo4j recommends separate relationships. For open sets like weight, then properties make sense. How to host a weight in OO?","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-920?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-919":{"info":{"issue_title":"Batch operations for Neo4j","issue_key":"OGM-919","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"neo4j","issue_description":"It should be possible to create a list of comma separated  cypher queries, or group operations related to single node.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-919?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-918":{"info":{"issue_title":"Map Timeline trees for Neo4j","issue_key":"OGM-918","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"neo4j","issue_description":"One node for year, month, day and then the actual event node with a specific relationship. That creates a tree of timeline where the leaves are the events.  It makes it easy to find events for a given period.  More details in \"Graph Databases 2nd Edition\" (Chapter 4, Time)","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-918?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10101":{"info":{"issue_title":"Implement nonstrict-read-write mode in Infinispan 2LC","issue_key":"HHH-10101","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.1","issue_component":"5.0.1","issue_labels":"5.0.1","issue_description":"All other modes require the cache to provide results as if read from DB - therefore, when the DB is committed, we can't provide stale data from cache. Therefore, the data need to be invalidated before the commit.  In nonstrict-read-write mode we relax this requirement and allow the cache to return stale values until the operation is committed (with synchronous caches) or that the cache is eventually consistent (with asynchronous caches). The requirement for this mode is entry versioning.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10101?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-73377","commnet_date":"2015-11-06T10:02:52-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 06\/Nov\/2015 10:02 AM    n        n        Technically this made it into 5.0.3 (or possibly even 5.0.2).  However, the issue was not resolved at that time unfortunately and so it did not show up in the release notes for that version.  Added 5.0.4 so that it at least shows up in some release notes. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 06\/Nov\/2015 10:02 AM                      Technically this made it into 5.0.3 (or possibly even 5.0.2).  However, the issue was not resolved at that time unfortunately and so it did not show up in the release notes for that version.  Added 5.0.4 so that it at least shows up in some release notes.              n        n    n"}]}},{"HHH-10097":{"info":{"issue_title":"Expose the UUID from SessionFactoryImplementor","issue_key":"HHH-10097","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0","issue_labels":"5.1.0","issue_description":"There are a few places that need access to the UUID of a SF.  At the moment the only way to obtain that is to go through the JNDI org.hibernate.internal.SessionFactoryImpl#getReference contract implemented by SF.  Would be much nicer to simply expose a #getUuid() methjod.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10097?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-70278","commnet_date":"2015-09-10T09:29:02-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 10\/Sep\/2015 09:29 AM    n        n        Do a usage find on SessionFactoryImpl#getReference to locate uses. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 10\/Sep\/2015 09:29 AM                      Do a usage find on  SessionFactoryImpl#getReference  to locate uses.              n        n    n"}]}},{"HSEARCH-2001":{"info":{"issue_title":"By default enable a &quot;strict mode&quot; validation for sorting","issue_key":"HSEARCH-2001","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.7","issue_labels":"5.7","issue_description":"To encourage people to migrate their sorting strategy to use the new @SortableField annotation (and encourage feedback about missing functionality), we should have a \"strict mode\" which exclusively accepts sorting definitions which do not require index un-inverting.  This mode should be enabled by default, but we'll provide a configuration property to still allow the fallback to the previous sorting model.  Eventually we'll need to remove the un-inverting strategy, so I'll rather have such a feature included some versions before doomsday comes.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-2001?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-74224","commnet_date":"2015-12-17T07:38:16-0800","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 17\/Dec\/2015 07:38 AM    n        n        The option was already created as n    n                n        n            n            HSEARCH-2043n        n                                                    Closed n             n.\r\nnSo this task will just be used to track when we'll switch to enable the strict validation by default. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 17\/Dec\/2015 07:38 AM                      The option was already created as n     n                 n         n             n            HSEARCH-2043n         n                                                     Closed n             n. nSo this task will just be used to track when we'll switch to enable the strict validation by default.              n        n    n"},{"commnet_id":"comment-78490","commnet_date":"2016-05-27T08:57:47-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 27\/May\/2016 08:57 AM    n        n        Let's also consider the feedback from n    n                n        n            n            HSEARCH-2283n        n                                                    Closed n             n : we need to be consistent with validation also on non-numeric fields. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 27\/May\/2016 08:57 AM                      Let's also consider the feedback from n     n                 n         n             n            HSEARCH-2283n         n                                                     Closed n             n : we need to be consistent with validation also on non-numeric fields.              n        n    n"}]}},{"HHH-10091":{"info":{"issue_title":"HibernateUtil doesn&#39;t work as provided in documentation","issue_key":"HHH-10091","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Rejected","issue_fix_version":"4.3.10","issue_component":"4.3.10","issue_labels":"4.3.10","issue_description":"HibernateUtil doesn't work as provided in documentation, it leads to the following error : access to dialect resolution info cannot be null when 'hibernate.dialect' not set  The following HibernateUtil example seems to be the right one :     public  class HibernateUtil {        private  static  final  SessionFactory sessionFactory = buildSessionFactory();        private  static  SessionFactory buildSessionFactory() {          try  {              \/\/ Create the SessionFactory from hibernate.cfg.xml               Configuration configuration = new  Configuration().configure();                                      return  configuration.buildSessionFactory(  \t\tnew  StandardServiceRegistryBuilder()                      .applySettings(configuration.getProperties())                      .build()              );          }          catch  (Throwable ex) {              \/\/ Make sure you log the exception, as it might be swallowed               System .err.println(\"Initial SessionFactory creation failed.\"  + ex);              throw  new  ExceptionInInitializerError(ex);          }      }        public  static  SessionFactory getSessionFactory() {          return  sessionFactory;      }    }      Best regards","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10091?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-70262","commnet_date":"2015-09-09T12:42:01-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 09\/Sep\/2015 12:42 PM    n        n        We are no longer improving the documentation in 4.3 branch. Does this apply to 5.0 as well? n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 09\/Sep\/2015 12:42 PM                      We are no longer improving the documentation in 4.3 branch. Does this apply to 5.0 as well?              n        n    n"},{"commnet_id":"comment-70281","commnet_date":"2015-09-10T13:42:17-0700","commnet_user":"Vladimir Bueb","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vladimir Buebn added a comment  - 10\/Sep\/2015 13:42 PM    n        n        Dear Gail,nnThank you for your response.\r\nnSo far I have not used 5.0. As I understand, it seems there is no direct equivalent of the HibernateUtil class in Hibernate v4 as it is replaced by the bootstrap mechanism in  v5.nnSo, I guess this ticket can be closed.  n    n    n        n            Show  n            n                        n    n    n    n                nn       Vladimir Buebn added a comment  - 10\/Sep\/2015 13:42 PM                      Dear Gail, nn Thank you for your response. nSo far I have not used 5.0. As I understand, it seems there is no direct equivalent of the HibernateUtil class in Hibernate v4 as it is replaced by the bootstrap mechanism in  v5. nn So, I guess this ticket can be closed.               n        n    n"},{"commnet_id":"comment-74058","commnet_date":"2015-12-09T11:15:05-0800","commnet_user":"Seymur Farziyev","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Seymur Farziyevn added a comment  - 09\/Dec\/2015 11:15 AM     - edited  n        n        Hi. I am working already since 2 days on this issue and didn't find yet alternative solution. I am using Glassfish 4.1.13 with Hibernate 4.3.x version. My simple app uses PostgreSQL and runs everything together fine in my local machine. When I migrate configured project for production to the remote server, i am getting always the following runtime error:\r\nn----------------nnnrnAn Error Occurred:rnrnCould not initialize class az.edu.hedef.test.util.HibernateUtilrn- Stack Tracernrnjava.lang.NoClassDefFoundError: Could not initialize class az.edu.hedef.test.util.HibernateUtilrntat az.edu.hedef.test.core.TestHelper.createNewSession(TestHelper.java:101)rntat az.edu.hedef.test.core.TestHelper.createNewSessionAndTransaction(TestHelper.java:120)rntat az.edu.hedef.test.core.TestHelper.getExamResult(TestHelper.java:33)rntat az.edu.hedef.test.core.TestHelper.isExist(TestHelper.java:47)rntat az.edu.hedef.test.core.TestHelper.getTest(TestHelper.java:56)rntat az.edu.hedef.test.core.TestBean.&lt;init&gt;(TestBean.java:31)rntat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)rntat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)rntat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)rntat java.lang.reflect.Constructor.newInstance(Constructor.java:422)rntat java.lang.Class .newInstance(Class .java:442)rntat com.sun.faces.mgbean.BeanBuilder.newBeanInstance(BeanBuilder.java:186)rntat com.sun.faces.mgbean.BeanBuilder.build(BeanBuilder.java:100)rntat com.sun.faces.mgbean.BeanManager.createAndPush(BeanManager.java:409)rntat com.sun.faces.mgbean.BeanManager.create(BeanManager.java:269)rntat com.sun.faces.el.ManagedBeanELResolver.resolveBean(ManagedBeanELResolver.java:257)rntat com.sun.faces.el.ManagedBeanELResolver.getValue(ManagedBeanELResolver.java:117)rntat com.sun.faces.el.DemuxCompositeELResolver._getValue(DemuxCompositeELResolver.java:176)rntat com.sun.faces.el.DemuxCompositeELResolver.getValue(DemuxCompositeELResolver.java:203)rntat com.sun.el.parser.AstIdentifier.getValue(AstIdentifier.java:116)rntat com.sun.el.parser.AstValue.getBase(AstValue.java:151)rntat com.sun.el.parser.AstValue.getValue(AstValue.java:200)rntat com.sun.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:226)rntat com.sun.faces.facelets.el.TagValueExpression.getValue(TagValueExpression.java:109)rntat javax.faces.component.ComponentStateHelper.eval(ComponentStateHelper.java:194)rntat javax.faces.component.ComponentStateHelper.eval(ComponentStateHelper.java:182)rntat javax.faces.component.UIOutput.getValue(UIOutput.java:174)rntat javax.faces.component.UIInput.getValue(UIInput.java:291)rntat com.sun.faces.renderkit.html_basic.HtmlBasicInputRenderer.getValue(HtmlBasicInputRenderer.java:205)rntat com.sun.faces.renderkit.html_basic.HtmlBasicRenderer.getCurrentValue(HtmlBasicRenderer.java:355)rntat com.sun.faces.renderkit.html_basic.HtmlBasicRenderer.encodeEnd(HtmlBasicRenderer.java:164)rntat javax.faces.component.UIComponentBase.encodeEnd(UIComponentBase.java:919)rntat com.sun.faces.renderkit.html_basic.HtmlBasicRenderer.encodeRecursive(HtmlBasicRenderer.java:312)rntat com.sun.faces.renderkit.html_basic.GridRenderer.renderRow(GridRenderer.java:185)rntat com.sun.faces.renderkit.html_basic.GridRenderer.encodeChildren(GridRenderer.java:129)rntat javax.faces.component.UIComponentBase.encodeChildren(UIComponentBase.java:889)rntat org.primefaces.renderkit.CoreRenderer.renderChild(CoreRenderer.java:85)rntat org.primefaces.renderkit.CoreRenderer.renderChildren(CoreRenderer.java:72)rntat org.primefaces.component.fieldset.FieldsetRenderer.encodeContent(FieldsetRenderer.java:94)rntat org.primefaces.component.fieldset.FieldsetRenderer.encodeMarkup(FieldsetRenderer.java:76)rntat org.primefaces.component.fieldset.FieldsetRenderer.encodeEnd(FieldsetRenderer.java:47)rntat javax.faces.component.UIComponentBase.encodeEnd(UIComponentBase.java:919)rntat javax.faces.component.UIComponent.encodeAll(UIComponent.java:1863)rntat javax.faces.render.Renderer.encodeChildren(Renderer.java:176)rntat javax.faces.component.UIComponentBase.encodeChildren(UIComponentBase.java:889)rntat javax.faces.component.UIComponent.encodeAll(UIComponent.java:1856)rntat javax.faces.component.UIComponent.encodeAll(UIComponent.java:1859)rntat javax.faces.component.UIComponent.encodeAll(UIComponent.java:1859)rntat com.sun.faces.application.view.FaceletViewHandlingStrategy.renderView(FaceletViewHandlingStrategy.java:456)rntat com.sun.faces.application.view.MultiViewHandler.renderView(MultiViewHandler.java:133)rntat com.sun.faces.lifecycle.RenderResponsePhase.execute(RenderResponsePhase.java:120)rntat com.sun.faces.lifecycle.Phase.doPhase(Phase.java:101)rntat com.sun.faces.lifecycle.LifecycleImpl.render(LifecycleImpl.java:219)rntat javax.faces.webapp.FacesServlet.service(FacesServlet.java:647)rntat org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)rntat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)rntat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)rntat org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)rntat org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)rntat com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)rntat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)rntat org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:415)rntat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:282)rntat com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)rntat com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)rntat org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:201)rntat org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:175)rntat org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)rntat org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)rntat org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:284)rntat org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:201)rntat org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:133)rntat org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:112)rntat org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)rntat org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:561)rntat org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)rntat org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)rntat org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)rntat org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)rntat org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:565)rntat org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:545)rntat java.lang.Thread .run(Thread .java:745)rnnn----------------\r\nnI have created HibernateUtil.java clicking File --&gt; New --&gt; Hibernate --&gt; HibernateUtil path. So, I am sure, it is not my fault and something like bug of Hibernate framework.nnHow i can change my HibernateUtil class implementation to the supported version? Can you please provide some sample code?nnThanks and regards,\r\nnSeymur F, n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Seymur Farziyevn added a comment  - 09\/Dec\/2015 11:15 AM     - edited                    Hi. I am working already since 2 days on this issue and didn't find yet alternative solution. I am using Glassfish 4.1.13 with Hibernate 4.3.x version. My simple app uses PostgreSQL and runs everything together fine in my local machine. When I migrate configured project for production to the remote server, i am getting always the following runtime error: n---------------- nn  n rnAn Error Occurred:rnrnCould not initialize class az.edu.hedef.test.util.HibernateUtilrn- Stack Tracernrnjava.lang.NoClassDefFoundError: Could not initialize class az.edu.hedef.test.util.HibernateUtilrntat az.edu.hedef.test.core.TestHelper.createNewSession(TestHelper.java:101)rntat az.edu.hedef.test.core.TestHelper.createNewSessionAndTransaction(TestHelper.java:120)rntat az.edu.hedef.test.core.TestHelper.getExamResult(TestHelper.java:33)rntat az.edu.hedef.test.core.TestHelper.isExist(TestHelper.java:47)rntat az.edu.hedef.test.core.TestHelper.getTest(TestHelper.java:56)rntat az.edu.hedef.test.core.TestBean.&lt;init&gt;(TestBean.java:31)rntat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)rntat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)rntat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)rntat java.lang.reflect.Constructor.newInstance(Constructor.java:422)rntat java.lang. Class .newInstance( Class .java:442)rntat com.sun.faces.mgbean.BeanBuilder.newBeanInstance(BeanBuilder.java:186)rntat com.sun.faces.mgbean.BeanBuilder.build(BeanBuilder.java:100)rntat com.sun.faces.mgbean.BeanManager.createAndPush(BeanManager.java:409)rntat com.sun.faces.mgbean.BeanManager.create(BeanManager.java:269)rntat com.sun.faces.el.ManagedBeanELResolver.resolveBean(ManagedBeanELResolver.java:257)rntat com.sun.faces.el.ManagedBeanELResolver.getValue(ManagedBeanELResolver.java:117)rntat com.sun.faces.el.DemuxCompositeELResolver._getValue(DemuxCompositeELResolver.java:176)rntat com.sun.faces.el.DemuxCompositeELResolver.getValue(DemuxCompositeELResolver.java:203)rntat com.sun.el.parser.AstIdentifier.getValue(AstIdentifier.java:116)rntat com.sun.el.parser.AstValue.getBase(AstValue.java:151)rntat com.sun.el.parser.AstValue.getValue(AstValue.java:200)rntat com.sun.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:226)rntat com.sun.faces.facelets.el.TagValueExpression.getValue(TagValueExpression.java:109)rntat javax.faces.component.ComponentStateHelper.eval(ComponentStateHelper.java:194)rntat javax.faces.component.ComponentStateHelper.eval(ComponentStateHelper.java:182)rntat javax.faces.component.UIOutput.getValue(UIOutput.java:174)rntat javax.faces.component.UIInput.getValue(UIInput.java:291)rntat com.sun.faces.renderkit.html_basic.HtmlBasicInputRenderer.getValue(HtmlBasicInputRenderer.java:205)rntat com.sun.faces.renderkit.html_basic.HtmlBasicRenderer.getCurrentValue(HtmlBasicRenderer.java:355)rntat com.sun.faces.renderkit.html_basic.HtmlBasicRenderer.encodeEnd(HtmlBasicRenderer.java:164)rntat javax.faces.component.UIComponentBase.encodeEnd(UIComponentBase.java:919)rntat com.sun.faces.renderkit.html_basic.HtmlBasicRenderer.encodeRecursive(HtmlBasicRenderer.java:312)rntat com.sun.faces.renderkit.html_basic.GridRenderer.renderRow(GridRenderer.java:185)rntat com.sun.faces.renderkit.html_basic.GridRenderer.encodeChildren(GridRenderer.java:129)rntat javax.faces.component.UIComponentBase.encodeChildren(UIComponentBase.java:889)rntat org.primefaces.renderkit.CoreRenderer.renderChild(CoreRenderer.java:85)rntat org.primefaces.renderkit.CoreRenderer.renderChildren(CoreRenderer.java:72)rntat org.primefaces.component.fieldset.FieldsetRenderer.encodeContent(FieldsetRenderer.java:94)rntat org.primefaces.component.fieldset.FieldsetRenderer.encodeMarkup(FieldsetRenderer.java:76)rntat org.primefaces.component.fieldset.FieldsetRenderer.encodeEnd(FieldsetRenderer.java:47)rntat javax.faces.component.UIComponentBase.encodeEnd(UIComponentBase.java:919)rntat javax.faces.component.UIComponent.encodeAll(UIComponent.java:1863)rntat javax.faces.render.Renderer.encodeChildren(Renderer.java:176)rntat javax.faces.component.UIComponentBase.encodeChildren(UIComponentBase.java:889)rntat javax.faces.component.UIComponent.encodeAll(UIComponent.java:1856)rntat javax.faces.component.UIComponent.encodeAll(UIComponent.java:1859)rntat javax.faces.component.UIComponent.encodeAll(UIComponent.java:1859)rntat com.sun.faces.application.view.FaceletViewHandlingStrategy.renderView(FaceletViewHandlingStrategy.java:456)rntat com.sun.faces.application.view.MultiViewHandler.renderView(MultiViewHandler.java:133)rntat com.sun.faces.lifecycle.RenderResponsePhase.execute(RenderResponsePhase.java:120)rntat com.sun.faces.lifecycle.Phase.doPhase(Phase.java:101)rntat com.sun.faces.lifecycle.LifecycleImpl.render(LifecycleImpl.java:219)rntat javax.faces.webapp.FacesServlet.service(FacesServlet.java:647)rntat org.apache.catalina.core.StandardWrapper.service(StandardWrapper.java:1682)rntat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:318)rntat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:160)rntat org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:734)rntat org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:673)rntat com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:99)rntat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:174)rntat org.apache.catalina.connector.CoyoteAdapter.doService(CoyoteAdapter.java:415)rntat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:282)rntat com.sun.enterprise.v3.services.impl.ContainerMapper$HttpHandlerCallable.call(ContainerMapper.java:459)rntat com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:167)rntat org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:201)rntat org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:175)rntat org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:235)rntat org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)rntat org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:284)rntat org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:201)rntat org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:133)rntat org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:112)rntat org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)rntat org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:561)rntat org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:112)rntat org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:117)rntat org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:56)rntat org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:137)rntat org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:565)rntat org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:545)rntat java.lang. Thread .run( Thread .java:745)rn n  n ---------------- nI have created  HibernateUtil.java  clicking  File --&gt; New --&gt; Hibernate --&gt; HibernateUtil  path. So, I am sure, it is not my fault and something like bug of Hibernate framework. nn How i can change my HibernateUtil class implementation to the supported version? Can you please provide some sample code? nn Thanks and regards, nSeymur F,              n        n    n"},{"commnet_id":"comment-84780","commnet_date":"2016-10-05T19:45:32-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 05\/Oct\/2016 19:45 PM    n        n        Seymur Farziyev, please use community resources for help: http:\/\/hibernate.org\/community\/ n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 05\/Oct\/2016 19:45 PM                       Seymur Farziyev , please use community resources for help:  http:\/\/hibernate.org\/community\/               n        n    n"}]}},{"HHH-10090":{"info":{"issue_title":"Overall IdentityColumSupport\/InsertGeneratedIdentifierDelegate design","issue_key":"HHH-10090","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Rejected","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"HHH-10084                                                              Closed                 introduces IdentityColumSupport.  We need to think through cleaning up all scenarios and uses of InsertGeneratedIdentifierDelegate to even further encapsulate handling for these insert-generated-identifier cases.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10090?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-74876","commnet_date":"2016-01-26T09:05:41-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 26\/Jan\/2016 09:05 AM    n        n        Not sure what exactly I was thinking here n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 26\/Jan\/2016 09:05 AM                      Not sure what exactly I was thinking here              n        n    n"}]}},{"HSEARCH-1997":{"info":{"issue_title":"NumericFieldUtils to avoid checking for Java8 time classes multiple times","issue_key":"HSEARCH-1997","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"5.5.0.CR1","issue_component":"5.5.0.CR1","issue_labels":"5.5.0.CR1","issue_description":"There is a potential performance issue in the current implementation for org.hibernate.search.bridge.util.impl.NumericFieldUtils.isAssignableFrom(Class&lt;?&gt;, String) as it could be invoked multiple times (see requiresNumericRangeQuery()). This information could be cached, maybe even in a static field.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1997?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-1996":{"info":{"issue_title":"Expose information on sortable fields through public meta-data API","issue_key":"HSEARCH-1996","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.7","issue_labels":"5.7","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1996?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-1995":{"info":{"issue_title":"Allow different default null tokens to be configured for each field type","issue_key":"HSEARCH-1995","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.x","issue_labels":"5.x","issue_description":"The configuration property Environment.DEFAULT_NUMERIC_NULL_TOKEN was designed to configure a default for text-based keywords, but is now being applied to numeric tokens which happen to encode null values as well.\r\n We should consider having independent defaults and global options to specify the defaults for each field type.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1995?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-1994":{"info":{"issue_title":"Improve usability for properties which should be sortable but not searchable","issue_key":"HSEARCH-1994","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"As of                                                          HSEARCH-1984                                                              Closed                 for each property that should be used for sorting a @Field must be declared. That's cumbersome for fields which should not be searchable themselves, in which case a un-indexed, un-stored fields field must be declared atm.  That case would be simplified if @SortableField itself would expose all required options (field bridge, null value token). Values configured through @SortableField itself would take precedence, as a fallback we'd inherit from the referenced @Field.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1994?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-70241","commnet_date":"2015-09-08T05:21:53-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 08\/Sep\/2015 05:21 AM    n        n        I don't see this as a problem. That's how we do it for numeric fields. I would prefer we close this one. n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 08\/Sep\/2015 05:21 AM                      I don't see this as a problem. That's how we do it for numeric fields. I would prefer we close this one.              n        n    n"},{"commnet_id":"comment-70250","commnet_date":"2015-09-09T03:03:36-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 09\/Sep\/2015 03:03 AM    n        n        There is a difference to numeric fields. In that case @Field represents an actual index field. @NumericField only fine-tunes the configuration of that field (its type). So the following represents the configuration of one field in the index:nnnrn@Fieldrn@NumericFieldrnint  age;rnnnnWhereas for sorting another \"doc value field\" will be added. So the following represents two fields in the index:nnnrn@Fieldrn@SortableFieldrnint  age;rnnnnThe sortable field inherits its configuration from the regular index field. Now in the case that a property should be sortable but not searchable, we still need the @Field so we can get its configuration. So the following again would only represent one field in the index:nnnrn@Field(stored=Store.NO, indexed=Index.NO)rn@SortableFieldrnint  age;rnnnnThat'd be avoided by extending @SortableField itself so one can write it like that:nnnrn@SortableField \/\/ or @SortableField(bridge=MyNumericDocValuesFieldBridge.class, indexNullAs=\"-1\" )rn int  age;rnn n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 09\/Sep\/2015 03:03 AM                      There is a difference to numeric fields. In that case  @Field  represents an actual index field.  @NumericField  only fine-tunes the configuration of that field (its type). So the following represents the configuration of  one  field in the index: nn  n rn@Fieldrn@NumericFieldrn int  age;rn n  nn Whereas for sorting another \"doc value field\" will be added. So the following represents  two  fields in the index: nn  n rn@Fieldrn@SortableFieldrn int  age;rn n  nn The sortable field inherits its configuration from the regular index field. Now in the case that a property should be sortable but not searchable, we still need the  @Field  so we can get its configuration. So the following again would only represent  one  field in the index: nn  n rn@Field(stored=Store.NO, indexed=Index.NO)rn@SortableFieldrn int  age;rn n  nn That'd be avoided by extending  @SortableField  itself so one can write it like that: nn  n rn@SortableField  \/\/ or @SortableField(bridge=MyNumericDocValuesFieldBridge.class, indexNullAs= \"-1\" )rn  int  age;rn n               n        n    n"},{"commnet_id":"comment-70254","commnet_date":"2015-09-09T06:14:52-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 09\/Sep\/2015 06:14 AM    n        n        I understand your proposal but I still prefer the current model. n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 09\/Sep\/2015 06:14 AM                      I understand your proposal but I still prefer the current model.              n        n    n"}]}},{"HSEARCH-1993":{"info":{"issue_title":"Allow to define sortable fields through configuration DSL","issue_key":"HSEARCH-1993","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.5.0.Final","issue_labels":"5.5.0.Final","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1993?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-1991":{"info":{"issue_title":"Consider org.apache.lucene.search.SortField.Type.REWRITEABLE when validating potential sorting optimisations","issue_key":"HSEARCH-1991","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.7","issue_labels":"5.7","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1991?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-1990":{"info":{"issue_title":"Explore why upgrading checkstyle maven plugin to &gt;=2.14 fail","issue_key":"HSEARCH-1990","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Out of Date","issue_fix_version":"None","issue_component":"None","issue_labels":"build","issue_description":"apt and test are now tested with a post 2.12.1 checkstyle plugin.\r\n Maybe it's a matter of configuration.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1990?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-75958","commnet_date":"2016-03-15T05:28:03-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 15\/Mar\/2016 05:28 AM    n        n        We're using version 2.17 now and not aware of any problem. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 15\/Mar\/2016 05:28 AM                      We're using version 2.17 now and not aware of any problem.              n        n    n"}]}},{"HSEARCH-1989":{"info":{"issue_title":"Let maven build support maven-color","issue_key":"HSEARCH-1989","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.5.0.CR1","issue_labels":"5.5.0.CR1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1989?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1016":{"info":{"issue_title":"Let maven build support maven-color","issue_key":"HV-1016","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.2.Final","issue_labels":"5.2.2.Final","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1016?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-70398","commnet_date":"2015-09-17T04:11:53-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 17\/Sep\/2015 04:11 AM    n        n        PR https:\/\/github.com\/hibernate\/hibernate-validator\/pull\/426 n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 17\/Sep\/2015 04:11 AM                      PR  https:\/\/github.com\/hibernate\/hibernate-validator\/pull\/426               n        n    n"}]}},{"HHH-10088":{"info":{"issue_title":"Add link to Eclipse setting in README file (Mustafa Ulu)","issue_key":"HHH-10088","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"5.0.1","issue_component":"5.0.1","issue_labels":"5.0.1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10088?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10087":{"info":{"issue_title":"Support prepending of locks","issue_key":"HHH-10087","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"5.0.0.Final","issue_component":"5.0.0.Final","issue_labels":"5.0.0.Final","issue_description":"Teradata database requires that locks must be prepended rather than appended to SQL. This works most of the time because the Dialect method applyLocksToSql() is overridden to provide this behavior. There are two places where the locks are simply appended that cause failures on Teradata. These occur in: \r\n org.hibernate.loader.plan.exec.query.internal.SelectStatementBuilder.java\r\n org.hibernate.sql.SimpleSelect  both of which call:\r\n buf.append( dialect.getForUpdateString( lockOptions ) );  Example of locking SQL:\r\n H2:\t        select a0_.id  from T_LOCK_A a0_ where a0_.id=? Locking row for write\r\n Teradata: Locking row for write select a0_.id  from T_LOCK_A a0_ where a0_.id=?  org.hibernate.test.locking.LockModeTest.java can be used to demonstrate the problem and validate the fix","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10087?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-70860","commnet_date":"2015-09-29T22:37:52-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 29\/Sep\/2015 22:37 PM    n        n        Going to push this to 5.0.3.  I do not like this much, but I am not sure there is a better way in 5.0.  So  I wanted to think about this some more n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 29\/Sep\/2015 22:37 PM                      Going to push this to 5.0.3.  I do not like this much, but I am not sure there is a better way in 5.0.  So  I wanted to think about this some more              n        n    n"}]}},{"HHH-10086":{"info":{"issue_title":"Deprecate Dialect#getIdentityColumnString() and Dialect#getIdentitySelectString()","issue_key":"HHH-10086","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.2","issue_labels":"5.0.2","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10086?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-1985":{"info":{"issue_title":"Upgrade branch 5.3 to test with WildFly 9.0.1.Final","issue_key":"HSEARCH-1985","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"5.3.0.Final","issue_component":"5.3.0.Final","issue_labels":"5.3.0.Final","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1985?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10085":{"info":{"issue_title":"Remove cast from SearchedCaseExpression and SimpleCaseExpression","issue_key":"HHH-10085","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.2","issue_component":"5.0.2","issue_labels":"5.0.2","issue_description":"remove the changes introduced by https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1072","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10085?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-77644","commnet_date":"2016-05-05T09:23:35-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 05\/May\/2016 09:23 AM    n        n        Andrea Boriero Should this target 5.2 or 6.0? n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 05\/May\/2016 09:23 AM                       Andrea Boriero  Should this target 5.2 or 6.0?              n        n    n"},{"commnet_id":"comment-77652","commnet_date":"2016-05-05T15:29:24-0700","commnet_user":"Andrea Boriero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Andrea Borieron added a comment  - 05\/May\/2016 15:29 PM    n        n        Steve Ebersole i think 6.0 n    n    n        n            Show  n            n                        n    n    n    n                nn       Andrea Borieron added a comment  - 05\/May\/2016 15:29 PM                       Steve Ebersole  i think 6.0              n        n    n"},{"commnet_id":"comment-77847","commnet_date":"2016-05-10T12:57:10-0700","commnet_user":"Andrea Boriero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Andrea Borieron added a comment  - 10\/May\/2016 12:57 PM    n        n        Steve Ebersole if you think the PR https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1361 is good it can go in 5.2  n    n    n        n            Show  n            n                        n    n    n    n                nn       Andrea Borieron added a comment  - 10\/May\/2016 12:57 PM                       Steve Ebersole  if you think the PR  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1361  is good it can go in 5.2               n        n    n"}]}},{"HHH-10084":{"info":{"issue_title":"Refactor Identity Column support methods into IdentityColumnSupport interface","issue_key":"HHH-10084","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0","issue_labels":"5.1.0","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10084?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-70220","commnet_date":"2015-09-04T10:38:01-0700","commnet_user":"Andrea Boriero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Andrea Borieron added a comment  - 04\/Sep\/2015 10:38 AM    n        n        PR https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1073 n    n    n        n            Show  n            n                        n    n    n    n                nn       Andrea Borieron added a comment  - 04\/Sep\/2015 10:38 AM                      PR  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1073               n        n    n"},{"commnet_id":"comment-70245","commnet_date":"2015-09-08T11:07:09-0700","commnet_user":"Andrea Boriero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Andrea Borieron added a comment  - 08\/Sep\/2015 11:07 AM    n        n        merged https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1073  n    n    n        n            Show  n            n                        n    n    n    n                nn       Andrea Borieron added a comment  - 08\/Sep\/2015 11:07 AM                      merged  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1073                n        n    n"},{"commnet_id":"comment-70246","commnet_date":"2015-09-08T11:08:53-0700","commnet_user":"Andrea Boriero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Andrea Borieron added a comment  - 08\/Sep\/2015 11:08 AM    n        n        created in order to resolve n    n    n        n            Show  n            n                        n    n    n    n                nn       Andrea Borieron added a comment  - 08\/Sep\/2015 11:08 AM                      created in order to resolve              n        n    n"},{"commnet_id":"comment-74433","commnet_date":"2016-01-04T13:21:32-0800","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 04\/Jan\/2016 13:21 PM    n        n        The commit message referred to \"HHH-100084\" (not n    n                n        n            n            HHH-10084n        n                                                    Closed n             n) so it's not listed on this Jira.nnHere is the commit: https:\/\/github.com\/hibernate\/hibernate-orm\/commit\/2731fe541a4b297e399d46357ad9eb5bbe2d2239 n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 04\/Jan\/2016 13:21 PM                      The commit message referred to \"HHH-100084\" (not n     n                 n         n             n            HHH-10084n         n                                                     Closed n             n) so it's not listed on this Jira. nn Here is the commit:  https:\/\/github.com\/hibernate\/hibernate-orm\/commit\/2731fe541a4b297e399d46357ad9eb5bbe2d2239               n        n    n"}]}},{"HSEARCH-1984":{"info":{"issue_title":"Provide means of configuring fields to sort on","issue_key":"HSEARCH-1984","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.5.0.CR1","issue_labels":"5.5.0.CR1","issue_description":"With Lucene 5 we should provide a way for explicitly configuring sort fields, avoiding the need for un-inverting when reading.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1984?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-70231","commnet_date":"2015-09-07T10:30:10-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 07\/Sep\/2015 10:30 AM    n        n        A first proposal:\r\nn https:\/\/gist.github.com\/gunnarmorling\/4ab262cf1fc772047897nnAnd some further considerations happened on IRC:nn[16:53] &lt;sannegrinovero&gt; emmanuel: looking at the @SortField discussion, there are two aspects which need to be further analysedrn[16:54] &lt;sannegrinovero&gt; 1# if the field is in a _ToMany relation (or iterated in any other way) it's not valid, although it might be valid for other target types if they are indexed as wellrn[16:55] &lt;sannegrinovero&gt; 2# how to link it to index fields which are not directly generated by the annotated property?rn[17:00] &lt;emmanuel&gt; how do you put a @SortedField on a ToMany? Via @IndexedEmbedded sannegrinovero ?rn[17:00] &lt;emmanuel&gt; if yes, then that's not worse than beforern[17:00] &lt;emmanuel&gt; the annotation would be valid in some cases but not in the embedded casern[17:01] &lt;sannegrinovero&gt; emmanuel: right, but what do you do in terms of validation?rn[17:01] &lt;emmanuel&gt; hippie stylern[17:01] &lt;emmanuel&gt; let gorn[17:01] &lt;sannegrinovero&gt; I guess we can log a warning at runtime when the fieldname is chosen for a sorted queryrn[17:01] &lt;sannegrinovero&gt; but you can't throw up at boot timern[17:02] &lt;emmanuel&gt; yes, the query time seems like a good slot to warn against thatrn[17:02] &lt;emmanuel&gt; or even through an exceptionrn[17:02] &lt;sannegrinovero&gt; right, this case could even be an exception.rn[17:02] &lt;emmanuel&gt; can you elaborate on 2?rn[17:02] &lt;emmanuel&gt; custom field bridge for example?rn[17:02] &lt;emmanuel&gt; or are you thinking of someting else?rn[17:03] &lt;sannegrinovero&gt; yea, a custom fieldbridge or even a ClassBridgern[17:03] &lt;sannegrinovero&gt; A custom FieldBridge could still somewhat be related to an entity property, but the ClassBridge doesn't have that linkrn[17:03] &lt;emmanuel&gt; if that's a classbridge, I think a class level @SortField-ish annotation could be usedrn[17:04] &lt;emmanuel&gt; I dont' know enough of how that's implemented to know the real link between a property and the doc value generationrn[17:04] &lt;emmanuel&gt; so I don't have a grasp on how custom field bridges play herern[17:04] &lt;sannegrinovero&gt; Ok, so shoul we allow the type on class already, or should we not make early concessions..rn[17:05] &lt;sannegrinovero&gt; I'd be tempted to start this w\/o an option for fields defined by a ClassBridge, just pointing out the limitationrn[17:05] &lt;emmanuel&gt; i thnk that would be my current preferencern[17:05] &lt;emmanuel&gt; I'd rather we force bridges ot provide field metadatarn[17:06] &lt;sannegrinovero&gt; Me too. But does it affect your overall view on how this metadata should be defined:rn[17:06] &lt;sannegrinovero&gt; it really looks like the \"sort fields\" are strongly coupled to the root entity only, and not so much with the propertiesrn[17:07] &lt;sannegrinovero&gt; So for example - thinking out of the box - it could be just a list of field names defined by an annotation on the root type.rn[17:07] &lt;sannegrinovero&gt; (that's considering limitation #1 as well)rn[17:09] &lt;emmanuel&gt; sannegrinovero: so would be fields I guessrn[17:09] &lt;emmanuel&gt; ah no because the sort field would feed (data wise) from the regular fieldrn[17:09] &lt;emmanuel&gt; so why is @Field(sort=YES) insufficient?rn[17:10] &lt;emmanuel&gt; in which case is sorta solves the bridge issue as well as the bridge would drive sortability like it drives indexabilityrn[17:11] &lt;sannegrinovero&gt; generally a @Field is bound to an entity property to have it \"generate fields\", but in the sorting case you want to know which one of the generated fields..rn[17:12] &lt;sannegrinovero&gt; I think there's a mismatch with @Field as that annotation is treated recursively via @IndexedEmbedded, while in this case we don't want that kind of recursionrn[17:13] &lt;sannegrinovero&gt; emmanuel: different but related question: should we allow to sort on a *property name*?rn[17:13] &lt;emmanuel&gt; what did we allow before?rn[17:13] &lt;emmanuel&gt; I am not sure why would would or even could revisit that in a 5.5rn[17:13] &lt;sannegrinovero&gt; we allowed anything, and no validations.rn[17:14] &lt;sannegrinovero&gt; althought since the user was not being helped (no sorting DSL), the user had to play with document field names (definitely not property names)rn[17:14] &lt;emmanuel&gt; we still don't ahve a sort DSL right?rn[17:15] &lt;sannegrinovero&gt; rightrn[17:15] &lt;emmanuel&gt; in a ideal world, I would want people to sort by propertyrn[17:15] &lt;emmanuel&gt; searhc by propertyrn[17:15] &lt;emmanuel&gt; everything at the object levelrn[17:15] &lt;emmanuel&gt; de factorrn[17:15] &lt;emmanuel&gt; orn[17:15] &lt;sannegrinovero&gt; I'm asking this now - even if we don't want to do this now - because it would be good to know if we should inherently re-map (one day) a property whic his mapped to multiple fieldsrn[17:15] &lt;sannegrinovero&gt; into a sort on multiple fieldsrn[17:15] &lt;emmanuel&gt; but with option to shift gear towards plain Lucene level as we have seen that i is useful for powerusersrn[17:16] &lt;sannegrinovero&gt; Ok, yes that's what I wanted to check. Thanks.rn[17:17] &lt;sannegrinovero&gt; so when we revisit FieldBridge SPI &amp; co we should not only make sure to track which fields it's going to generate but also to have it generate multi-field sort definitionsrn[17:19] &lt;emmanuel&gt; sannegrinovero: right, for example, a year\/month\/day multi field bridge would know how to sortrn[17:19] &lt;emmanuel&gt; a price + currency *might* knowrn[17:19] &lt;emmanuel&gt; a Map&lt;k,v&gt; to map.k = v will not knowrn[17:20] &lt;emmanuel&gt; a bridge storing in different language is screwed too :Drn[17:20] &lt;emmanuel&gt; this is toughrn[17:21] &lt;sannegrinovero&gt; I guess we'll have to treat is a an \"aspect\"rn[17:21] &lt;sannegrinovero&gt; not mandatory for all bridgesrn[17:23] &lt;emmanuel&gt; I think I would like this aspect o be about \"sortability\"rn[17:23] &lt;emmanuel&gt; and the user have the abiloty to enable sorting or not on the field using that bridge or notrn[17:23] &lt;emmanuel&gt; that's the most inuitive to mern[17:23] &lt;emmanuel&gt; and indeed we might need to do like @IndexedEmbedded and offer a flat list like you sayrn[17:24] &lt;emmanuel&gt; for sorted properties form a rootrn[17:27] &lt;sannegrinovero&gt; emmanuel: so you'd expect a set of \"SortabilityBridge\" implementations, one per type, as a parallel concept to Fieldbridge and we allow some form of mix&amp;match with different bridges and sorters?rn[17:28] &lt;sannegrinovero&gt; It all needs to be agnostic of Lucene types too :)rn[17:28] &lt;emmanuel&gt; why would you separate it from FieldBridge?rn[17:29] &lt;emmanuel&gt; to me a sortable thing would be a fieldbridgern[17:29] &lt;emmanuel&gt; or classbridgern[17:30] &lt;sannegrinovero&gt; ok, that's what I was thinking too when I said an \"aspect\", but then you seemed to imply you'd make it more of a separate thingrn[17:30] &lt;emmanuel&gt; I don't think there is much benefits into spliting itrn[17:31] &lt;emmanuel&gt; what I mean rather is that a sorrableFieldBridge might not generate a doc value if the user has not set @SortBridge (or whatever that is)rn[17:31] &lt;sannegrinovero&gt; BTW at the end of the day we should really just provide the \"flat list\" of everything, not just sort fields, but engage the @IndexedEmbedded recursion capabilities just as a convenience to have the users make their shopping list at least effort.rn[17:31] &lt;sannegrinovero&gt; ok, looks we agree then.n n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 07\/Sep\/2015 10:30 AM                      A first proposal: n  https:\/\/gist.github.com\/gunnarmorling\/4ab262cf1fc772047897  nn And some further considerations happened on IRC: n  n [16:53] &lt;sannegrinovero&gt; emmanuel: looking at the @SortField discussion, there are two aspects which need to be further analysedrn[16:54] &lt;sannegrinovero&gt; 1# if the field is in a _ToMany relation (or iterated in any other way) it's not valid, although it might be valid for other target types if they are indexed as wellrn[16:55] &lt;sannegrinovero&gt; 2# how to link it to index fields which are not directly generated by the annotated property?rn[17:00] &lt;emmanuel&gt; how do you put a @SortedField on a ToMany? Via @IndexedEmbedded sannegrinovero ?rn[17:00] &lt;emmanuel&gt; if yes, then that's not worse than beforern[17:00] &lt;emmanuel&gt; the annotation would be valid in some cases but not in the embedded casern[17:01] &lt;sannegrinovero&gt; emmanuel: right, but what do you do in terms of validation?rn[17:01] &lt;emmanuel&gt; hippie stylern[17:01] &lt;emmanuel&gt; let gorn[17:01] &lt;sannegrinovero&gt; I guess we can log a warning at runtime when the fieldname is chosen for a sorted queryrn[17:01] &lt;sannegrinovero&gt; but you can't throw up at boot timern[17:02] &lt;emmanuel&gt; yes, the query time seems like a good slot to warn against thatrn[17:02] &lt;emmanuel&gt; or even through an exceptionrn[17:02] &lt;sannegrinovero&gt; right, this case could even be an exception.rn[17:02] &lt;emmanuel&gt; can you elaborate on 2?rn[17:02] &lt;emmanuel&gt; custom field bridge for example?rn[17:02] &lt;emmanuel&gt; or are you thinking of someting else?rn[17:03] &lt;sannegrinovero&gt; yea, a custom fieldbridge or even a ClassBridgern[17:03] &lt;sannegrinovero&gt; A custom FieldBridge could still somewhat be related to an entity property, but the ClassBridge doesn't have that linkrn[17:03] &lt;emmanuel&gt; if that's a classbridge, I think a class level @SortField-ish annotation could be usedrn[17:04] &lt;emmanuel&gt; I dont' know enough of how that's implemented to know the real link between a property and the doc value generationrn[17:04] &lt;emmanuel&gt; so I don't have a grasp on how custom field bridges play herern[17:04] &lt;sannegrinovero&gt; Ok, so shoul we allow the type on class already, or should we not make early concessions..rn[17:05] &lt;sannegrinovero&gt; I'd be tempted to start this w\/o an option for fields defined by a ClassBridge, just pointing out the limitationrn[17:05] &lt;emmanuel&gt; i thnk that would be my current preferencern[17:05] &lt;emmanuel&gt; I'd rather we force bridges ot provide field metadatarn[17:06] &lt;sannegrinovero&gt; Me too. But does it affect your overall view on how this metadata should be defined:rn[17:06] &lt;sannegrinovero&gt; it really looks like the \"sort fields\" are strongly coupled to the root entity only, and not so much with the propertiesrn[17:07] &lt;sannegrinovero&gt; So for example - thinking out of the box - it could be just a list of field names defined by an annotation on the root type.rn[17:07] &lt;sannegrinovero&gt; (that's considering limitation #1 as well)rn[17:09] &lt;emmanuel&gt; sannegrinovero: so would be fields I guessrn[17:09] &lt;emmanuel&gt; ah no because the sort field would feed (data wise) from the regular fieldrn[17:09] &lt;emmanuel&gt; so why is @Field(sort=YES) insufficient?rn[17:10] &lt;emmanuel&gt; in which case is sorta solves the bridge issue as well as the bridge would drive sortability like it drives indexabilityrn[17:11] &lt;sannegrinovero&gt; generally a @Field is bound to an entity property to have it \"generate fields\", but in the sorting case you want to know which one of the generated fields..rn[17:12] &lt;sannegrinovero&gt; I think there's a mismatch with @Field as that annotation is treated recursively via @IndexedEmbedded, while in this case we don't want that kind of recursionrn[17:13] &lt;sannegrinovero&gt; emmanuel: different but related question: should we allow to sort on a *property name*?rn[17:13] &lt;emmanuel&gt; what did we allow before?rn[17:13] &lt;emmanuel&gt; I am not sure why would would or even could revisit that in a 5.5rn[17:13] &lt;sannegrinovero&gt; we allowed anything, and no validations.rn[17:14] &lt;sannegrinovero&gt; althought since the user was not being helped (no sorting DSL), the user had to play with document field names (definitely not property names)rn[17:14] &lt;emmanuel&gt; we still don't ahve a sort DSL right?rn[17:15] &lt;sannegrinovero&gt; rightrn[17:15] &lt;emmanuel&gt; in a ideal world, I would want people to sort by propertyrn[17:15] &lt;emmanuel&gt; searhc by propertyrn[17:15] &lt;emmanuel&gt; everything at the object levelrn[17:15] &lt;emmanuel&gt; de factorrn[17:15] &lt;emmanuel&gt; orn[17:15] &lt;sannegrinovero&gt; I'm asking this now - even if we don't want to do this now - because it would be good to know if we should inherently re-map (one day) a property whic his mapped to multiple fieldsrn[17:15] &lt;sannegrinovero&gt; into a sort on multiple fieldsrn[17:15] &lt;emmanuel&gt; but with option to shift gear towards plain Lucene level as we have seen that i is useful for powerusersrn[17:16] &lt;sannegrinovero&gt; Ok, yes that's what I wanted to check. Thanks.rn[17:17] &lt;sannegrinovero&gt; so when we revisit FieldBridge SPI &amp; co we should not only make sure to track which fields it's going to generate but also to have it generate multi-field sort definitionsrn[17:19] &lt;emmanuel&gt; sannegrinovero: right, for example, a year\/month\/day multi field bridge would know how to sortrn[17:19] &lt;emmanuel&gt; a price + currency *might* knowrn[17:19] &lt;emmanuel&gt; a Map&lt;k,v&gt; to map.k = v will not knowrn[17:20] &lt;emmanuel&gt; a bridge storing in different language is screwed too :Drn[17:20] &lt;emmanuel&gt; this is toughrn[17:21] &lt;sannegrinovero&gt; I guess we'll have to treat is a an \"aspect\"rn[17:21] &lt;sannegrinovero&gt; not mandatory for all bridgesrn[17:23] &lt;emmanuel&gt; I think I would like this aspect o be about \"sortability\"rn[17:23] &lt;emmanuel&gt; and the user have the abiloty to enable sorting or not on the field using that bridge or notrn[17:23] &lt;emmanuel&gt; that's the most inuitive to mern[17:23] &lt;emmanuel&gt; and indeed we might need to do like @IndexedEmbedded and offer a flat list like you sayrn[17:24] &lt;emmanuel&gt; for sorted properties form a rootrn[17:27] &lt;sannegrinovero&gt; emmanuel: so you'd expect a set of \"SortabilityBridge\" implementations, one per type, as a parallel concept to Fieldbridge and we allow some form of mix&amp;match with different bridges and sorters?rn[17:28] &lt;sannegrinovero&gt; It all needs to be agnostic of Lucene types too :)rn[17:28] &lt;emmanuel&gt; why would you separate it from FieldBridge?rn[17:29] &lt;emmanuel&gt; to me a sortable thing would be a fieldbridgern[17:29] &lt;emmanuel&gt; or classbridgern[17:30] &lt;sannegrinovero&gt; ok, that's what I was thinking too when I said an \"aspect\", but then you seemed to imply you'd make it more of a separate thingrn[17:30] &lt;emmanuel&gt; I don't think there is much benefits into spliting itrn[17:31] &lt;emmanuel&gt; what I mean rather is that a sorrableFieldBridge might not generate a doc value if the user has not set @SortBridge (or whatever that is)rn[17:31] &lt;sannegrinovero&gt; BTW at the end of the day we should really just provide the \"flat list\" of everything, not just sort fields, but engage the @IndexedEmbedded recursion capabilities just as a convenience to have the users make their shopping list at least effort.rn[17:31] &lt;sannegrinovero&gt; ok, looks we agree then. n               n        n    n"},{"commnet_id":"comment-70240","commnet_date":"2015-09-08T02:39:48-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 08\/Sep\/2015 02:39 AM    n        n        n1# if the field is in a _ToMany relation (or iterated in any other way) it's not valid, although it might be valid for other target types if they are indexed as wellnnThe current PR will not add a doc value field in the case a sort field is reached through a *-to-many association. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 08\/Sep\/2015 02:39 AM                      n 1# if the field is in a _ToMany relation (or iterated in any other way) it's not valid, although it might be valid for other target types if they are indexed as well  nn The current PR will not add a doc value field in the case a sort field is reached through a *-to-many association.              n        n    n"}]}},{"HHH-10083":{"info":{"issue_title":"Support replicated and distributed caches","issue_key":"HHH-10083","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.0.Final","issue_component":"5.0.0.Final","issue_labels":"5.0.0.Final","issue_description":"Currently 2LC implementation assumes that invalidation caches are used for storing entities\/collections and uses special pending-put caches to keep additional runtime information.  This issue tracks different implementation that supports replicated and distributed caches and uses tombstone-based approach to keep the cache consistent.  More info can be found on https:\/\/github.com\/infinispan\/infinispan\/wiki\/Infinispan-Hibernate-Second-Level-Cache-improvements","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10083?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10082":{"info":{"issue_title":"Change default scale and precision for decimal columns mapped to Java BigInteger properties to accommodate all Java long values","issue_key":"HHH-10082","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"hibernate-core","issue_description":"Default scale should be 0.  Default precision should be set to 20 to accommodate the smallest (most negative) long value: -9223372036854775807.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10082?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-1982":{"info":{"issue_title":"Upgrade to Apache Lucene 5.3.0","issue_key":"HSEARCH-1982","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"None","issue_labels":"engine","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1982?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-70202","commnet_date":"2015-09-03T01:50:08-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 03\/Sep\/2015 01:50 AM    n        n        Are you going to send a PR for updating the Lucene version in WildFly, too? n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 03\/Sep\/2015 01:50 AM                      Are you going to send a PR for updating the Lucene version in WildFly, too?              n        n    n"},{"commnet_id":"comment-70203","commnet_date":"2015-09-03T02:30:34-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 03\/Sep\/2015 02:30 AM    n        n        Not until we upgrade Hibernate Search in WildFly. Why? n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 03\/Sep\/2015 02:30 AM                      Not until we upgrade Hibernate Search in WildFly. Why?              n        n    n"},{"commnet_id":"comment-70204","commnet_date":"2015-09-03T04:57:00-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 03\/Sep\/2015 04:57 AM    n        n        Sure, it's do be done upon the HS version update in WF. Just meant it as a reminder to not forget the Lucene module update when doing it. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 03\/Sep\/2015 04:57 AM                      Sure, it's do be done upon the HS version update in WF. Just meant it as a reminder to not forget the Lucene module update when doing it.              n        n    n"}]}},{"HSEARCH-1977":{"info":{"issue_title":"Relational db backend","issue_key":"HSEARCH-1977","issue_type":"New Feature","issue_status":"In Progress","issue_priority":"In Progress","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"backend","issue_description":"Relational db provider is a back end processor similarly to LUCENE, JMS and JGROUPS. It stores its scheduled index updates (LuceneWork's) in a database for later processing by a scheduled job. It is designed to work single node environments as well as clustered environments.   Primary advantages:  \tOnce persisted to the database, scheduled index updates are not lost in case of node crashes \tNo need for specifying master\/slave roles in a cluster    As with the JMS provider you have to define a job that run in a single or multiple nodes. This job is responsible for calling the method for process the stored workers and write them to the index. This can, for example, be done with Quartz or a Wildfly HA singleton etc.  The relational db provider should support non ORM and existing ORM by piggybacking on the existing service. Optionally support for including the backend operation in the main transaction when storing the entity in the database. See  http:\/\/in.relation.to\/2015\/07\/09\/hibernate-search-jms-transaction\/","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1977?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10071":{"info":{"issue_title":"Remove support for &quot;collection properties&quot; in HQL","issue_key":"HHH-10071","issue_type":"Remove Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6.0.0.Alpha1","issue_labels":"6.0.0.Alpha1","issue_description":"Follow up on                                                          HHH-10070                                                              Closed                 to remove the deprecated support","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10071?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-915":{"info":{"issue_title":"Provide easy access to all required meta-data to schema definers","issue_key":"OGM-915","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.Beta1","issue_labels":"5.0.0.Beta1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-915?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10066":{"info":{"issue_title":"Drop and recreate AuxiliaryDatabaseObjects as part of schema update","issue_key":"HHH-10066","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.0.Final","issue_component":"5.0.0.Final","issue_labels":"5.0.0.Final","issue_description":"if hibernate.hbm2ddl.auto is set to update, auxiliary data base objects are never created:  &lt;hibernate-mapping&gt;  \r\n   \t&lt;database-object&gt;\r\n \t\t&lt;create&gt;\r\n \t\t\tcreate...\r\n \t\t&lt;\/create&gt;\r\n \t\t&lt;drop&gt;DROP ...&lt;\/drop&gt;\r\n \t&lt;\/database-object&gt;\r\n &lt;\/hibernate-mapping&gt;  The corresponding statements in Configuration.generateSchemaUpdateScriptList are missing. But they are available in generateSchemaCreationScript:   for ( AuxiliaryDatabaseObject auxiliaryDatabaseObject : auxiliaryDatabaseObjects ) {\r\n \t\t\tif ( auxiliaryDatabaseObject.appliesToDialect( dialect ) )  {  \t\t\t\tscript.add( auxiliaryDatabaseObject.sqlCreateString( dialect, mapping, defaultCatalog, defaultSchema ) );  \t\t\t} \t\t}  The expectation would be either:   \tif the database is empty, the update script will execute them as well \tfirst all auxiliary drop scripts are executed, than all auxiliary create scripts again (works well for non-persistent objects such as views, indices, triggers, etc.)","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10066?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-70363","commnet_date":"2015-09-15T18:33:17-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 15\/Sep\/2015 18:33 PM    n        n        I assume you mean \"drop and then create\" rather than \"create and then drop\" n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 15\/Sep\/2015 18:33 PM                      I assume you mean \"drop and then create\" rather than \"create and then drop\"              n        n    n"},{"commnet_id":"comment-70840","commnet_date":"2015-09-28T12:16:51-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 28\/Sep\/2015 12:16 PM    n        n        For now I implemented this to perform as:nntDrop all AuxiliaryDatabaseObjectsntCreate any before-table AuxiliaryDatabaseObjectsnt&lt;update as before&gt;ntCreate any after-table AuxiliaryDatabaseObjectsnn n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 28\/Sep\/2015 12:16 PM                      For now I implemented this to perform as: n nt Drop all AuxiliaryDatabaseObjects nt Create any before-table AuxiliaryDatabaseObjects nt &lt;update as before&gt; nt Create any after-table AuxiliaryDatabaseObjects n n             n        n    n"}]}},{"OGM-914":{"info":{"issue_title":"Expose entity key metadata through association key meta data","issue_key":"OGM-914","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.Beta1","issue_labels":"5.0.0.Beta1","issue_description":"AssociationKeyMetadata should expose the entity key meta-data on the local side to allow for creating the right schema structures at start-up.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-914?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-70052","commnet_date":"2015-08-28T02:58:11-0700","commnet_user":"Davide D&#39;Alto","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Davide D&#39;Alton added a comment  - 28\/Aug\/2015 02:58 AM    n        n        With \"local side\", do you mean the owner of the association (the opposite of AssociatedEntityKeyMetadata)? n    n    n        n            Show  n            n                        n    n    n    n                nn       Davide D&#39;Alton added a comment  - 28\/Aug\/2015 02:58 AM                      With \"local side\", do you mean the owner of the association (the opposite of AssociatedEntityKeyMetadata)?              n        n    n"},{"commnet_id":"comment-70053","commnet_date":"2015-08-28T03:10:31-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 28\/Aug\/2015 03:10 AM    n        n        Yes, the opposite of AEKM. It's needed for Cassandra so that the right schema can be created for that entity, e.g. using a List or Set column for storing the association elements (similar to the IN_ENTITY styles for the document stores; There we didn't need that info so far at the meta-data level as they don't create a schema up-front). n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 28\/Aug\/2015 03:10 AM                      Yes, the opposite of AEKM. It's needed for Cassandra so that the right schema can be created for that entity, e.g. using a List or Set column for storing the association elements (similar to the IN_ENTITY styles for the document stores; There we didn't need that info so far at the meta-data level as they don't create a schema up-front).              n        n    n"}]}},{"OGM-910":{"info":{"issue_title":"MongoDB - Create field indexes based on @Index","issue_key":"OGM-910","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0.Alpha1","issue_labels":"5.1.0.Alpha1","issue_description":"See http:\/\/docs.mongodb.org\/master\/core\/indexes-introduction\/  Also unique constraints are supported: https:\/\/docs.mongodb.org\/v3.0\/core\/index-unique\/#index-type-unique","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-910?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-73532","commnet_date":"2015-11-16T01:51:28-0800","commnet_user":"Davide D&#39;Alto","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Davide D&#39;Alton added a comment  - 16\/Nov\/2015 01:51 AM     - edited  n        n        Shouldn't these be two separate issues, one for index and one for unique constraints? n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Davide D&#39;Alton added a comment  - 16\/Nov\/2015 01:51 AM     - edited                    Shouldn't these be two separate issues, one for index and one for unique constraints?              n        n    n"},{"commnet_id":"comment-74572","commnet_date":"2016-01-08T08:37:28-0800","commnet_user":"Francois Le Droff","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Francois Le Droffn added a comment  - 08\/Jan\/2016 08:37 AM    n        n        I made a first attempt \r\nnI would welcome your feedback https:\/\/github.com\/hibernate\/hibernate-ogm\/pull\/614 n    n    n        n            Show  n            n                        n    n    n    n                nn       Francois Le Droffn added a comment  - 08\/Jan\/2016 08:37 AM                      I made a first attempt  nI would welcome your feedback  https:\/\/github.com\/hibernate\/hibernate-ogm\/pull\/614               n        n    n"},{"commnet_id":"comment-79333","commnet_date":"2016-06-15T02:36:21-0700","commnet_user":"Davide D&#39;Alto","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Davide D&#39;Alton added a comment  - 15\/Jun\/2016 02:36 AM    n        n        The latest PR has been merged, waiting for the documentation before resolving this JIRA n    n    n        n            Show  n            n                        n    n    n    n                nn       Davide D&#39;Alton added a comment  - 15\/Jun\/2016 02:36 AM                      The latest PR has been merged, waiting for the documentation before resolving this JIRA              n        n    n"}]}},{"HHH-10059":{"info":{"issue_title":"Make EntityManagerFactoryBuilderImpl.populate methods protected","issue_key":"HHH-10059","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"5.0.0.Final","issue_component":"5.0.0.Final","issue_labels":"5.0.0.Final","issue_description":"To be able to inject Spring managed interceptors into Hibernate, we need the EntityManagerFactoryBuilderImpl.populate(SessionFactoryBuilder sfBuilder, StandardServiceRegistry ssr) method to be protected.  This is a follow up of this discussion: http:\/\/markmail.org\/thread\/jslaxcep2j3v4cru .  Pull request to come.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10059?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69983","commnet_date":"2015-08-26T07:40:22-0700","commnet_user":"Guillaume Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Guillaume Smetn added a comment  - 26\/Aug\/2015 07:40 AM    n        n        Pull request: https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1061 . n    n    n        n            Show  n            n                        n    n    n    n                nn       Guillaume Smetn added a comment  - 26\/Aug\/2015 07:40 AM                      Pull request:  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1061  .              n        n    n"}]}},{"OGM-909":{"info":{"issue_title":"Support Cassandra native CQL queries","issue_key":"OGM-909","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.CR1","issue_labels":"5.0.0.CR1","issue_description":"allow pass-through of CQL via NativeQuery","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-909?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-74717","commnet_date":"2016-01-15T06:50:29-0800","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 15\/Jan\/2016 06:50 AM    n        n        Jonathan Halliday anything more to add for this? Or can we consider it done? n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 15\/Jan\/2016 06:50 AM                       Jonathan Halliday  anything more to add for this? Or can we consider it done?              n        n    n"},{"commnet_id":"comment-74718","commnet_date":"2016-01-15T06:57:41-0800","commnet_user":"Jonathan Halliday","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Jonathan Hallidayn added a comment  - 15\/Jan\/2016 06:57 AM    n        n        It's as good as it's going to get for now, I've got other things with higher priority than making more tweaks here. n    n    n        n            Show  n            n                        n    n    n    n                nn       Jonathan Hallidayn added a comment  - 15\/Jan\/2016 06:57 AM                      It's as good as it's going to get for now, I've got other things with higher priority than making more tweaks here.              n        n    n"},{"commnet_id":"comment-74719","commnet_date":"2016-01-15T07:05:40-0800","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 15\/Jan\/2016 07:05 AM    n        n        Cool  n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 15\/Jan\/2016 07:05 AM                      Cool                n        n    n"}]}},{"HHH-10058":{"info":{"issue_title":"Parameterized test runner compatible with CustomRunner","issue_key":"HHH-10058","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.0.Final","issue_component":"5.0.0.Final","issue_labels":"5.0.0.Final","issue_description":"Many tests are ran with CustomRunner. However it is not possible to combine CustomRunner with JUnit's Parameterized, and this has also some limitations (like single static parameters method). Let's have a runner combining capabilities of both.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10058?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69992","commnet_date":"2015-08-26T11:25:23-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 26\/Aug\/2015 11:25 AM    n        n        How would one do that?  I am not familiar with Parameterized from a design perspective.   n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 26\/Aug\/2015 11:25 AM                      How would one do that?  I am not familiar with Parameterized from a design perspective.                n        n    n"},{"commnet_id":"comment-70036","commnet_date":"2015-08-27T00:37:13-0700","commnet_user":"Radim Vansa","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Radim Vansan added a comment  - 27\/Aug\/2015 00:37 AM    n        n        Steve Ebersole please see https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1062 , I've commented there. n    n    n        n            Show  n            n                        n    n    n    n                nn       Radim Vansan added a comment  - 27\/Aug\/2015 00:37 AM                       Steve Ebersole  please see  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1062  , I've commented there.              n        n    n"}]}},{"HHH-10056":{"info":{"issue_title":"Separate settings for notions of (1) disabling EnversService and (2) auto-registering Envers listeners ","issue_key":"HHH-10056","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.0.Final","issue_component":"5.0.0.Final","issue_labels":"5.0.0.Final","issue_description":"To allow for registration of custom Envers listeners, we need to split the notion of disabling the starting of the EnversService and disabling the auto-registration of the Envers standard listeners.  To that end there are 2 pertinent configuration settings:   \thibernate.integration.envers.enabled - controls whether the EnversService is enabled\/disabled.  It is enabled by default. \thibernate.envers.autoRegisterListeners - controls whether the standard Envers listeners are auto-registered.  The default is true, assuming EnversService is enabled and we found any audited entities.     Original Description   Hi,  I'm trying to plug in my own envers listeners and remove default Envers ones.  The problem I have is that if I set hibernate.integration.envers.enabled to false, then EnversService is not initialized at all.  What I need to do is to not register Envers default listeners but use mine instead. My listeners do need to use EnversService though.  Is there anything I missed?   Thanks in advance","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10056?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-70025","commnet_date":"2015-08-26T13:57:03-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 26\/Aug\/2015 13:57 PM    n        n        Did you have this working in a 4.3 version? n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 26\/Aug\/2015 13:57 PM                      Did you have this working in a 4.3 version?              n        n    n"},{"commnet_id":"comment-70037","commnet_date":"2015-08-27T03:17:25-0700","commnet_user":"Ju00E9ru00F4me BERNARD","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Ju00E9ru00F4me BERNARDn added a comment  - 27\/Aug\/2015 03:17 AM    n        n        Yes I had a working solution with 4.3 because 4.3 still exposed AuditConfiguration even though Envers listeners were disabled.\r\nnWhat should be done is to register the listeners in 5.x only if the legacy parameters is turned off and not the service itself; that way I could still disable Envers listeners and use the new service in my own listeners. n    n    n        n            Show  n            n                        n    n    n    n                nn       Ju00E9ru00F4me BERNARDn added a comment  - 27\/Aug\/2015 03:17 AM                      Yes I had a working solution with 4.3 because 4.3 still exposed AuditConfiguration even though Envers listeners were disabled. nWhat should be done is to register the listeners in 5.x only if the legacy parameters is turned off and not the service itself; that way I could still disable Envers listeners and use the new service in my own listeners.              n        n    n"},{"commnet_id":"comment-70149","commnet_date":"2015-09-01T07:32:58-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 01\/Sep\/2015 07:32 AM    n        n        Why couldn't you just develop your own Integrator? n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 01\/Sep\/2015 07:32 AM                      Why couldn't you just develop your own Integrator?              n        n    n"},{"commnet_id":"comment-70166","commnet_date":"2015-09-01T10:38:45-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Steve Ebersolen added a comment  - 01\/Sep\/2015 10:38 AM     - edited  n        n        I worry about people migrating that used to disable envers integration by setting hibernate.listeners.envers.autoRegister=false.  Now upgrading they'd begin to have the EnversService built and envers building its mappings (see AdditionalJaxbMappingProducerImpl).nnSo I think what I'd like to see instead is to have explicit settings for each of these 2 points.nnnthibernate.integration.envers.enabled controls whether integration happens at all.  Basically, I'd like this to remain exactly as it is in EnversService(Impl) including the handling for the legacy listener setting.nthibernate.envers.autoRegisterListeners used from EnversIntegrator to decide whether to auto-register the standard envers listeners.  If explicitly specified we honor that setting.  If not explicitly specified we fallback to EnversService#isEnablednnnnSo that allows your use-case to work like:nnnhibernate.integration.envers.enabled=truernhibernate.envers.autoRegisterListeners=falsernnn n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Steve Ebersolen added a comment  - 01\/Sep\/2015 10:38 AM     - edited                    I worry about people migrating that used to disable envers integration by setting  hibernate.listeners.envers.autoRegister=false .  Now upgrading they'd begin to have the EnversService built and envers building its mappings (see  AdditionalJaxbMappingProducerImpl ). nn So I think what I'd like to see instead is to have explicit settings for each of these 2 points. nn nt  hibernate.integration.envers.enabled  controls whether integration happens at all.  Basically, I'd like this to remain exactly as it is in  EnversService(Impl)   including  the handling for the legacy listener setting. nt  hibernate.envers.autoRegisterListeners  used from  EnversIntegrator  to decide whether to auto-register the standard envers listeners.  If explicitly specified we honor that setting.  If not explicitly specified we fallback to  EnversService#isEnabled  n nnn So that allows your use-case to work like: nn  n hibernate.integration.envers.enabled=truernhibernate.envers.autoRegisterListeners=falsern n  n             n        n    n"},{"commnet_id":"comment-70180","commnet_date":"2015-09-02T02:07:41-0700","commnet_user":"Ju00E9ru00F4me BERNARD","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Ju00E9ru00F4me BERNARDn added a comment  - 02\/Sep\/2015 02:07 AM     - edited  n        n        I have my own Integrator. The problem as you explained in your last comment is to have two different settings, one for starting Envers and another one for registering the default listeners.  n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Ju00E9ru00F4me BERNARDn added a comment  - 02\/Sep\/2015 02:07 AM     - edited                    I have my own Integrator. The problem as you explained in your last comment is to have two different settings, one for starting Envers and another one for registering the default listeners.               n        n    n"},{"commnet_id":"comment-70181","commnet_date":"2015-09-02T02:11:23-0700","commnet_user":"Ju00E9ru00F4me BERNARD","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Ju00E9ru00F4me BERNARDn added a comment  - 02\/Sep\/2015 02:11 AM    n        n        @Brett Meyer I don't understand why this issue is classified as an \"Improvement\". It seems to be a regression against 4.3 which allowed to use custom listeners whereas this is not possible with 5.x. The likely fix will need an \"improvement\" by adding a new Hibernate\/Envers property setting. n    n    n        n            Show  n            n                        n    n    n    n                nn       Ju00E9ru00F4me BERNARDn added a comment  - 02\/Sep\/2015 02:11 AM                      @Brett Meyer I don't understand why this issue is classified as an \"Improvement\". It seems to be a regression against 4.3 which allowed to use custom listeners whereas this is not possible with 5.x. The likely fix will need an \"improvement\" by adding a new Hibernate\/Envers property setting.              n        n    n"},{"commnet_id":"comment-70185","commnet_date":"2015-09-02T05:47:14-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 02\/Sep\/2015 05:47 AM    n        n        Well a regression is a new bug in something that used to work.  A bug is something that is documented to work but does not.  So a regression would have to be documented as something that is supposed to work.  So where do you see what you are trying documented?  I am pretty certain it is not documented.  Therefore this would be an improvement. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 02\/Sep\/2015 05:47 AM                      Well a regression is a new bug in something that used to work.  A bug is something that is documented to work but does not.  So a regression would have to be documented as something that is supposed to work.  So where do you see what you are trying documented?  I am pretty certain it is not documented.  Therefore this would be an improvement.              n        n    n"}]}},{"OGM-908":{"info":{"issue_title":"Provide a test case template","issue_key":"OGM-908","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"We should provide a simple template for OGM test cases at https:\/\/github.com\/hibernate\/hibernate-test-case-templates.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-908?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1015":{"info":{"issue_title":"Provide test case template","issue_key":"HV-1015","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.3.0.CR1","issue_labels":"5.3.0.CR1","issue_description":"We should provide a simple template for HV test cases at https:\/\/github.com\/hibernate\/hibernate-test-case-templates.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1015?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1014":{"info":{"issue_title":"Clarify what @ValidPart is in example 2.3 of the reference guide","issue_key":"HV-1014","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.3.0.CR1","issue_labels":"5.3.0.CR1","issue_description":"From the forum: https:\/\/forum.hibernate.org\/viewtopic.php?f=9&amp;t=1041084. We should explain that @ValidPart is a custom type-use-level constraint.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1014?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10054":{"info":{"issue_title":"Modify Create Index SQL to support the Teradata database","issue_key":"HHH-10054","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"5.0.0.Final","issue_component":"5.0.0.Final","issue_labels":"5.0.0.Final","issue_description":"Teradata requires that \"create index\" specify the column names after the index name. \r\n  e,g.\r\n H2:            create index ind1 on tablename(indexColumn)\r\n Teradata:  create index ind1(indexColumn) on tableName   With the existing code, I see the following error when trying to create an index:\r\n &#91;Teradata Database&#93;  &#91;TeraJDBC 14.10.00.39&#93;  &#91;Error 3706&#93;  &#91;SQLState 42000&#93;  Syntax error: \r\n Must specify index field(s) for CREATE INDEX.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10054?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69939","commnet_date":"2015-08-25T11:01:20-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 25\/Aug\/2015 11:01 AM    n        n        Not understanding why you can't just override Dialect#getIndexExporter() to do your Terradata specific ordering n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 25\/Aug\/2015 11:01 AM                      Not understanding why you can't just override  Dialect#getIndexExporter()  to do your Terradata specific ordering              n        n    n"},{"commnet_id":"comment-69940","commnet_date":"2015-08-25T11:06:31-0700","commnet_user":"David Repshas","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       David Repshasn added a comment  - 25\/Aug\/2015 11:06 AM    n        n        \r\nnI'll take a look at that option and get back to you.  n    n    n        n            Show  n            n                        n    n    n    n                nn       David Repshasn added a comment  - 25\/Aug\/2015 11:06 AM                       nI'll take a look at that option and get back to you.               n        n    n"},{"commnet_id":"comment-70074","commnet_date":"2015-08-30T21:55:17-0700","commnet_user":"David Repshas","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       David Repshasn added a comment  - 30\/Aug\/2015 21:55 PM    n        n        \r\nnI overrode Dialect#getIndexExporter() and it seems to work fine, I've made those additions to Teradata14Dialect in the pull request. n    n    n        n            Show  n            n                        n    n    n    n                nn       David Repshasn added a comment  - 30\/Aug\/2015 21:55 PM                       nI overrode Dialect#getIndexExporter() and it seems to work fine, I've made those additions to Teradata14Dialect in the pull request.              n        n    n"}]}},{"HHH-10052":{"info":{"issue_title":"documentation about hashcode and equals not up to date","issue_key":"HHH-10052","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"5.0.0.Final","issue_component":"5.0.0.Final","issue_labels":"5.0.0.Final","issue_description":"You explain at https:\/\/docs.jboss.org\/hibernate\/orm\/5.0\/manual\/en-US\/html\/ch04.html#persistent-classes-equalshashcode how to write equals and hashcode. \r\n Current java versions allow to implement these methods in much shorter and cleaner code using java.util.Objects.equals() and java.util.Objects.hash().     @Override  public  boolean  equals(Object  rhs) {      if  (this  == rhs)          return  true ;      \/**       * A proxy class does not compare well. So we first have to get the real       * class       *\/      if  (rhs == null  || Hibernate.getClass(this ) != Hibernate.getClass(rhs))          return  false ;      MyClass that = (MyClass ) rhs;        if  (!java.util.Objects.equals(fieldname, that.fieldname))          return  false ;      return  true ;  }    @Override  public  int  hashCode() {      return  java.util.Objects.hash(fieldname);  }","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10052?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-78431","commnet_date":"2016-05-25T03:15:42-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 25\/May\/2016 03:15 AM    n        n        Switched to 1.7-style equals and hashCode. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 25\/May\/2016 03:15 AM                      Switched to 1.7-style equals and hashCode.              n        n    n"},{"commnet_id":"comment-84822","commnet_date":"2016-10-06T06:14:07-0700","commnet_user":"Carsten Hammer","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Carsten Hammern added a comment  - 06\/Oct\/2016 06:14 AM    n        n        Hi Vlad, did you explain anywhere why using Hibernate.getClass(object) like in the sample code in the description of this issue is not useful? n    n    n        n            Show  n            n                        n    n    n    n                nn       Carsten Hammern added a comment  - 06\/Oct\/2016 06:14 AM                      Hi Vlad, did you explain anywhere why using Hibernate.getClass(object) like in the sample code in the description of this issue is not useful?              n        n    n"},{"commnet_id":"comment-84825","commnet_date":"2016-10-06T07:09:12-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 06\/Oct\/2016 07:09 AM    n        n        You needed Hibernate.getClass because you are comparing classes instead of using instanceof. Is there any reason why you shouldn't be using instanceof as illustrated in the new User Guide. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 06\/Oct\/2016 07:09 AM                      You needed  Hibernate.getClass  because you are comparing classes instead of using  instanceof . Is there any reason why you shouldn't be using  instanceof  as illustrated in the  new User Guide .              n        n    n"},{"commnet_id":"comment-84826","commnet_date":"2016-10-06T07:27:19-0700","commnet_user":"Carsten Hammer","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Carsten Hammern added a comment  - 06\/Oct\/2016 07:27 AM    n        n        As long as proxy classes implementation remains the same I guess not, but that was exactly the question. Maybe https:\/\/developer.jboss.org\/wiki\/EqualsAndHashCode should contain a link to the this chapter too. n    n    n        n            Show  n            n                        n    n    n    n                nn       Carsten Hammern added a comment  - 06\/Oct\/2016 07:27 AM                      As long as proxy classes implementation remains the same I guess not, but that was exactly the question. Maybe  https:\/\/developer.jboss.org\/wiki\/EqualsAndHashCode  should contain a link to the this chapter too.              n        n    n"},{"commnet_id":"comment-84827","commnet_date":"2016-10-06T07:33:38-0700","commnet_user":"Carsten Hammer","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Carsten Hammern added a comment  - 06\/Oct\/2016 07:33 AM    n        n        There are situations with inheritet equals methods where usage of instanceof forces you to copy your method nearly unchanged. If you think this is a disadvantage is up to you. n    n    n        n            Show  n            n                        n    n    n    n                nn       Carsten Hammern added a comment  - 06\/Oct\/2016 07:33 AM                      There are situations with inheritet equals methods where usage of instanceof forces you to copy your method nearly unchanged. If you think this is a disadvantage is up to you.              n        n    n"}]}},{"HHH-10051":{"info":{"issue_title":"add class reference to &quot;java.lang.IllegalArgumentException: Not an entity:&quot; exception","issue_key":"HHH-10051","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Rejected","issue_fix_version":"5.0.0.Final","issue_component":"5.0.0.Final","issue_labels":"5.0.0.Final","issue_description":"Exceptions in the form of `java.lang.IllegalArgumentException: Not an entity:` (e.g. for entities which are not listed in `persistence.xml` or `@Basic` type which are annotated with an entity relationship) should contain information where the errornous property\/specification was found, e.g. `java.lang.IllegalArgumentException: Not an entity: interface java.util.List (encountered in a.b.c.Entity.property)`.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10051?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69932","commnet_date":"2015-08-24T03:23:22-0700","commnet_user":"Karl Richter","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Karl Richtern added a comment  - 24\/Aug\/2015 03:23 AM    n        n        Might be a separate issue, but FYI: annotating a `Serializable` `java.util.Currency` property with `@Basic` causes `java.lang.IllegalArgumentException: Not an entity: class java.util.Currency` (there's no other occurance of `java.util.Currency` in the project) n    n    n        n            Show  n            n                        n    n    n    n                nn       Karl Richtern added a comment  - 24\/Aug\/2015 03:23 AM                      Might be a separate issue, but FYI: annotating a `Serializable` `java.util.Currency` property with `@Basic` causes `java.lang.IllegalArgumentException: Not an entity: class java.util.Currency` (there's no other occurance of `java.util.Currency` in the project)              n        n    n"},{"commnet_id":"comment-69933","commnet_date":"2015-08-24T04:14:39-0700","commnet_user":"Karl Richter","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Karl Richtern added a comment  - 24\/Aug\/2015 04:14 AM    n        n        The `@Basic` issue seems to be unrelated. n    n    n        n            Show  n            n                        n    n    n    n                nn       Karl Richtern added a comment  - 24\/Aug\/2015 04:14 AM                      The `@Basic` issue seems to be unrelated.              n        n    n"},{"commnet_id":"comment-69942","commnet_date":"2015-08-25T11:16:55-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 25\/Aug\/2015 11:16 AM    n        n        Need a test case illustrating what you would like to see changed.  Aka, a reproducer. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 25\/Aug\/2015 11:16 AM                      Need a test case illustrating what you would like to see changed.  Aka, a reproducer.              n        n    n"},{"commnet_id":"comment-70164","commnet_date":"2015-09-01T10:11:37-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 01\/Sep\/2015 10:11 AM    n        n        No test case; no response. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 01\/Sep\/2015 10:11 AM                      No test case; no response.              n        n    n"}]}},{"OGM-907":{"info":{"issue_title":"Implement MultigetGridDialect for relevant Dialects","issue_key":"OGM-907","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.Beta1","issue_labels":"5.0.0.Beta1","issue_description":"1. determine if the dialect supports multiget is some fashion (can be a query where id in (listOfIds))\r\n 2. implement it \r\n Let's at least have mongo and neo4j","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-907?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69979","commnet_date":"2015-08-26T04:50:52-0700","commnet_user":"Davide D&#39;Alto","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Davide D&#39;Alton added a comment  - 26\/Aug\/2015 04:50 AM    n        n        Is the MultiGetGridDialect suppose to work for different Entity types or the metadata in the keys is always the same?nnAt the moment it seems always the same, but I guess we should keep in mind future developments. n    n    n        n            Show  n            n                        n    n    n    n                nn       Davide D&#39;Alton added a comment  - 26\/Aug\/2015 04:50 AM                      Is the MultiGetGridDialect suppose to work for different Entity types or the metadata in the keys is always the same? nn At the moment it seems always the same, but I guess we should keep in mind future developments.              n        n    n"},{"commnet_id":"comment-74134","commnet_date":"2015-12-14T03:17:38-0800","commnet_user":"Davide D&#39;Alto","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Davide D&#39;Alton added a comment  - 14\/Dec\/2015 03:17 AM    n        n        &gt; Is the MultiGetGridDialect suppose to work for different Entity types or the metadata in the keys is always the same?nnWe assume that the metadata is the same for all the keys at the moment n    n    n        n            Show  n            n                        n    n    n    n                nn       Davide D&#39;Alton added a comment  - 14\/Dec\/2015 03:17 AM                      &gt; Is the MultiGetGridDialect suppose to work for different Entity types or the metadata in the keys is always the same? nn We assume that the metadata is the same for all the keys at the moment              n        n    n"}]}},{"OGM-906":{"info":{"issue_title":"Add WildFly-based integration test for Cassandra backend","issue_key":"OGM-906","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Out of Date","issue_fix_version":"None","issue_component":"None","issue_labels":"tests","issue_description":"There should be an integration test similar to the ones for MongoDB, Redis etc., making sure the WildFly module does work as expected.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-906?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-76736","commnet_date":"2016-04-06T07:01:42-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 06\/Apr\/2016 07:01 AM    n        n        This was done already. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 06\/Apr\/2016 07:01 AM                      This was done already.              n        n    n"}]}},{"OGM-905":{"info":{"issue_title":"Use WildFly 10.0.0.Beta2 for integration tests","issue_key":"OGM-905","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.Alpha1","issue_labels":"5.0.0.Alpha1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-905?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-904":{"info":{"issue_title":"Use more natural format to store map-typed properties in CouchDB","issue_key":"OGM-904","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.Beta1","issue_labels":"5.0.0.Beta1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-904?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10050":{"info":{"issue_title":"AttributeConverter should supports ParameterizedType if autoApply is true","issue_key":"HHH-10050","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.0.Final","issue_component":"5.0.0.Final","issue_labels":"5.0.0.Final","issue_description":"@Converter(autoApply = true )  public  class AttributeListConverter implements  AttributeConverter&lt;List&lt;Attribute&gt;, String &gt; {   ...  }       @Converter(autoApply = true )  public  class StringListConverter implements  AttributeConverter&lt;List&lt;String &gt;, String &gt; {   ...  }       @Entity  public  class Sample {   ...    private  List&lt;String &gt; list = new  ArrayList&lt;String &gt;(0);   ...  }    list of Sample will be applied with AttributeListConverter not StringListConverter. It seems type of list was ignored.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10050?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69934","commnet_date":"2015-08-24T15:35:02-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 24\/Aug\/2015 15:35 PM    n        n        Possibly related to n    n                n        n            n            HHH-9409n        n                                                    Closed n             n (has autoApply=false) n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 24\/Aug\/2015 15:35 PM                      Possibly related to n     n                 n         n             n            HHH-9409n         n                                                     Closed n             n (has autoApply=false)              n        n    n"},{"commnet_id":"comment-69937","commnet_date":"2015-08-24T17:05:08-0700","commnet_user":"zhouyanming","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       zhouyanmingn added a comment  - 24\/Aug\/2015 17:05 PM    n        n        you can refer to http:\/\/spring.io\/blog\/2015\/02\/11\/better-application-events-in-spring-framework-4-2#generics-support n    n    n        n            Show  n            n                        n    n    n    n                nn       zhouyanmingn added a comment  - 24\/Aug\/2015 17:05 PM                      you can refer to  http:\/\/spring.io\/blog\/2015\/02\/11\/better-application-events-in-spring-framework-4-2#generics-support               n        n    n"},{"commnet_id":"comment-69943","commnet_date":"2015-08-25T11:19:21-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 25\/Aug\/2015 11:19 AM    n        n        This is not terribly important to me.  I can see its value, though.  A PR gets it integrated faster. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 25\/Aug\/2015 11:19 AM                      This is not terribly important to me.  I can see its value, though.  A PR gets it integrated faster.              n        n    n"},{"commnet_id":"comment-70354","commnet_date":"2015-09-15T09:26:11-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 15\/Sep\/2015 09:26 AM    n        n        Not at all related to n    n                n        n            n            HHH-9409n        n                                                    Closed n             n n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 15\/Sep\/2015 09:26 AM                      Not at all related to n     n                 n         n             n            HHH-9409n         n                                                     Closed n             n              n        n    n"},{"commnet_id":"comment-75118","commnet_date":"2016-02-12T23:04:30-0800","commnet_user":"zhouyanming","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       zhouyanmingn added a comment  - 12\/Feb\/2016 23:04 PM    n        n        Does it really fixed in 5.1.0 ?  n    n    n        n            Show  n            n                        n    n    n    n                nn       zhouyanmingn added a comment  - 12\/Feb\/2016 23:04 PM                      Does it really fixed in 5.1.0 ?               n        n    n"}]}},{"HHH-10049":{"info":{"issue_title":"References to unmapped classes in from clause should not be allowed with strict JPQL compliance","issue_key":"HHH-10049","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.0","issue_labels":"5.2.0","issue_description":"HQL allows queries such as \"from java.lang.Object\".  JPA does not.  So with strict JPA compliance enabled, we should disallow such queries.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10049?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-70137","commnet_date":"2015-08-31T11:14:14-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 31\/Aug\/2015 11:14 AM    n        n        Already accounted for in the SQM project n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 31\/Aug\/2015 11:14 AM                      Already accounted for in the SQM project              n        n    n"}]}},{"OGM-903":{"info":{"issue_title":"Upgrade to ORM 5 Final","issue_key":"OGM-903","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.Alpha1","issue_labels":"5.0.0.Alpha1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-903?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-902":{"info":{"issue_title":"Documentation fixes for CouchDB\/Redis","issue_key":"OGM-902","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.Alpha1","issue_labels":"5.0.0.Alpha1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-902?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-901":{"info":{"issue_title":"Decide how to configure write-concern \/ read-preference via properties","issue_key":"OGM-901","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"mongodb","issue_description":"That's a left-over of                                                          OGM-810                                                              Resolved                . Write concern and read preference are the only two remaining properties which are not configured through the \"driver\" sub namespace but withing \"hibernate.ogm.mongodb\" directly. The reason being, that the original driver settings expect WriteConcern instances, whereas OGM offers an enum to represent the common default values (JOURNALED etc.).  My preference would be to move the two under the \"driver\" namespace (removing the existing properties) and enhance their handling a bit: Accept FQNs of implementations AND accept short names such as JOURNALED.  Related to this the API + annotation configuration does not allow for custom WC\/RP instances atm., only the pre-defined (enum) values. It'd make sense to allow that as well.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-901?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10045":{"info":{"issue_title":"Force all columns in primary key to be non-null","issue_key":"HHH-10045","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"5.0.0.Final","issue_component":"5.0.0.Final","issue_labels":"5.0.0.Final","issue_description":"Effectively Hibernate has always assumed that anyways.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10045?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-70557","commnet_date":"2015-09-25T16:06:45-0700","commnet_user":"David Repshas","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       David Repshasn added a comment  - 25\/Sep\/2015 16:06 PM    n        n        Steve,\r\nnI've been running some tests that include your fix for n    n                n        n            n            HHH-10045n        n                                                    Closed n             n.There still seems to be some problems. If you run the test:org.hibernate.test.cascade.MultiPathCascadeTest.testMultiPathGetAndModify using H2, it will invoke the new code, but the SQL that it generates is:nn    create table HB_G_H (\r\nn        g_fk bigint,\r\nn        h_fk bigint not null,\r\nn        primary key (h_fk, g_fk)\r\nn    )\r\nnThe problem being that g_fk should have been declared \"not null\".It seems that the correct changes to non-null are made in the PrimaryKey code but in StandardTableExported.getSqlCreateStrings(), the decision on whether to add \r\nn\"not null\" to the create String is done using the Columns from Table and the g_fk Column there indicated that it is nullable. The Columns defined in PrimaryKey do have the correct settings.nnI've tried to come up with a change to fix it while keeping the mods to PrimaryKey, but the solutions I'm coming up with seem too kludgy. Let me know what you think...nn    Dave n    n    n        n            Show  n            n                        n    n    n    n                nn       David Repshasn added a comment  - 25\/Sep\/2015 16:06 PM                      Steve, nI've been running some tests that include your fix for n     n                 n         n             n            HHH-10045n         n                                                     Closed n             n.There still seems to be some problems. If you run the test:org.hibernate.test.cascade.MultiPathCascadeTest.testMultiPathGetAndModify using H2, it will invoke the new code, but the SQL that it generates is: nn     create table HB_G_H ( n        g_fk bigint, n        h_fk bigint not null, n        primary key (h_fk, g_fk) n    ) nThe problem being that g_fk should have been declared \"not null\".It seems that the correct changes to non-null are made in the PrimaryKey code but in StandardTableExported.getSqlCreateStrings(), the decision on whether to add  n\"not null\" to the create String is done using the Columns from Table and the g_fk Column there indicated that it is nullable. The Columns defined in PrimaryKey do have the correct settings. nn I've tried to come up with a change to fix it while keeping the mods to PrimaryKey, but the solutions I'm coming up with seem too kludgy. Let me know what you think... nn     Dave              n        n    n"}]}},{"HSEARCH-1971":{"info":{"issue_title":"Raise a warning for mispositioned @IndexedEmbedded annotations","issue_key":"HSEARCH-1971","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Duplicate","issue_fix_version":"None","issue_component":"None","issue_labels":"engine","issue_description":"As  this SO question made me realize, it's not always clear when a field needs a @Field annotation rather than a @IndexedEmbedded annotation, for example like in the specific question when indexing a simple collection of enums.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1971?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-86016","commnet_date":"2016-11-14T07:02:32-0800","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 14\/Nov\/2016 07:02 AM    n        n        Closing as duplicate of n    n                n        n            n            HSEARCH-899n        n                                                    Open n             n n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 14\/Nov\/2016 07:02 AM                      Closing as duplicate of n     n                 n         n             n            HSEARCH-899n         n                                                     Open n             n              n        n    n"}]}},{"HSEARCH-1970":{"info":{"issue_title":"Untangle relationship of (DirectoryBased)IndexManager and BackendQueueProvider","issue_key":"HSEARCH-1970","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta1","issue_labels":"5.6.0.Beta1","issue_description":"As discussed on IRC, the idea is to make IndexManager and BackendQueueProcessor two independent, orthogonal aspects:   \tIM concerns how index changes are applied to a certain indexing technology (Lucene, ES) \tBQP concerns how index changes are propgated (locally, or remotely via JMS\/JGroups)    Future index manager implementations will benefit from this clear separation as they can be used in conjunction with the different backends (local, JMS, JGgroups) \"for free\".","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1970?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69874","commnet_date":"2015-08-20T05:46:02-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Gunnar Morlingn added a comment  - 20\/Aug\/2015 05:46 AM     - edited  n        n        IRC discussion on Aug 19th:nnngmorlingtsannegrinovero: hey, i have a question regarding BackendQueueProcessort12:26\r\nngmorlingtwhy does it only accept DirectoryBasedIndexManager iso. IndexManager?t12:27\r\nngmorlingtor hardy, maybe you also know the answer to ^?t12:28\r\nnsannegrinoverotthe concept of tthe BQP is tightly coupled (currently) to the DBIMt12:29\r\nnsannegrinoverotgmorling: the one practical reason for that which comes to mind is the necessity that the master\/slave approach has to control the DP lockst12:29\r\nngmorlingthm, okt12:30\r\nnsannegrinoverotlet me find a pointer..t12:30\r\nnsannegrinoverotah, and that horrible business of the \"triggerWorkspaceReconfiguration()\"t12:30\r\nnsannegrinoverot:-\/t12:30\r\nnsannegrinoverotOk so the other one is getDirectoryModificationLock()t12:31\r\nnsannegrinoverotwhich has to be a shared lock with the one from the Workspacet12:31\r\nnsannegrinoverotgmorling: there are two open threads on those, aiming to hopefully get rid of them:t12:32\r\nnhardytsannegrinovero: knows more about this than  Idot12:32\r\nngmorlingti guess whatu2019s confusing me is the interaction of IM and BQPt12:32\r\nnsannegrinoverota) the snapshot strategy for mater\/slave would avoid need of the Workspace lock at all (there's a JIRA to propose that but emmanuel wasn't convinced on that)t12:32\r\nngmorlingti.e. a custom IM implementation (such as the ES one) must be aware of the BQP businesst12:32\r\nnsannegrinoverothum, but your IM implementation isn't an DBIM right ?t12:33\r\nngmorlingtno, it isnu2019tt12:33\r\nngmorlingtbut iu2019d like to be able to combine ES e.g. with the JMS BQPt12:34\r\nnsannegrinoverot&#91;to get rid of the triggerWorkspaceReconfiguration() we either get back to the infinispan mailing list to begging they get rid of dynamic reconfiguration, or we ban the feature&#93; t12:34\r\nnhardytgmorling: I guess you talk specifically about BackendQueueProcessor#initalize, right?t12:35\r\nngmorlingthardy: yes, thatu2019s the method which is tied to DBIMt12:35\r\nnsannegrinoverotohh that should be much simplert12:36\r\nnhardyton a first thought I would expect this to be jsut an IndexManaert12:36\r\nnhardytIndexManagert12:36\r\nnsannegrinoverotrightt12:36\r\nnsannegrinoverotJmsBackendQueueProcessor doesn't need it to be an DBIMt12:36\r\nnhardytif a concrete impl needs a specific sub type, it should check the passed index managert12:36\r\nnsannegrinoverot+1t12:36\r\nngmorlingtok, i will play with thatt12:36\r\nnsannegrinoverotgmorling: we can relax that initialize() contractt12:37\r\nngmorlington a more general note i am wondering why - taking the JGroups backend as an example - on the slave side the IM is involved at all (which then needs to forward to the BQP) instead of that u201Cengineu201D itself talks to BQP, and only on the master side IM would be involvedt12:37\r\nnhardytneither the JGroups processort12:37\r\nnhardyt(needs a DirectoryBasedIndexManager)t12:38\r\nngmorlingtkt12:38\r\nnhardytso +1 for changing the SPI in this caset12:38\r\nnhardytgmorling: do you have a pointer into the codet12:40\r\nngmorlingthardy: basically DBIM#performOperations()t12:40\r\nngmorlingtso here itu2019s DBIM (or generally, any IM implmenetation) which needs to forward to the BQPt12:41\r\nngmorlingti am wondering whether that could not be turned aroundt12:41\r\nnsannegrinoverotturned around?t12:42\r\nngmorlingti.e. u201Cengineu201D invokes BQP which then either does its serialization buisness (jgroups slave, jms client) or triggers the IM to do the actual indexing (lucene, jgroups master, jms master)t12:42\r\nnhardytbut does this not break encapsulation?t12:42\r\nnhardythave no real answer atmt12:43\r\nngmorlingtok t12:43\r\nnhardytjust thinking out loudt12:43\r\nnsannegrinoverotme neither, sound like something which needsa whiteboard in Barcelona t12:43\r\nngmorlingtt12:43\r\nngmorlingtwhere i wonu2019t be unfortunatelt12:43\r\nngmorlingtyt12:43\r\nnhardyti mean in your case the engine would need to know what type\/form of setup we are having, right?t12:43\r\nnsannegrinoverotho damnt12:44\r\nngmorlingthardy: yes, it would; but i think thatu2019d be better than today where this knowledge is spread about IM implst12:44\r\nnsannegrinoverotkeep in mind that backends like the NRT one require a very high degree of cohesion, for example the IndexWriter is also the source for Readerst12:44\r\nngmorlingt(which so far was no problem because there were only DBIM impls)t12:44\r\nnhardytwhereas I think the idea is that the engine just deals with a index manager and the manager knows what to do depemding on what type of index it managest12:45\r\nnhardytagain, not sure. Just tjinking out loadt12:45\r\nnsannegrinoverotso one goal is to be able to either use an ultra-efficient NRT-IM or an ElasticSearch-IM without the engine to need knowing too many specificst12:45\r\nngmorlingtso to me itu2019s two (orthogonal) issues heret12:45\r\nngmorlingtthe business of indexing stuff within a specific backend (e.g. lucene, ES, solr)t12:45\r\nngmorlingtand the business of doing this either locally or sending it to some central mastert12:46\r\nngmorlingttoday both aspects seem kind of mangledt12:46\r\nnhardyttrue truet12:46\r\nnsannegrinoverotwell but the way you do \"remote\" depends onthe kind of backend right? they each have a favourite wayt12:46\r\nnsannegrinoverotAlso remember it's 3 parts: 1)indexing 2)querying 3)index maintenance stufft12:47\r\nngmorlingtso when writing a new ES IM, i would ideally just need to think about how to do indexing in ES, whereas Iu2019d get the JMS support for u201Cfreeu201D in an ideal worldt12:47\r\nngmorlingtsannegrinovero: not sure what you mean by u201Cfavorite wayu201D?t12:48\r\nnhardytJMS support?t12:48\r\nngmorlingte.g. i dont think it makes a difference for jms whether in the end lucene or ES is usedt12:48\r\nnhardytso you would envison a ES index which gets indexed remotelyt12:48\r\nnsannegrinoverotgmorling: well for example with ES the \"default\" would be to use the ES REST protocol, not JMSt12:48\r\nngmorlingthardy: yes, exactlyt12:48\r\nnhardytby the engine sending update work to the queue which gets picked up by a master and then applied to ESt12:49\r\nngmorlingthardy: rightt12:49\r\nnsannegrinoverot&#91;that was my answer to explain &quot;favourite way&quot;&#93; t12:49\r\nngmorlingte.g. to not loose updatest12:49\r\nngmorlingtby using a persistent queuet12:49\r\nnhardytso a complete seperation between any form of serlialization from the type of indext12:49\r\nngmorlingtsannegrinovero: yes, itu2019d be the default, but its not inherent to ES that index changes are applied synchronouslyt12:49\r\nnhardytand a free mix and match of serializartion with index u201Ctypesu201Dt12:50\r\nngmorlingtinstead one might want to have a jms queue in between as lined out abovet12:50\r\nngmorlingtyes, thatu2019s what iu2019d envision t12:50\r\nnhardytI guess the data we actually seralize is acgnostic to the index typet12:51\r\nnsannegrinoverotgmorling: yes I understand the alternative. I only meant to explain that by default the ES IM would have a different style of remoting than the other ones.t12:51\r\nngmorlingthardy: yes, it ist12:51\r\nnhardytit is just LuceneWork (or Lucene specific data)t12:51\r\nngmorlingt(afaiu)t12:51\r\nngmorlingtwell, ok, we use Document in theret12:51\r\nngmorlingtbut u201Csemanticallyu201D it is independentt12:51\r\nnhardytsure, but that is still independentt12:51\r\nnhardyteven though a different data structure would be benefitial heret12:52\r\nnsannegrinoverothardy: that's actually the big question. I wonder if ES will treat our data differently - i.e. say it doesn't take a per-field Analyzer as that'not an option on ES.t12:52\r\nnhardytbut that is a different issue againt12:52\r\nngmorlingtright, the usage of Document is more an u201Cuglinessu201D for me atm.t12:52\r\nngmorlingtitu2019s not idealt12:52\r\nnhardytrightt12:52\r\nngmorlingtbut i donu2019t feel its a blockert12:52\r\nnhardytrightt12:52\r\nnsannegrinoverotBTW I noticed we don't need to write \"Document\" anymore.. Lucene will also accept an \"Iterator&lt;Field&gt;\" t12:52\r\nngmorlingtField t12:53\r\nnsannegrinoverotso we can already customize the \"value holder\"t12:53\r\nnsannegrinoverotand have it implement the interface ..t12:53\r\nngmorlingtsannegrinovero: wrt u201Cthat by default the ES IM would have a different style of remoting than the other ones.u201Dt12:53\r\nnhardytwell, in the end you really would like to get away from any of the Lucene classes, but again, the exact design of the (serialized) data is a seperate issuet12:54\r\nngmorlingtin my picture, the ES IM would not deal with remoting at allt12:54\r\nngmorlingtit would just call the ES REST api when told to do sot12:54\r\nnsannegrinoverothardy: +1t12:54\r\nngmorlingtwhether that is triggered sync or remotely via jms should be decided beforehand somewhere elset12:54\r\nnsannegrinoverotgmorling: ok so you'd have an \"ES Backend\" and an \"ES IndexManager\" (which by default uses the ES backend) as two independent components?t12:55\r\nnhardyt?t12:55\r\nnhardytI guess there there are different types of remoting heret12:55\r\nnhardytone which is more in our control which is the support of slave\/master setupst12:56\r\nnsannegrinoverotand then you'd have the option to swap in a JMS backend in the \"ES IndexManager\", but still use that IM to route Query and index maintenance stuff?t12:56\r\nngmorlingtsannegrinovero: no, i guess iu2019d more have a u201Csyncu201D, u201Cjmsu201D and u201Cjgroupsu201D backend, and a u201Cdirectory-basedu201D and a u201CES-basedu201D IMt12:56\r\nnhardytand then with ES there is always another u201Cremoteu201D component when it comes to the actual communication with the ES servert12:56\r\nnsannegrinoverotgmorling: FYI all of them today support \"sync\" or \"async\", that should be orthogonalt12:56\r\nnhardytwell, we have some reform needs there as wellt12:57\r\nngmorlingtyes, maybe better u201Clocalu201D than u201Csyncu201Dt12:57\r\nnhardytat least from a design\/description point of viewt12:57\r\nnsannegrinoverotok but local~directory-based right?t12:57\r\nnhardytthe terminology we use here is imo very ambigioust12:57\r\nngmorlingtsannegrinovero: no t12:58\r\nngmorlingtlocal would just invoke the configured IMt12:58\r\nnhardytso the options are local, jms, jgroupst12:58\r\nngmorlingtwhichever it ist12:58\r\nnsannegrinoverothardy: you mean that sync\/async options should have nothing to do with \"worker\" terminology right?t12:58\r\nnhardytwhich is either do all on the local machine or use of form of serializationt12:58\r\nngmorlingtmaybe directory-based (lucene) or ESt12:58\r\nngmorlingtwhereas u201Cjmsu201D and u201Cjgroupsu201D would not invoke the IM locally but rather go through serialization and remotingt12:59\r\nngmorlingtand then that remote part there would invoke the IMt12:59\r\nnsannegrinoverotoh ok now I understand the ideat12:59\r\nngmorlingtwhich again would be either lucene or ESt12:59\r\nnsannegrinoverotBut ..t12:59\r\nnhardytsannegrinovero: right, the whole concept of workers and sync and async on top of index managers, etct12:59\r\nnhardytit gets all very confusing and there is also overlap between these thingst12:59\r\nnsannegrinoverotI'd like to not rule out other forms of replication: like broadcast all changes and each node keeps its own index in sync locallyt12:59\r\nnsannegrinoverothardy: +1t13:00\r\nngmorlingtsannegrinovero: sure, that should be doablet13:00\r\nngmorlingtyouu2019d then have a backend which triggers the IM locally and does the broadcasting businesst13:00\r\nnhardytI like the sound of the idea. It might untanlge a few thingst13:01\r\nnsannegrinoverotgmorling: ok.. I don't dislike the idea, just making sure you keep in mind the other flexible things which we can do today.t13:01\r\nngmorlingtok, good to have that feedbackt13:01\r\nnsannegrinoverotfor example we really want to implement that pattern for index affinity described on the infinispan wikit13:01\r\nnhardytIu2019d rather be able to do slightly less in favour of a simpler mroe consistent archtecture and usafget13:01\r\nngmorlingtso far i am still in the phase of understanding why things are the way they aret13:01\r\nnhardytusaget13:01\r\nngmorlingtand not the way i think they should be t13:01\r\nngmorlingthardy: +1 for leaving out mostly exotic use cases if it helps to largely simplify thingst13:02\r\nnhardytwhat does all the freedom help us if one does not know how to plug it togethert13:02\r\nnsannegrinoverothardy: yeah, but I'd still like it to be able to do such things, just possibly hiding the complexity entirely behind a chosen IMt13:02\r\nnhardytcatering for the 0.0001% of use cases ?t13:02\r\nnhardytif anyt13:02\r\nnsannegrinoverotright, no only for those which make sense, but then rather than giving a configuration guide, to have to set a single IM name which encapsulates the whole setup.t13:03\r\nnhardytI think you would gain more happy users by making things simpler and potentially ruling out some super user configurations, than having all the flexibilty in the workd, but you need to study rocket sience to put things togehtert13:04\r\nngmorlingtmy thinking as wellt13:04\r\nnhardytimo with the next major release (aka 6) we should break with some of the old concepts, try to introduce some sort of consistence view onto the system and make it simplert13:06\r\nnsannegrinoverot+1t13:06\r\nnhardytlooking at Workers and DirectoryProviders for examplet13:06\r\nngmorlingtsome clean-up is due for suret13:07\r\nnsannegrinoverotlet's start with refining the plan alreadyt13:07\r\nnsannegrinoverotas when the time comes for majors we're usually in a big crunch to not stall releases for too long :-\/t13:07\r\nnhardytand I donu2019t think this is something which you do incremental and with deprecations here and theret13:07\r\nnhardytto a certain degree I would envison a bit of a bigger burden for users in favour of a deeper re-designt13:08\r\nnsannegrinoverotWDYM burden? in terms of migration?t13:09\r\nnsannegrinoverothardy: did you happen to play with Apache Camel?t13:10\r\nnhardytsorrry I was distracted for a momentt13:14\r\nnsannegrinoverothardy: gmorling: for this conversation, would be good you could have a look here: https:\/\/access.redhat.com\/documentation\/en-US\/Red_Hat_JBoss_Data_Grid\/6.5\/html-single\/Infinispan_Query_Guide\/index.htmlt13:14\r\nnjbossbottTitle: Infinispan Query Guidet13:14\r\nnhardytright, in terms of migrsationt13:14\r\nnhardytit is a bit like the rewrite of the ORM boostrapt13:14\r\nnsannegrinoverotsearch for \"indexmanager\"t13:14\r\nnsannegrinoverotfor example in Infinispan you only have to set a single property:t13:15\r\nnsannegrinoverotdefault.indexmanager=org.infinispan.query.indexmanager.InfinispanIndexManagert13:15\r\nnsannegrinoverotand that will get you:t13:15\r\nnsannegrinoverotdistributed, real-time shared indexest13:15\r\nnsannegrinoverotautomatic master\/slave electiont13:15\r\nnsannegrinoverotfailover of masterst13:15\r\nngmorlingtsure, thatu2019s nicet13:15\r\nnsannegrinoverotand remoting\/serializations setupt13:15\r\nnhardythow does Camel come into play here?t13:15\r\nngmorlingtbut youu2019d never need another BQP than the u201Clocalu201D one in my model to make use of that, rightt13:16\r\nnsannegrinoverothardy: I was side-tracking a bit, but I would be curious to hear from you if we should \"couple\" to Camel rather than JMS as it gives users more flexibility w\/o making the setup more complex.t13:16\r\nnsannegrinoverotgmorling: well you have the NRT alternative, and options for synch\/asyncht13:17\r\nnsannegrinoverotgmorling: oh, and it definitley switches the BQP as well.. dynamically.t13:17\r\nngmorlingt?t13:18\r\nnsannegrinoverotit's all logic which is encapsulated in the IMt13:18\r\nnsannegrinoverotgmorling: maybe clone infinispan and have a look? the \/query Maven module is quite small and self-contained, and it's mostly extensions of the Search SPIt13:19\r\nngmorlingtk, iu2019ll take a look n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Gunnar Morlingn added a comment  - 20\/Aug\/2015 05:46 AM     - edited                     IRC discussion  on Aug 19th: nn n gmorlingtsannegrinovero: hey, i have a question regarding BackendQueueProcessort12:26 ngmorlingtwhy does it only accept DirectoryBasedIndexManager iso. IndexManager?t12:27 ngmorlingtor hardy, maybe you also know the answer to ^?t12:28 nsannegrinoverotthe concept of tthe BQP is tightly coupled (currently) to the DBIMt12:29 nsannegrinoverotgmorling: the one practical reason for that which comes to mind is the necessity that the master\/slave approach has to control the DP lockst12:29 ngmorlingthm, okt12:30 nsannegrinoverotlet me find a pointer..t12:30 nsannegrinoverotah, and that horrible business of the \"triggerWorkspaceReconfiguration()\"t12:30 nsannegrinoverot:-\/t12:30 nsannegrinoverotOk so the other one is getDirectoryModificationLock()t12:31 nsannegrinoverotwhich has to be a shared lock with the one from the Workspacet12:31 nsannegrinoverotgmorling: there are two open threads on those, aiming to hopefully get rid of them:t12:32 nhardytsannegrinovero: knows more about this than  Idot12:32 ngmorlingti guess whatu2019s confusing me is the interaction of IM and BQPt12:32 nsannegrinoverota) the snapshot strategy for mater\/slave would avoid need of the Workspace lock at all (there's a JIRA to propose that but emmanuel wasn't convinced on that)t12:32 ngmorlingti.e. a custom IM implementation (such as the ES one) must be aware of the BQP businesst12:32 nsannegrinoverothum, but your IM implementation isn't an DBIM right ?t12:33 ngmorlingtno, it isnu2019tt12:33 ngmorlingtbut iu2019d like to be able to combine ES e.g. with the JMS BQPt12:34 nsannegrinoverot &#91;to get rid of the triggerWorkspaceReconfiguration() we either get back to the infinispan mailing list to begging they get rid of dynamic reconfiguration, or we ban the feature&#93; t12:34 nhardytgmorling: I guess you talk specifically about BackendQueueProcessor#initalize, right?t12:35 ngmorlingthardy: yes, thatu2019s the method which is tied to DBIMt12:35 nsannegrinoverotohh that should be much simplert12:36 nhardyton a first thought I would expect this to be jsut an IndexManaert12:36 nhardytIndexManagert12:36 nsannegrinoverotrightt12:36 nsannegrinoverotJmsBackendQueueProcessor doesn't need it to be an DBIMt12:36 nhardytif a concrete impl needs a specific sub type, it should check the passed index managert12:36 nsannegrinoverot+1t12:36 ngmorlingtok, i will play with thatt12:36 nsannegrinoverotgmorling: we can relax that initialize() contractt12:37 ngmorlington a more general note i am wondering why - taking the JGroups backend as an example - on the slave side the IM is involved at all (which then needs to forward to the BQP) instead of that u201Cengineu201D itself talks to BQP, and only on the master side IM would be involvedt12:37 nhardytneither the JGroups processort12:37 nhardyt(needs a DirectoryBasedIndexManager)t12:38 ngmorlingtkt12:38 nhardytso +1 for changing the SPI in this caset12:38 nhardytgmorling: do you have a pointer into the codet12:40 ngmorlingthardy: basically DBIM#performOperations()t12:40 ngmorlingtso here itu2019s DBIM (or generally, any IM implmenetation) which needs to forward to the BQPt12:41 ngmorlingti am wondering whether that could not be turned aroundt12:41 nsannegrinoverotturned around?t12:42 ngmorlingti.e. u201Cengineu201D invokes BQP which then either does its serialization buisness (jgroups slave, jms client) or triggers the IM to do the actual indexing (lucene, jgroups master, jms master)t12:42 nhardytbut does this not break encapsulation?t12:42 nhardythave no real answer atmt12:43 ngmorlingtok  t12:43 nhardytjust thinking out loudt12:43 nsannegrinoverotme neither, sound like something which needsa whiteboard in Barcelona  t12:43 ngmorlingt t12:43 ngmorlingtwhere i wonu2019t be unfortunatelt12:43 ngmorlingtyt12:43 nhardyti mean in your case the engine would need to know what type\/form of setup we are having, right?t12:43 nsannegrinoverotho damnt12:44 ngmorlingthardy: yes, it would; but i think thatu2019d be better than today where this knowledge is spread about IM implst12:44 nsannegrinoverotkeep in mind that backends like the NRT one require a very high degree of cohesion, for example the IndexWriter is also the source for Readerst12:44 ngmorlingt(which so far was no problem because there were only DBIM impls)t12:44 nhardytwhereas  I think  the idea is that the engine just deals with a index manager and the manager knows what to do depemding on what type of index it managest12:45 nhardytagain, not sure. Just tjinking out loadt12:45 nsannegrinoverotso one goal is to be able to either use an ultra-efficient NRT-IM or an ElasticSearch-IM without the engine to need knowing too many specificst12:45 ngmorlingtso to me itu2019s two (orthogonal) issues heret12:45 ngmorlingtthe business of indexing stuff within a specific backend (e.g. lucene, ES, solr)t12:45 ngmorlingtand the business of doing this either locally or sending it to some central mastert12:46 ngmorlingttoday both aspects seem kind of mangledt12:46 nhardyttrue truet12:46 nsannegrinoverotwell but the way you do \"remote\" depends onthe kind of backend right? they each have a favourite wayt12:46 nsannegrinoverotAlso remember it's 3 parts: 1)indexing 2)querying 3)index maintenance stufft12:47 ngmorlingtso when writing a new ES IM, i would ideally just need to think about how to do indexing in ES, whereas Iu2019d get the JMS support for u201Cfreeu201D in an ideal worldt12:47 ngmorlingtsannegrinovero: not sure what you mean by u201Cfavorite wayu201D?t12:48 nhardytJMS support?t12:48 ngmorlingte.g. i dont think it makes a difference for jms whether in the end lucene or ES is usedt12:48 nhardytso you would envison a ES index which gets indexed remotelyt12:48 nsannegrinoverotgmorling: well for example with ES the \"default\" would be to use the ES REST protocol, not JMSt12:48 ngmorlingthardy: yes, exactlyt12:48 nhardytby the engine sending update work to the queue which gets picked up by a master and then applied to ESt12:49 ngmorlingthardy: rightt12:49 nsannegrinoverot &#91;that was my answer to explain &quot;favourite way&quot;&#93; t12:49 ngmorlingte.g. to not loose updatest12:49 ngmorlingtby using a persistent queuet12:49 nhardytso a complete seperation between any form of serlialization from the type of indext12:49 ngmorlingtsannegrinovero: yes, itu2019d be the default, but its not inherent to ES that index changes are applied synchronouslyt12:49 nhardytand a free mix and match of serializartion with index u201Ctypesu201Dt12:50 ngmorlingtinstead one might want to have a jms queue in between as lined out abovet12:50 ngmorlingtyes, thatu2019s what iu2019d envision  t12:50 nhardytI guess the data we actually seralize is acgnostic to the index typet12:51 nsannegrinoverotgmorling: yes I understand the alternative. I only meant to explain that  by default  the ES IM would have a different style of remoting than the other ones.t12:51 ngmorlingthardy: yes, it ist12:51 nhardytit is just LuceneWork (or Lucene specific data)t12:51 ngmorlingt(afaiu)t12:51 ngmorlingtwell, ok, we use Document in theret12:51 ngmorlingtbut u201Csemanticallyu201D it is independentt12:51 nhardytsure, but that is still independentt12:51 nhardyteven though a different data structure would be benefitial heret12:52 nsannegrinoverothardy: that's actually the big question. I wonder if ES will treat our data differently - i.e. say it doesn't take a per-field Analyzer as that'not an option on ES.t12:52 nhardytbut that is a different issue againt12:52 ngmorlingtright, the usage of Document is more an u201Cuglinessu201D for me atm.t12:52 ngmorlingtitu2019s not idealt12:52 nhardytrightt12:52 ngmorlingtbut i donu2019t feel its a blockert12:52 nhardytrightt12:52 nsannegrinoverotBTW I noticed we don't need to write \"Document\" anymore.. Lucene will also accept an \"Iterator&lt;Field&gt;\"  t12:52 ngmorlingtField  t12:53 nsannegrinoverotso we can already customize the \"value holder\"t12:53 nsannegrinoverotand have it implement the interface ..t12:53 ngmorlingtsannegrinovero: wrt u201Cthat  by default  the ES IM would have a different style of remoting than the other ones.u201Dt12:53 nhardytwell, in the end you really would like to get away from any of the Lucene classes, but again, the exact design of the (serialized) data is a seperate issuet12:54 ngmorlingtin my picture, the ES IM would not deal with remoting at allt12:54 ngmorlingtit would just call the ES REST api when told to do sot12:54 nsannegrinoverothardy: +1t12:54 ngmorlingtwhether that is triggered sync or remotely via jms should be decided beforehand somewhere elset12:54 nsannegrinoverotgmorling: ok so you'd have an \"ES Backend\" and an \"ES IndexManager\" (which by default uses the ES backend) as two independent components?t12:55 nhardyt?t12:55 nhardytI guess there there are different types of remoting heret12:55 nhardytone which is more in our control which is the support of slave\/master setupst12:56 nsannegrinoverotand then you'd have the option to swap in a JMS backend in the \"ES IndexManager\", but still use that IM to route Query and index maintenance stuff?t12:56 ngmorlingtsannegrinovero: no, i guess iu2019d more have a u201Csyncu201D, u201Cjmsu201D and u201Cjgroupsu201D backend, and a u201Cdirectory-basedu201D and a u201CES-basedu201D IMt12:56 nhardytand then with ES there is always another u201Cremoteu201D component when it comes to the actual communication with the ES servert12:56 nsannegrinoverotgmorling: FYI all of them today support \"sync\" or \"async\", that should be orthogonalt12:56 nhardytwell, we have some reform needs there as wellt12:57 ngmorlingtyes, maybe better u201Clocalu201D than u201Csyncu201Dt12:57 nhardytat least from a design\/description point of viewt12:57 nsannegrinoverotok but local~directory-based right?t12:57 nhardytthe terminology we use here is imo very ambigioust12:57 ngmorlingtsannegrinovero: no  t12:58 ngmorlingtlocal would just invoke the configured IMt12:58 nhardytso the options are local, jms, jgroupst12:58 ngmorlingtwhichever it ist12:58 nsannegrinoverothardy: you mean that sync\/async options should have nothing to do with \"worker\" terminology right?t12:58 nhardytwhich is either do all on the local machine or use of form of serializationt12:58 ngmorlingtmaybe directory-based (lucene) or ESt12:58 ngmorlingtwhereas u201Cjmsu201D and u201Cjgroupsu201D would not invoke the IM locally but rather go through serialization and remotingt12:59 ngmorlingtand then that remote part there would invoke the IMt12:59 nsannegrinoverotoh ok now I understand the ideat12:59 ngmorlingtwhich again would be either lucene or ESt12:59 nsannegrinoverotBut ..t12:59 nhardytsannegrinovero: right, the whole concept of workers and sync and async on top of index managers, etct12:59 nhardytit gets all very confusing and there is also overlap between these thingst12:59 nsannegrinoverotI'd like to not rule out other forms of replication: like broadcast all changes and each node keeps its own index in sync locallyt12:59 nsannegrinoverothardy: +1t13:00 ngmorlingtsannegrinovero: sure, that should be doablet13:00 ngmorlingtyouu2019d then have a backend which triggers the IM locally  and  does the broadcasting businesst13:00 nhardytI like the sound of the idea. It might untanlge a few thingst13:01 nsannegrinoverotgmorling: ok.. I don't dislike the idea, just making sure you keep in mind the other flexible things which we can do today.t13:01 ngmorlingtok, good to have that feedbackt13:01 nsannegrinoverotfor example we really want to implement that pattern for index affinity described on the infinispan wikit13:01 nhardytIu2019d rather be able to do slightly less in favour of a simpler mroe consistent archtecture and usafget13:01 ngmorlingtso far i am still in the phase of understanding why things are the way they aret13:01 nhardytusaget13:01 ngmorlingtand not the way i think they should be  t13:01 ngmorlingthardy: +1 for leaving out mostly exotic use cases if it helps to largely simplify thingst13:02 nhardytwhat does all the freedom help us if one does not know how to plug it togethert13:02 nsannegrinoverothardy: yeah, but I'd still like it to be able to do such things, just possibly hiding the complexity entirely behind a chosen IMt13:02 nhardytcatering for the 0.0001% of use cases  ?t13:02 nhardytif anyt13:02 nsannegrinoverotright, no only for those which make sense, but then rather than giving a configuration guide, to have to set a single IM name which encapsulates the whole setup.t13:03 nhardytI think you would gain more happy users by making things simpler and potentially ruling out some super user configurations, than having all the flexibilty in the workd, but you need to study rocket sience to put things togehtert13:04 ngmorlingtmy thinking as wellt13:04 nhardytimo with the next major release (aka 6) we should break with some of the old concepts, try to introduce some sort of consistence view onto the system and make it simplert13:06 nsannegrinoverot+1t13:06 nhardytlooking at Workers and DirectoryProviders for examplet13:06 ngmorlingtsome clean-up is due for suret13:07 nsannegrinoverotlet's start with refining the plan alreadyt13:07 nsannegrinoverotas when the time comes for majors we're usually in a big crunch to not stall releases for too long :-\/t13:07 nhardytand I donu2019t think this is something which you do incremental and with deprecations here and theret13:07 nhardytto a certain degree I would envison a bit of a bigger burden for users in favour of a deeper re-designt13:08 nsannegrinoverotWDYM burden? in terms of migration?t13:09 nsannegrinoverothardy: did you happen to play with Apache Camel?t13:10 nhardytsorrry I was distracted for a momentt13:14 nsannegrinoverothardy: gmorling: for this conversation, would be good you could have a look here:  https:\/\/access.redhat.com\/documentation\/en-US\/Red_Hat_JBoss_Data_Grid\/6.5\/html-single\/Infinispan_Query_Guide\/index.html t13:14 njbossbottTitle: Infinispan Query Guidet13:14 nhardytright, in terms of migrsationt13:14 nhardytit is a bit like the rewrite of the ORM boostrapt13:14 nsannegrinoverotsearch for \"indexmanager\"t13:14 nsannegrinoverotfor example in Infinispan you only have to set a single property:t13:15 nsannegrinoverotdefault.indexmanager=org.infinispan.query.indexmanager.InfinispanIndexManagert13:15 nsannegrinoverotand that will get you:t13:15 nsannegrinoverotdistributed, real-time shared indexest13:15 nsannegrinoverotautomatic master\/slave electiont13:15 nsannegrinoverotfailover of masterst13:15 ngmorlingtsure, thatu2019s nicet13:15 nsannegrinoverotand remoting\/serializations setupt13:15 nhardythow does Camel come into play here?t13:15 ngmorlingtbut youu2019d never need another BQP than the u201Clocalu201D one in my model to make use of that, rightt13:16 nsannegrinoverothardy: I was side-tracking a bit, but I would be curious to hear from you if we should \"couple\" to Camel rather than JMS as it gives users more flexibility w\/o making the setup more complex.t13:16 nsannegrinoverotgmorling: well you have the NRT alternative, and options for synch\/asyncht13:17 nsannegrinoverotgmorling: oh, and it definitley switches the BQP as well.. dynamically.t13:17 ngmorlingt?t13:18 nsannegrinoverotit's all logic which is encapsulated in the IMt13:18 nsannegrinoverotgmorling: maybe clone infinispan and have a look? the \/query Maven module is quite small and self-contained, and it's mostly extensions of the Search SPIt13:19 ngmorlingtk, iu2019ll take a look               n        n    n"}]}},{"HHH-10039":{"info":{"issue_title":"Ensure the Karaf features.xml is included in the distro zip\/tgz","issue_key":"HHH-10039","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.Final","issue_labels":"5.0.0.Final","issue_description":"features.xml is now deployed to Nexus, but we should also include it in the binary distro","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10039?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69869","commnet_date":"2015-08-19T12:35:08-0700","commnet_user":"Brett Meyer","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Brett Meyern added a comment  - 19\/Aug\/2015 12:35 PM    n        n        Suggestion:nnThe distro currently has \/lib\/osgi.  Move that to \/lib\/optional\/osgi, then add features.xml there. n    n    n        n            Show  n            n                        n    n    n    n                nn       Brett Meyern added a comment  - 19\/Aug\/2015 12:35 PM                      Suggestion: nn The distro currently has \/lib\/osgi.  Move that to \/lib\/optional\/osgi, then add features.xml there.              n        n    n"},{"commnet_id":"comment-69870","commnet_date":"2015-08-19T23:14:19-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 19\/Aug\/2015 23:14 PM    n        n        In the end I kept it under lib\/osgi, but the Karaf features XML is included in there now too. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 19\/Aug\/2015 23:14 PM                      In the end I kept it under lib\/osgi, but the Karaf features XML is included in there now too.              n        n    n"}]}},{"HHH-10038":{"info":{"issue_title":"Merging the detached entity without reloading from DB","issue_key":"HHH-10038","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"In my application I have a table CodeItem as given below\r\n CodeItem  {  \t\t   Code varchar  \t\t   CodeType varchar  \t\t   Label varchar  \t\t } The pk is composite key comprising of column(Code and CodeType) and there is no identity column   DB is SQLServer 2012 \/ORM is hibernate 4 \r\n Hibernate L2 cache is implemented and it is working fine for all the entities except CodeItem entity.  The CodeItem entity is cached whenever it is accessed for the first time but when the same entity is accessed it is not retrieved from cache but from DB as identity column is not there.  For some restrictions we can not change the table definition.  To overcome the performance issue we have implemented spring cache mechanism, which is working fine.  The problem is that when we retrieve the CodeItem entity from spring cache region, we need to merge it in hibernate session as it is detached entity.  For that we are using session.merge, which will reload the entity from DB.  Is there any way in which I can merge the detached CodeItem entity to hibernate session without making DB query.     I wish to have interfce something like \r\n session.merge(entity, reloadFromDBFlag) \/\/where reloadFromDBFlag is boolean","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10038?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-899":{"info":{"issue_title":"Wrong OS Name","issue_key":"OGM-899","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"4.2.0.Final","issue_component":"4.2.0.Final","issue_labels":"4.2.0.Final","issue_description":"It's written \"Max OS X\" in the first page of the documentation, the correct is \"Mac OS X\".","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-899?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10035":{"info":{"issue_title":"DefaultRevisionEntity has an int id field","issue_key":"HHH-10035","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Duplicate","issue_fix_version":"4.3.6","issue_component":"4.3.6","issue_labels":"4.3.6","issue_description":"The DefaultRevisionEntity class has an int-type for the id field. ints can hold a maximum of 2.1 billion, which would not be a big deal except for the fact that Envers also uses the shared HIBERNATE_SEQUENCE generator. In a database with a lot of activity, the value in the sequence can easily exceed this this maximum value.  DefaultRevisionEntity should really use a Long type to hold this value instead.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10035?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-897":{"info":{"issue_title":"cache cassandra PreparedStatements","issue_key":"OGM-897","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"4.2.0.Final","issue_component":"4.2.0.Final","issue_labels":"4.2.0.Final","issue_description":"The cassandra driver pools connections automatically, but unlike many JDBC drivers it doesn't cache PreparedStatement handles on the client side. Thus each prepare call is a network round trip, potentially to multiple db nodes. Apps with a fixed set of statements typically declare them in code as fields, but where they are dynamically generated at runtime that's not feasible. Hence we prefer a caching approach.  The support bound on cache size will have to be a reasonable guess at this stage. Support for cache size configuration may be worthwhile if customer use shows it's a memory hog.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-897?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-74562","commnet_date":"2016-01-07T10:33:35-0800","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 07\/Jan\/2016 10:33 AM    n        n        Has been implemented with no configurability of the cache size for now (fixed size of entries with eviction if needed). Can be done upon request. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 07\/Jan\/2016 10:33 AM                      Has been implemented with no configurability of the cache size for now (fixed size of entries with eviction if needed). Can be done upon request.              n        n    n"}]}},{"HSEARCH-1964":{"info":{"issue_title":"Review documentation chapter on combining queries with boolean operators","issue_key":"HSEARCH-1964","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.5.1.Final,                                            5.6.0.Alpha1","issue_labels":"5.5.1.Final,                                            5.6.0.Alpha1","issue_description":"We need to clarify the meaning of each operator - for example why it's called \"SHOULD\" rather than OR, and make a clear usage example of the NOT operator.  Also clearly differentiate between a \"MUST and a \"MUST NOT\".  See also:  \thttps:\/\/issues.jboss.org\/browse\/JBEAP-1677 \thttp:\/\/docs.jboss.org\/hibernate\/search\/5.5\/reference\/en-US\/html_single\/#search-query-querydsl \thttps:\/\/access.redhat.com\/documentation\/en-US\/JBoss_Enterprise_Application_Platform\/6.4\/html-single\/Development_Guide\/index.html","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1964?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10030":{"info":{"issue_title":"Add read-write cache concurrency strategy to Infinispan 2LC","issue_key":"HHH-10030","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.1","issue_labels":"5.0.1","issue_description":"With recent fixes in                                                          HHH-9868                                                              Closed                 and                                                          HHH-9881                                                              Closed                , Infinispan integration can use read-write caching strategies. Enable the configuration setting and change default configuration to non-transactional.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10030?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10028":{"info":{"issue_title":"Upgrade third party libraries in Hibernate","issue_key":"HHH-10028","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Rejected","issue_fix_version":"4.3.11","issue_component":"4.3.11","issue_labels":"4.3.11","issue_description":"Following third party libraries in Hibernate are not upgraded to the latest versions and were released couple of years ago.   1. ANTLR version 2.7.7 (released in 2006)  - latest one was released in 2014\r\n 2. jandex 1.1.0.Final (released in 2013) - latest one was released in 2015\r\n 3. javassist 3.18.1-GA (released in 2013) - latest one was released in 2015\r\n 4. jboss-logging 3.1.3.GA (released in 2013) - latest one was released in 2015\r\n 5. jboss-logging-annotations 1.2.0.Beta1 (released in 2013) - latest one was released in 2015","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10028?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69742","commnet_date":"2015-08-11T06:41:42-0700","commnet_user":"Pinky Tejwani","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Pinky Tejwanin added a comment  - 11\/Aug\/2015 06:41 AM    n        n        This was the security issue reported at OSVDB for ANTLR versions lower than 4.1\r\nnhttp:\/\/osvdb.org\/show\/osvdb\/95378 n    n    n        n            Show  n            n                        n    n    n    n                nn       Pinky Tejwanin added a comment  - 11\/Aug\/2015 06:41 AM                      This was the security issue reported at OSVDB for ANTLR versions lower than 4.1 n http:\/\/osvdb.org\/show\/osvdb\/95378               n        n    n"},{"commnet_id":"comment-69888","commnet_date":"2015-08-21T11:16:45-0700","commnet_user":"Pinky Tejwani","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Pinky Tejwanin added a comment  - 21\/Aug\/2015 11:16 AM    n        n        Along with the above libraries, ehcache library is also on the older version and that also needs an upgrade to the latest version. n    n    n        n            Show  n            n                        n    n    n    n                nn       Pinky Tejwanin added a comment  - 21\/Aug\/2015 11:16 AM                      Along with the above libraries, ehcache library is also on the older version and that also needs an upgrade to the latest version.              n        n    n"},{"commnet_id":"comment-70002","commnet_date":"2015-08-26T13:45:54-0700","commnet_user":"Brett Meyer","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Brett Meyern added a comment  - 26\/Aug\/2015 13:45 PM    n        n        Although you're correct that there might be a couple we could upgrade, in general, we stay in-step with Wildfly and EAP dependency versions to ensure compatibility. n    n    n        n            Show  n            n                        n    n    n    n                nn       Brett Meyern added a comment  - 26\/Aug\/2015 13:45 PM                      Although you're correct that there might be a couple we could upgrade, in general, we stay in-step with Wildfly and EAP dependency versions to ensure compatibility.              n        n    n"}]}},{"HSEARCH-1958":{"info":{"issue_title":"Make sure the documentation covers indexing of Date types","issue_key":"HSEARCH-1958","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.7","issue_labels":"5.7","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1958?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10026":{"info":{"issue_title":"Consider hibernate-java8 types for use with @Version","issue_key":"HHH-10026","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.0.CR2","issue_component":"5.0.0.CR2","issue_labels":"5.0.0.CR2","issue_description":"I guess specifically Instant, OffsetDateTime and ZonedDateTime.    I don't think LocalDateTime makes sense, would it?","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10026?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69712","commnet_date":"2015-08-07T17:43:55-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 07\/Aug\/2015 17:43 PM    n        n        See Entity.xml chapter in mappingGuide. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 07\/Aug\/2015 17:43 PM                      See Entity.xml chapter in mappingGuide.              n        n    n"},{"commnet_id":"comment-70136","commnet_date":"2015-08-31T11:06:55-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 31\/Aug\/2015 11:06 AM    n        n        These already supported use as version field.  Actually the problem was that the support was too broad; we allowed types for version we should not have.  I added tests to prevent regressions.  I also left LocalDateTime as available for use as a version, which is conceptually questionable. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 31\/Aug\/2015 11:06 AM                      These already supported use as version field.  Actually the problem was that the support was too broad; we allowed types for version we should not have.  I added tests to prevent regressions.  I also left LocalDateTime as available for use as a version, which is conceptually questionable.              n        n    n"}]}},{"HSEARCH-1957":{"info":{"issue_title":"Remove deprecated FilterKey contract","issue_key":"HSEARCH-1957","issue_type":"Remove Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6","issue_labels":"6","issue_description":"Has been deprecated in 5.1, to be removed in HS 6.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1957?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-894":{"info":{"issue_title":"Support Cassandra 2.2 type mappings","issue_key":"OGM-894","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"4.2.0.Final","issue_component":"4.2.0.Final","issue_labels":"4.2.0.Final","issue_description":"cassandra 2.2 introduces new native data types and the corresponding driver additionally has API changes to streamline type codec handling.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-894?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10023":{"info":{"issue_title":"Make hibernate-infinispan compiled with Infinispan 7.x but runnable with Infinispan 8.x","issue_key":"HHH-10023","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.0.CR4","issue_component":"5.0.0.CR4","issue_labels":"5.0.0.CR4","issue_description":"Cache.keySet(), Cache.values() and Cache.entrySet() return type have changed in order to support streaming, but this breaks runtime compatibility.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10023?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10021":{"info":{"issue_title":"Allow easy testing of hibernate-infinispan against Infinispan 7 or 8","issue_key":"HHH-10021","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.Final","issue_labels":"5.0.0.Final","issue_description":"To some degree this is simply porting forward the same feature Gail and I worked out for 4.3 branch: https:\/\/github.com\/hibernate\/hibernate-orm\/blob\/4.3\/hibernate-infinispan\/hibernate-infinispan.gradle#L5-L17  Investigate if there is an easier (more free-form) way to override dependency versions from the command line.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10021?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69699","commnet_date":"2015-08-05T18:47:49-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 05\/Aug\/2015 18:47 PM    n        n        Sanne Grinovero FYI n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 05\/Aug\/2015 18:47 PM                       Sanne Grinovero  FYI              n        n    n"},{"commnet_id":"comment-69705","commnet_date":"2015-08-06T02:37:52-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 06\/Aug\/2015 02:37 AM    n        n        Thanks for the pointer!nnNote to self:nnrun it as nn..\/gradlew clean test -PuseInfinispan8ForTesting=true nnfrom the \/hibernate-infinispan submodule. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 06\/Aug\/2015 02:37 AM                      Thanks for the pointer! nn Note to self: nn run it as  n  n ..\/gradlew clean test -PuseInfinispan8ForTesting= true  n  n from the \/hibernate-infinispan submodule.              n        n    n"},{"commnet_id":"comment-69706","commnet_date":"2015-08-06T02:47:36-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 06\/Aug\/2015 02:47 AM    n        n        New job running:\r\nn http:\/\/ci.hibernate.org\/view\/ORM\/job\/hibernate-orm-master-h2-infinispan8nnI'll have this job triggered by a successful build of hibernate-orm-master-h2 n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 06\/Aug\/2015 02:47 AM                      New job running: n  http:\/\/ci.hibernate.org\/view\/ORM\/job\/hibernate-orm-master-h2-infinispan8  nn I'll have this job triggered by a successful build of hibernate-orm-master-h2              n        n    n"},{"commnet_id":"comment-69707","commnet_date":"2015-08-06T02:56:49-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 06\/Aug\/2015 02:56 AM    n        n        Actually, added a second commit to not hardcode the alternative version number:nnn..\/gradlew clean test -PoverrideInfinispanVersionForTesting=8.0.0.Beta2nnnn..\/gradlew clean test -PoverrideInfinispanVersionForTesting=8.0.0-SNAPSHOTn n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 06\/Aug\/2015 02:56 AM                      Actually, added a second commit to not hardcode the alternative version number: nn  n ..\/gradlew clean test -PoverrideInfinispanVersionForTesting=8.0.0.Beta2 n  nn  n ..\/gradlew clean test -PoverrideInfinispanVersionForTesting=8.0.0-SNAPSHOT n               n        n    n"}]}},{"HSEARCH-1952":{"info":{"issue_title":"ScheduledCommitPolicy might open unnecessary IndexWriter instances","issue_key":"HSEARCH-1952","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.4.0.Final,                                            5.5.0.Alpha1","issue_labels":"5.4.0.Final,                                            5.5.0.Alpha1","issue_description":"The ScheduledCommitPolicy might open unnecessary IndexWriter instances to check if it needs flushing, and in a rare race condition with the shutdown process it might hit an NPE to perform this check.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1952?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-1951":{"info":{"issue_title":"Improve resulting error message when applying the wrong Sort Type","issue_key":"HSEARCH-1951","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.5.3.Final,                                            5.6.0.Beta1","issue_labels":"5.5.3.Final,                                            5.6.0.Beta1","issue_description":"When using Lucene's SortField.Type.INT to sort on a field which was not indexed as a NumericField, the resulting error message is confusing:   java.lang.IllegalStateException: Type mismatch: ageForIntSorting was indexed with multiple values per document, use SORTED_SET instead  \tat org.apache.lucene.uninverting.FieldCacheImpl$SortedDocValuesCache.createValue(FieldCacheImpl.java:679)  \tat org.apache.lucene.uninverting.FieldCacheImpl$Cache.get(FieldCacheImpl.java:190)  \tat org.apache.lucene.uninverting.FieldCacheImpl.getTermsIndex(FieldCacheImpl.java:647)  \tat org.apache.lucene.uninverting.FieldCacheImpl.getTermsIndex(FieldCacheImpl.java:627)  \tat org.apache.lucene.uninverting.UninvertingReader.getSortedDocValues(UninvertingReader.java:257)  \tat org.apache.lucene.index.DocValues.getSorted(DocValues.java:262)  \tat org.apache.lucene.search.FieldComparator$TermOrdValComparator.getSortedDocValues(FieldComparator.java:757)  \tat org.apache.lucene.search.FieldComparator$TermOrdValComparator.getLeafComparator(FieldComparator.java:762)  \tat org.apache.lucene.search.FieldValueHitQueue.getComparators(FieldValueHitQueue.java:183)  \tat org.apache.lucene.search.TopFieldCollector$NonScoringCollector.getLeafCollector(TopFieldCollector.java:141)  \tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:762)  \tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:485)  \tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:473)  \tat org.hibernate.search.query.engine.impl.LazyQueryState.search(LazyQueryState.java:100)  \tat org.hibernate.search.query.engine.impl.QueryHits.updateTopDocs(QueryHits.java:250)  \tat org.hibernate.search.query.engine.impl.QueryHits.&lt;init&gt;(QueryHits.java:145)  \tat org.hibernate.search.query.engine.impl.QueryHits.&lt;init&gt;(QueryHits.java:123)  \tat org.hibernate.search.query.engine.impl.HSQueryImpl.getQueryHits(HSQueryImpl.java:447)  \tat org.hibernate.search.query.engine.impl.HSQueryImpl.queryEntityInfos(HSQueryImpl.java:268)     Wondering if we could improve on that, as this might be a migration issue: it seems previously - before Lucene 5 - this was more lenient (probably gave the wrong sort order, but it would not throw an exception).  A starting point it the test org.hibernate.search.test.sorting.SortingTest (about to be committed).  The opposite problem will result in something like:   java.lang.IllegalStateException: Type mismatch: age was indexed with multiple values per document, use SORTED_SET instead  \tat org.apache.lucene.uninverting.FieldCacheImpl$SortedDocValuesCache.createValue(FieldCacheImpl.java:679) ~[lucene-misc-5.2.1.jar:5.2.1 1684708 - shalin - 2015-06-10 23:11:46]  \tat org.apache.lucene.uninverting.FieldCacheImpl$Cache.get(FieldCacheImpl.java:190) ~[lucene-misc-5.2.1.jar:5.2.1 1684708 - shalin - 2015-06-10 23:11:46]  \tat org.apache.lucene.uninverting.FieldCacheImpl.getTermsIndex(FieldCacheImpl.java:647) ~[lucene-misc-5.2.1.jar:5.2.1 1684708 - shalin - 2015-06-10 23:11:46]  \tat org.apache.lucene.uninverting.FieldCacheImpl.getTermsIndex(FieldCacheImpl.java:627) ~[lucene-misc-5.2.1.jar:5.2.1 1684708 - shalin - 2015-06-10 23:11:46]  \tat org.apache.lucene.uninverting.UninvertingReader.getSortedDocValues(UninvertingReader.java:257) ~[lucene-misc-5.2.1.jar:5.2.1 1684708 - shalin - 2015-06-10 23:11:46]  \tat org.apache.lucene.index.DocValues.getSorted(DocValues.java:262) ~[lucene-core-5.2.1.jar:5.2.1 1684708 - shalin - 2015-06-10 23:11:06]  \tat org.apache.lucene.search.FieldComparator$TermOrdValComparator.getSortedDocValues(FieldComparator.java:757) ~[lucene-core-5.2.1.jar:5.2.1 1684708 - shalin - 2015-06-10 23:11:06]  \tat org.apache.lucene.search.FieldComparator$TermOrdValComparator.getLeafComparator(FieldComparator.java:762) ~[lucene-core-5.2.1.jar:5.2.1 1684708 - shalin - 2015-06-10 23:11:06]  \tat org.apache.lucene.search.FieldValueHitQueue.getComparators(FieldValueHitQueue.java:183) ~[lucene-core-5.2.1.jar:5.2.1 1684708 - shalin - 2015-06-10 23:11:06]  \tat org.apache.lucene.search.TopFieldCollector$NonScoringCollector.getLeafCollector(TopFieldCollector.java:141) ~[lucene-core-5.2.1.jar:5.2.1 1684708 - shalin - 2015-06-10 23:11:06]  \tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:762) ~[lucene-core-5.2.1.jar:5.2.1 1684708 - shalin - 2015-06-10 23:11:06]  \tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:485) ~[lucene-core-5.2.1.jar:5.2.1 1684708 - shalin - 2015-06-10 23:11:06]  \tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:473) ~[lucene-core-5.2.1.jar:5.2.1 1684708 - shalin - 2015-06-10 23:11:06]  \tat org.hibernate.search.query.engine.impl.LazyQueryState.search(LazyQueryState.java:100) ~[hibernate-search-engine-5.5.0-SNAPSHOT.jar:5.5.0-SNAPSHOT]  \tat org.hibernate.search.query.engine.impl.QueryHits.updateTopDocs(QueryHits.java:250) ~[hibernate-search-engine-5.5.0-SNAPSHOT.jar:5.5.0-SNAPSHOT]  \tat org.hibernate.search.query.engine.impl.QueryHits.&lt;init&gt;(QueryHits.java:145) ~[hibernate-search-engine-5.5.0-SNAPSHOT.jar:5.5.0-SNAPSHOT]  \tat org.hibernate.search.query.engine.impl.QueryHits.&lt;init&gt;(QueryHits.java:114) ~[hibernate-search-engine-5.5.0-SNAPSHOT.jar:5.5.0-SNAPSHOT]  \tat org.hibernate.search.query.engine.impl.HSQueryImpl.getQueryHits(HSQueryImpl.java:452) ~[hibernate-search-engine-5.5.0-SNAPSHOT.jar:5.5.0-SNAPSHOT]  \tat org.hibernate.search.query.engine.impl.HSQueryImpl.queryEntityInfos(HSQueryImpl.java:268) ~[hibernate-search-engine-5.5.0-SNAPSHOT.jar:5.5.0-SNAPSHOT]     I suspect in this case the field was indexed as NumericField, but it's being queried as SortField.Type.STRING","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1951?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-70469","commnet_date":"2015-09-23T23:59:30-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 23\/Sep\/2015 23:59 PM    n        n        Apparently Lucene does not reliably raise an error if there is a mismatch between field type and requested sort type. E.g. see this case which returns wrongly sorted results for a field type of String and a requested sort type of Long.nnThe error you see I believe only pops up in some special cases (maybe involving an analzyed field?). Would be good to know the test which raises it. I saw it before but cannot remember how I produced it. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 23\/Sep\/2015 23:59 PM                      Apparently Lucene does not reliably raise an error if there is a mismatch between field type and requested sort type. E.g. see  this case  which returns wrongly sorted results for a field type of String and a requested sort type of Long. nn The error you see I believe only pops up in some special cases (maybe involving an analzyed field?). Would be good to know the test which raises it. I saw it before but cannot remember how I produced it.              n        n    n"},{"commnet_id":"comment-70857","commnet_date":"2015-09-29T10:03:43-0700","commnet_user":"Guillaume Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Guillaume Smetn added a comment  - 29\/Sep\/2015 10:03 AM    n        n        Hi Gunnar,nnI had the problem the other day: it's quite easy to reproduce if you index a string which is analyzed in several tokens. If you sort on this field, you end up with this exception.nn&#8211; \r\nnGuillaume n    n    n        n            Show  n            n                        n    n    n    n                nn       Guillaume Smetn added a comment  - 29\/Sep\/2015 10:03 AM                      Hi Gunnar, nn I had the problem the other day: it's quite easy to reproduce if you index a string which is analyzed in several tokens. If you sort on this field, you end up with this exception. nn &#8211;  nGuillaume              n        n    n"},{"commnet_id":"comment-70861","commnet_date":"2015-09-30T04:50:55-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 30\/Sep\/2015 04:50 AM    n        n        Thanks for this feedback, Guillaume Smet! I suppose we should issue another warning when trying to sort on an analyzed field. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 30\/Sep\/2015 04:50 AM                      Thanks for this feedback,  Guillaume Smet ! I suppose we should issue another warning when trying to sort on an analyzed field.              n        n    n"},{"commnet_id":"comment-76932","commnet_date":"2016-04-11T04:21:42-0700","commnet_user":"Guillaume Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Guillaume Smetn added a comment  - 11\/Apr\/2016 04:21 AM    n        n        It's very common to sort on an analyzed field (typically, we put the text all lowercase, remove accents, remove special characters and so on).nnThe issue is more the tokenizer. We should check if the field is using a tokenizer different from the KeywordTokenizer. n    n    n        n            Show  n            n                        n    n    n    n                nn       Guillaume Smetn added a comment  - 11\/Apr\/2016 04:21 AM                      It's very common to sort on an analyzed field (typically, we put the text all lowercase, remove accents, remove special characters and so on). nn The issue is more the tokenizer. We should check if the field is using a tokenizer different from the KeywordTokenizer.              n        n    n"}]}},{"HHH-10020":{"info":{"issue_title":"Improvements to org.hibernate.bytecode.enhance.internal.AttributeTypeDescriptor#buildInLineDirtyCheckingBodyFragment","issue_key":"HHH-10020","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.1","issue_labels":"5.0.1","issue_description":"Some specifics:  \tThe check for \"simple types\" should be expanded to account for other types:  java 8 date\/time types, UUID, URL, etc \tThe check for \"all other objects\" really does not need to check for null first; it can just call EqualsHelper, which already handles null checks.    Another option is to just always use EqualsHelper for the non-primitive checks.  It already handles null checking, etc","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10020?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69692","commnet_date":"2015-08-05T08:26:15-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 05\/Aug\/2015 08:26 AM    n        n        Stu00E5le W. Pedersen Thoughts? n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 05\/Aug\/2015 08:26 AM                       Stu00E5le W. Pedersen  Thoughts?              n        n    n"},{"commnet_id":"comment-69864","commnet_date":"2015-08-19T10:24:40-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 19\/Aug\/2015 10:24 AM    n        n        Luis Barreiro, Stu00E5le W. Pedersen I think we all agreed the EqualsHelper approach is best overall? n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 19\/Aug\/2015 10:24 AM                       Luis Barreiro ,  Stu00E5le W. Pedersen  I think we all agreed the EqualsHelper approach is best overall?              n        n    n"},{"commnet_id":"comment-69871","commnet_date":"2015-08-20T00:55:25-0700","commnet_user":"Stu00E5le W. Pedersen","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Stu00E5le W. Pedersenn added a comment  - 20\/Aug\/2015 00:55 AM    n        n        yes, i think so too. Luis Barreiro is on pto this week, he'll be back next week. n    n    n        n            Show  n            n                        n    n    n    n                nn       Stu00E5le W. Pedersenn added a comment  - 20\/Aug\/2015 00:55 AM                      yes, i think so too.  Luis Barreiro  is on pto this week, he'll be back next week.              n        n    n"}]}},{"HHH-10018":{"info":{"issue_title":"Change default ImplicitNamingStrategy to use the JPA compliant one + ImplicitNamingStrategy short-naming","issue_key":"HHH-10018","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.CR4","issue_labels":"5.0.0.CR4","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10018?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-891":{"info":{"issue_title":"Use more natural format to store map-typed properties in Redis","issue_key":"OGM-891","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.Alpha1","issue_labels":"5.0.0.Alpha1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-891?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69667","commnet_date":"2015-08-04T12:21:45-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 04\/Aug\/2015 12:21 PM    n        n        The same as n    n                n        n            n            OGM-555n        n                                                    Resolved n             n for MongoDB, but now for CouchDB and Redis. Some unification of the code would be nice. For now the implementation is local to the MongoDB dialect. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 04\/Aug\/2015 12:21 PM                      The same as n     n                 n         n             n            OGM-555n         n                                                     Resolved n             n for MongoDB, but now for CouchDB and Redis. Some unification of the code would be nice. For now the implementation is local to the MongoDB dialect.              n        n    n"},{"commnet_id":"comment-69858","commnet_date":"2015-08-19T02:16:43-0700","commnet_user":"Mark Paluch","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Mark Paluchn added a comment  - 19\/Aug\/2015 02:16 AM    n        n        Will create a follow-up PR for CouchDB n    n    n        n            Show  n            n                        n    n    n    n                nn       Mark Paluchn added a comment  - 19\/Aug\/2015 02:16 AM                      Will create a follow-up PR for CouchDB              n        n    n"},{"commnet_id":"comment-69930","commnet_date":"2015-08-24T00:12:01-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 24\/Aug\/2015 00:12 AM    n        n        Thanks, Mark Paluch! I've openend n    n                n        n            n            OGM-904n        n                                                    Closed n             n as the follow-up for CouchDB. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 24\/Aug\/2015 00:12 AM                      Thanks,  Mark Paluch ! I've openend n     n                 n         n             n            OGM-904n         n                                                     Closed n             n as the follow-up for CouchDB.              n        n    n"}]}},{"HHH-10014":{"info":{"issue_title":"Adjust default for hibernate.auto_quote_keyword to false","issue_key":"HHH-10014","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.CR4","issue_labels":"5.0.0.CR4","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10014?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10013":{"info":{"issue_title":"Adjust default for hibernate.id.new_generator_mappings to true","issue_key":"HHH-10013","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.CR4","issue_labels":"5.0.0.CR4","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10013?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-1947":{"info":{"issue_title":"Create custom bridges for Java 8 Date and Time classes","issue_key":"HSEARCH-1947","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.5.0.CR1","issue_labels":"5.5.0.CR1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1947?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10012":{"info":{"issue_title":"Make SQLFunctionRegistry mutable to be able to register functions at an early runtime stage","issue_key":"HHH-10012","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.0.0.Beta2","issue_component":"5.0.0.Beta2","issue_labels":"5.0.0.Beta2","issue_description":"Since 5.0.0.Beta2 the SQLFunctionRegistry uses a map for the registered functions that isn't mutable after a SessionFactory has been created. This is really unfortunate because all functions have to be added in the constructor of a Dialect.  Please make it possible to add functions to an existing SessionFactory.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10012?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69948","commnet_date":"2015-08-25T11:31:01-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 25\/Aug\/2015 11:31 AM    n        n        Why can't you add it via org.hibernate.boot.SessionFactoryBuilder#applySqlFunction? n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 25\/Aug\/2015 11:31 AM                      Why can't you add it via  org.hibernate.boot.SessionFactoryBuilder#applySqlFunction ?              n        n    n"},{"commnet_id":"comment-69950","commnet_date":"2015-08-25T11:37:02-0700","commnet_user":"Christian Beikov","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Christian Beikovn added a comment  - 25\/Aug\/2015 11:37 AM    n        n        How would I access that via a Session? n    n    n        n            Show  n            n                        n    n    n    n                nn       Christian Beikovn added a comment  - 25\/Aug\/2015 11:37 AM                      How would I access that via a Session?              n        n    n"},{"commnet_id":"comment-69956","commnet_date":"2015-08-25T11:55:56-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 25\/Aug\/2015 11:55 AM    n        n        You wouldnt.  And anyway you said \"earlier runtime stage\".  How is Session earlier?  n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 25\/Aug\/2015 11:55 AM                      You wouldnt.  And anyway you said \" earlier  runtime stage\".  How is Session earlier?                n        n    n"},{"commnet_id":"comment-69966","commnet_date":"2015-08-26T00:03:13-0700","commnet_user":"Christian Beikov","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Christian Beikovn added a comment  - 26\/Aug\/2015 00:03 AM    n        n        Well I said add functions to an existing SessionFactory, but you said you want to do optimizations in the future, so it probably won't happen. Or do you have an idea how we could make that still work? n    n    n        n            Show  n            n                        n    n    n    n                nn       Christian Beikovn added a comment  - 26\/Aug\/2015 00:03 AM                      Well I said add functions to an existing SessionFactory, but you said you want to do optimizations in the future, so it probably won't happen. Or do you have an idea how we could make that still work?              n        n    n"},{"commnet_id":"comment-70155","commnet_date":"2015-09-01T08:16:55-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 01\/Sep\/2015 08:16 AM    n        n        I guess its just confusing English.  You want to be able to override functions that were registered at an earlier stage, not be able to override functions earlier.nnIt's not about \"optimizations\" in the future.  Its about new features in the future.  I want to be able to allow referencing functions in the mappings to be able to leverage this SQLFunctionRegistry; at the moment mappings have to name the concrete function info, which hurts db portability.nnI am still not understanding your real goal.  You are asking about a particular way to achieve something, if you explain your bigger-picture goal we could maybe design something. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 01\/Sep\/2015 08:16 AM                      I guess its just confusing English.  You want to be able to override functions that were registered at an earlier stage, not be able to override functions earlier. nn It's not about \"optimizations\" in the future.  Its about new features in the future.  I want to be able to allow referencing functions in the mappings to be able to leverage this SQLFunctionRegistry; at the moment mappings have to name the concrete function info, which hurts db portability. nn I am still not understanding your real goal.  You are asking about a particular way to achieve something, if you explain your bigger-picture goal we could maybe design something.              n        n    n"},{"commnet_id":"comment-70167","commnet_date":"2015-09-01T11:02:36-0700","commnet_user":"Christian Beikov","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Christian Beikovn added a comment  - 01\/Sep\/2015 11:02 AM    n        n        As I told you on IRC, I have CDI beans that provide functions. I have to register these functions to an existing EntityManagerFactory\/SessionFactory.\r\nnSince the CDI initialization seems to happen after the JPA initialization in Java EE, there is no way for my CDI beans to provide these functions. Thus I have to add them the hacky way.\r\nnWould be cool if the JPA bootstrap could be defered until CDI has booted and also let CDI beans contribute to the metamodel. n    n    n        n            Show  n            n                        n    n    n    n                nn       Christian Beikovn added a comment  - 01\/Sep\/2015 11:02 AM                      As I told you on IRC, I have CDI beans that provide functions. I have to register these functions to an existing EntityManagerFactory\/SessionFactory. nSince the CDI initialization seems to happen after the JPA initialization in Java EE, there is no way for my CDI beans to provide these functions. Thus I have to add them the hacky way. nWould be cool if the JPA bootstrap could be defered until CDI has booted and also let CDI beans contribute to the metamodel.              n        n    n"},{"commnet_id":"comment-70499","commnet_date":"2015-09-24T11:10:42-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 24\/Sep\/2015 11:10 AM    n        n        Such \"timing\" issues between components is unfortunately left up to containers in the EE spec.  That is, the EE spec does not specify any bootstrap ordering between its various components.  Red Hat brought this to the attention of the EE and JPA EGs, but to no avail.  nnSo there are some ways around that.  Unfortunately they are all vendor specific.  For example, amongst components used in WildFly we develop a number \"proprietary bootstrap SPIs\".  So WildFly, for example, does not bootstrap Hibernate in the normal EE\/JPA defined manner for \"managed EMFs\".  Instead WildFly uses a proprietary 2-phase EMF bootstrap I developed in Hibernate to alleviate some of these timing issues.  nnAll that may or may not help you.  Just wanted to point out that yes it is a pita.n n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 24\/Sep\/2015 11:10 AM                      Such \"timing\" issues between components is unfortunately left up to containers in the EE spec.  That is, the EE spec does not specify any bootstrap ordering between its various components.  Red Hat brought this to the attention of the EE and JPA EGs, but to no avail.   nn So there are some ways around that.  Unfortunately they are all vendor specific.  For example, amongst components used in WildFly we develop a number \"proprietary bootstrap SPIs\".  So WildFly, for example, does not bootstrap Hibernate in the normal EE\/JPA defined manner for \"managed EMFs\".  Instead WildFly uses a proprietary 2-phase EMF bootstrap I developed in Hibernate to alleviate some of these timing issues.   nn All that may or may not help you.  Just wanted to point out that yes it is a pita. n             n        n    n"}]}},{"OGM-886":{"info":{"issue_title":"Apply connection timeout","issue_key":"OGM-886","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.Alpha1","issue_labels":"5.0.0.Alpha1","issue_description":"RedisModuleMemberRegistrationIT indefinitely hangs if no Redis server can be accessed at the configured host. I'd expect the connection timeout (defaults to 5 sec) to be applied, but that seems not the case.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-886?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69636","commnet_date":"2015-08-03T05:47:04-0700","commnet_user":"Mark Paluch","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Mark Paluchn added a comment  - 03\/Aug\/2015 05:47 AM    n        n        Connection timeout works in general, but the driver hangs while closing the communication channel. Maybe it's a Redis driver bug n    n    n        n            Show  n            n                        n    n    n    n                nn       Mark Paluchn added a comment  - 03\/Aug\/2015 05:47 AM                      Connection timeout works in general, but the driver hangs while closing the communication channel. Maybe it's a Redis driver bug              n        n    n"},{"commnet_id":"comment-69638","commnet_date":"2015-08-03T06:20:16-0700","commnet_user":"Mark Paluch","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Mark Paluchn added a comment  - 03\/Aug\/2015 06:20 AM    n        n        Research: The lettuce driver runs into an infinite wait because of a netty (https:\/\/github.com\/netty\/netty\/issues\/3464) bug in 4.0.26.Final (Version of WildFly 9CR1). The timeout is applied correctly but the driver blocks in the closing sequence. This happens in case the host refuses a connection.\r\nnnetty 4.0.25 and 4.0.27 (and later) work. nnWF 9.0.0 and 9.0.1 use both netty 4.0.26. The only solution seems to me is using again own netty jar's for the lettuce driver.nnGunnar Morling wdyt? n    n    n        n            Show  n            n                        n    n    n    n                nn       Mark Paluchn added a comment  - 03\/Aug\/2015 06:20 AM                      Research: The lettuce driver runs into an infinite wait because of a netty ( https:\/\/github.com\/netty\/netty\/issues\/3464 ) bug in 4.0.26.Final (Version of WildFly 9CR1). The timeout is applied correctly but the driver blocks in the closing sequence. This happens in case the host refuses a connection. nnetty 4.0.25 and 4.0.27 (and later) work.  nn WF 9.0.0 and 9.0.1 use both netty 4.0.26. The only solution seems to me is using again own netty jar's for the lettuce driver. nn  Gunnar Morling  wdyt?              n        n    n"},{"commnet_id":"comment-69643","commnet_date":"2015-08-03T06:39:30-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 03\/Aug\/2015 06:39 AM    n        n        Yes, ok, let's include a newer Netty ourselves temporarily then. Thanks for investigating the issue! n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 03\/Aug\/2015 06:39 AM                      Yes, ok, let's include a newer Netty ourselves temporarily then. Thanks for investigating the issue!              n        n    n"},{"commnet_id":"comment-69645","commnet_date":"2015-08-03T08:40:04-0700","commnet_user":"Mark Paluch","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Mark Paluchn added a comment  - 03\/Aug\/2015 08:40 AM    n        n        I had another thought about that issue. We're compensating at this moment something that happens between two 3rd party libs and I'm a fan of removing the root cause. I'm releasing on Thursday 3.3.Beta1 and end of August 3.3.Final of lettuce. 3.3 provides an answer to the re-use of RedisClient\/OGM-880 and I'd like to address the netty 4.0.26 issue within lettuce.nnThe cost of the own-netty-jar's solution is a follow-up ticket to remove the own netty jars. The solution within the Redis driver is permanent, but the cost is waiting for the beta\/final. Let's have tomorrow a chat about this topic to find the best solution. n    n    n        n            Show  n            n                        n    n    n    n                nn       Mark Paluchn added a comment  - 03\/Aug\/2015 08:40 AM                      I had another thought about that issue. We're compensating at this moment something that happens between two 3rd party libs and I'm a fan of removing the root cause. I'm releasing on Thursday 3.3.Beta1 and end of August 3.3.Final of lettuce. 3.3 provides an answer to the re-use of  RedisClient \/OGM-880 and I'd like to address the netty 4.0.26 issue within lettuce. nn The cost of the own-netty-jar's solution is a follow-up ticket to remove the own netty jars. The solution within the Redis driver is permanent, but the cost is waiting for the beta\/final. Let's have tomorrow a chat about this topic to find the best solution.              n        n    n"},{"commnet_id":"comment-69653","commnet_date":"2015-08-04T03:25:04-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 04\/Aug\/2015 03:25 AM    n        n        Yes, absolutely addressing the root cause is the proper fix. I want to release OGM 5.0 Alpha1 though later this week. For that the work-around of bringing own Netty JARs is ok. Removing them later on will be an easy exercise. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 04\/Aug\/2015 03:25 AM                      Yes, absolutely addressing the root cause is the proper fix. I want to release OGM 5.0 Alpha1 though later this week. For that the work-around of bringing own Netty JARs is ok. Removing them later on will be an easy exercise.              n        n    n"}]}},{"HHH-10009":{"info":{"issue_title":"Unable to parse cfg.xml file with explicit xsi:schemaLocation","issue_key":"HHH-10009","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Critical","issue_affects_version":"Rejected","issue_fix_version":"5.0.0.CR3","issue_component":"5.0.0.CR3","issue_labels":"5.0.0.CR3","issue_description":"when i use in schema header in hibernate.cfg.xml like\r\n &lt;hibernate-configuration\r\n         xmlns=\"http:\/\/www.hibernate.org\/xsd\/hibernate-configuration\"\r\n         xsi:schemaLocation=\"http:\/\/www.hibernate.org\/xsd\/hibernate-configuration hibernate-configuration-4.0.xsd\"\r\n         xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"&gt;\r\n null pointer exception is being shown\r\n but if i use dtd based 3.0 header, it is working","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10009?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-70148","commnet_date":"2015-09-01T07:19:55-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 01\/Sep\/2015 07:19 AM    n        n        You are just using the wrong namespace.  The proper namespace is http:\/\/www.hibernate.org\/xsd\/orm\/cfg, not http:\/\/www.hibernate.org\/xsd\/hibernate-configuration n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 01\/Sep\/2015 07:19 AM                      You are just using the wrong namespace.  The proper namespace is   http:\/\/www.hibernate.org\/xsd\/orm\/cfg  , not   http:\/\/www.hibernate.org\/xsd\/hibernate-configuration                n        n    n"},{"commnet_id":"comment-70199","commnet_date":"2015-09-02T18:53:27-0700","commnet_user":"DTR Prasad","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       DTR Prasadn added a comment  - 02\/Sep\/2015 18:53 PM    n        n        I had changed the namespace, it is working , many thanksnnOn Tue, Sep 1, 2015 at 7:51 PM, Steve Ebersole (JIRA) &lt;n n    n    n        n            Show  n            n                        n    n    n    n                nn       DTR Prasadn added a comment  - 02\/Sep\/2015 18:53 PM                      I had changed the namespace, it is working , many thanks nn On Tue, Sep 1, 2015 at 7:51 PM, Steve Ebersole (JIRA) &lt; n             n        n    n"}]}},{"OGM-883":{"info":{"issue_title":"Remove usage of deprecated code after migration to MongoDB driver 3.0","issue_key":"OGM-883","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"mongodb","issue_description":"See https:\/\/www.mongodb.com\/blog\/post\/introducing-30-java-driver:   So for users of the 2.x driver series that are upgrading to 3.0, the driver still has the \r\n MongoClient.getDB(\"myDB\") method and, although it has been deprecated, rest easy &#8211; it won't be\r\n removed in the 3.x series. The deprecation is intended to nudge new applications towards the \r\n MongoDatabase\/MongoCollection API, which is accessible via the new \r\n MongoClient.getDatabase(\"myDB\") method. This way we retain backwards compatibility while still \r\n offering an improved API that users can migrate to at their own pace. - See more at:  \r\n https:\/\/www.mongodb.com\/blog\/post\/introducing-30-java-driver#sthash.JDGalGNX.dpuf  From https:\/\/github.com\/hibernate\/hibernate-ogm\/pull\/572:   So at the moment we still use the deprecated MongoClient.getDB call. Not everything underneath is deprecated (I guess they wanted to keep the warnings down), but once you switch to MongoClient.getDatabase you are going down a whole rabbit hole of changes. As said, I am somewhere in the middle of this, but wanted to get this in first.  This is how CRUD works now - http:\/\/mongodb.github.io\/mongo-java-driver\/3.0\/driver\/reference\/crud\/. I guess DBObject was maybe wrong to list, but the changeset becomes quite large.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-883?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69572","commnet_date":"2015-08-01T02:10:24-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 01\/Aug\/2015 02:10 AM    n        n        The codec stuff they mention looks interesting. Maybe we could plug in a custom codec based on OGM's Tuple\/Association directly, avoiding the need for converting into DBObject etc. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 01\/Aug\/2015 02:10 AM                      The codec stuff they mention looks interesting. Maybe we could plug in a custom codec based on OGM's  Tuple \/ Association  directly, avoiding the need for converting into  DBObject  etc.              n        n    n"}]}},{"OGM-882":{"info":{"issue_title":"Enable MapContentsStoredInSeparateDocumentTest for Redis","issue_key":"OGM-882","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.Alpha1","issue_labels":"5.0.0.Alpha1","issue_description":"It should be possible similar to MongoDB\/CouchDB.  Also AssociationStorageConfiguredViaAnnotationsTest, AssociationStorageConfiguredViaPropertyTest.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-882?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69577","commnet_date":"2015-08-02T23:09:02-0700","commnet_user":"Mark Paluch","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Mark Paluchn added a comment  - 02\/Aug\/2015 23:09 PM    n        n        Fixed, cannot update issue state. n    n    n        n            Show  n            n                        n    n    n    n                nn       Mark Paluchn added a comment  - 02\/Aug\/2015 23:09 PM                      Fixed, cannot update issue state.              n        n    n"},{"commnet_id":"comment-69631","commnet_date":"2015-08-03T02:22:04-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 03\/Aug\/2015 02:22 AM    n        n        Your permissions should be set up now. You can \"Link to pull request\", and whoever merges the PR will transition the issue to \"Resolved\". n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 03\/Aug\/2015 02:22 AM                      Your permissions should be set up now. You can \"Link to pull request\", and whoever merges the PR will transition the issue to \"Resolved\".              n        n    n"}]}},{"OGM-881":{"info":{"issue_title":"Use Netty modules provided by WildFly for Redis driver","issue_key":"OGM-881","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.Alpha1","issue_labels":"5.0.0.Alpha1","issue_description":"name=\"io.netty\"  WF 10 comes with a Netty new enough for Lettuce.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-881?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69579","commnet_date":"2015-08-02T23:26:03-0700","commnet_user":"Mark Paluch","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Mark Paluchn added a comment  - 02\/Aug\/2015 23:26 PM    n        n        Fixed. n    n    n        n            Show  n            n                        n    n    n    n                nn       Mark Paluchn added a comment  - 02\/Aug\/2015 23:26 PM                      Fixed.              n        n    n"}]}},{"OGM-880":{"info":{"issue_title":"Keep connection alive between tests","issue_key":"OGM-880","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.Alpha1","issue_labels":"5.0.0.Alpha1","issue_description":"As the connection pool shutdown is rather slow, it'd be nice to have a way to keep the connection open for the run of the entire test suite. Not exactly sure how we could do it, maybe the connection could be injected through a specific constructor in RedisDatastoreProvider.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-880?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69686","commnet_date":"2015-08-05T01:50:42-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 05\/Aug\/2015 01:50 AM    n        n        Seems we cannot get in control of how the datastore provider is instantiated portably across all tests (bootstrapping via JPA allows only String-typed settings). So one alternative may be to establish a setting (VM property) which let's the provider not release the connection in stop(). That property would be set in the test run through the RedisTestHelper. The same would trigger release of the connection by means of a VM shutdown hook. That'd add a bit of test-only code to RedisDatastoreProvider, but I think it's still acceptable. There could be one test which explicitly overrides that setting to test the normal release upon stop(). n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 05\/Aug\/2015 01:50 AM                      Seems we cannot get in control of how the datastore provider is instantiated portably across all tests (bootstrapping via JPA allows only String-typed settings). So one alternative may be to establish a setting (VM property) which let's the provider not release the connection in  stop() . That property would be set in the test run through the  RedisTestHelper . The same would trigger release of the connection by means of a VM shutdown hook. That'd add a bit of test-only code to  RedisDatastoreProvider , but I think it's still acceptable. There could be one test which explicitly overrides that setting to test the normal release upon  stop() .              n        n    n"},{"commnet_id":"comment-69709","commnet_date":"2015-08-06T12:22:55-0700","commnet_user":"Mark Paluch","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Mark Paluchn added a comment  - 06\/Aug\/2015 12:22 PM    n        n        I have three other options for you:nn1. Obtaining the RedisClient by a ServiceLoader and use a dedicated ServiceLoader for the unit tests\r\nn2. Use a TestRedisDatastoreProvider just for the unit tests. We could then extend the integration tests for some additional corner cases around initialization etc.\r\nn3. Shutdown-Hook and use a static instance of RedisClient. No reflection magic anymore with 3.3.Beta1 n    n    n        n            Show  n            n                        n    n    n    n                nn       Mark Paluchn added a comment  - 06\/Aug\/2015 12:22 PM                      I have three other options for you: nn 1. Obtaining the  RedisClient  by a  ServiceLoader  and use a dedicated  ServiceLoader  for the unit tests n2. Use a  TestRedisDatastoreProvider  just for the unit tests. We could then extend the integration tests for some additional corner cases around initialization etc. n3. Shutdown-Hook and use a static instance of  RedisClient . No reflection magic anymore with 3.3.Beta1              n        n    n"},{"commnet_id":"comment-69711","commnet_date":"2015-08-06T23:39:42-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 06\/Aug\/2015 23:39 PM    n        n        Option 2. sounds quite appealing to me.  n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 06\/Aug\/2015 23:39 PM                      Option 2. sounds quite appealing to me.               n        n    n"}]}},{"OGM-879":{"info":{"issue_title":"Embedded Id stored within key and value","issue_key":"OGM-879","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.Alpha1","issue_labels":"5.0.0.Alpha1","issue_description":"Embedded ids (e.g. see the Court entity) are persisted within the key but also within the value JSON. The latter could be ommited. Mark Paluch, WDYT?","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-879?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69534","commnet_date":"2015-07-31T06:41:12-0700","commnet_user":"Mark Paluch","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Mark Paluchn added a comment  - 31\/Jul\/2015 06:41 AM    n        n        Embedded Id is only stored when using associations that are stored within the entity. Can reproduce with ManyToOneInEntityTest#testDefaultBiDirManyToOneCompositeKeyTest. nnRedis Data with external association storage (to Improve):nnrn127.0.0.1:6379&gt; keys *rn1) \"Game:{\" id.category\":\" primary\",\" id.gameSequenceNo\":456}\" rn2) \"Game:{\" id.category\":\" primary\",\" id.gameSequenceNo\":457}\" rn3) \"Court:{\" id.countryCode\":\" DE\",\" id.sequenceNo\":123}\" rnrn127.0.0.1:6379&gt; get \"Court:{\" id.countryCode\":\" DE\",\" id.sequenceNo\":123}\" rn\"{\" id\":{\" countryCode\":\" DE\",\" sequenceNo\":123},\" games\":[{\" id.gameSequenceNo\":456,\" id.category\":\" primary\"},{\" id.gameSequenceNo\":457,\" id.category\":\" primary\"}],\" name\":\" Hamburg Court\"}\" rnnnnnRedis Data with external association storage (OK):nnrn127.0.0.1:6379&gt; keys *rn1) \"Game:{\" id.category\":\" primary\",\" id.gameSequenceNo\":456}\" rn2) \"Associations:Court:{\" id.countryCode\":\" DE\",\" id.sequenceNo\":123}\" rn3) \"Game:{\" id.category\":\" primary\",\" id.gameSequenceNo\":457}\" rn4) \"Court:{\" id.countryCode\":\" DE\",\" id.sequenceNo\":123}\" rnrn127.0.0.1:6379&gt; get \"Court:{\" id.countryCode\":\" DE\",\" id.sequenceNo\":123}\" rn\"{\" name\":\" Hamburg Court\"}\" rnn n    n    n        n            Show  n            n                        n    n    n    n                nn       Mark Paluchn added a comment  - 31\/Jul\/2015 06:41 AM                      Embedded Id is only stored when using associations that are stored within the entity. Can reproduce with  ManyToOneInEntityTest#testDefaultBiDirManyToOneCompositeKeyTest .  nn Redis Data with external association storage (to Improve): n  n rn127.0.0.1:6379&gt; keys *rn1)  \"Game:{\" id.category \":\" primary \",\" id.gameSequenceNo \":456}\" rn2)  \"Game:{\" id.category \":\" primary \",\" id.gameSequenceNo \":457}\" rn3)  \"Court:{\" id.countryCode \":\" DE \",\" id.sequenceNo \":123}\" rnrn127.0.0.1:6379&gt; get  \"Court:{\" id.countryCode \":\" DE \",\" id.sequenceNo \":123}\" rn \"{\" id \":{\" countryCode \":\" DE \",\" sequenceNo \":123},\" games \":[{\" id.gameSequenceNo \":456,\" id.category \":\" primary \"},{\" id.gameSequenceNo \":457,\" id.category \":\" primary \"}],\" name \":\" Hamburg Court \"}\" rn n  nnn Redis Data with external association storage (OK): n  n rn127.0.0.1:6379&gt; keys *rn1)  \"Game:{\" id.category \":\" primary \",\" id.gameSequenceNo \":456}\" rn2)  \"Associations:Court:{\" id.countryCode \":\" DE \",\" id.sequenceNo \":123}\" rn3)  \"Game:{\" id.category \":\" primary \",\" id.gameSequenceNo \":457}\" rn4)  \"Court:{\" id.countryCode \":\" DE \",\" id.sequenceNo \":123}\" rnrn127.0.0.1:6379&gt; get  \"Court:{\" id.countryCode \":\" DE \",\" id.sequenceNo \":123}\" rn \"{\" name \":\" Hamburg Court \"}\" rn n               n        n    n"},{"commnet_id":"comment-69576","commnet_date":"2015-08-02T23:02:52-0700","commnet_user":"Mark Paluch","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Mark Paluchn added a comment  - 02\/Aug\/2015 23:02 PM    n        n        Fixed, but cannot update the issue state. n    n    n        n            Show  n            n                        n    n    n    n                nn       Mark Paluchn added a comment  - 02\/Aug\/2015 23:02 PM                      Fixed, but cannot update the issue state.              n        n    n"}]}},{"OGM-878":{"info":{"issue_title":"Upgrade to WildFly 10 Beta1","issue_key":"OGM-878","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.Alpha1","issue_labels":"5.0.0.Alpha1","issue_description":"Expected for Aug. 6th; This will bring ORM 5 CR3 which is the version we need. For now I'll put a quick hack in place to make the integration tests work.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-878?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-877":{"info":{"issue_title":"Errors during JavaDoc generation when running full build","issue_key":"OGM-877","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"Apparently only on OS X (JDK 1.8.51) there are some errors reported, but the build itself succeeds and the JavaDoc is generated:     [ERROR] MavenInvocationException: Error when invoking Maven, consult the invoker log file: \/path\/to\/\/hibernate-ogm\/documentation\/javadoc\/target\/invoker\/maven-javadoc-plugin442021175.txt      Also it seems the JavaDoc are generated twice (may be wrong on that, though).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-877?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-876":{"info":{"issue_title":"Use batch fetching framework backported from ORM","issue_key":"OGM-876","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"core","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-876?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10003":{"info":{"issue_title":"Backport batch fetching framework improvements from OGM","issue_key":"HHH-10003","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"hibernate-core","issue_description":"While working on OGM, I copied the batch fetching framework classes and their various implementations.  I made the framework a bit more generic by allowing to pass some loader factory so that an Ogm EntityPersister can pass a factory that creates {{OgmLoader}}s.\r\n It also involves exposing a loadEntityBatch to UniqueEntityLoader (today it's the same sig on two concrete classes from different hierarchies.  We also need to transform into a service and initiator logic the BatchingEntityLoaderBuilder.getBuilder static method.\r\n This is useful so that OGM can have different fetching strategy ergonomics than ORM.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10003?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-78137","commnet_date":"2016-05-17T04:28:29-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 17\/May\/2016 04:28 AM    n        n        Hey Emmanuel Bernard, do you think you could tackle this one at some time soon? I just noticed we'd benefit from it when looking into enabling the new multi-load-by-id support from ORM for Hibernate OGM, too. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 17\/May\/2016 04:28 AM                      Hey  Emmanuel Bernard , do you think you could tackle this one at some time soon? I just noticed we'd benefit from it when looking into enabling the new multi-load-by-id support from ORM for Hibernate OGM, too.              n        n    n"}]}},{"OGM-875":{"info":{"issue_title":"Implement collection batch fetching","issue_key":"OGM-875","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"core","issue_description":"Like we did entity batch fetching, we need collection batch fetching.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-875?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-77065","commnet_date":"2016-04-19T10:21:13-0700","commnet_user":"John Schneider","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       John Schneidern added a comment  - 19\/Apr\/2016 10:21 AM    n        n        Would this functionality support \"join fetch\" in JP-QL? n    n    n        n            Show  n            n                        n    n    n    n                nn       John Schneidern added a comment  - 19\/Apr\/2016 10:21 AM                      Would this functionality support \"join fetch\" in JP-QL?              n        n    n"},{"commnet_id":"comment-77543","commnet_date":"2016-05-04T00:17:48-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 04\/May\/2016 00:17 AM    n        n        Good question; At some point we might support it, but so far it hasn't been planned to be worked on in the near future. Joins in general are not supported yet by the NoSQL-backed implementation. There is the idea of breaking them down into multiple queries (or using multiget-by-id), but this raises interesting questions around consistency as we'd do several reads instead of one. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 04\/May\/2016 00:17 AM                      Good question; At some point we might support it, but so far it hasn't been planned to be worked on in the near future. Joins in general are not supported yet by the NoSQL-backed implementation. There is the idea of breaking them down into multiple queries (or using multiget-by-id), but this raises interesting questions around consistency as we'd do several reads instead of one.              n        n    n"}]}},{"OGM-874":{"info":{"issue_title":"Implement MultigetGridDialect for Redis","issue_key":"OGM-874","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.Alpha1","issue_labels":"5.0.0.Alpha1","issue_description":"1. determine if the dialect supports multiget is some fashion (can be a query where id in (listOfIds))\r\n 2. implement it \r\n Let's at least have mongo and neo4j","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-874?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69683","commnet_date":"2015-08-05T00:03:39-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 05\/Aug\/2015 00:03 AM    n        n        Implemented for Redis. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 05\/Aug\/2015 00:03 AM                      Implemented for Redis.              n        n    n"},{"commnet_id":"comment-69931","commnet_date":"2015-08-24T00:55:56-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 24\/Aug\/2015 00:55 AM    n        n        Created n    n                n        n            n            OGM-907n        n                                                    Closed n             n as follow-up for other dialects, re-purposing this issue for support in Redis exclusively. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 24\/Aug\/2015 00:55 AM                      Created n     n                 n         n             n            OGM-907n         n                                                     Closed n             n as follow-up for other dialects, re-purposing this issue for support in Redis exclusively.              n        n    n"}]}},{"OGM-873":{"info":{"issue_title":"Implement hash strategy","issue_key":"OGM-873","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.CR1","issue_labels":"5.0.0.CR1","issue_description":"In addition to the JSON mapping to Redis there should be an alternative dialect which persists values right into hash fields.  Questions\/thoughts:   \tAll tuple fields would have to be mapped to String \tWhat to do with associations?","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-873?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-70969","commnet_date":"2015-10-08T09:33:33-0700","commnet_user":"Mark Paluch","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Mark Paluchn added a comment  - 08\/Oct\/2015 09:33 AM    n        n        Thinking right now about introducing an abstract `RedisDialect` to provide a base for a `RedisJsonDialect` and a `RedisHashDialect`. I don't think that mapping associations by abusing Redis' data structures makes sense. I would keep the associations as JSON but without embedded associations.nnWhat's the reason for one to use the hash strategy? nnntInteroperate with other systems that use hashesntUse a more natural mapping of data in RedisntDo not deal with mapping patterns that do not feel just rightnnnnnWDYT? n    n    n        n            Show  n            n                        n    n    n    n                nn       Mark Paluchn added a comment  - 08\/Oct\/2015 09:33 AM                      Thinking right now about introducing an abstract `RedisDialect` to provide a base for a `RedisJsonDialect` and a `RedisHashDialect`. I don't think that mapping associations by abusing Redis' data structures makes sense. I would keep the associations as JSON but without embedded associations. nn What's the reason for one to use the hash strategy?  nn nt Interoperate with other systems that use hashes nt Use a more natural mapping of data in Redis nt Do not deal with mapping patterns that do not feel just right n nnnn WDYT?              n        n    n"},{"commnet_id":"comment-73333","commnet_date":"2015-11-05T08:58:28-0800","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 05\/Nov\/2015 08:58 AM    n        n        Hey Mark Paluch, thanks for grabbing that one! Musing a bit more about association handling, I came to think that Redis lists seem a good fit, with the owner id and association role represented within the list key:nnnrnCustomer:123:orders -&gt; 456,789,...rnnnnThat's probably how I'd model it when having the need for it in Redis, also when leaving OGM out of the picture.nnFor referenced composite keys the same JSON representation also used for hash keys could be used:nnnrnCustomer:123:orders -&gt; {\"type\" :\"B2B\" ,\"seq\" :\"456\" },{\"type\" :\"B2B\" ,\"seq\" :\"789\" },...rnnnnThat's not as nice, but composite keys are just going to be not great with this type of store anyways.nnWDYT? n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 05\/Nov\/2015 08:58 AM                      Hey  Mark Paluch , thanks for grabbing that one! Musing a bit more about association handling, I came to think that Redis lists seem a good fit, with the owner id and association role represented within the list key: nn  n rnCustomer:123:orders -&gt; 456,789,...rn n  nn That's probably how I'd model it when having the need for it in Redis, also when leaving OGM out of the picture. nn For referenced composite keys the same JSON representation also used for hash keys could be used: nn  n rnCustomer:123:orders -&gt; { \"type\" : \"B2B\" , \"seq\" : \"456\" },{ \"type\" : \"B2B\" , \"seq\" : \"789\" },...rn n  nn That's not as nice, but composite keys are just going to be not great with this type of store anyways. nn WDYT?              n        n    n"},{"commnet_id":"comment-73371","commnet_date":"2015-11-06T09:42:00-0800","commnet_user":"Mark Paluch","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Mark Paluchn added a comment  - 06\/Nov\/2015 09:42 AM    n        n        +1, the current key for associations, isnnnrnAssociations:(Table name):(key)rnnnnwithout the role. Maybe we should adjust the JSON part to add the role to the association key. nnI'll give it a spin. All items within a hash are represented as String. Currently, I run into issues when mapping enums as ordinal. The type override does not affect enum as ordinal; the tuple contains int values for enum ordinals, all other types are converted appropriately. n    n    n        n            Show  n            n                        n    n    n    n                nn       Mark Paluchn added a comment  - 06\/Nov\/2015 09:42 AM                      +1, the current key for associations, is nn  n rnAssociations:(Table name):(key)rn n  nn without the role. Maybe we should adjust the JSON part to add the role to the association key.  nn I'll give it a spin. All items within a hash are represented as  String . Currently, I run into issues when mapping enums as ordinal. The type override does not affect enum as ordinal; the tuple contains  int  values for enum ordinals, all other types are converted appropriately.              n        n    n"},{"commnet_id":"comment-74995","commnet_date":"2016-02-05T03:41:34-0800","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 05\/Feb\/2016 03:41 AM    n        n        Created n    n                n        n            n            OGM-981n        n                                                    Open n             n as a follow-up. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 05\/Feb\/2016 03:41 AM                      Created n     n                 n         n             n            OGM-981n         n                                                     Open n             n as a follow-up.              n        n    n"}]}},{"OGM-872":{"info":{"issue_title":"Store simple id in case of non-composite ids on associated side","issue_key":"OGM-872","issue_type":"New Feature","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Out of Date","issue_fix_version":"None","issue_component":"None","issue_labels":"redis","issue_description":"Similar to what we do for other dialects, we should save the simple id values for associations whose target type uses a non-composite key. Only where a composite key type is referenced, a JSON structure should be used.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-872?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-77865","commnet_date":"2016-05-11T23:57:39-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 11\/May\/2016 23:57 PM    n        n        Hey Mark Paluch, howdy? Any plans for further work on the Redis dialect(s)? This one may be a good candidate? n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 11\/May\/2016 23:57 PM                      Hey  Mark Paluch , howdy? Any plans for further work on the Redis dialect(s)? This one may be a good candidate?              n        n    n"},{"commnet_id":"comment-77866","commnet_date":"2016-05-11T23:59:58-0700","commnet_user":"Mark Paluch","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Mark Paluchn added a comment  - 11\/May\/2016 23:59 PM    n        n        Hey Gunnar, plans yes, but it's currently tight on my side. Will come back to you in ~ 2 Weeks. n    n    n        n            Show  n            n                        n    n    n    n                nn       Mark Paluchn added a comment  - 11\/May\/2016 23:59 PM                      Hey Gunnar, plans yes, but it's currently tight on my side. Will come back to you in ~ 2 Weeks.              n        n    n"},{"commnet_id":"comment-77868","commnet_date":"2016-05-12T00:06:34-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 12\/May\/2016 00:06 AM    n        n        Ok, cool. Just ping me and we can have a discussion on the best way forward. Looking forward to it! n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 12\/May\/2016 00:06 AM                      Ok, cool. Just ping me and we can have a discussion on the best way forward. Looking forward to it!              n        n    n"},{"commnet_id":"comment-78172","commnet_date":"2016-05-19T00:04:10-0700","commnet_user":"Mark Paluch","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Mark Paluchn added a comment  - 19\/May\/2016 00:04 AM    n        n        Not sure I recall correctly. I did a quick test using simple and composite PK's. With a simple PK I get (using Redis JSON, see RedisJsonMappingTest.canStoreAndLoadEntitiesWithIdGeneratorAndAssociation):nnnrn27.0.0.1:6379&gt; keys *rn1) \"Identifiers:myIds:Plant\" rn2) \"Family:family-1\" rn3) \"Plant:1\" rn127.0.0.1:6379&gt; get \"Family:family-1\" rn\"{\" members\":[1],\" name\":\" Moraceae\"}\" rn127.0.0.1:6379&gt; get \"Plant:1\" rn\"{\" height\":181}\" rnnnnThe reference to Plant is represented as nnrn\"members\" :[1]rnnnn with a @OneToMany association.nnThe ReferencedCompositeIdTest represents its data as nnnrn127.0.0.1:6379&gt; keys *rn1) \"Tournament:{\" id.countryCode\":\" US\",\" id.sequenceNo\":\" 456\"}\" rn2) \"Director:bob\" rn3) \"Tournament:{\" id.countryCode\":\" US\",\" id.sequenceNo\":\" 123\"}\" rn127.0.0.1:6379&gt; get \"Director:bob\" rn\"{\" directedTournament_id\":{\" sequenceNo\":\" 456\",\" countryCode\":\" US\"},\" name\":\" Bob\"}\" rnnnnthe composite Id is a complex object in JSONnnnrn\"directedTournament_id\" :{\"sequenceNo\" :\"456\" ,\"countryCode\" :\"US\" }rnnnnDo you have a pointer to a test for me where I can see the non-simple Id storage? n    n    n        n            Show  n            n                        n    n    n    n                nn       Mark Paluchn added a comment  - 19\/May\/2016 00:04 AM                      Not sure I recall correctly. I did a quick test using simple and composite PK's. With a simple PK I get (using Redis JSON, see  RedisJsonMappingTest.canStoreAndLoadEntitiesWithIdGeneratorAndAssociation ): nn  n rn27.0.0.1:6379&gt; keys *rn1)  \"Identifiers:myIds:Plant\" rn2)  \"Family:family-1\" rn3)  \"Plant:1\" rn127.0.0.1:6379&gt; get  \"Family:family-1\" rn \"{\" members \":[1],\" name \":\" Moraceae \"}\" rn127.0.0.1:6379&gt; get  \"Plant:1\" rn \"{\" height \":181}\" rn n  nn The reference to  Plant  is represented as  n  n rn \"members\" :[1]rn n  nn  with a  @OneToMany  association. nn The  ReferencedCompositeIdTest  represents its data as  nn  n rn127.0.0.1:6379&gt; keys *rn1)  \"Tournament:{\" id.countryCode \":\" US \",\" id.sequenceNo \":\" 456 \"}\" rn2)  \"Director:bob\" rn3)  \"Tournament:{\" id.countryCode \":\" US \",\" id.sequenceNo \":\" 123 \"}\" rn127.0.0.1:6379&gt; get  \"Director:bob\" rn \"{\" directedTournament_id \":{\" sequenceNo \":\" 456 \",\" countryCode \":\" US \"},\" name \":\" Bob \"}\" rn n  nn the composite Id is a complex object in JSON nn  n rn \"directedTournament_id\" :{ \"sequenceNo\" : \"456\" , \"countryCode\" : \"US\" }rn n  nn Do you have a pointer to a test for me where I can see the non-simple Id storage?              n        n    n"},{"commnet_id":"comment-78233","commnet_date":"2016-05-19T03:49:53-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 19\/May\/2016 03:49 AM    n        n        Hey Mark Paluch, did a quick test myself and indeed everything looks like expected. Seems this one has been fixed already  Going to close it. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 19\/May\/2016 03:49 AM                      Hey  Mark Paluch , did a quick test myself and indeed everything looks like expected. Seems this one has been fixed already   Going to close it.              n        n    n"},{"commnet_id":"comment-78234","commnet_date":"2016-05-19T03:50:09-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 19\/May\/2016 03:50 AM    n        n        That's done already. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 19\/May\/2016 03:50 AM                      That's done already.              n        n    n"},{"commnet_id":"comment-78235","commnet_date":"2016-05-19T03:55:52-0700","commnet_user":"Mark Paluch","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Mark Paluchn added a comment  - 19\/May\/2016 03:55 AM    n        n        Woohoo! Thanks for the fast response. n    n    n        n            Show  n            n                        n    n    n    n                nn       Mark Paluchn added a comment  - 19\/May\/2016 03:55 AM                      Woohoo! Thanks for the fast response.              n        n    n"}]}},{"HHH-10002":{"info":{"issue_title":"Hibernate @Synchronize annotation values should be processed by NamingStrategy","issue_key":"HHH-10002","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.0.Final","issue_component":"5.0.0.Final","issue_labels":"5.0.0.Final","issue_description":"I had 2 Entities (one was a mapped view)     @Table(name = \"BOOKING_INFO\" , schema = \"BOOKING\" )  @Entity  public  class BookingInfo extends  AbstractBooking {        @Table(name = \"BOOKING_VIEW\" , schema = \"BOOKING\" )  @Entity  @Immutable  @Synchronize(\"BOOKING.BOOKING_INFO\" )  public  class BookingView extends  AbstractBooking {     However, a read-operation on BookingView  after a write-operation on BookingInfo, did not trigger a flush, so stale data was read.  When debugging we found that our namingStrategy (SpringNamingStrategy, which extends ImprovedNamingStrategy) lowercases the table name, so we had to put this in the annotatoin:     @Synchronize(\"BOOKING.booking_view\" )     Hibernate should either apply the naming-strategies also to the values from @Synchronize or compare these case-insensitive (which could theoretically lead to too many flushes if you have a crazy database which uses tables with the same name only differentiated by casing).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10002?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69505","commnet_date":"2015-07-30T04:58:34-0700","commnet_user":"Paul","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Pauln added a comment  - 30\/Jul\/2015 04:58 AM    n        n        I just realized that i made a small mistake in the description (I can't find out how to edit it). The working annotation should of course be:nnnrn@Synchronize(\"BOOKING.booking_view\" )rnn n    n    n        n            Show  n            n                        n    n    n    n                nn       Pauln added a comment  - 30\/Jul\/2015 04:58 AM                      I just realized that i made a small mistake in the description (I can't find out how to edit it). The working annotation should of course be: nn  n rn@Synchronize( \"BOOKING.booking_view\" )rn n               n        n    n"},{"commnet_id":"comment-70487","commnet_date":"2015-09-24T08:36:05-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 24\/Sep\/2015 08:36 AM    n        n        We no longer maintain 4.x.  However, I am pretty sure that this effects 5.0 as well.  We will discuss this in our next triage meeting. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 24\/Sep\/2015 08:36 AM                      We no longer maintain 4.x.  However, I am pretty sure that this effects 5.0 as well.  We will discuss this in our next triage meeting.              n        n    n"}]}},{"OGM-871":{"info":{"issue_title":"Enable alternative map representation also for single non-String key columns","issue_key":"OGM-871","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"Follow-up to OGM-555: For maps with a single key of another type than String we still could do the nicer representation when converting the key column value into a String. That'd require a conversion through the grid type.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-871?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-10000":{"info":{"issue_title":"Teradata Dialect\/Test harness update ","issue_key":"HHH-10000","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Rejected","issue_fix_version":"5.0.0.CR2","issue_component":"5.0.0.CR2","issue_labels":"5.0.0.CR2","issue_description":"Fix several test harness problems encountered when testing Teradata14Dialect, including:  \trequirement for non null primary keys \t\"Create Index\" syntax \thung sessions after test failures \tescaping Teradata keywords","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-10000?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69748","commnet_date":"2015-08-11T11:45:19-0700","commnet_user":"David Repshas","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       David Repshasn added a comment  - 11\/Aug\/2015 11:45 AM    n        n        No problem. I'll be out of the office this afternoon (starting in about 15 minurtes) but I'll be back for Thursday &amp; Friday if you have any questions\/comments about the changes.  n    n    n        n            Show  n            n                        n    n    n    n                nn       David Repshasn added a comment  - 11\/Aug\/2015 11:45 AM                      No problem. I'll be out of the office this afternoon (starting in about 15 minurtes) but I'll be back for Thursday &amp; Friday if you have any questions\/comments about the changes.               n        n    n"},{"commnet_id":"comment-69868","commnet_date":"2015-08-19T12:25:53-0700","commnet_user":"Brett Meyer","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Brett Meyern added a comment  - 19\/Aug\/2015 12:25 PM    n        n        Congrats on the JIRA milestone  n    n    n        n            Show  n            n                        n    n    n    n                nn       Brett Meyern added a comment  - 19\/Aug\/2015 12:25 PM                      Congrats on the JIRA milestone                n        n    n"},{"commnet_id":"comment-69951","commnet_date":"2015-08-25T11:39:18-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 25\/Aug\/2015 11:39 AM    n        n        David Repshas Is this Jira still valid?  You ended up splitting this out into multiple Jiras right? n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 25\/Aug\/2015 11:39 AM                       David Repshas  Is this Jira still valid?  You ended up splitting this out into multiple Jiras right?              n        n    n"},{"commnet_id":"comment-69952","commnet_date":"2015-08-25T11:43:39-0700","commnet_user":"David Repshas","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       David Repshasn added a comment  - 25\/Aug\/2015 11:43 AM    n        n        \r\nnThe plan is to break it up into more manageable Jiras with the latest code base.  Not sure about the protocol here, should I close it or do you do that ?? n    n    n        n            Show  n            n                        n    n    n    n                nn       David Repshasn added a comment  - 25\/Aug\/2015 11:43 AM                       nThe plan is to break it up into more manageable Jiras with the latest code base.  Not sure about the protocol here, should I close it or do you do that ??              n        n    n"},{"commnet_id":"comment-69955","commnet_date":"2015-08-25T11:54:20-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 25\/Aug\/2015 11:54 AM    n        n        Either way.  I can do it, but I'd need to know that was the intent   It seems it is, so I'll reject this and close the PR. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 25\/Aug\/2015 11:54 AM                      Either way.  I can do it, but I'd need to know that was the intent    It seems it is, so I'll reject this and close the PR.              n        n    n"}]}},{"HHH-9997":{"info":{"issue_title":"Hibernate Envers automatically adds a clause &#39;order by&#39; by ID Revision when no projection or order is specified","issue_key":"HHH-9997","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Rejected","issue_fix_version":"4.2.20","issue_component":"4.2.20","issue_labels":"4.2.20","issue_description":"Hibernate Envers (Criteria API) automatically adds a clause 'order by' by ID Revision when not is added projection and not is added order. This procedure burdening the query performance for a user, resulting in a warning that the I\/O limit was exceeded.  In order to allow the user to be able to disable this behaviour, I propose that the addOrder method in AbstractAuditQuery.java be updated so that if a Null value is passed as a parameter, no action occurs, but the hasOrder flag is set to true.  This should not break existing queries as addOrder previously throw a NullPointerException if null was passed as a parameter.    Hence, this allows users to create an AuditQuery as follows if they do not want the 'Order By' statement:      AuditQuery query = getAuditReader()                  .createQuery()                  .forRevisionsOfEntity(StrIntTestEntity.class, false , true )                  .addOrder(null );     See also: https:\/\/bugzilla.redhat.com\/show_bug.cgi?id=1247316","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9997?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-76274","commnet_date":"2016-03-26T10:11:29-0700","commnet_user":"Chris Cranford","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Chris Cranfordn added a comment  - 26\/Mar\/2016 10:11 AM    n        n        Ryan Emerson, was the customer seeing this I\/O limit problem because the query is effectively fetching all revisions for all entities of a particular type from the audit database without any further refinement?  nnI could understand one applicable use may be to replicate audit data into some analytic or external system and the ordering would be overhead.  But from the general purpose use of this query, the default ordering is there to make sure that users who are interested in specific revisions of an entity get the data in some logical order.nnThat aside, I don't find the null approach to be a viable solution.  I would argue that a better approach would be to extend the forRevisionsOfEntity method with another version that allows passing a boolean to disable the default ordering mechanism.  This keeps the API contract clean, doesn't violate or have any negative side affects with the ordering api and keeps code fully backward compatible with existing uses.nnThoughts? n    n    n        n            Show  n            n                        n    n    n    n                nn       Chris Cranfordn added a comment  - 26\/Mar\/2016 10:11 AM                       Ryan Emerson , was the customer seeing this I\/O limit problem because the query is effectively fetching all revisions for all entities of a particular type from the audit database without any further refinement?   nn I could understand one applicable use may be to replicate audit data into some analytic or external system and the ordering would be overhead.  But from the general purpose use of this query, the default ordering is there to make sure that users who are interested in specific revisions of an entity get the data in some logical order. nn That aside, I don't find the  null  approach to be a viable solution.  I would argue that a better approach would be to extend the  forRevisionsOfEntity  method with another version that allows passing a boolean to disable the default ordering mechanism.  This keeps the API contract clean, doesn't violate or have any negative side affects with the ordering api and keeps code fully backward compatible with existing uses. nn Thoughts?              n        n    n"},{"commnet_id":"comment-76279","commnet_date":"2016-03-28T03:43:04-0700","commnet_user":"Ryan Emerson","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Ryan Emersonn added a comment  - 28\/Mar\/2016 03:43 AM    n        n        I think this issue should be closed. After further discussions with the customer and @gbadner it was decided that this was not a legitimate use case.  n    n    n        n            Show  n            n                        n    n    n    n                nn       Ryan Emersonn added a comment  - 28\/Mar\/2016 03:43 AM                      I think this issue should be closed. After further discussions with the customer and @gbadner it was decided that this was not a legitimate use case.               n        n    n"}]}},{"OGM-868":{"info":{"issue_title":"Add the latest commit id in the manifest during the build","issue_key":"OGM-868","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.Alpha1","issue_labels":"5.0.0.Alpha1","issue_description":"See http:\/\/www.mojohaus.org\/buildnumber-maven-plugin\/  This might come in handy when people experiment with SNAPSHOTS","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-868?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-9993":{"info":{"issue_title":"IsolationDelegate: add method to execute code without obtaining a connection","issue_key":"HHH-9993","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0","issue_labels":"5.1.0","issue_description":"Implementation of IsolationDelegate.delegateWork() needs to provide new connection to the WorkExecutorVisitable. In some cases we need to do some work out of the current transaction but do not need a new connection for that.  This issue is a request for alternative method that does not allocate the connection.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9993?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69490","commnet_date":"2015-07-29T06:46:11-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 29\/Jul\/2015 06:46 AM    n        n        Gail Badner, Andrea Boriero We all need to discuss the concerns I mentioned in my PR comments.   n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 29\/Jul\/2015 06:46 AM                       Gail Badner ,  Andrea Boriero  We all need to discuss the concerns I mentioned in my PR comments.                n        n    n"}]}},{"OGM-867":{"info":{"issue_title":"Use JSONAssert in MongoDB mapping assertions","issue_key":"OGM-867","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.Alpha1","issue_labels":"5.0.0.Alpha1","issue_description":"See http:\/\/jsonassert.skyscreamer.org\/  The error messages look much more meaningful that what our own assertion utilitiy does.  That's the dependency:     &lt;dependency&gt;      &lt;groupId&gt;org.skyscreamer&lt;\/groupId&gt;      &lt;artifactId&gt;jsonassert&lt;\/artifactId&gt;      &lt;version&gt;1.2.3&lt;\/version&gt;      &lt;scope&gt;test&lt;\/scope&gt;  &lt;\/dependency&gt;     Not sure whether it works with single today for field names ore required escaped double quotes. In case of the latter we should wrap it with a method enabling the usage of single quotes as we do today.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-867?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-866":{"info":{"issue_title":"Isolate internal Neo4J dependencies from conflicting with user application dependencies","issue_key":"OGM-866","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.Alpha1","issue_labels":"5.0.0.Alpha1","issue_description":"This is the result of some co-hacking at a conference, with some Neo4J wannebe users having issues with dependency conflicts and me making a demo of jboss modules.  Then got some advice from the Neo4J developer Chris Vest about which neo4j dependencies need to be public and which don't need.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-866?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-1008":{"info":{"issue_title":"Provide mechanism for copying constraints from one model to another","issue_key":"HV-1008","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6-future-planning","issue_labels":"6-future-planning","issue_description":"From the forum: https:\/\/forum.hibernate.org\/viewtopic.php?f=26&amp;t=1040725  For multi-layered applications it'd be very beneficial to be able to copy constraint declarations from the types in one model to the correponding types in other model(s). E.g. something along the following lines:     ConstraintCopier cc = ...;  cc.copyConstraints()      .type(CustomerEntity.class)          .mapTo(CustomerView.class)      .type(OrderEntity.class)          .mapTo(OrderView.class)          .property( \"itemCode\"  )              .ignore()          .property( \"size\"  )              .mapTo( \"orderedSize\"  )              .ignoreConstraints( Length.class );","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1008?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69455","commnet_date":"2015-07-28T00:35:53-0700","commnet_user":"Hardy Ferentschik","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Hardy Ferentschikn added a comment  - 28\/Jul\/2015 00:35 AM    n        n        What exactly do you mean with that? n    n    n        n            Show  n            n                        n    n    n    n                nn       Hardy Ferentschikn added a comment  - 28\/Jul\/2015 00:35 AM                      What exactly do you mean with that?              n        n    n"},{"commnet_id":"comment-69456","commnet_date":"2015-07-28T00:36:58-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 28\/Jul\/2015 00:36 AM    n        n        Expanded the description a bit, Hardy Ferentschik  n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 28\/Jul\/2015 00:36 AM                      Expanded the description a bit,  Hardy Ferentschik                 n        n    n"},{"commnet_id":"comment-69487","commnet_date":"2015-07-28T22:48:49-0700","commnet_user":"James Moliere","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       James Molieren added a comment  - 28\/Jul\/2015 22:48 PM    n        n        Is it better to copy constraints than simply reference them?  In other words, create an annotation constraint that references a property (or field that contains annotation constraints) from another class. n    n    n        n            Show  n            n                        n    n    n    n                nn       James Molieren added a comment  - 28\/Jul\/2015 22:48 PM                      Is it better to copy constraints than simply reference them?  In other words, create an annotation constraint that references a property (or field that contains annotation constraints) from another class.              n        n    n"},{"commnet_id":"comment-69488","commnet_date":"2015-07-28T23:33:59-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 28\/Jul\/2015 23:33 PM    n        n        What difference does it make in the end? You also can consider the proposed API as a way for referencing constraints. Whether it should be annotations or an API? Not sure, maybe both? I think though a more abstract way is needed than referencing each single constraint, otherwise one may be better of by just re-declaring the constraints manually. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 28\/Jul\/2015 23:33 PM                      What difference does it make in the end? You also can consider the proposed API as a way for referencing constraints. Whether it should be annotations or an API? Not sure, maybe both? I think though a more abstract way is needed than referencing each single constraint, otherwise one may be better of by just re-declaring the constraints manually.              n        n    n"},{"commnet_id":"comment-70401","commnet_date":"2015-09-17T07:05:10-0700","commnet_user":"James Moliere","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       James Molieren added a comment  - 17\/Sep\/2015 07:05 AM    n        n        In regards to copying, although the net effect may be the same, it may be necessary to have a property use @ValidReference to another class and property that may also have an @ValidReference.  Although this may be a bad practice, the reference should keep (possibly recursively?) following references until the Annotation Constraints are found. n    n    n        n            Show  n            n                        n    n    n    n                nn       James Molieren added a comment  - 17\/Sep\/2015 07:05 AM                      In regards to copying, although the net effect may be the same, it may be necessary to have a property use @ValidReference to another class and property that may also have an @ValidReference.  Although this may be a bad practice, the reference should keep (possibly recursively?) following references until the Annotation Constraints are found.              n        n    n"},{"commnet_id":"comment-73784","commnet_date":"2015-11-29T09:19:16-0800","commnet_user":"Hardy Ferentschik","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Hardy Ferentschikn added a comment  - 29\/Nov\/2015 09:19 AM    n        n        Not sure I am convinced about this one yet. Is this really so much better than repeating the configuration? n    n    n        n            Show  n            n                        n    n    n    n                nn       Hardy Ferentschikn added a comment  - 29\/Nov\/2015 09:19 AM                      Not sure I am convinced about this one yet. Is this really so much better than repeating the configuration?              n        n    n"}]}},{"HHH-9990":{"info":{"issue_title":"Enable batched updates for versioned data when using Oracle12cDialect","issue_key":"HHH-9990","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.0.CR2","issue_component":"5.0.0.CR2","issue_labels":"5.0.0.CR2","issue_description":"I see there's a new dialect available for Oracle 12c in v5.0.0.CR2. I re-tested an old issue (                                                         HHH-3360                                                              Closed                ) to see if batched updates when using versioned data had been enabled under this dialect but it doesn't appear to.  As this is a significant performance improvement can this functionality now be incorporated in future releases?  As a side note for informational purposes I also tested the JDBC batch return codes from Oracle 11.x\/12.x drivers and Database combinations, Oracle only returns correct values when using both a 12c driver and Database in combination.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9990?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69537","commnet_date":"2015-07-31T08:24:36-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 31\/Jul\/2015 08:24 AM    n        n        To be honest, I more wonder if we should make the default true here and make users of database\/drivers that do not implement this correctly (ok, mostly users of certain Oracle versions) disable this when needed.nnGail Badner, Andrea Boriero Let's discuss changing that in the next triage meeting. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 31\/Jul\/2015 08:24 AM                      To be honest, I more wonder if we should make the default  true  here and make users of database\/drivers that do not implement this correctly (ok, mostly users of certain Oracle versions) disable this when needed. nn  Gail Badner ,  Andrea Boriero  Let's discuss changing that in the next triage meeting.              n        n    n"},{"commnet_id":"comment-69688","commnet_date":"2015-08-05T03:38:08-0700","commnet_user":"Andrea Boriero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Andrea Borieron added a comment  - 05\/Aug\/2015 03:38 AM    n        n        Merged into master n    n    n        n            Show  n            n                        n    n    n    n                nn       Andrea Borieron added a comment  - 05\/Aug\/2015 03:38 AM                      Merged into master              n        n    n"}]}},{"HHH-9987":{"info":{"issue_title":"HikariCPConnectionProvider TLC","issue_key":"HHH-9987","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.CR4","issue_labels":"5.0.0.CR4","issue_description":"HikariCPConnectionProvider needs some TLC, specifically:  \tauto-style pick up like we do for c3p0 and proxool when hibernate.hakari.* settings are set \tHikariConfigurationUtil assumes that all incoming Map keys are Strings, which is not always true.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9987?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-9980":{"info":{"issue_title":"Implement mark-for-rollback-only handling for JdbcResourceLocalTransactionCoordinatorImpl","issue_key":"HHH-9980","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.CR3","issue_labels":"5.0.0.CR3","issue_description":"Just need a flag to mark in org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.TransactionDriverControlImpl#markRollbackOnly and check it during commit handling.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9980?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-9977":{"info":{"issue_title":"Consider options for passing Session to caching SPI calls","issue_key":"HHH-9977","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.0.CR2","issue_component":"5.0.0.CR2","issue_labels":"5.0.0.CR2","issue_description":"Internal components that don't have access to current session can't get current non-JTA transaction.\r\n This can be solved by having a singleton\/static method that would provide the current transaction through thread-local. Since every transaction should be eventually committed or rolled back, the cleanup of the thread-local can be done easily (as opposed to limitations of ThreadLocalSessionContext).\r\n I am assuming that the transaction will span only single thread.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9977?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69406","commnet_date":"2015-07-23T12:04:07-0700","commnet_user":"Radim Vansa","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Radim Vansan added a comment  - 23\/Jul\/2015 12:04 PM    n        n        As writing thread-locals costs something, this could go to an extension of TransactionImpl instead of directly to this class. However, I am not sure how should the session determine that some component needs this and use implementation that registers itself. n    n    n        n            Show  n            n                        n    n    n    n                nn       Radim Vansan added a comment  - 23\/Jul\/2015 12:04 PM                      As writing thread-locals costs something, this could go to an extension of  TransactionImpl  instead of directly to this class. However, I am not sure how should the session determine that some component needs this and use implementation that registers itself.              n        n    n"},{"commnet_id":"comment-69408","commnet_date":"2015-07-23T12:45:55-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 23\/Jul\/2015 12:45 PM    n        n        Are you suggesting HIbernate maintain a static lookup of \"current transaction\"?  If so I am utterly against that idea.  If not, I am not sure what you are asking for exactly. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 23\/Jul\/2015 12:45 PM                      Are you suggesting HIbernate maintain a static lookup of \"current transaction\"?  If so I am utterly against that idea.  If not, I am not sure what you are asking for exactly.              n        n    n"},{"commnet_id":"comment-69417","commnet_date":"2015-07-24T01:24:27-0700","commnet_user":"Radim Vansa","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Radim Vansan added a comment  - 24\/Jul\/2015 01:24 AM     - edited  n        n        Steve Ebersole I was a bit afraid you won't like that - I don't either. My problem is that I need to hook a synchronization on the ongoing non-JTA transaction deep in 2LC, where I don't have any access to the Transaction, since the SPI in xRegionAccessStrategy does not pass the current session, nor transaction. I even don't have access to SessionFactory in RegionFactory so that I could force the user to use CurrentSessionContext (no matter that 2LC should be transparent and such enforcement is a bad idea). n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Radim Vansan added a comment  - 24\/Jul\/2015 01:24 AM     - edited                     Steve Ebersole  I was a bit afraid you won't like that - I don't either. My problem is that I need to hook a synchronization on the ongoing non-JTA transaction deep in 2LC, where I don't have any access to the Transaction, since the SPI in  xRegionAccessStrategy  does not pass the current session, nor transaction. I even don't have access to  SessionFactory  in  RegionFactory  so that I could force the user to use  CurrentSessionContext  (no matter that 2LC should be transparent and such enforcement is a bad idea).              n        n    n"},{"commnet_id":"comment-69419","commnet_date":"2015-07-24T05:02:23-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 24\/Jul\/2015 05:02 AM    n        n        Radim Vansa Adding the idea of a \"current transaction\" is not going to happen.  nnHowever, to me, you really want a change in the caching SPI to pass along the Session.  Sanne Grinovero what do you think about this? n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 24\/Jul\/2015 05:02 AM                       Radim Vansa  Adding the idea of a \"current transaction\" is not going to happen.   nn However, to me, you really want a change in the caching SPI to pass along the Session.   Sanne Grinovero  what do you think about this?              n        n    n"},{"commnet_id":"comment-69420","commnet_date":"2015-07-24T05:50:49-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 24\/Jul\/2015 05:50 AM    n        n        For example, methods on the EntityRegionAccessStrategy, CollectionRegionAccessStrategy, NaturalIdRegionAccessStrategy can for the most part all be changed to accept a Session.  However, some of the methods on the base contract RegionAccessStrategy cannot.  Specifically methods like org.hibernate.cache.spi.access.RegionAccessStrategy#removeAll and org.hibernate.cache.spi.access.RegionAccessStrategy#evictAll are called outside the context of any Session\/transaction. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 24\/Jul\/2015 05:50 AM                      For example, methods on the  EntityRegionAccessStrategy ,  CollectionRegionAccessStrategy ,  NaturalIdRegionAccessStrategy  can for the most part all be changed to accept a  Session .  However, some of the methods on the base contract  RegionAccessStrategy  cannot.  Specifically methods like  org.hibernate.cache.spi.access.RegionAccessStrategy#removeAll  and  org.hibernate.cache.spi.access.RegionAccessStrategy#evictAll  are called outside the context of any Session\/transaction.              n        n    n"},{"commnet_id":"comment-69463","commnet_date":"2015-07-28T10:09:57-0700","commnet_user":"Andrea Boriero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Andrea Borieron added a comment  - 28\/Jul\/2015 10:09 AM    n        n        PR https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1031 rebased and merged n    n    n        n            Show  n            n                        n    n    n    n                nn       Andrea Borieron added a comment  - 28\/Jul\/2015 10:09 AM                      PR  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1031  rebased and merged              n        n    n"}]}},{"HHH-9966":{"info":{"issue_title":"Improve schema tooling support for creating catalogs and schemas","issue_key":"HHH-9966","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.CR3","issue_labels":"5.0.0.CR3","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9966?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69360","commnet_date":"2015-07-21T12:04:21-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 21\/Jul\/2015 12:04 PM    n        n        Andrea Boriero something like:nnnrnpublic  void doCreation(Metadata metadata, boolean  createSchemas, Dialect dialect, Target... targets) throws  SchemaManagementException {rn    <span class=\"code-object\">boolean<\/span> tryToCreateCatalogs = <span class=\"code-keyword\">false<\/span>;rn    <span class=\"code-object\">boolean<\/span> tryToCreateSchemas = <span class=\"code-keyword\">false<\/span>;rnrn    <span class=\"code-keyword\">if<\/span> ( createSchemas ) {rn        <span class=\"code-comment\">\/\/ todo : I forget the exact call <span class=\"code-keyword\">for<\/span> these...rn<\/span>        <span class=\"code-keyword\">if<\/span> ( dialectSupportsCatalogs() ) {rn            <span class=\"code-keyword\">if<\/span> ( dialect.canCreateCatalogs() ) {rn                tryToCreateCatalogs = <span class=\"code-keyword\">true<\/span>;rn            }rn        }rn        if  ( dialectSupportsSchemas() ) {rn            <span class=\"code-keyword\">if<\/span> ( dialect.canCreateSchames() ) {rn                tryToCreateSchemas = <span class=\"code-keyword\">true<\/span>;rn            }rn        }rn    }rnrn    ...rn}rnn n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 21\/Jul\/2015 12:04 PM                       Andrea Boriero  something like: nn  n rn public  void doCreation(Metadata metadata,  boolean  createSchemas, Dialect dialect, Target... targets)  throws  SchemaManagementException {rn     boolean  tryToCreateCatalogs =  false ;rn     boolean  tryToCreateSchemas =  false ;rnrn     if  ( createSchemas ) {rn         \/\/ todo : I forget the exact call  for  these...rn          if  ( dialectSupportsCatalogs() ) {rn             if  ( dialect.canCreateCatalogs() ) {rn                tryToCreateCatalogs =  true ;rn            }rn        }rn         if  ( dialectSupportsSchemas() ) {rn             if  ( dialect.canCreateSchames() ) {rn                tryToCreateSchemas =  true ;rn            }rn        }rn    }rnrn    ...rn}rn n               n        n    n"},{"commnet_id":"comment-69361","commnet_date":"2015-07-21T12:06:05-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 21\/Jul\/2015 12:06 PM    n        n        Also, I wonder whether creating the catalogs\/schemas ought to be \"best effort\".  Meaning if the create catalog\/schame commands fail... I wonder if we should continue with the rest of the statements. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 21\/Jul\/2015 12:06 PM                      Also, I wonder whether creating the catalogs\/schemas ought to be \"best effort\".  Meaning if the create catalog\/schame commands fail... I wonder if we should continue with the rest of the statements.              n        n    n"},{"commnet_id":"comment-69397","commnet_date":"2015-07-23T08:43:34-0700","commnet_user":"Andrea Boriero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Andrea Borieron added a comment  - 23\/Jul\/2015 08:43 AM    n        n        PR https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1023 n    n    n        n            Show  n            n                        n    n    n    n                nn       Andrea Borieron added a comment  - 23\/Jul\/2015 08:43 AM                      PR  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1023               n        n    n"},{"commnet_id":"comment-69412","commnet_date":"2015-07-23T16:42:15-0700","commnet_user":"Andrea Boriero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Andrea Borieron added a comment  - 23\/Jul\/2015 16:42 PM    n        n        PR based on Steve Ebersole review of the previous one https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1026 n    n    n        n            Show  n            n                        n    n    n    n                nn       Andrea Borieron added a comment  - 23\/Jul\/2015 16:42 PM                      PR based on  Steve Ebersole  review of the previous one  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1026               n        n    n"}]}},{"HHH-9964":{"info":{"issue_title":"chaining metadataSources.addResource(&quot;foba.hbm.xml&quot;) calls is very slow","issue_key":"HHH-9964","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Minor","issue_affects_version":"Out of Date","issue_fix_version":"5.0.0.CR1 ,                                            5.0.0.CR2","issue_component":"5.0.0.CR1 ,                                            5.0.0.CR2","issue_labels":"5.0.0.CR1","issue_description":"Seems important that the classpath is very big: many big jars. \r\n Using hibernate 4 I used cfg.configure(\"\/\"+StandardServiceRegistryBuilder.DEFAULT_CFG_RESOURCE_NAME); where all resource files have been referenced within the hibernate xml file. This code has been much faster. Is chaining addResource() calls an antipattern?  Every call of addResource(..) needs 20-50 seconds to complete and I have about 20 calls like this. Stacktrace while processing looks like that:  JThread &#91;main&#93;  (Suspended (breakpoint at line 482 in JAXBContextImpl))\t\r\n \tJAXBContextImpl.getOrCreate(RuntimeClassInfo) line: 482\t\r\n \tJAXBContextImpl.getOrCreate(RuntimeTypeInfo) line: 500\t\r\n \tArrayElementNodeProperty&lt;BeanT,ListT,ItemT&gt;(ArrayElementProperty&lt;BeanT,ListT,ItemT&gt;).&lt;init&gt;(JAXBContextImpl, RuntimeElementPropertyInfo) line: 108\t\r\n \tArrayElementNodeProperty&lt;BeanT,ListT,ItemT&gt;.&lt;init&gt;(JAXBContextImpl, RuntimeElementPropertyInfo) line: 58\t\r\n \tGeneratedConstructorAccessor13.newInstance(Object[]) line: not available\t\r\n \tDelegatingConstructorAccessorImpl.newInstance(Object[]) line: 45\t\r\n \tConstructor&lt;T&gt;.newInstance(Object...) line: 422\t\r\n \tPropertyFactory.create(JAXBContextImpl, RuntimePropertyInfo) line: 124\t\r\n \tClassBeanInfoImpl&lt;BeanT&gt;.&lt;init&gt;(JAXBContextImpl, RuntimeClassInfo) line: 171\t\r\n \tJAXBContextImpl.getOrCreate(RuntimeClassInfo) line: 481\t\r\n \tJAXBContextImpl.getOrCreate(RuntimeTypeInfo) line: 500\t\r\n \tArrayElementNodeProperty&lt;BeanT,ListT,ItemT&gt;(ArrayElementProperty&lt;BeanT,ListT,ItemT&gt;).&lt;init&gt;(JAXBContextImpl, RuntimeElementPropertyInfo) line: 108\t\r\n \tArrayElementNodeProperty&lt;BeanT,ListT,ItemT&gt;.&lt;init&gt;(JAXBContextImpl, RuntimeElementPropertyInfo) line: 58\t\r\n \tGeneratedConstructorAccessor13.newInstance(Object[]) line: not available\t\r\n \tDelegatingConstructorAccessorImpl.newInstance(Object[]) line: 45\t\r\n \tConstructor&lt;T&gt;.newInstance(Object...) line: 422\t\r\n \tPropertyFactory.create(JAXBContextImpl, RuntimePropertyInfo) line: 124\t\r\n \tClassBeanInfoImpl&lt;BeanT&gt;.&lt;init&gt;(JAXBContextImpl, RuntimeClassInfo) line: 171\t\r\n \tJAXBContextImpl.getOrCreate(RuntimeClassInfo) line: 481\t\r\n \tJAXBContextImpl.getOrCreate(RuntimeTypeInfo) line: 500\t\r\n \tArrayElementNodeProperty&lt;BeanT,ListT,ItemT&gt;(ArrayElementProperty&lt;BeanT,ListT,ItemT&gt;).&lt;init&gt;(JAXBContextImpl, RuntimeElementPropertyInfo) line: 108\t\r\n \tArrayElementNodeProperty&lt;BeanT,ListT,ItemT&gt;.&lt;init&gt;(JAXBContextImpl, RuntimeElementPropertyInfo) line: 58\t\r\n \tGeneratedConstructorAccessor13.newInstance(Object[]) line: not available\t\r\n \tDelegatingConstructorAccessorImpl.newInstance(Object[]) line: 45\t\r\n \tConstructor&lt;T&gt;.newInstance(Object...) line: 422\t\r\n \tPropertyFactory.create(JAXBContextImpl, RuntimePropertyInfo) line: 124\t\r\n \tClassBeanInfoImpl&lt;BeanT&gt;.&lt;init&gt;(JAXBContextImpl, RuntimeClassInfo) line: 171\t\r\n \tJAXBContextImpl.getOrCreate(RuntimeClassInfo) line: 481\t\r\n \tJAXBContextImpl.getOrCreate(RuntimeTypeInfo) line: 500\t\r\n \tSingleElementNodeProperty&lt;BeanT,ValueT&gt;.&lt;init&gt;(JAXBContextImpl, RuntimeElementPropertyInfo) line: 100\t\r\n \tGeneratedConstructorAccessor14.newInstance(Object[]) line: not available\t\r\n \tDelegatingConstructorAccessorImpl.newInstance(Object[]) line: 45\t\r\n \tConstructor&lt;T&gt;.newInstance(Object...) line: 422\t\r\n \tPropertyFactory.create(JAXBContextImpl, RuntimePropertyInfo) line: 124\t\r\n \tClassBeanInfoImpl&lt;BeanT&gt;.&lt;init&gt;(JAXBContextImpl, RuntimeClassInfo) line: 171\t\r\n \tJAXBContextImpl.getOrCreate(RuntimeClassInfo) line: 481\t\r\n \tJAXBContextImpl.getOrCreate(RuntimeTypeInfo) line: 500\t\r\n \tArrayElementNodeProperty&lt;BeanT,ListT,ItemT&gt;(ArrayElementProperty&lt;BeanT,ListT,ItemT&gt;).&lt;init&gt;(JAXBContextImpl, RuntimeElementPropertyInfo) line: 108\t\r\n \tArrayElementNodeProperty&lt;BeanT,ListT,ItemT&gt;.&lt;init&gt;(JAXBContextImpl, RuntimeElementPropertyInfo) line: 58\t\r\n \tGeneratedConstructorAccessor13.newInstance(Object[]) line: not available\t\r\n \tDelegatingConstructorAccessorImpl.newInstance(Object[]) line: 45\t\r\n \tConstructor&lt;T&gt;.newInstance(Object...) line: 422\t\r\n \tPropertyFactory.create(JAXBContextImpl, RuntimePropertyInfo) line: 124\t\r\n \tClassBeanInfoImpl&lt;BeanT&gt;.&lt;init&gt;(JAXBContextImpl, RuntimeClassInfo) line: 171\t\r\n \tJAXBContextImpl.getOrCreate(RuntimeClassInfo) line: 481\t\r\n \tJAXBContextImpl.&lt;init&gt;(Class[], Collection&lt;TypeReference&gt;, Map&lt;Class,Class&gt;, String, boolean, RuntimeAnnotationReader, boolean, boolean) line: 315\t\r\n \tContextFactory.createContext(Class[], Collection&lt;TypeReference&gt;, Map&lt;Class,Class&gt;, String, boolean, RuntimeAnnotationReader, boolean, boolean) line: 139\t\r\n \tContextFactory.createContext(Class[], Map&lt;String,Object&gt;) line: 117\t\r\n \tNativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available &#91;native method&#93; \t\r\n \tNativeMethodAccessorImpl.invoke(Object, Object[]) line: 62\t\r\n \tDelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43\t\r\n \tMethod.invoke(Object, Object...) line: 497\t\r\n \tContextFinder.newInstance(Class[], Map, Class) line: 247\t\r\n \tContextFinder.newInstance(Class[], Map, String) line: 234\t\r\n \tContextFinder.find(Class[], Map) line: 441\t\r\n \tJAXBContext.newInstance(Class[], Map&lt;String,?&gt;) line: 641\t\r\n \tJAXBContext.newInstance(Class...) line: 584\t\r\n \tMappingBinder(AbstractBinder).jaxb(XMLEventReader, Schema, Class&lt;T&gt;, Origin) line: 162\t\r\n \tMappingBinder.doBind(XMLEventReader, StartElement, Origin) line: 57\t\r\n \tMappingBinder(AbstractBinder).doBind(XMLEventReader, Origin) line: 102\t\r\n \tMappingBinder(AbstractBinder).bind(InputStream, Origin) line: 57\t\r\n \tInputStreamXmlSource.doBind(Binder, InputStream, Origin, boolean) line: 43\t\r\n \tUrlXmlSource.doBind(Binder) line: 36\t\r\n \tXmlMappingBinderAccess.bind(String) line: 59\t\r\n \tMetadataSources.addResource(String) line: 274","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9964?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69355","commnet_date":"2015-07-21T10:16:04-0700","commnet_user":"Carsten Hammer","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Carsten Hammern added a comment  - 21\/Jul\/2015 10:16 AM    n        n        I think I attached the wrong stacktrace. It should not be the one stopping at the breakpoint. Probability to get a stacktrace like this is higher if you create a stacktrace while processing:nnThread &#91;main&#93;  (Suspended)t\r\nntowns: JarFile  (id=4504)t\r\nntSystem.arraycopy(Object, int, Object, int, int) line: not available &#91;native method&#93; t\r\nntArrays.copyOf(byte[], int) line: 3237t\r\nntZipCoder.getBytes(String) line: 89t\r\nntJarFile(ZipFile).getEntry(String) line: 311t\r\nntJarFile.getEntry(String) line: 240t\r\nntJarFile.getJarEntry(String) line: 223t\r\nntURLClassPath$JarLoader.getResource(String, boolean) line: 1005t\r\nntURLClassPath$JarLoader.findResource(String, boolean) line: 983t\r\nntURLClassPath.findResource(String, boolean) line: 188t\r\nntURLClassLoader$2.run() line: 569t\r\nntURLClassLoader$2.run() line: 567t\r\nntAccessController.doPrivileged(PrivilegedAction&lt;T&gt;, AccessControlContext) line: not available &#91;native method&#93; t\r\nntLauncher$AppClassLoader(URLClassLoader).findResource(String) line: 566t\r\nntLauncher$AppClassLoader(ClassLoader).getResource(String) line: 1093t\r\nntLauncher$AppClassLoader(URLClassLoader).getResourceAsStream(String) line: 232t\r\nntAccessorInjector.tailor(String, String, String...) line: 113t\r\nntAccessorInjector.prepare(Class, String, String, String...) line: 79t\r\nntOptimizedAccessorFactory.get(Field) line: 165t\r\nntAccessor$FieldReflection&lt;BeanT,ValueT&gt;.optimize(JAXBContextImpl) line: 253t\r\nntTransducedAccessor$CompositeTransducedAccessorImpl&lt;BeanT,ValueT&gt;.&lt;init&gt;(JAXBContextImpl, Transducer&lt;ValueT&gt;, Accessor&lt;BeanT,ValueT&gt;) line: 231t\r\nntTransducedAccessor&lt;BeanT&gt;.get(JAXBContextImpl, RuntimeNonElementRef) line: 173t\r\nntSingleElementLeafProperty&lt;BeanT&gt;.&lt;init&gt;(JAXBContextImpl, RuntimeElementPropertyInfo) line: 83t\r\nntGeneratedConstructorAccessor15.newInstance(Object[]) line: not availablet\r\nntDelegatingConstructorAccessorImpl.newInstance(Object[]) line: 45t\r\nntConstructor&lt;T&gt;.newInstance(Object...) line: 422t\r\nntPropertyFactory.create(JAXBContextImpl, RuntimePropertyInfo) line: 124t\r\nntClassBeanInfoImpl&lt;BeanT&gt;.&lt;init&gt;(JAXBContextImpl, RuntimeClassInfo) line: 171t\r\nntJAXBContextImpl.getOrCreate(RuntimeClassInfo) line: 481t\r\nntJAXBContextImpl.getOrCreate(RuntimeTypeInfo) line: 500t\r\nntArrayElementNodeProperty&lt;BeanT,ListT,ItemT&gt;(ArrayElementProperty&lt;BeanT,ListT,ItemT&gt;).&lt;init&gt;(JAXBContextImpl, RuntimeElementPropertyInfo) line: 108t\r\nntArrayElementNodeProperty&lt;BeanT,ListT,ItemT&gt;.&lt;init&gt;(JAXBContextImpl, RuntimeElementPropertyInfo) line: 58t\r\nntGeneratedConstructorAccessor13.newInstance(Object[]) line: not availablet\r\nntDelegatingConstructorAccessorImpl.newInstance(Object[]) line: 45t\r\nntConstructor&lt;T&gt;.newInstance(Object...) line: 422t\r\nntPropertyFactory.create(JAXBContextImpl, RuntimePropertyInfo) line: 124t\r\nntClassBeanInfoImpl&lt;BeanT&gt;.&lt;init&gt;(JAXBContextImpl, RuntimeClassInfo) line: 171t\r\nntJAXBContextImpl.getOrCreate(RuntimeClassInfo) line: 481t\r\nntJAXBContextImpl.getOrCreate(RuntimeTypeInfo) line: 500t\r\nntArrayElementNodeProperty&lt;BeanT,ListT,ItemT&gt;(ArrayElementProperty&lt;BeanT,ListT,ItemT&gt;).&lt;init&gt;(JAXBContextImpl, RuntimeElementPropertyInfo) line: 108t\r\nntArrayElementNodeProperty&lt;BeanT,ListT,ItemT&gt;.&lt;init&gt;(JAXBContextImpl, RuntimeElementPropertyInfo) line: 58t\r\nntGeneratedConstructorAccessor13.newInstance(Object[]) line: not availablet\r\nntDelegatingConstructorAccessorImpl.newInstance(Object[]) line: 45t\r\nntConstructor&lt;T&gt;.newInstance(Object...) line: 422t\r\nntPropertyFactory.create(JAXBContextImpl, RuntimePropertyInfo) line: 124t\r\nntClassBeanInfoImpl&lt;BeanT&gt;.&lt;init&gt;(JAXBContextImpl, RuntimeClassInfo) line: 171t\r\nntJAXBContextImpl.getOrCreate(RuntimeClassInfo) line: 481t\r\nntJAXBContextImpl.getOrCreate(RuntimeTypeInfo) line: 500t\r\nntArrayElementNodeProperty&lt;BeanT,ListT,ItemT&gt;(ArrayElementProperty&lt;BeanT,ListT,ItemT&gt;).&lt;init&gt;(JAXBContextImpl, RuntimeElementPropertyInfo) line: 108t\r\nntArrayElementNodeProperty&lt;BeanT,ListT,ItemT&gt;.&lt;init&gt;(JAXBContextImpl, RuntimeElementPropertyInfo) line: 58t\r\nntGeneratedConstructorAccessor13.newInstance(Object[]) line: not availablet\r\nntDelegatingConstructorAccessorImpl.newInstance(Object[]) line: 45t\r\nntConstructor&lt;T&gt;.newInstance(Object...) line: 422t\r\nntPropertyFactory.create(JAXBContextImpl, RuntimePropertyInfo) line: 124t\r\nntClassBeanInfoImpl&lt;BeanT&gt;.&lt;init&gt;(JAXBContextImpl, RuntimeClassInfo) line: 171t\r\nntJAXBContextImpl.getOrCreate(RuntimeClassInfo) line: 481t\r\nntJAXBContextImpl.getOrCreate(RuntimeTypeInfo) line: 500t\r\nntSingleElementNodeProperty&lt;BeanT,ValueT&gt;.&lt;init&gt;(JAXBContextImpl, RuntimeElementPropertyInfo) line: 100t\r\nntGeneratedConstructorAccessor14.newInstance(Object[]) line: not availablet\r\nntDelegatingConstructorAccessorImpl.newInstance(Object[]) line: 45t\r\nntConstructor&lt;T&gt;.newInstance(Object...) line: 422t\r\nntPropertyFactory.create(JAXBContextImpl, RuntimePropertyInfo) line: 124t\r\nntClassBeanInfoImpl&lt;BeanT&gt;.&lt;init&gt;(JAXBContextImpl, RuntimeClassInfo) line: 171t\r\nntJAXBContextImpl.getOrCreate(RuntimeClassInfo) line: 481t\r\nntJAXBContextImpl.getOrCreate(RuntimeTypeInfo) line: 500t\r\nntArrayElementNodeProperty&lt;BeanT,ListT,ItemT&gt;(ArrayElementProperty&lt;BeanT,ListT,ItemT&gt;).&lt;init&gt;(JAXBContextImpl, RuntimeElementPropertyInfo) line: 108t\r\nntArrayElementNodeProperty&lt;BeanT,ListT,ItemT&gt;.&lt;init&gt;(JAXBContextImpl, RuntimeElementPropertyInfo) line: 58t\r\nntGeneratedConstructorAccessor13.newInstance(Object[]) line: not availablet\r\nntDelegatingConstructorAccessorImpl.newInstance(Object[]) line: 45t\r\nntConstructor&lt;T&gt;.newInstance(Object...) line: 422t\r\nntPropertyFactory.create(JAXBContextImpl, RuntimePropertyInfo) line: 124t\r\nntClassBeanInfoImpl&lt;BeanT&gt;.&lt;init&gt;(JAXBContextImpl, RuntimeClassInfo) line: 171t\r\nntJAXBContextImpl.getOrCreate(RuntimeClassInfo) line: 481t\r\nntJAXBContextImpl.&lt;init&gt;(Class[], Collection&lt;TypeReference&gt;, Map&lt;Class,Class&gt;, String, boolean, RuntimeAnnotationReader, boolean, boolean) line: 315t\r\nntContextFactory.createContext(Class[], Collection&lt;TypeReference&gt;, Map&lt;Class,Class&gt;, String, boolean, RuntimeAnnotationReader, boolean, boolean) line: 139t\r\nntContextFactory.createContext(Class[], Map&lt;String,Object&gt;) line: 117t\r\nntNativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available &#91;native method&#93; t\r\nntNativeMethodAccessorImpl.invoke(Object, Object[]) line: 62t\r\nntDelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43t\r\nntMethod.invoke(Object, Object...) line: 497t\r\nntContextFinder.newInstance(Class[], Map, Class) line: 247t\r\nntContextFinder.newInstance(Class[], Map, String) line: 234t\r\nntContextFinder.find(Class[], Map) line: 441t\r\nntJAXBContext.newInstance(Class[], Map&lt;String,?&gt;) line: 641t\r\nntJAXBContext.newInstance(Class...) line: 584t\r\nntMappingBinder(AbstractBinder).jaxb(XMLEventReader, Schema, Class&lt;T&gt;, Origin) line: 162t\r\nntMappingBinder.doBind(XMLEventReader, StartElement, Origin) line: 57t\r\nntMappingBinder(AbstractBinder).doBind(XMLEventReader, Origin) line: 102t\r\nntMappingBinder(AbstractBinder).bind(InputStream, Origin) line: 57t\r\nntInputStreamXmlSource.doBind(Binder, InputStream, Origin, boolean) line: 43t\r\nntUrlXmlSource.doBind(Binder) line: 36t\r\nntXmlMappingBinderAccess.bind(String) line: 59t\r\nntMetadataSources.addResource(String) line: 274tnnSo I guess the bad performance has something to do with constantly scanning the many big jar files for whatever is needed from them. n    n    n        n            Show  n            n                        n    n    n    n                nn       Carsten Hammern added a comment  - 21\/Jul\/2015 10:16 AM                      I think I attached the wrong stacktrace. It should not be the one stopping at the breakpoint. Probability to get a stacktrace like this is higher if you create a stacktrace while processing: nn Thread  &#91;main&#93;  (Suspended)t ntowns: JarFile  (id=4504)t ntSystem.arraycopy(Object, int, Object, int, int) line: not available  &#91;native method&#93; t ntArrays.copyOf(byte[], int) line: 3237t ntZipCoder.getBytes(String) line: 89t ntJarFile(ZipFile).getEntry(String) line: 311t ntJarFile.getEntry(String) line: 240t ntJarFile.getJarEntry(String) line: 223t ntURLClassPath$JarLoader.getResource(String, boolean) line: 1005t ntURLClassPath$JarLoader.findResource(String, boolean) line: 983t ntURLClassPath.findResource(String, boolean) line: 188t ntURLClassLoader$2.run() line: 569t ntURLClassLoader$2.run() line: 567t ntAccessController.doPrivileged(PrivilegedAction&lt;T&gt;, AccessControlContext) line: not available  &#91;native method&#93; t ntLauncher$AppClassLoader(URLClassLoader).findResource(String) line: 566t ntLauncher$AppClassLoader(ClassLoader).getResource(String) line: 1093t ntLauncher$AppClassLoader(URLClassLoader).getResourceAsStream(String) line: 232t ntAccessorInjector.tailor(String, String, String...) line: 113t ntAccessorInjector.prepare(Class, String, String, String...) line: 79t ntOptimizedAccessorFactory.get(Field) line: 165t ntAccessor$FieldReflection&lt;BeanT,ValueT&gt;.optimize(JAXBContextImpl) line: 253t ntTransducedAccessor$CompositeTransducedAccessorImpl&lt;BeanT,ValueT&gt;.&lt;init&gt;(JAXBContextImpl, Transducer&lt;ValueT&gt;, Accessor&lt;BeanT,ValueT&gt;) line: 231t ntTransducedAccessor&lt;BeanT&gt;.get(JAXBContextImpl, RuntimeNonElementRef) line: 173t ntSingleElementLeafProperty&lt;BeanT&gt;.&lt;init&gt;(JAXBContextImpl, RuntimeElementPropertyInfo) line: 83t ntGeneratedConstructorAccessor15.newInstance(Object[]) line: not availablet ntDelegatingConstructorAccessorImpl.newInstance(Object[]) line: 45t ntConstructor&lt;T&gt;.newInstance(Object...) line: 422t ntPropertyFactory.create(JAXBContextImpl, RuntimePropertyInfo) line: 124t ntClassBeanInfoImpl&lt;BeanT&gt;.&lt;init&gt;(JAXBContextImpl, RuntimeClassInfo) line: 171t ntJAXBContextImpl.getOrCreate(RuntimeClassInfo) line: 481t ntJAXBContextImpl.getOrCreate(RuntimeTypeInfo) line: 500t ntArrayElementNodeProperty&lt;BeanT,ListT,ItemT&gt;(ArrayElementProperty&lt;BeanT,ListT,ItemT&gt;).&lt;init&gt;(JAXBContextImpl, RuntimeElementPropertyInfo) line: 108t ntArrayElementNodeProperty&lt;BeanT,ListT,ItemT&gt;.&lt;init&gt;(JAXBContextImpl, RuntimeElementPropertyInfo) line: 58t ntGeneratedConstructorAccessor13.newInstance(Object[]) line: not availablet ntDelegatingConstructorAccessorImpl.newInstance(Object[]) line: 45t ntConstructor&lt;T&gt;.newInstance(Object...) line: 422t ntPropertyFactory.create(JAXBContextImpl, RuntimePropertyInfo) line: 124t ntClassBeanInfoImpl&lt;BeanT&gt;.&lt;init&gt;(JAXBContextImpl, RuntimeClassInfo) line: 171t ntJAXBContextImpl.getOrCreate(RuntimeClassInfo) line: 481t ntJAXBContextImpl.getOrCreate(RuntimeTypeInfo) line: 500t ntArrayElementNodeProperty&lt;BeanT,ListT,ItemT&gt;(ArrayElementProperty&lt;BeanT,ListT,ItemT&gt;).&lt;init&gt;(JAXBContextImpl, RuntimeElementPropertyInfo) line: 108t ntArrayElementNodeProperty&lt;BeanT,ListT,ItemT&gt;.&lt;init&gt;(JAXBContextImpl, RuntimeElementPropertyInfo) line: 58t ntGeneratedConstructorAccessor13.newInstance(Object[]) line: not availablet ntDelegatingConstructorAccessorImpl.newInstance(Object[]) line: 45t ntConstructor&lt;T&gt;.newInstance(Object...) line: 422t ntPropertyFactory.create(JAXBContextImpl, RuntimePropertyInfo) line: 124t ntClassBeanInfoImpl&lt;BeanT&gt;.&lt;init&gt;(JAXBContextImpl, RuntimeClassInfo) line: 171t ntJAXBContextImpl.getOrCreate(RuntimeClassInfo) line: 481t ntJAXBContextImpl.getOrCreate(RuntimeTypeInfo) line: 500t ntArrayElementNodeProperty&lt;BeanT,ListT,ItemT&gt;(ArrayElementProperty&lt;BeanT,ListT,ItemT&gt;).&lt;init&gt;(JAXBContextImpl, RuntimeElementPropertyInfo) line: 108t ntArrayElementNodeProperty&lt;BeanT,ListT,ItemT&gt;.&lt;init&gt;(JAXBContextImpl, RuntimeElementPropertyInfo) line: 58t ntGeneratedConstructorAccessor13.newInstance(Object[]) line: not availablet ntDelegatingConstructorAccessorImpl.newInstance(Object[]) line: 45t ntConstructor&lt;T&gt;.newInstance(Object...) line: 422t ntPropertyFactory.create(JAXBContextImpl, RuntimePropertyInfo) line: 124t ntClassBeanInfoImpl&lt;BeanT&gt;.&lt;init&gt;(JAXBContextImpl, RuntimeClassInfo) line: 171t ntJAXBContextImpl.getOrCreate(RuntimeClassInfo) line: 481t ntJAXBContextImpl.getOrCreate(RuntimeTypeInfo) line: 500t ntSingleElementNodeProperty&lt;BeanT,ValueT&gt;.&lt;init&gt;(JAXBContextImpl, RuntimeElementPropertyInfo) line: 100t ntGeneratedConstructorAccessor14.newInstance(Object[]) line: not availablet ntDelegatingConstructorAccessorImpl.newInstance(Object[]) line: 45t ntConstructor&lt;T&gt;.newInstance(Object...) line: 422t ntPropertyFactory.create(JAXBContextImpl, RuntimePropertyInfo) line: 124t ntClassBeanInfoImpl&lt;BeanT&gt;.&lt;init&gt;(JAXBContextImpl, RuntimeClassInfo) line: 171t ntJAXBContextImpl.getOrCreate(RuntimeClassInfo) line: 481t ntJAXBContextImpl.getOrCreate(RuntimeTypeInfo) line: 500t ntArrayElementNodeProperty&lt;BeanT,ListT,ItemT&gt;(ArrayElementProperty&lt;BeanT,ListT,ItemT&gt;).&lt;init&gt;(JAXBContextImpl, RuntimeElementPropertyInfo) line: 108t ntArrayElementNodeProperty&lt;BeanT,ListT,ItemT&gt;.&lt;init&gt;(JAXBContextImpl, RuntimeElementPropertyInfo) line: 58t ntGeneratedConstructorAccessor13.newInstance(Object[]) line: not availablet ntDelegatingConstructorAccessorImpl.newInstance(Object[]) line: 45t ntConstructor&lt;T&gt;.newInstance(Object...) line: 422t ntPropertyFactory.create(JAXBContextImpl, RuntimePropertyInfo) line: 124t ntClassBeanInfoImpl&lt;BeanT&gt;.&lt;init&gt;(JAXBContextImpl, RuntimeClassInfo) line: 171t ntJAXBContextImpl.getOrCreate(RuntimeClassInfo) line: 481t ntJAXBContextImpl.&lt;init&gt;(Class[], Collection&lt;TypeReference&gt;, Map&lt;Class,Class&gt;, String, boolean, RuntimeAnnotationReader, boolean, boolean) line: 315t ntContextFactory.createContext(Class[], Collection&lt;TypeReference&gt;, Map&lt;Class,Class&gt;, String, boolean, RuntimeAnnotationReader, boolean, boolean) line: 139t ntContextFactory.createContext(Class[], Map&lt;String,Object&gt;) line: 117t ntNativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available  &#91;native method&#93; t ntNativeMethodAccessorImpl.invoke(Object, Object[]) line: 62t ntDelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43t ntMethod.invoke(Object, Object...) line: 497t ntContextFinder.newInstance(Class[], Map, Class) line: 247t ntContextFinder.newInstance(Class[], Map, String) line: 234t ntContextFinder.find(Class[], Map) line: 441t ntJAXBContext.newInstance(Class[], Map&lt;String,?&gt;) line: 641t ntJAXBContext.newInstance(Class...) line: 584t ntMappingBinder(AbstractBinder).jaxb(XMLEventReader, Schema, Class&lt;T&gt;, Origin) line: 162t ntMappingBinder.doBind(XMLEventReader, StartElement, Origin) line: 57t ntMappingBinder(AbstractBinder).doBind(XMLEventReader, Origin) line: 102t ntMappingBinder(AbstractBinder).bind(InputStream, Origin) line: 57t ntInputStreamXmlSource.doBind(Binder, InputStream, Origin, boolean) line: 43t ntUrlXmlSource.doBind(Binder) line: 36t ntXmlMappingBinderAccess.bind(String) line: 59t ntMetadataSources.addResource(String) line: 274t nn So I guess the bad performance has something to do with constantly scanning the many big jar files for whatever is needed from them.              n        n    n"},{"commnet_id":"comment-69541","commnet_date":"2015-07-31T08:37:48-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 31\/Jul\/2015 08:37 AM    n        n        nUsing hibernate 4 I used cfg.configure(\"\/\"+StandardServiceRegistryBuilder.DEFAULT_CFG_RESOURCE_NAME); where all resource files have been referenced within the hibernate xml file. This code has been much faster. nnFirst, in 5.0 you can reference the mapping files in cfg.xml file too.  In either case, in 4.x or 5.x the result is the same,  The calls route through the same code.  Neither is going to be any faster than the other.nnMy guess is that you are using a deprecated DTD.  There was a bug fixed in CR3 where deprecated DTDs (the VERY old SF ones) were not resolved locally; they would each result in network lookups.  Again, that was fixed in CR3 so I'd try that first.  Otherwise I need an example mapping file.  nnAnd if it happens to be the case that you are still using these old, deprecated DTDs I'd suggest updating.  Support for them will be removed in a later release.nnI am going to close this as I feel pretty certain this is what you are seeing.  Reopen or comment if that is actually not the case. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 31\/Jul\/2015 08:37 AM                      n Using hibernate 4 I used cfg.configure(\"\/\"+StandardServiceRegistryBuilder.DEFAULT_CFG_RESOURCE_NAME); where all resource files have been referenced within the hibernate xml file. This code has been much faster.   nn First, in 5.0 you can reference the mapping files in  cfg.xml  file too.  In either case, in 4.x or 5.x the result is the same,  The calls route through the same code.  Neither is going to be any faster than the other. nn My guess is that you are using a deprecated DTD.  There was a bug fixed in CR3 where deprecated DTDs (the VERY old SF ones) were not resolved locally; they would each result in network lookups.  Again, that was fixed in CR3 so I'd try that first.  Otherwise I need an example mapping file.   nn And if it happens to be the case that you are still using these old, deprecated DTDs I'd suggest updating.  Support for them will be removed in a later release. nn I am going to close this as I feel pretty certain this is what you are seeing.  Reopen or comment if that is actually not the case.              n        n    n"}]}},{"HHH-9955":{"info":{"issue_title":"EnumType mapped via hbm.xml not always resolved properly as far as named\/ordinal","issue_key":"HHH-9955","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.CR3","issue_labels":"5.0.0.CR3","issue_description":"The issue is mainly a problem with JDBC drivers and implementations of java.sql.ResultSetMetaData#getColumnType \/ java.sql.ParameterMetaData#getParameterType which we use to make the named\/ordinal decision when we do not have enough information in the mapping.  The proposal here is to make the initial resolution during org.hibernate.type.EnumType#setParameterValues be the one and only resolution for named\/ordinal (ultimately falling back to ordinal most likely to be consistent with annotations).    In psuedo code, I am proposing...    public  void setParameterValues(Properties parameters) {      final  ParameterType reader = (ParameterType) parameters.get( PARAMETER_TYPE );        if  ( reader != null  ) {          \/\/ we are handling annotations case            ...      }      else  {          \/\/ hbm.xml case            this .enumValueMapper = interpretParameters( parameters );          this .sqlType = enumValueMapper.getSqlType();      }  }    private  EnumValueMapper interpretParameters(Properties parameters) {      if  ( parameters.containsKey( NAMED ) ) {          final  boolean  useNamed = ConfigurationHelper.getBoolean( NAMED, parameters );          if  ( useNamed ) {              return  new  NamedEnumValueMapper();          }          else  {              return  new  OrdinalEnumValueMapper();          }      }        if  ( parameters.containsKey( TYPE ) ) {          final  int  type = Integer .decode( (String ) parameters.get( TYPE ) );          if  ( isNumericType( type ) ) {              return  new  OrdinalEnumValueMapper();          }          else  if  ( isCharacterType( type ) ) {              return  new  OrdinalEnumValueMapper();          }          else  {              log.debugf( \"Passed JDBC type code [%s] not recognized as numeric nor character\" , type );          }      }        \/\/ the fallback       return  new  OrdinalEnumValueMapper();  }","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9955?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-9944":{"info":{"issue_title":"Inconsistent behavior on *toMany collections if versions are negative","issue_key":"HHH-9944","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"4.3.10 ,                                            4.3.11 ,                                            5.0.2 ,                                            5.1.0","issue_component":"4.3.10 ,                                            4.3.11 ,                                            5.0.2 ,                                            5.1.0","issue_labels":"4.3.10","issue_description":"If you persist or merge a versioned entity it depends on the initial version whether the *toMany collections are replaced with their persistent implementations or not.   \tIf the version is non-negative, the persistent implementations are in place. \tIf the version is negative, the original implementations are still in place.    Hibernate handles both cases later during flush and I was not able to create a scenario where this inconsistency leads to a problem, but it is still inconsistent.  I think I've spotted the problem in AbstractSaveEventListener.performSaveOrReplicate:     if  ( persister.hasCollections() ) {  \tsubstitute = substitute || visitCollectionsBeforeSave( entity, id, values, types, source );  }     IMHO should be     if  ( persister.hasCollections() ) {  \tsubstitute = visitCollectionsBeforeSave( entity, id, values, types, source ) || substitute;  }     You may find a small stripped down test project on Github https:\/\/github.com\/abenneke\/sandbox\/tree\/master\/hibernate-versions which includes a NegativeVersionTest  Thank you!","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9944?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69217","commnet_date":"2015-07-18T07:42:47-0700","commnet_user":"Andreas Benneke","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Andreas Benneken added a comment  - 18\/Jul\/2015 07:42 AM    n        n        This issue still exists with 5.0.0.CR2. n    n    n        n            Show  n            n                        n    n    n    n                nn       Andreas Benneken added a comment  - 18\/Jul\/2015 07:42 AM                      This issue still exists with 5.0.0.CR2.              n        n    n"},{"commnet_id":"comment-72883","commnet_date":"2015-10-28T04:17:37-0700","commnet_user":"Andreas Benneke","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Andreas Benneken added a comment  - 28\/Oct\/2015 04:17 AM    n        n        Verified that the behavior still exists in 4.3.11 und 5.0.2. n    n    n        n            Show  n            n                        n    n    n    n                nn       Andreas Benneken added a comment  - 28\/Oct\/2015 04:17 AM                      Verified that the behavior still exists in 4.3.11 und 5.0.2.              n        n    n"}]}},{"HSEARCH-1935":{"info":{"issue_title":"Refer to Infinispan reference documentation for the Infinispan DirectoryProvider","issue_key":"HSEARCH-1935","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.x","issue_labels":"5.x","issue_description":"Requires https:\/\/issues.jboss.org\/browse\/ISPN-5615 first.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1935?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-9940":{"info":{"issue_title":"Null collections with orphanRemoval=true lead to &quot;A collection with cascade=&quot;all-delete-orphan&quot; was no longer referenced by the owning entity instance&quot;","issue_key":"HHH-9940","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"4.3.10 ,                                            4.3.11 ,                                            5.0.2 ,                                            5.1.0","issue_component":"4.3.10 ,                                            4.3.11 ,                                            5.0.2 ,                                            5.1.0","issue_labels":"4.3.10","issue_description":"When you initialize the collection of an OneToMany relation with orphanRemoval=true with null, Hibernate fails to persist changes to a (re)loaded entity with the following exception:     org.hibernate.HibernateException: A collection with cascade=\"all-delete-orphan\"  was no longer referenced by the owning entity instance: ...  \tat org.hibernate.engine.internal.Collections.processDereferencedCollection(Collections.java:114)  \tat org.hibernate.engine.internal.Collections.processUnreachableCollection(Collections.java:67)  \tat org.hibernate.event.internal.AbstractFlushingEventListener.flushCollections(AbstractFlushingEventListener.java:258)  \tat org.hibernate.event.internal.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:103)  \tat org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:55)  \tat org.hibernate.internal.SessionImpl.flush(SessionImpl.java:1258)  \tat org.hibernate.jpa.spi.AbstractEntityManagerImpl.flush(AbstractEntityManagerImpl.java:1335)     Things work however, if   \tthe collection is initialized with an empty collection (instead of null) \torphanRemoval is set to false    This may be related to                                                          HHH-7726                                                              Awaiting Response                 and\/or                                                          HHH-9935                                                              Resolved                , but the null collection case is not covered there.  You may find a small stripped down test project on Github https:\/\/github.com\/abenneke\/sandbox\/tree\/master\/hibernate-null-collection  Thank you!","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9940?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69218","commnet_date":"2015-07-18T07:43:09-0700","commnet_user":"Andreas Benneke","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Andreas Benneken added a comment  - 18\/Jul\/2015 07:43 AM    n        n        This issue still exists with 5.0.0.CR2. n    n    n        n            Show  n            n                        n    n    n    n                nn       Andreas Benneken added a comment  - 18\/Jul\/2015 07:43 AM                      This issue still exists with 5.0.0.CR2.              n        n    n"},{"commnet_id":"comment-71597","commnet_date":"2015-10-27T12:15:42-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 27\/Oct\/2015 12:15 PM    n        n        This bug report does not indicate that the reported issue affects version 5.x. Versions prior to 5.x are no longer maintained. It would be a great help to the Hibernate team and community for someone to verify that the reported issue still affects version 5.x. If so, please add the 5.x version that you verified with to the list of affected-versions and attach the (preferably SSCCE) test case you used to do the verification to the report; from there the issues will be looked at during our triage meetings.nnFor details, see http:\/\/in.relation.to\/2015\/10\/27\/great-jira-cleanup-2015\/ n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 27\/Oct\/2015 12:15 PM                      This bug report does not indicate that the reported issue affects version 5.x. Versions prior to 5.x are no longer maintained. It would be a great help to the Hibernate team and community for someone to verify that the reported issue still affects version 5.x. If so, please add the 5.x version that you verified with to the list of affected-versions and attach the (preferably SSCCE) test case you used to do the verification to the report; from there the issues will be looked at during our triage meetings. nn For details, see  http:\/\/in.relation.to\/2015\/10\/27\/great-jira-cleanup-2015\/               n        n    n"},{"commnet_id":"comment-72721","commnet_date":"2015-10-27T20:26:09-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 27\/Oct\/2015 20:26 PM    n        n        As part of verifying that this issue affects 5.0, please just set the \"Affects version\". Leave the \"verify-affects-5.0\" label and leave the issue in \"Awaiting Response\" status; these are critical for us to be able to track these verifications and triage them. Thanks. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 27\/Oct\/2015 20:26 PM                      As part of verifying that this issue affects 5.0, please just set the \"Affects version\". Leave the \"verify-affects-5.0\" label and leave the issue in \"Awaiting Response\" status; these are critical for us to be able to track these verifications and triage them. Thanks.              n        n    n"},{"commnet_id":"comment-72879","commnet_date":"2015-10-28T04:10:06-0700","commnet_user":"Andreas Benneke","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Andreas Benneken added a comment  - 28\/Oct\/2015 04:10 AM    n        n        Verified that the problem still exists in 4.3.11 und 5.0.2. n    n    n        n            Show  n            n                        n    n    n    n                nn       Andreas Benneken added a comment  - 28\/Oct\/2015 04:10 AM                      Verified that the problem still exists in 4.3.11 und 5.0.2.              n        n    n"},{"commnet_id":"comment-72979","commnet_date":"2015-10-28T21:50:24-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 28\/Oct\/2015 21:50 PM    n        n        This works as designed.  In legacy Hibernate orphan-delete support (which way predates JPA) for collections required that the collection was never nulled.  JPA does not say one way or the other.nnAt best, I think, this is an feature\/enhancement request. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 28\/Oct\/2015 21:50 PM                      This works as designed.  In legacy Hibernate orphan-delete support (which way predates JPA) for collections required that the collection was never nulled.  JPA does not say one way or the other. nn At best, I think, this is an feature\/enhancement request.              n        n    n"},{"commnet_id":"comment-73008","commnet_date":"2015-10-29T02:22:24-0700","commnet_user":"Andreas Benneke","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Andreas Benneken added a comment  - 29\/Oct\/2015 02:22 AM    n        n        Thank you for looking into this one.nnI agree, but if legacy Hibernate needs it this way, I would expect a proper exception instead? This one is very misleading... n    n    n        n            Show  n            n                        n    n    n    n                nn       Andreas Benneken added a comment  - 29\/Oct\/2015 02:22 AM                      Thank you for looking into this one. nn I agree, but if legacy Hibernate needs it this way, I would expect a proper exception instead? This one is very misleading...              n        n    n"}]}},{"HHH-9939":{"info":{"issue_title":"Make UserTypes usable in Query.setParameter","issue_key":"HHH-9939","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"hibernate-core","issue_description":"After long searching for a way to pass arrays as parameters, the closest thing to a solution people recommended was implementing a UserType for them and even had examples of such. They were supposed to be loaded through the xml configuration, so I after I did that I discovered that the data is never entered into the map that is looked-up for the types when calling setParameter().\r\n Wrote 40 lines of code in Configuration.buildSessionFactory and I made it work. Tested it in the company project and got the desired results from the PostgreSQL query \"SELECT * FROM my_table WHERE id = ANY(:boo)\" . It doesn't work with \"id IN :boo\" or with positional parameters like \"id = ANY\", but that can be smoothed-out later if you agree with the idea at large.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9939?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-9932":{"info":{"issue_title":"Separate logger for StatefulPersistenceContext.narrowProxy","issue_key":"HHH-9932","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"4.2.19","issue_component":"4.2.19","issue_labels":"4.2.19","issue_description":"The warning issued by narrowProxy is very annoying in a post-dev environment.\r\n In 3.x, the warning was issued on a separate logger. This way, it could be silenced in the logging configuration without losing any other warnings.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9932?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69188","commnet_date":"2015-07-16T11:23:09-0700","commnet_user":"Heinz Huber","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Heinz Hubern added a comment  - 16\/Jul\/2015 11:23 AM     - edited  n        n        Pull request:\r\nnhttps:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1007 n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Heinz Hubern added a comment  - 16\/Jul\/2015 11:23 AM     - edited                    Pull request: n https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1007               n        n    n"}]}},{"HHH-9926":{"info":{"issue_title":"JdbcEnvironmentImpl doesn&#39;t propagate KEYWORD_AUTO_QUOTING_ENABLED setting correctly","issue_key":"HHH-9926","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Duplicate","issue_fix_version":"5.0.0.CR2","issue_component":"5.0.0.CR2","issue_labels":"5.0.0.CR2","issue_description":"The given value is used for controlling the global quoting setting rather than auto quoting.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9926?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69166","commnet_date":"2015-07-15T07:51:46-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 15\/Jul\/2015 07:51 AM    n        n        Sent PR https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1003 n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 15\/Jul\/2015 07:51 AM                      Sent PR  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1003               n        n    n"}]}},{"OGM-860":{"info":{"issue_title":"Move DocumentHelpers to more sensible place","issue_key":"OGM-860","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"4.2.0.Final","issue_component":"4.2.0.Final","issue_labels":"4.2.0.Final","issue_description":"Currently it's under ... .association.spi.impl which seems a bit odd. It should be either ... .association.spi or ... .association.impl depending on whether we want to commit to it or not.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-860?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-859":{"info":{"issue_title":"Make sure that entity and (coll of) embedded are stored in one unique operation","issue_key":"OGM-859","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.1","issue_labels":"5.1","issue_description":"This is useful for:   \tremote datastores (perf) \tnon tx datastore whose atomicity is per structure (eg document)    Note that Infinispan and EhCache already","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-859?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-9920":{"info":{"issue_title":"Truncate Identifier names if exceed the database max length  ","issue_key":"HHH-9920","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9920?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69988","commnet_date":"2015-08-26T09:49:29-0700","commnet_user":"Brett Meyer","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Brett Meyern added a comment  - 26\/Aug\/2015 09:49 AM    n        n        Andrea Boriero, relates to n    n                n        n            n            HHH-8217n        n                                                    Closed n             n, I think.  Maybe we just missed something there? n    n    n        n            Show  n            n                        n    n    n    n                nn       Brett Meyern added a comment  - 26\/Aug\/2015 09:49 AM                       Andrea Boriero , relates to n     n                 n         n             n            HHH-8217n         n                                                     Closed n             n, I think.  Maybe we just missed something there?              n        n    n"}]}},{"OGM-857":{"info":{"issue_title":"Limit code duplicated from HSEARCH for mass indexer","issue_key":"OGM-857","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"core","issue_description":"Atm. several classes are copied and modified from HSEARCH to make mass indexing work. Not all these classes should have to be customized for OGM, though. We should investigate which parts we really need to customize in OGM (e.g. IdentifierProducer which uses the criteria API) and provide extension points in HSEARCH so that the other parts can be re-used as is.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-857?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-1925":{"info":{"issue_title":"Remove infinispan module","issue_key":"HSEARCH-1925","issue_type":"Remove Feature","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Out of Date","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1925?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-1922":{"info":{"issue_title":"JMS backend should set the JMS message header  JMSXGroupID","issue_key":"HSEARCH-1922","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.4.0.CR1","issue_labels":"5.4.0.CR1","issue_description":"When trying to setup a failover safe master\/slave setup for Search using JMS, it is important that index updates for a given index are only processed by a single consumer (message driven bean). In case there are multiple beans listening to the same JMS queue as part of the failover strategy, without so called message grouping, index updates could be applied out of order, since the queue consumer work independently. Message grouping ensures that all messages for the same group get consumed by the same consumer (while it is alive).  The key for message grouping is to set the standard JMS header  JMSXGroupID. This is a per-condition for ActiveMQ as well as HornetQ.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1922?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69059","commnet_date":"2015-07-08T02:33:52-0700","commnet_user":"Hardy Ferentschik","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Hardy Ferentschikn added a comment  - 08\/Jul\/2015 02:33 AM     - edited  n        n        JmsBackendQueueTask actually already sets the index name as a custom string property. At the moment Environment.INDEX_NAME_JMS_PROPERTY is used which is set to HSearchIndexName. The easiest approach seems to be to just change HSearchIndexName to the standard header JMSXGroupID. n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Hardy Ferentschikn added a comment  - 08\/Jul\/2015 02:33 AM     - edited                     JmsBackendQueueTask  actually already sets the index name as a custom string property. At the moment  Environment.INDEX_NAME_JMS_PROPERTY  is used which is set to  HSearchIndexName . The easiest approach seems to be to just change  HSearchIndexName  to the standard header  JMSXGroupID .              n        n    n"}]}},{"HHH-9903":{"info":{"issue_title":"Allow use of custom criteria in Subqueries","issue_key":"HHH-9903","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Rejected","issue_fix_version":"4.2.0.Final","issue_component":"4.2.0.Final","issue_labels":"4.2.0.Final","issue_description":"At the moment there is a hard link between the use of the org.hibernate.criterion.Subqueries\r\n and org.hibernate.criterion.DetachedCriteria.  This makes it hard whenever someone wants to make their own \"detached criteria\" solution.\r\n Would it be possible to change the methods that are dependent on DetachedCriteria to use an interface instead or allow easier subclassing of the detached criteria class.  As a side note:  Would it also be possible to provide some sort of shared interface between Criteria and DetachedCriteria. This could make the code a bit more consistent since DetachedCriteria is a copy of most of the methods in Criteria, but has no direct link with it.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9903?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69073","commnet_date":"2015-07-08T11:48:04-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 08\/Jul\/2015 11:48 AM    n        n        The legacy Hibernate org.hibernate.Criteria API is considered deprecated:\r\nnhttp:\/\/docs.jboss.org\/hibernate\/orm\/4.3\/devguide\/en-US\/html_single\/#d5e5506nnWe have no plans to make improvements to that legacy API. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 08\/Jul\/2015 11:48 AM                      The legacy Hibernate org.hibernate.Criteria API is considered deprecated: n http:\/\/docs.jboss.org\/hibernate\/orm\/4.3\/devguide\/en-US\/html_single\/#d5e5506  nn We have no plans to make improvements to that legacy API.              n        n    n"}]}},{"HSEARCH-1919":{"info":{"issue_title":"Don&#39;t use FieldCache in SortTest","issue_key":"HSEARCH-1919","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.4.0.CR1","issue_labels":"5.4.0.CR1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1919?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-9899":{"info":{"issue_title":"Enable custom Metadata(Builder) extensions by integrators","issue_key":"HHH-9899","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.CR2","issue_labels":"5.0.0.CR2","issue_description":"For OGM it'd be useful to be able to plug in and expose a custom MetadataBuilder and Metadata.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9899?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69048","commnet_date":"2015-07-07T01:53:34-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 07\/Jul\/2015 01:53 AM    n        n        Sent PR https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/993 n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 07\/Jul\/2015 01:53 AM                      Sent PR  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/993               n        n    n"},{"commnet_id":"comment-69051","commnet_date":"2015-07-07T08:54:02-0700","commnet_user":"Andrea Boriero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Andrea Borieron added a comment  - 07\/Jul\/2015 08:54 AM    n        n        https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/993 n    n    n        n            Show  n            n                        n    n    n    n                nn       Andrea Borieron added a comment  - 07\/Jul\/2015 08:54 AM                       https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/993               n        n    n"}]}},{"HHH-9898":{"info":{"issue_title":"Test for correct behaviour of 2LC","issue_key":"HHH-9898","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.0.CR1","issue_component":"5.0.0.CR1","issue_labels":"5.0.0.CR1","issue_description":"Let's have a test that verifies correct read-after-write semantics in second-level cache. Such test should reveal race conditions such as modification of DB during read (caching stale entry), invalidation of cache etc.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9898?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69473","commnet_date":"2015-07-28T14:49:56-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 28\/Jul\/2015 14:49 PM    n        n        Andrea Boriero, Radim Vansa Is this issue resolved?  The PRs are closed. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 28\/Jul\/2015 14:49 PM                       Andrea Boriero ,  Radim Vansa  Is this issue resolved?  The PRs are closed.              n        n    n"},{"commnet_id":"comment-69480","commnet_date":"2015-07-28T15:08:23-0700","commnet_user":"Andrea Boriero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Andrea Borieron added a comment  - 28\/Jul\/2015 15:08 PM    n        n        Steve Ebersole no it's not resolved, Radim Vansa closed the PR waiting for the the merge of PR #1031 and  #1020 n    n    n        n            Show  n            n                        n    n    n    n                nn       Andrea Borieron added a comment  - 28\/Jul\/2015 15:08 PM                       Steve Ebersole  no it's not resolved,  Radim Vansa  closed the PR waiting for the the merge of PR #1031 and  #1020              n        n    n"}]}},{"HHH-9897":{"info":{"issue_title":"@OneToMany association with @JoinFormula throws NPE","issue_key":"HHH-9897","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.0.0.CR1","issue_component":"5.0.0.CR1","issue_labels":"5.0.0.CR1","issue_description":"When trying to define join columns on a @OneToMany association using @JoinFormula inside a @JoinColumnsOrFormulas list, A null pointer exception is thrown since the the bind fails to treat the Ejb3Column as a formula one, and tries to access the Column part of it.  Stack trace:  2015-07-07 01:54:12 ERROR HibernateUtil:22 - Initial SessionFactory creation failed.  java.lang.NullPointerException  \tat org.hibernate.cfg.Ejb3Column.isNullable(Ejb3Column.java:185)  \tat org.hibernate.cfg.annotations.CollectionBinder.buildCollectionKey(CollectionBinder.java:1091)  \tat org.hibernate.cfg.annotations.CollectionBinder.bindCollectionSecondPass(CollectionBinder.java:1524)  \tat org.hibernate.cfg.annotations.CollectionBinder.bindOneToManySecondPass(CollectionBinder.java:865)  \tat org.hibernate.cfg.annotations.CollectionBinder.bindStarToManySecondPass(CollectionBinder.java:780)  \tat org.hibernate.cfg.annotations.CollectionBinder$1.secondPass(CollectionBinder.java:719)  \tat org.hibernate.cfg.CollectionSecondPass.doSecondPass(CollectionSecondPass.java:54)  \tat org.hibernate.boot.internal.InFlightMetadataCollectorImpl.processSecondPasses(InFlightMetadataCollectorImpl.java:1665)  \tat org.hibernate.boot.internal.InFlightMetadataCollectorImpl.processSecondPasses(InFlightMetadataCollectorImpl.java:1640)  \tat org.hibernate.boot.internal.MetadataBuildingProcess.build(MetadataBuildingProcess.java:282)  \tat org.hibernate.boot.internal.MetadataBuilderImpl.build(MetadataBuilderImpl.java:396)  \tat org.hibernate.boot.internal.MetadataBuilderImpl.build(MetadataBuilderImpl.java:82)  \tat org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:692)  \tat org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:724)     A test case:    table A  \tint  id (PK)    table B  \tint  id (PK)  \t  table C  \tint  id (PK)  \tint  idB (FK to B.id) (PK)  \t  table D  \tint  idA (FK to A.id) (PK)  \tint  idC (FK to C.id) (PK)    table E  \tint  idA (FK to A.id) (PK)  \tint  idB (FK to B.id) (PK)  \t  class E{  \t@OneToMany  \t@JoinColumnsOrFormulas(  \t{  \t\t@JoinColumnOrFormula(formula = @JoinFormula(value = \"idA\" , referencedColumnName = \"idA\" )),  \t\t@JoinColumnOrFormula(formula = @JoinFormula(value = \"(SELECT __C.id FROM C AS __C WHERE __C.idB=idB)\" , referencedColumnName = \"idC\" ))  \t})  \tSet&lt;D&gt; ds = new  HashSet&lt;&gt;();  }","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9897?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-71244","commnet_date":"2015-10-26T17:20:33-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 26\/Oct\/2015 17:20 PM    n        n        This is something not yet supported.  That is to say that the legacy code here (from hbm.xml binding) did not allow for this, and we have never actually added support for this from annotation binding. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 26\/Oct\/2015 17:20 PM                      This is something not yet supported.  That is to say that the legacy code here (from hbm.xml binding) did not allow for this, and we have never actually added support for this from annotation binding.              n        n    n"},{"commnet_id":"comment-71245","commnet_date":"2015-10-26T17:25:03-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 26\/Oct\/2015 17:25 PM    n        n        I added a test org.hibernate.test.annotations.formula.JoinColumnOrFormulaTest to keep track of this. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 26\/Oct\/2015 17:25 PM                      I added a test  org.hibernate.test.annotations.formula.JoinColumnOrFormulaTest  to keep track of this.              n        n    n"},{"commnet_id":"comment-75063","commnet_date":"2016-02-09T14:12:55-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 09\/Feb\/2016 14:12 PM    n        n        Just don't have time to get this into 5.1 n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 09\/Feb\/2016 14:12 PM                      Just don't have time to get this into 5.1              n        n    n"}]}},{"HHH-9896":{"info":{"issue_title":"Switch HEM to use new bytecode enhancement for runtime enhancement","issue_key":"HHH-9896","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Duplicate","issue_fix_version":"None","issue_component":"None","issue_labels":"hibernate-entitymanager","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9896?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-9890":{"info":{"issue_title":"Change transaction mode for local-query to NONE","issue_key":"HHH-9890","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"hibernate-infinispan","issue_description":"This cache is not replicated across different nodes and invalidation is handled with the timestamps, therefore NONE transaction mode should be enough.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9890?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-68983","commnet_date":"2015-07-03T03:17:48-0700","commnet_user":"Patrick Ruckstuhl","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Patrick Ruckstuhln added a comment  - 03\/Jul\/2015 03:17 AM    n        n        Maybe to explain a bit more on our use case.nnWe have a lot of read only transactions that only fetch data and will never commit.\r\nnAt least with hibernate 4.3 and infinispan 7.2.2 this change allows those transactions to still make use of the query cache (with NON_XA the query cache was rolled back on transaction rollback) n    n    n        n            Show  n            n                        n    n    n    n                nn       Patrick Ruckstuhln added a comment  - 03\/Jul\/2015 03:17 AM                      Maybe to explain a bit more on our use case. nn We have a lot of read only transactions that only fetch data and will never commit. nAt least with hibernate 4.3 and infinispan 7.2.2 this change allows those transactions to still make use of the query cache (with NON_XA the query cache was rolled back on transaction rollback)              n        n    n"}]}},{"HSEARCH-1915":{"info":{"issue_title":"Move org.hibernate.search.store.Workspace into a non-API package","issue_key":"HSEARCH-1915","issue_type":"Remove Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6","issue_labels":"6","issue_description":"This interface clearly should not be public: org.hibernate.search.store.Workspace","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1915?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-1907":{"info":{"issue_title":"Include the JGroups backend in the modules distribution","issue_key":"HSEARCH-1907","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.4.0.CR1","issue_labels":"5.4.0.CR1","issue_description":"The modules we currently provide do not include the JGroups backend, although this is a popular choice.\r\n We should include it in the modules zip.  WildFly does already include this module, so this would be required to have WildFly eventually build using our modules as a starting point.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1907?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-1902":{"info":{"issue_title":"Investigate and document reliable and persistent JMS configuration","issue_key":"HSEARCH-1902","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"We should have specific documentation and\/or examples for showing how to use the JMS backend in a reliable manner. Possible options include:   \tUsing an external ActiveMQ broker, attaching clients with the \"exclusive consumer\" option; That way only one of the nodes will process messages from the queue; if it dies, another one becames the sole consumer \tCheck what options there are in WildFly 10 and ActiveMQ Artemis which it uses; I am not sure whether it also has the \"exclusive consumer\" option","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1902?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-68932","commnet_date":"2015-06-29T07:58:31-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Gunnar Morlingn added a comment  - 29\/Jun\/2015 07:58 AM     - edited  n        n        As discussed in the meeting, if we e.g. come to the conclusion that we cannot make it work using what's available out of the box in WF 10, the database-based approach (like this) may be an alternative. Probably it'd cause a longer delay until index changes become applied (depending on the polling interval). A single processor could be ensured using the clustered HA singleton mechanism already built into WF (see this quickstart). n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Gunnar Morlingn added a comment  - 29\/Jun\/2015 07:58 AM     - edited                    As discussed in the meeting, if we e.g. come to the conclusion that we cannot make it work using what's available out of the box in WF 10, the database-based approach (like  this ) may be an alternative. Probably it'd cause a longer delay until index changes become applied (depending on the polling interval). A single processor could be ensured using the clustered HA singleton mechanism already built into WF (see this  quickstart ).              n        n    n"}]}},{"HSEARCH-1901":{"info":{"issue_title":"Built-in TikaBridge repeatedly initializes the default parser","issue_key":"HSEARCH-1901","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.4.0.CR1","issue_labels":"5.4.0.CR1","issue_description":"Profiling has shown \"new AutoDetectParser()\" to be an expensive call (TCCL resource loading during initialization, etc.).  Instead, initialize it only once per TikaBridge instance.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1901?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-9882":{"info":{"issue_title":"many to one declarations in hbm without embed-xml=&quot;false&quot; generate warning","issue_key":"HHH-9882","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"5.0.0.CR1","issue_component":"5.0.0.CR1","issue_labels":"5.0.0.CR1","issue_description":"you get a warning like this:\r\n 2015\/06\/24 05:46:55,206 WARN  &#91;SERVER_MAIN&#93;  (ModelBinder.java:2231) - HHH90000004: embed-xml attributes were intended to be used for DOM4J entity mode. Since that entity mode has been removed, embed-xml attributes are no longer supported and should be removed from mappings.\r\n for every occurrence of a &lt;many-to-one node in a hbm file that does not have embed-xml=\"false\" attribute. While there are other (set, one-to-many,..) that default to embed-xml=\"true\" if they are not there it is not easy to find the reason for this warning in big projects. It would be nice if there could be some more information in the warning where the trigger for this warning is located. Maybe it is possible to display the xml file or entity this warning is related to?","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9882?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-70274","commnet_date":"2015-09-10T07:25:48-0700","commnet_user":"Carsten Hammer","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Carsten Hammern added a comment  - 10\/Sep\/2015 07:25 AM    n        n        Since you applied your changes we get a lot of more warnings that we did not get with 5.0.0.CR1 like described here:\r\nnhttp:\/\/stackoverflow.com\/questions\/32181529\/how-to-get-rid-of-hhh90000003-use-of-dom4j-entity-mode-is-considered-deprecate\r\nnWould it be possible to create a more verbose warning? (Class involved, file with error, whatever..) n    n    n        n            Show  n            n                        n    n    n    n                nn       Carsten Hammern added a comment  - 10\/Sep\/2015 07:25 AM                      Since you applied your changes we get a lot of more warnings that we did not get with 5.0.0.CR1 like described here: n http:\/\/stackoverflow.com\/questions\/32181529\/how-to-get-rid-of-hhh90000003-use-of-dom4j-entity-mode-is-considered-deprecate  nWould it be possible to create a more verbose warning? (Class involved, file with error, whatever..)              n        n    n"},{"commnet_id":"comment-70282","commnet_date":"2015-09-10T15:19:14-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 10\/Sep\/2015 15:19 PM    n        n        If you are still seeing this logging, then I need a test illustrating it.  I have not seen this in our testsuite.  If you can reproduce this using 5.0 (preferably 5.0.1, but 5.0.0 is good) then please open a new Jira with the test attached and mention it here. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 10\/Sep\/2015 15:19 PM                      If you are still seeing this logging, then I need a test illustrating it.  I have not seen this in our testsuite.  If you can reproduce this using 5.0 (preferably 5.0.1, but 5.0.0 is good) then please open a new Jira with the test attached and mention it here.              n        n    n"},{"commnet_id":"comment-70440","commnet_date":"2015-09-22T01:33:24-0700","commnet_user":"Carsten Hammer","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Carsten Hammern added a comment  - 22\/Sep\/2015 01:33 AM    n        n        I opened a new Jira at https:\/\/hibernate.atlassian.net\/browse\/HHH-10115. Thanks! n    n    n        n            Show  n            n                        n    n    n    n                nn       Carsten Hammern added a comment  - 22\/Sep\/2015 01:33 AM                      I opened a new Jira at  https:\/\/hibernate.atlassian.net\/browse\/HHH-10115 . Thanks!              n        n    n"}]}},{"OGM-855":{"info":{"issue_title":"OrientDB Integration","issue_key":"OGM-855","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"Recently I've googled, digged around for good open source graph database. read some forum, stackoverflow. Then I've found OrientDB. Some people recommending it. It looks good. I think If ogm-orientdb module appear. I'll use it.  Some links:\r\n https:\/\/github.com\/orientechnologies\/orientdb\r\n http:\/\/orientdb.com\/orientdb-vs-mongodb\r\n http:\/\/orientdb.com\/orientdb-vs-neo4j","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-855?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-68734","commnet_date":"2015-06-22T06:25:16-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Sanne Grinoveron added a comment  - 22\/Jun\/2015 06:25 AM     - edited  n        n        Hello,\r\nnI agree, OrientDB looks very good and I'd love to have it supported in Hibernate OGM as well.nnBut the core team is small, and the initial priority was to have one NoSQL database for each main \"family\" to verify flexibility of internals; currently our focus needs to be on the OGM core to adjust to all the lessons learned, and we're quite busy with that. Would you like to help us integrating OrientDB? Adding a new database - especially when we already have support for another graph database - should be relatively easy, and I'm happy to give you all needed pointers and help as I can. n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Sanne Grinoveron added a comment  - 22\/Jun\/2015 06:25 AM     - edited                    Hello, nI agree, OrientDB looks very good and I'd love to have it supported in Hibernate OGM as well. nn But the core team is small, and the initial priority was to have one NoSQL database for each main \"family\" to verify flexibility of internals; currently our focus needs to be on the OGM core to adjust to all the lessons learned, and we're quite busy with that. Would you like to help us integrating OrientDB? Adding a new database - especially when we already have support for another graph database - should be relatively easy, and I'm happy to give you all needed pointers and help as I can.              n        n    n"},{"commnet_id":"comment-74944","commnet_date":"2016-01-29T17:37:21-0800","commnet_user":"Oleksandr Vlasenko","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Oleksandr Vlasenkon added a comment  - 29\/Jan\/2016 17:37 PM    n        n        any progress with ogm-orientdb? Do you need help with it ? n    n    n        n            Show  n            n                        n    n    n    n                nn       Oleksandr Vlasenkon added a comment  - 29\/Jan\/2016 17:37 PM                      any progress with ogm-orientdb? Do you need help with it ?              n        n    n"},{"commnet_id":"comment-74953","commnet_date":"2016-02-01T03:17:55-0800","commnet_user":"Davide D&#39;Alto","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Davide D&#39;Alton added a comment  - 01\/Feb\/2016 03:17 AM    n        n        Hello,nn&gt; any progress with ogm-orientdb? nnAt the moment we are not actively working on the OrientDB integration, this is not for lack of interest but for lack of resources.\r\nnI know that there are some contributors that are experimenting with it but it is still in a early prototyping phase (https:\/\/github.com\/schernolyas\/hibernate-ogm\/tree\/orientdb\/orientdb).nn&gt; Do you need help with it ?nnYes, as Sanne Grinovero pointed out, our team is small and there are many features that we want to add\/fix in OGM core and several improvements we would like to make on the existing datastores. If you are willing to contribute to the project and work on the OrientDB support we are willing to help (this is already happened with CouchDB and Redis, for example). n    n    n        n            Show  n            n                        n    n    n    n                nn       Davide D&#39;Alton added a comment  - 01\/Feb\/2016 03:17 AM                      Hello, nn &gt; any progress with ogm-orientdb?  nn At the moment we are not actively working on the OrientDB integration, this is not for lack of interest but for lack of resources. nI know that there are some contributors that are experimenting with it but it is still in a early prototyping phase ( https:\/\/github.com\/schernolyas\/hibernate-ogm\/tree\/orientdb\/orientdb ). nn &gt; Do you need help with it ? nn Yes, as  Sanne Grinovero  pointed out, our team is small and there are many features that we want to add\/fix in OGM core and several improvements we would like to make on the existing datastores. If you are willing to contribute to the project and work on the OrientDB support we are willing to help (this is already happened with CouchDB and Redis, for example).              n        n    n"},{"commnet_id":"comment-74954","commnet_date":"2016-02-01T03:37:32-0800","commnet_user":"Sergey Chernolyas","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Sergey Chernolyasn added a comment  - 01\/Feb\/2016 03:37 AM     - edited  n        n        Hi collegues.nnI am developing Hibernate OGM for OrientDB. Everyone welcome to https:\/\/github.com\/schernolyas\/hibernate-ogm.nnAbout help .... I am new contibutor and I haven't enougth knowledge about Hibernate ORM\/Hinernate OGM.  Heplers welcome   I am developing Hibernate OGM for Java SE environment(Just create one JDBC connection)nnAbout problems with OrientDB.  Unfortunately ....  OrientDB is not ready for Java EE environment.  I sended pull request to OrientDB team ( https:\/\/github.com\/orientechnologies\/orientdb\/pull\/5622 ). I sended instucrions for implement the pull request ....Nothing ... No activity in Orient DB team n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Sergey Chernolyasn added a comment  - 01\/Feb\/2016 03:37 AM     - edited                    Hi collegues. nn I am developing Hibernate OGM for OrientDB. Everyone welcome to  https:\/\/github.com\/schernolyas\/hibernate-ogm . nn About help .... I am new contibutor and I haven't enougth knowledge about Hibernate ORM\/Hinernate OGM.  Heplers welcome    I am developing Hibernate OGM for Java SE environment(Just create one JDBC connection) nn About problems with OrientDB.  Unfortunately ....  OrientDB is not ready for Java EE environment.  I sended pull request to OrientDB team (  https:\/\/github.com\/orientechnologies\/orientdb\/pull\/5622  ). I sended instucrions for implement the pull request ....Nothing ... No activity in Orient DB team              n        n    n"},{"commnet_id":"comment-74971","commnet_date":"2016-02-02T01:30:51-0800","commnet_user":"Davide D&#39;Alto","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Davide D&#39;Alton added a comment  - 02\/Feb\/2016 01:30 AM    n        n        Starting from Sergey Chernolyas work, I've created a branch on my repository with the initial scaffolding to start the development of the OrientDB integration:\r\nnhttps:\/\/github.com\/DavideD\/hibernate-ogm\/tree\/OGM-855-OrientDB\r\nnEverybody willing to help can use it as a starting point and if too shy to send pull request to the Hibernate OGM repository, you can send it to mine nnRunning the whole build might take some time, if you are not interested to the other stores I'd suggest to use the following command:nnrnmvn -pl orientdb -amrnnnnThere are going to be plenty of test failures because it's going to execute all our test suite and the dialect is not ready yet.\r\nnI see if I can create a room related to the issue, otherwise, a nice place to discuss this is the Hibernate OGM room on hipchat: https:\/\/www.hipchat.com\/gXEjW5Wgg n    n    n        n            Show  n            n                        n    n    n    n                nn       Davide D&#39;Alton added a comment  - 02\/Feb\/2016 01:30 AM                      Starting from  Sergey Chernolyas  work, I've created a branch on my repository with the initial scaffolding to start the development of the OrientDB integration: n https:\/\/github.com\/DavideD\/hibernate-ogm\/tree\/OGM-855-OrientDB  nEverybody willing to help can use it as a starting point and if too shy to send pull request to the Hibernate OGM repository, you can send it to mine   nn Running the whole build might take some time, if you are not interested to the other stores I'd suggest to use the following command: n  n rnmvn -pl orientdb -amrn n  nn There are going to be plenty of test failures because it's going to execute all our test suite and the dialect is not ready yet. nI see if I can create a room related to the issue, otherwise, a nice place to discuss this is the Hibernate OGM room on hipchat:  https:\/\/www.hipchat.com\/gXEjW5Wgg               n        n    n"},{"commnet_id":"comment-77971","commnet_date":"2016-05-13T04:59:56-0700","commnet_user":"Sergey Chernolyas","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sergey Chernolyasn added a comment  - 13\/May\/2016 04:59 AM    n        n        Hi!nnThe task is in progress and near a finish. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sergey Chernolyasn added a comment  - 13\/May\/2016 04:59 AM                      Hi! nn The task is in progress and near a finish.              n        n    n"},{"commnet_id":"comment-80735","commnet_date":"2016-07-09T02:56:55-0700","commnet_user":"Zhiqiang Liu","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Zhiqiang Liun added a comment  - 09\/Jul\/2016 02:56 AM     - edited  n        n        Hi guys,nnAny update for OrientDB integration? We are so happy to see the OGM can support OrientDB. BTW, why OGM has no plan to integrate Tinkerpop library so that it can support most of Graph DBs in one-stop?  n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Zhiqiang Liun added a comment  - 09\/Jul\/2016 02:56 AM     - edited                    Hi guys, nn Any update for OrientDB integration? We are so happy to see the OGM can support OrientDB. BTW, why OGM has no plan to integrate Tinkerpop library so that it can support most of Graph DBs in one-stop?               n        n    n"},{"commnet_id":"comment-84821","commnet_date":"2016-10-06T06:11:53-0700","commnet_user":"Sergey Chernolyas","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sergey Chernolyasn added a comment  - 06\/Oct\/2016 06:11 AM    n        n        Dear Zhiqiang Liu !nnIf You really happy to see OGM can support OrientDB ... May be .... Would You get part in testing?\r\nnNow now ... You can get my own version  that marks as release candidate.\r\nnSee https:\/\/github.com\/DavideD\/hibernate-ogm\/pull\/20 n    n    n        n            Show  n            n                        n    n    n    n                nn       Sergey Chernolyasn added a comment  - 06\/Oct\/2016 06:11 AM                      Dear Zhiqiang Liu ! nn If You really happy to see OGM can support OrientDB ... May be .... Would You get part in testing? nNow now ... You can get my own version  that marks as release candidate. nSee  https:\/\/github.com\/DavideD\/hibernate-ogm\/pull\/20               n        n    n"}]}},{"HHH-9877":{"info":{"issue_title":"Support constructor expression mixed with other select expressions","issue_key":"HHH-9877","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"6.0.0.Alpha1","issue_labels":"6.0.0.Alpha1","issue_description":"In Hibernate if a constructor expression is used, it must be the only select expression in the query. \r\n So select new a.b.Foo(p.name, p.city) from Person p is supported, but these are not:  \tselect p.id, new a.b.Foo(p.name, p.city) from Person p \tselect new a.b.Foo(p.name, p.city), new a.b.Bar(p.age) from Person p \tetc    However, these should be supported according to the official JPQL syntax:\r\n {{\r\n select_clause ::= SELECT &#91;DISTINCT&#93;  select_expression  {, select_expression} *\r\n select_expression ::= single_valued_path_expression | aggregate_expression | identification_variable | OBJECT(identification_variable) | constructor_expression\r\n constructor_expression ::= NEW constructor_name ( constructor_item  {, constructor_item} * )\r\n }}\r\n See also https:\/\/hibernate.atlassian.net\/browse\/HHH-3082.  I am working on a Pull Request to support this.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9877?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69962","commnet_date":"2015-08-25T20:32:15-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 25\/Aug\/2015 20:32 PM    n        n        In the existing code, this issue is not so much the query nor the parsing of it.  The issue is org.hibernate.Query#getReturnTypes and the fact that constructor expressions are not expressible as Hibernate types.nnSure you could return null or some other magic value for the constructor expression for its position within the return types array, but that would be a hack like any other magic values.  We could dynamically build a BasicType to represent the constructor expression.nnAnyway, I will address this in the HQL redesign (see n    n                n        n            n            SQM-7n        n                                                    Resolved n             n) but that work will not be integrated into Hibernate ORM, OGM, etc for quite some time.  In that meantime, if you come up with a solution (PR) we can discuss including this prior to that the SQM work being integrated. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 25\/Aug\/2015 20:32 PM                      In the existing code, this issue is not so much the query nor the parsing of it.  The issue is  org.hibernate.Query#getReturnTypes  and the fact that constructor expressions are not expressible as Hibernate types. nn Sure you could return null or some other magic value for the constructor expression for its position within the return types array, but that would be a hack like any other magic values.  We could dynamically build a BasicType to represent the constructor expression. nn Anyway, I will address this in the HQL redesign (see n     n                 n         n             n            SQM-7n         n                                                     Resolved n             n) but that work will not be integrated into Hibernate ORM, OGM, etc for quite some time.  In that meantime, if you come up with a solution (PR) we can discuss including this prior to that the SQM work being integrated.              n        n    n"},{"commnet_id":"comment-69971","commnet_date":"2015-08-26T02:23:20-0700","commnet_user":"Marcus Klimstra","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Marcus Klimstran added a comment  - 26\/Aug\/2015 02:23 AM    n        n        Steve Ebersole, I've been working on this for a while, but until now had only committed the parser change. You can see my current WIP here: https:\/\/github.com\/marcus-nl\/hibernate-orm\/commit\/26314164f1c65792fa9359f7f5f65611306536a4 . I think it's about 80% functional (but you know what they say about the remaining 20%... ).  n    n    n        n            Show  n            n                        n    n    n    n                nn       Marcus Klimstran added a comment  - 26\/Aug\/2015 02:23 AM                       Steve Ebersole , I've been working on this for a while, but until now had only committed the parser change. You can see my current WIP here:  https:\/\/github.com\/marcus-nl\/hibernate-orm\/commit\/26314164f1c65792fa9359f7f5f65611306536a4  . I think it's about 80% functional (but you know what they say about the remaining 20%...  ).               n        n    n"},{"commnet_id":"comment-70154","commnet_date":"2015-09-01T08:11:27-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 01\/Sep\/2015 08:11 AM    n        n        Marcus Klimstra - you might want to shift your focus to the work we are doing to redesign all this.  If you ping me about it on IRC we can chat about it. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 01\/Sep\/2015 08:11 AM                       Marcus Klimstra  - you might want to shift your focus to the work we are doing to redesign all this.  If you ping me about it on IRC we can chat about it.              n        n    n"},{"commnet_id":"comment-88012","commnet_date":"2016-12-24T00:16:42-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 24\/Dec\/2016 00:16 AM    n        n        This is implemented already in wip\/6.0.  The expanded features include:nntability to select multiple dynamic-instantiationsntability to nest dynamic-instantiationsntability to use setter injection of the values into the dynamically instantiated beannnnn n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 24\/Dec\/2016 00:16 AM                      This is implemented already in wip\/6.0.  The expanded features include: n nt ability to select multiple dynamic-instantiations nt ability to nest dynamic-instantiations nt ability to use setter injection of the values into the dynamically instantiated bean n nnn             n        n    n"}]}},{"HHH-9876":{"info":{"issue_title":"Ability to filter objects from Database for schema tooling","issue_key":"HHH-9876","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.0.CR1","issue_component":"5.0.0.CR1","issue_labels":"5.0.0.CR1","issue_description":"Schema tooling (export, update, etc) all start with a Database object and iterate over its catalog\/schema combos and then over tables and sequences within each catalog\/schema.  In pseudo-code:     for  ( Schema schema : database.getSchemas() ) {      for  ( Table table : schema.getTables() ) {          ... do  stuff      }  }     Would be great to be able to apply filtering over this process, e.g.:    for  ( Schema schema : database.getSchemas() ) {      if  ( !filter.include( schema ) ) {          continue ;      }        for  ( Table table : schema.getTables() ) {          if  ( !filter.include( table ) ) {              continue ;          }          ... do  stuff      }  }     or:    for  ( Schema schema : filter.matches( database.getSchemas() ) ) {      for  ( Table table : filter.matches( schema.getTables() ) ) {          ... do  stuff      }  }","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9876?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-68731","commnet_date":"2015-06-22T01:41:58-0700","commnet_user":"Marcus Klimstra","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Marcus Klimstran added a comment  - 22\/Jun\/2015 01:41 AM    n        n        See PR https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/984  n    n    n        n            Show  n            n                        n    n    n    n                nn       Marcus Klimstran added a comment  - 22\/Jun\/2015 01:41 AM                      See PR  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/984                n        n    n"},{"commnet_id":"comment-69049","commnet_date":"2015-07-07T07:41:00-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 07\/Jul\/2015 07:41 AM    n        n        Marcus Klimstra Is it OK to redefine the goals of this Jira as discussed in the PR? n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 07\/Jul\/2015 07:41 AM                       Marcus Klimstra  Is it OK to redefine the goals of this Jira as discussed in the PR?              n        n    n"},{"commnet_id":"comment-69050","commnet_date":"2015-07-07T08:03:47-0700","commnet_user":"Marcus Klimstra","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Marcus Klimstran added a comment  - 07\/Jul\/2015 08:03 AM    n        n        Definitely, please go ahead. n    n    n        n            Show  n            n                        n    n    n    n                nn       Marcus Klimstran added a comment  - 07\/Jul\/2015 08:03 AM                      Definitely, please go ahead.              n        n    n"},{"commnet_id":"comment-69433","commnet_date":"2015-07-25T05:13:37-0700","commnet_user":"Marcus Klimstra","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Marcus Klimstran added a comment  - 25\/Jul\/2015 05:13 AM    n        n        See PR https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1030  n    n    n        n            Show  n            n                        n    n    n    n                nn       Marcus Klimstran added a comment  - 25\/Jul\/2015 05:13 AM                      See PR  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/1030                n        n    n"},{"commnet_id":"comment-69483","commnet_date":"2015-07-28T15:32:44-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 28\/Jul\/2015 15:32 PM    n        n        Marucs, the PR as far as it goes looks ok.  nnFew points:nntI do not like how the filter gets passed in, I'd prefer a setting of some sort.ntWhy just Namespace and Table?  Why not Sequence?  Why not Index?  Why not... ?nn n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 28\/Jul\/2015 15:32 PM                      Marucs, the PR as far as it goes looks ok.   nn Few points: n nt I do not like how the filter gets passed in, I'd prefer a setting of some sort. nt Why just Namespace and Table?  Why not Sequence?  Why not Index?  Why not... ? n n             n        n    n"},{"commnet_id":"comment-69489","commnet_date":"2015-07-29T03:36:42-0700","commnet_user":"Marcus Klimstra","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Marcus Klimstran added a comment  - 29\/Jul\/2015 03:36 AM    n        n        1. Is this what you have in mind: https:\/\/gist.github.com\/marcus-nl\/7ba3d360ad399d07d431 ? (I'd move the \"hibernate.schema.*.filter\" constants to AvailableSettings)\r\nnNote that I used seperate configuration properties for create, drop and migrate, since that is needed for my usecase at least.nn2. Sequence was indeed an oversight. However, my thoughts on index and unique\/foreign keys were that if you create or drop a table, you'd (usually) want to do the same with those associated objects. I can imagine there are cases were that is not the case though. Let me know if you want me to add these filters (in addition to Sequence):\r\nn(a) Index\r\nn(b) UniqueKey\r\nn(c) ForeignKey\r\nn(d) AuxiliaryDatabaseObject (applies to create and drop, not migrate)\r\nn(e) InitCommand (create only) n    n    n        n            Show  n            n                        n    n    n    n                nn       Marcus Klimstran added a comment  - 29\/Jul\/2015 03:36 AM                      1. Is this what you have in mind:  https:\/\/gist.github.com\/marcus-nl\/7ba3d360ad399d07d431  ? (I'd move the \"hibernate.schema.*.filter\" constants to AvailableSettings) nNote that I used seperate configuration properties for create, drop and migrate, since that is needed for my usecase at least. nn 2. Sequence was indeed an oversight. However, my thoughts on index and unique\/foreign keys were that if you create or drop a table, you'd (usually) want to do the same with those associated objects. I can imagine there are cases were that is not the case though. Let me know if you want me to add these filters (in addition to Sequence): n(a) Index n(b) UniqueKey n(c) ForeignKey n(d) AuxiliaryDatabaseObject (applies to create and drop, not migrate) n(e) InitCommand (create only)              n        n    n"},{"commnet_id":"comment-69892","commnet_date":"2015-08-22T05:57:14-0700","commnet_user":"Marcus Klimstra","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Marcus Klimstran added a comment  - 22\/Aug\/2015 05:57 AM    n        n        Steve Ebersole, I've updated the PR with these changes, and used git rebase this time. n    n    n        n            Show  n            n                        n    n    n    n                nn       Marcus Klimstran added a comment  - 22\/Aug\/2015 05:57 AM                       Steve Ebersole , I've updated the PR with these changes, and used git rebase this time.              n        n    n"}]}},{"HHH-9872":{"info":{"issue_title":"Introduce SizeOrder, allowing a Criteria query to be ordered based on a collection size","issue_key":"HHH-9872","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Won&#39;t Fix","issue_fix_version":"None","issue_component":"None","issue_labels":"hibernate-core","issue_description":"It would be simple to introduce a SizeOrder that used the size SQL from SizeExpression in order to allow a Criteria query to be ordered based on the size of a collection","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9872?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-68643","commnet_date":"2015-06-18T09:24:35-0700","commnet_user":"Peter","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Petern added a comment  - 18\/Jun\/2015 09:24 AM    n        n        See https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/981 for an implementation n    n    n        n            Show  n            n                        n    n    n    n                nn       Petern added a comment  - 18\/Jun\/2015 09:24 AM                      See  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/981  for an implementation              n        n    n"},{"commnet_id":"comment-68648","commnet_date":"2015-06-18T13:17:11-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 18\/Jun\/2015 13:17 PM    n        n        It is an interesting improvement, but org.hibernate.Criteria API is considered deprecated and we have no plans to make improvements to it: http:\/\/docs.jboss.org\/hibernate\/orm\/4.3\/devguide\/en-US\/html_single\/#d5e5506 . n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 18\/Jun\/2015 13:17 PM                      It is an interesting improvement, but org.hibernate.Criteria API is considered deprecated and we have no plans to make improvements to it:  http:\/\/docs.jboss.org\/hibernate\/orm\/4.3\/devguide\/en-US\/html_single\/#d5e5506  .              n        n    n"}]}},{"HHH-9869":{"info":{"issue_title":"SizeExpression toString is misleading","issue_key":"HHH-9869","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"5.0.0.CR1","issue_component":"5.0.0.CR1","issue_labels":"5.0.0.CR1","issue_description":"SizeExpression's toString method outputs misleading results.  The toString implementation assumes that the implementation has the computed size on the LHS whereas toSqlString (and accordingly the op that is passed by the Restrictions.sizeXX methods) is implemented with the computed size on the RHS.  This leads to confusing results for users when printing out criterion.toString values, as they appear to be saying roughly the opposite of what they are being asked to do.  As a user I would expect the following test to pass:    assertEquals(\"prop.size&gt;=1\" , Restrictions.sizeGe(\"prop\" , 1).toString());     However it fails with:    org.junit.ComparisonFailure:   Expected :prop.size&gt;=1  Actual   :prop.size&lt;=1     The lowest impact change would be to alter toString to emit the same order as toSqlString, so the following test would pass:    assertEquals(\"1&lt;=prop.size\" , Restrictions.sizeGe(\"prop\" , 1).toString());","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9869?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-68625","commnet_date":"2015-06-18T06:57:05-0700","commnet_user":"Peter","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Petern added a comment  - 18\/Jun\/2015 06:57 AM     - edited  n        n        I have raised a pull request for a fix: https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/980nnAlternatively this could be fixed by modifying SizeExpression to use the operator param consistent with SimpleExpression and flipping the operator passed via Restrictions.sizeXX (however since SizeExpression might be created by users directly this could silently break end user code) n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Petern added a comment  - 18\/Jun\/2015 06:57 AM     - edited                    I have raised a pull request for a fix:  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/980  nn Alternatively this could be fixed by modifying SizeExpression to use the operator param consistent with SimpleExpression and flipping the operator passed via Restrictions.sizeXX (however since SizeExpression might be created by users directly this could silently break end user code)              n        n    n"},{"commnet_id":"comment-69670","commnet_date":"2015-08-04T13:58:49-0700","commnet_user":"Peter","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Petern added a comment  - 04\/Aug\/2015 13:58 PM    n        n        I wouldn't agree this is an improvement - the toString on SizeExpression currently returns an invalid and misleading value. It also seems wise to apply this to 4.x rather than it being delayed until 5.x (since the reason I am submitting this fix is that I wasted a lot of time trying to track down a bug I thought was elsewhere due to the misleading toString on SizeExpression) n    n    n        n            Show  n            n                        n    n    n    n                nn       Petern added a comment  - 04\/Aug\/2015 13:58 PM                      I wouldn't agree this is an improvement - the toString on SizeExpression currently returns an invalid and misleading value. It also seems wise to apply this to 4.x rather than it being delayed until 5.x (since the reason I am submitting this fix is that I wasted a lot of time trying to track down a bug I thought was elsewhere due to the misleading toString on SizeExpression)              n        n    n"},{"commnet_id":"comment-69672","commnet_date":"2015-08-04T14:47:08-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 04\/Aug\/2015 14:47 PM    n        n        Its an improvement.  It is clearly not a bug.nnAs for 4.x, it might get picked up.  Not sure.  I do not maintain those branches.  Gail Badner? n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 04\/Aug\/2015 14:47 PM                      Its an improvement.  It is clearly not a bug. nn As for 4.x, it might get picked up.  Not sure.  I do not maintain those branches.   Gail Badner ?              n        n    n"},{"commnet_id":"comment-69697","commnet_date":"2015-08-05T17:22:08-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 05\/Aug\/2015 17:22 PM    n        n        Reopening to add 4.3.11 as a fix version. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 05\/Aug\/2015 17:22 PM                      Reopening to add 4.3.11 as a fix version.              n        n    n"},{"commnet_id":"comment-69698","commnet_date":"2015-08-05T17:22:32-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 05\/Aug\/2015 17:22 PM    n        n        Fixed in 4.3 branch. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 05\/Aug\/2015 17:22 PM                      Fixed in 4.3 branch.              n        n    n"}]}},{"HBX-1232":{"info":{"issue_title":"Add gradle support","issue_key":"HBX-1232","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"ant","issue_description":"Dear,  While hibernate and spring project has moved to gradle. Hibernate tools do not provide a plugins to be used with gradle. \r\n I develop a little plugin that do this job: https:\/\/github.com\/institut-de-genomique\/hibernatetools-gradle-plugin  It could to be interesting to add to this plugins or a new one some feature as custome template generation.  I am not an expert of ant and his hibernatetools configuration for this tasks.  You are welcome to improve the plugins, fork and merge to the hibernatetools project.  I never found how to to use a custom template: https:\/\/forum.hibernate.org\/viewtopic.php?f=6&amp;t=1039360  Regards","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HBX-1232?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-9867":{"info":{"issue_title":"Consider mentioning the multitenant feature from the manual","issue_key":"HHH-9867","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Out of Date","issue_fix_version":"None","issue_component":"None","issue_labels":"documentation","issue_description":"Today the multitenant feature is only detailed in the dev guide. It might make sense to bridge documentations and reference multitenancy in the manual and pointing to the dev guide for details.  Also in the website, the documentation page points to the latest manual but not the latest dev guide, we might need some rethinking.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9867?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84803","commnet_date":"2016-10-06T02:43:26-0700","commnet_user":"Vlad Mihalcea","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Vlad Mihalcean added a comment  - 06\/Oct\/2016 02:43 AM    n        n        We already did that. Check out the latest User Guide. n    n    n        n            Show  n            n                        n    n    n    n                nn       Vlad Mihalcean added a comment  - 06\/Oct\/2016 02:43 AM                      We already did that. Check out the  latest User Guide .              n        n    n"}]}},{"HSEARCH-1898":{"info":{"issue_title":"Log all properties and their values at startup time","issue_key":"HSEARCH-1898","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.x","issue_labels":"5.x","issue_description":"It would be useful to be able to dump the configuration of Hibernate Search as debug or trace level. In particular when running performance tests and changing properties, one could log the configuration at the beginning of the test.\r\n That can be as simple as dumping SearchConfiguration But dumping also the actual IndexManager config etc and the settings used at their default values might be also useful.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1898?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-68540","commnet_date":"2015-06-15T05:03:24-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 15\/Jun\/2015 05:03 AM    n        n        I would also love to have it give better feedback on which properties are being applied, which defaults, and which properties are being discarded for example because of miss-spelling (see also n    n                n        n            n            HSEARCH-1869n        n                                                    Open n             n, n    n                n        n            n            HSEARCH-1413n        n                                                    Open n             n and https:\/\/github.com\/hibernate\/hibernate-search\/commit\/4483598d0ee0b132f3f5a57b9cbc9ac119edec2c ).nnThe way we apply configuration setting to the IndexWriter though is to not set any explicit value unless the user did specify one. So to log all the defaults values being applied would need some care in that area, to read which defaults are being applied by Lucene (which doesn't always offer a getter).nnAlso while it would be nice to have all components feed such information back to a single structure, so that we could log for example a nice looking table, many components actually could start lazily so we might want to keep this need in mind during n    n                n        n            n            HSEARCH-1214n        n                                                    Open n             n. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 15\/Jun\/2015 05:03 AM                      I would also love to have it give better feedback on which properties are being applied, which defaults, and which properties are being discarded for example because of miss-spelling (see also n     n                 n         n             n            HSEARCH-1869n         n                                                     Open n             n, n     n                 n         n             n            HSEARCH-1413n         n                                                     Open n             n and  https:\/\/github.com\/hibernate\/hibernate-search\/commit\/4483598d0ee0b132f3f5a57b9cbc9ac119edec2c  ). nn The way we apply configuration setting to the  IndexWriter  though is to  not set  any explicit value unless the user did specify one. So to log all the defaults values being applied would need some care in that area, to read which defaults are being applied by Lucene (which doesn't always offer a getter). nn Also while it would be nice to have all components feed such information back to a single structure, so that we could log for example a nice looking table, many components actually could start lazily so we might want to keep this need in mind during n     n                 n         n             n            HSEARCH-1214n         n                                                     Open n             n.              n        n    n"}]}},{"HV-1001":{"info":{"issue_title":"@NotEmpty and @NotBlank definition is not consistent with other constraints","issue_key":"HV-1001","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Minor","issue_affects_version":"Won&#39;t Fix","issue_fix_version":"5.0.0.Final ,                                            4.3.2.Final ,                                            5.1.3.Final","issue_component":"5.0.0.Final ,                                            4.3.2.Final ,                                            5.1.3.Final","issue_labels":"5.0.0.Final","issue_description":"@NotEmpty and @NotBlank constraints are composed with @NotNull. This doesn't adhere to the apparent convention followed by the remaining standard constraints.   In practical terms, this forces possibly unwanted mandatory for annotated elements. At the very least there should be an out-of-the-box version of these constraints that is not composed with @NotNull.  Quotes from the current source code:     @NotNull  @Size(min = 1)  public  @interface  NotEmpty {  ...  }        @NotNull  public  @interface  NotBlank {  ...  }","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1001?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-68485","commnet_date":"2015-06-12T07:39:19-0700","commnet_user":"Hardy Ferentschik","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Hardy Ferentschikn added a comment  - 12\/Jun\/2015 07:39 AM     - edited  n        n        I don't see how the existing constraints can be changed. The Bean Validation specification only recommends that null values should be considered and of course only where it makes sense. The intention of @NotBlank and @NotEmpty is to consider null not valid (also historically these constraints were taken over from Hibernate Validator 3 and pre Bean Validation). The javadocs are also clear on this:nnNotBlank:nnValidate that the annotated string is not {@code null} or empty. The difference to {@code NotEmpty} is that trailing whitespaces are getting ignored.nnNotEmpty:nnAsserts that the annotated string, collection, map or array is not {@code null} or empty.nnThat all said, there would be two options:nntCreate new constraints which consider null as valid. TBH, I am not sure how to name these constraintsntAdd a flag to the existing constraints determining the behavior regarding null values. Per default the existing behavior would apply.nnnnAlso, on second thought, there is also the Bean Validation constraint @Size which could be used if null is supposed to be treated as valid. nnOverall I am not sure whether anything should be done here.n n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Hardy Ferentschikn added a comment  - 12\/Jun\/2015 07:39 AM     - edited                    I don't see how the existing constraints can be changed. The Bean Validation specification only recommends that  null  values should be considered and of course only where it makes sense. The intention of  @NotBlank  and  @NotEmpty  is to consider  null  not valid (also historically these constraints were taken over from Hibernate Validator 3 and pre Bean Validation). The javadocs are also clear on this: nn  NotBlank : n n Validate that the annotated string is not {@code null} or empty. The difference to {@code NotEmpty} is that trailing whitespaces are getting ignored.  nn  NotEmpty : n n Asserts that the annotated string, collection, map or array is not {@code null} or empty.  nn That all said, there would be two options: n nt Create new constraints which consider  null  as valid. TBH, I am not sure how to name these constraints nt Add a flag to the existing constraints determining the behavior regarding  null  values. Per default the existing behavior would apply. n nnn Also, on second thought, there is also the Bean Validation constraint  @Size  which could be used if  null  is supposed to be treated as valid.  nn Overall I am not sure whether anything should be done here. n             n        n    n"},{"commnet_id":"comment-84082","commnet_date":"2016-09-15T00:33:39-0700","commnet_user":"Marko Bekhta","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Marko Bekhtan added a comment  - 15\/Sep\/2016 00:33 AM    n        n        Hi, here's a pull request for it - request n    n    n        n            Show  n            n                        n    n    n    n                nn       Marko Bekhtan added a comment  - 15\/Sep\/2016 00:33 AM                      Hi, here's a pull request for it -  request               n        n    n"},{"commnet_id":"comment-84101","commnet_date":"2016-09-15T23:32:11-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 15\/Sep\/2016 23:32 PM    n        n        Going to close this as \"Won't Fix\" as the current behavior seems sensible. These constraints really are specializations of @NotNull, hence it makes sense to have the deviation from the common recommendation for them. Note that the constraints may be added to BV 2.0, in which case their exact semantics may be revisited again. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 15\/Sep\/2016 23:32 PM                      Going to close this as \"Won't Fix\" as the current behavior seems sensible. These constraints really are specializations of  @NotNull , hence it makes sense to have the deviation from the common recommendation for them. Note that the constraints may be added to BV 2.0, in which case their exact semantics may be revisited again.              n        n    n"}]}},{"HV-1000":{"info":{"issue_title":"Support other object models than JavaBeans","issue_key":"HV-1000","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"engine","issue_description":"Similar to the \"free-form\" idea for HSEARCH, it'd be nice if HV could support validation of object models other than JavaBeans, e.g. dynamic beans represented by map-like structures.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-1000?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-68421","commnet_date":"2015-06-09T06:36:44-0700","commnet_user":"Hardy Ferentschik","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Hardy Ferentschikn added a comment  - 09\/Jun\/2015 06:36 AM    n        n        You created issue 1000, you won a dish-washer  n    n    n        n            Show  n            n                        n    n    n    n                nn       Hardy Ferentschikn added a comment  - 09\/Jun\/2015 06:36 AM                      You created issue 1000, you won a dish-washer                n        n    n"},{"commnet_id":"comment-68423","commnet_date":"2015-06-09T06:53:55-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 09\/Jun\/2015 06:53 AM    n        n        Jippie  n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 09\/Jun\/2015 06:53 AM                      Jippie                n        n    n"}]}},{"HV-999":{"info":{"issue_title":"Update to Bean Validation TCK 1.1.4","issue_key":"HV-999","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.0.Final","issue_labels":"5.2.0.Final","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-999?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-68653","commnet_date":"2015-06-19T00:14:39-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 19\/Jun\/2015 00:14 AM    n        n        PR https:\/\/github.com\/hibernate\/hibernate-validator\/pull\/419 n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 19\/Jun\/2015 00:14 AM                      PR  https:\/\/github.com\/hibernate\/hibernate-validator\/pull\/419               n        n    n"}]}},{"HHH-9857":{"info":{"issue_title":"Reuse of EntityEntry for bytecode enhanced read-only reference cached entities","issue_key":"HHH-9857","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.0.CR1","issue_component":"5.0.0.CR1","issue_labels":"5.0.0.CR1","issue_description":"For bytecode enhanced reference cached read-only entities, a EntityEntry object is referenced  by the enhanced referenced cached in the 2lc. In the case where the entity is Immutable the state of EntityEntry should be immutable after the entity has been loaded.   At present, a new EntityEntry is instantiated every time the entity is added to a PeristenceContext.  Is it possible to share the EntityEntry between sessions if we know that the entity is immutable?   In our use case, EntityEntry is the No. 1 object in terms of amount of Memory allocated, and by reusing the EntityEntry we could potentially reduce the Heap Allocation rate by ~50% for this object","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9857?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-68405","commnet_date":"2015-06-09T04:56:17-0700","commnet_user":"John O&#39;Hara","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       John O&#39;Haran added a comment  - 09\/Jun\/2015 04:56 AM    n        n        PR: https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/978 n    n    n        n            Show  n            n                        n    n    n    n                nn       John O&#39;Haran added a comment  - 09\/Jun\/2015 04:56 AM                      PR:  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/978               n        n    n"},{"commnet_id":"comment-73513","commnet_date":"2015-11-13T07:07:57-0800","commnet_user":"John O&#39;Hara","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       John O&#39;Haran added a comment  - 13\/Nov\/2015 07:07 AM    n        n        Reopening issue to resolve performance degradation introduced with previous changes n    n    n        n            Show  n            n                        n    n    n    n                nn       John O&#39;Haran added a comment  - 13\/Nov\/2015 07:07 AM                      Reopening issue to resolve performance degradation introduced with previous changes              n        n    n"}]}},{"HHH-9855":{"info":{"issue_title":"Ignore non-entity classes listed as &quot;managed classes&quot; in persistence.xml","issue_key":"HHH-9855","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.0.CR1","issue_component":"5.0.0.CR1","issue_labels":"5.0.0.CR1","issue_description":"JPA says that entity hierarchies can contain a mix of Entity, MappedSuperclass and non-Entity classes.  Apparently there are some providers that interpret that as meaning that these non-Entity classes should\/can be listed as managed classes even though they technically are not managed classes.  For cleaner portability with these other providers allow for this, and simply ignore them.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9855?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-852":{"info":{"issue_title":"Support projection of embedded associations with LEFT JOIN in MongoDB","issue_key":"OGM-852","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"mongodb,                                            query","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-852?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-851":{"info":{"issue_title":"Support projection of embedded associations with LEFT JOIN  in Neo4j","issue_key":"OGM-851","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"neo4j,                                            query","issue_description":"At the moment we only support INNER JOIN but for Neo4j it is possible to execute left join as well.  The renderer already keep track of left join or inner join via   AliasResolver.createAliasForEmbedded(...)   but we need a way to figure out if we are dealing with an INNER or LEFT join. Check   Neo4jQueryRendererDelegate#defineSelectForEmbeddedProperty   for more the details.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-851?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-850":{"info":{"issue_title":"Support projections of embedded collection properties for backend using Hibernate Search","issue_key":"OGM-850","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"query","issue_description":"This works now for Neo4j and MongoDB but not for backend using Hibernate Search\r\n see    QueriesWithEmbeddedCollectionTest.java","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-850?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-9848":{"info":{"issue_title":"Allow disabling auto-quoting of database object names (tables, columns, etc)","issue_key":"HHH-9848","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.CR2","issue_labels":"5.0.0.CR2","issue_description":"Currently the set of keywords reported by each Dialect for auto-quoting is too broad.  As a result Hibernate will often try to auto-quote words it does not have to, mainly because they are ANSI SQL:2003 reserved words.  This can be problematic against already-existing databases where the word we quote is used as an unquoted name.  So allow an easy way to disable auto-quoting via property and MetadataBuilder option.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9848?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-68386","commnet_date":"2015-06-05T12:05:11-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 05\/Jun\/2015 12:05 PM    n        n        Gail Badner This one is done n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 05\/Jun\/2015 12:05 PM                       Gail Badner  This one is done              n        n    n"}]}},{"HHH-9846":{"info":{"issue_title":"Let EntityManager unwrap java.sql.Connection","issue_key":"HHH-9846","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"5.0.0.CR1","issue_component":"5.0.0.CR1","issue_labels":"5.0.0.CR1","issue_description":"Why doesn't the Hibernate Entitymanager let users unwrap the underlying javax.sql.Connection?  I've checked with EclipseLink and OpenJPA and both allow:  em.unwrap(Connection.class);  Only Hibernate forces users to do stuff like this, which is obviously quite hacky:  ( (SessionImpl) ( (org.hibernate.jpa.internal.EntityManagerImpl) em ).getSession() ).connection();","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9846?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-68457","commnet_date":"2015-06-10T08:49:30-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 10\/Jun\/2015 08:49 AM    n        n        Considering the spec does not require this, hard for it to be a bug.nnWe should discuss this on the hibernate-dev mailing list too.  Reason being that in general we are slowly removing access to the underlying JDBC Connection.  There are lots of reasons for this. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 10\/Jun\/2015 08:49 AM                      Considering the spec does not require this, hard for it to be a bug. nn We should discuss this on the hibernate-dev mailing list too.  Reason being that in general we are slowly removing access to the underlying JDBC Connection.  There are lots of reasons for this.              n        n    n"}]}},{"HSEARCH-1892":{"info":{"issue_title":"Expose indexing queue length and other backend performance metrics","issue_key":"HSEARCH-1892","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.x","issue_labels":"5.x","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1892?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-68393","commnet_date":"2015-06-08T08:10:35-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 08\/Jun\/2015 08:10 AM    n        n        ntThe current size of the queue which happens to be capped by hibernate.search.max_queue_length.ntIdeally the throughput of the queue which happens to be capped by hibernate.search.max_queue_length. The throughput would be defined in messages\/s.nn n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 08\/Jun\/2015 08:10 AM                      nt The current size of the queue which happens to be capped by hibernate.search.max_queue_length. nt Ideally the throughput of the queue which happens to be capped by hibernate.search.max_queue_length. The throughput would be defined in messages\/s. n n             n        n    n"},{"commnet_id":"comment-68394","commnet_date":"2015-06-08T08:11:21-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 08\/Jun\/2015 08:11 AM    n        n        ntthe mean time between lucene flushes to measure the io delay.nn n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 08\/Jun\/2015 08:11 AM                      nt the mean time between lucene flushes to measure the io delay. n n             n        n    n"}]}},{"HSEARCH-1891":{"info":{"issue_title":"Span transaction per id list in batch indexing engine","issue_key":"HSEARCH-1891","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.4.0.CR1","issue_labels":"5.4.0.CR1","issue_description":"Currently all id lists passed to IdentifierConsumerDocumentProducer are processed in a single transaction, it should be one transaction per id list instead.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1891?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-1890":{"info":{"issue_title":"Consider removal of Properties type on integration SPIs for configuration","issue_key":"HSEARCH-1890","issue_type":"Remove Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6","issue_labels":"6","issue_description":"See also org.hibernate.search.cfg.impl.SearchConfigurationFromHibernateCore#legacyConfigurationProperties and consider removal or improvement options.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1890?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-9843":{"info":{"issue_title":"Use optimized cache key implementation in Infinispan 2LC","issue_key":"HHH-9843","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.CR2","issue_labels":"5.0.0.CR2","issue_description":"Infinispan creates separate cache for each entity hierarchy (set of classes with the same type). If the hierarchy contains single type (model is not polymorphic), simplified implementation of cache key can be used.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9843?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69038","commnet_date":"2015-07-06T09:52:18-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 06\/Jul\/2015 09:52 AM    n        n        Applied the PR n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 06\/Jul\/2015 09:52 AM                      Applied the PR              n        n    n"},{"commnet_id":"comment-83532","commnet_date":"2016-09-02T08:04:58-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 02\/Sep\/2016 08:04 AM    n        n        Unfortunately the \"If the hierarchy contains single type\" part was not done properly and can lead to n    n                n        n            n            HHH-11083n        n                                                    Closed n             n n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 02\/Sep\/2016 08:04 AM                      Unfortunately the \"If the hierarchy contains single type\" part was not done properly and can lead to n     n                 n         n             n            HHH-11083n         n                                                     Closed n             n              n        n    n"}]}},{"HSEARCH-1889":{"info":{"issue_title":"Facet Transformer","issue_key":"HSEARCH-1889","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"engine","issue_description":"I've been reviewing the new facet engine documentation and as something to consider I was thinking of FacetResultTransformers.   Let's say we have a facet called \"color\". It can be red, green or blue. But because we're in an international context, we store a colorId. So, that we can apply a translated label to the color when displayed to the end user.  In terms of a Facet Result, you would get these ids back. As a next step you will then loop over the result and take each id and get the appropriate translation. Perhaps this could be a candidate for a ResultTransformer at FacetManager level.  In terms of Facet interface, you could consider a getLabel() method. Which would return the value by default but could return a label created through a result transformer.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1889?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-68362","commnet_date":"2015-06-03T00:05:57-0700","commnet_user":"Hardy Ferentschik","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Hardy Ferentschikn added a comment  - 03\/Jun\/2015 00:05 AM    n        n        +1 Something to map facet values to a label sounds like a good idea. n    n    n        n            Show  n            n                        n    n    n    n                nn       Hardy Ferentschikn added a comment  - 03\/Jun\/2015 00:05 AM                      +1 Something to map facet values to a label sounds like a good idea.              n        n    n"}]}},{"HSEARCH-1888":{"info":{"issue_title":"Consider if we should flush the indexing queue aggressively in presence of a transactional backend","issue_key":"HSEARCH-1888","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"backend,                                            engine","issue_description":"In a brainstorming session we ended up discussing the case in which you would aggressively use FullTextSession#flushToIndexes(), in combination with a JMS backend which was configured to only send messages on commit of a global transaction.  The flushToIndexes() javadoc don't currently clarify this strictly, but I've always assumed that the name would suggest it to flush to the index - and it should be generally understood that an index is not transactional.  So I think the idea has merits as it's nice to save memory and delegate the indexing work to the messaging queue early on, but we should:  \tavoid twisting the meaning of the flushToIndexes() method \tmaintain consistency across backends (others are unable to run transactions)    So rather than having users apply this interesting trick which depends on various configuration factors, it would be interesting to explore if we should auto-flush index operations more aggressively on capable backends.\r\n One could also avoid issuing warnings on auto-flush events.  (This is all assuming the backend works in the same thread of the application, or is able to look up the right transaction in some other way as we're not guaranteeing this today. We don't have any transactions-ready backend currently available OOB either, so I'm really assuming that would be implemented first.)","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1888?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-1887":{"info":{"issue_title":"Offer ability to filter out @IndexedElement instances based on their state","issue_key":"HSEARCH-1887","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"engine","issue_description":"Let's assume the following domain model     @Indexed  class User {    ...    public  boolean  deleted;      @IndexedEmbedded    public  Set&lt;Address&gt; addresses;  }      class Address {    ...    public  boolean  deleted;    }     If User.deleted = false and user.getAddresses().iterator().next().deleted=true  it is currently not possible to index the User and ignore some of the nested addresses based on the address object state.  This would require a new interceptor method (maybe on EntityIndexingInterceptor) that would be called from within DocumentBuilderIndexedEntity when we are about to traverse associations and containers (collections etc).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1887?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-9841":{"info":{"issue_title":"Redesign org.hibernate.property.PropertyAccessorFactory","issue_key":"HHH-9841","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.CR2","issue_labels":"5.0.0.CR2","issue_description":"Specifically:  \tMaking access non-static \tHooking in new class loading \tAPI improvements","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9841?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-9840":{"info":{"issue_title":"Allow custom key implementations for 2nd level cache regions","issue_key":"HHH-9840","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.CR2","issue_labels":"5.0.0.CR2","issue_description":"I would like to allow second level cache providers the option to use custom key implementations.  The current default key implementation is very generic and is quite a large object to allocate in large quantities at runtime.\r\n In some extreme cases, for example when the hit ratio is very low, this was making the efficiency penalty vs its benefits tradeoff questionable.  Depending on configuration settings there might be opportunities to use simpler key implementations, for example when multi-tenancy is not being used to avoid the tenant identifier, or when a cache instance is entirely dedicated to a single type to use the primary id only, skipping the role or entity name.  Even with multiple types sharing the same cache, their identifiers could be of the same org.hibernate.type.Type; in this case the cache container could use a single Type reference to implement a custom equality function without having to look up the Type on each equality check: that's a small optimisation but the equality function is invoked extremely frequently in many practical configurations.  Another reason is to make it more convenient to implement custom serialization protocols when the implementation supports clustering.  It might open the doors to more complex improvements, like                                                          HHH-9780                                                              Closed                .","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9840?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-68378","commnet_date":"2015-06-04T03:20:07-0700","commnet_user":"Radim Vansa","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Radim Vansan added a comment  - 04\/Jun\/2015 03:20 AM     - edited  n        n        How do you expect the container to store the Type? I think that not storing the type would be very useful, but I miss how could the key retrieve the type after deserialization.nnAlso, I am pondering wheter the 4-8 byte loss in memory allocation (depending on compressed oops and alignment) and 1 byte on network is worth the code bloat with expanded class hierarchy for each field. Therefore it would make sense to omit just filling in the entityOrRoleName, but leaving the field in its place - keeping single class for that. n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Radim Vansan added a comment  - 04\/Jun\/2015 03:20 AM     - edited                    How do you expect the container to store the Type? I think that not storing the type would be very useful, but I miss how could the key retrieve the type after deserialization. nn Also, I am pondering wheter the 4-8 byte loss in memory allocation (depending on compressed oops and alignment) and 1 byte on network is worth the code bloat with expanded class hierarchy for each field. Therefore it would make sense to omit just filling in the  entityOrRoleName , but leaving the field in its place - keeping single class for that.              n        n    n"},{"commnet_id":"comment-68389","commnet_date":"2015-06-07T04:35:09-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 07\/Jun\/2015 04:35 AM    n        n        Changing the JIRA description as in brainstorming on github reviews we decided to not force typesafety for the keys. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 07\/Jun\/2015 04:35 AM                      Changing the JIRA description as in brainstorming on github reviews we decided to not force typesafety for the keys.              n        n    n"}]}},{"HHH-9839":{"info":{"issue_title":"The hibernate-infinispan cache module should use a JBoss Logger interface to allow internationalization of error messages","issue_key":"HHH-9839","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0","issue_labels":"5.1.0","issue_description":"I just noticed that the hibernate-infinispan module compiles even without the jboss-logger annotations.\r\n The reason appears to be that it never uses the recommended approach to generate internationalizable error messages.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9839?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-1884":{"info":{"issue_title":"Upgrade to Hibernate ORM 4.3.10.Final","issue_key":"HSEARCH-1884","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.3.0.CR1","issue_labels":"5.3.0.CR1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1884?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-1883":{"info":{"issue_title":"Allow an optional dependency of the JBoss Modules to Apache Tika","issue_key":"HSEARCH-1883","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.3.0.CR1","issue_labels":"5.3.0.CR1","issue_description":"The TikaBridge functionality depends on Apache Tika, which since it's an optional feature with lots of dependencies we don't include in the modules.  Not having this dependency forces consumers of the modules to export the Tika dependencies, while it would be nicer to have an explicit but optional import.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1883?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-1882":{"info":{"issue_title":"Log Hibernate Search queries in a specific category","issue_key":"HSEARCH-1882","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.4.0.CR1","issue_labels":"5.4.0.CR1","issue_description":"Something similar to show_sql but in the logs (not System.out).\r\n Also an option to output the explain might be useful?         emmanuel \u2561 can I log the queries executed by HSearch?   sannegrinovero \u2561 emmanuel: the full-text ones, or \"highlight\"  the ones run via ORM?         emmanuel \u2561 ft ones                \u2937 \u2561 but both I guess :)   sannegrinovero \u2561 emmanuel: seems like our FtQuery implements  a \"proper\"  toString                \u2937 \u2561 but that doesn't get you much more than loggin a toString() on the Lucene Query before passing it to HS         emmanuel \u2561 ok, but I need to log it as a user app developper                \u2937 \u2561 can't just set a log category                \u2937 \u2561 that might be useful   sannegrinovero \u2561 emmanuel: as an app developer I'd log them myself.. what would you want on top of that?         emmanuel \u2561 like Hibernate ORM show_sql thing   sannegrinovero \u2561 emmanuel: ok we can add that, but in case  of ORM it's a mystery what kind of queries (and when) they are run.. here you have a 1:1 execution with the user app's code requests.                \u2937 \u2561 +1 to add it though, it's an easy convenience.                \u2937 \u2561 (just saying that I doubt this  could be seen as a problematic limitation in practice)","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1882?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-849":{"info":{"issue_title":"Queries using embedded id properties don&#39;t work with providers using Hibernate Search ","issue_key":"OGM-849","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"query","issue_description":"Example:    SELECT n.newsId.title FROM News n WHERE n.newsId.title = 'Hibernate OGM 101'    where newsId is an embedded identifier.  See CompositeIdQueriesTest for more examples.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-849?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-1881":{"info":{"issue_title":"Queries using embedded id properties don&#39;t work with providers using Hibernate Search ","issue_key":"HSEARCH-1881","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Rejected","issue_fix_version":"None","issue_component":"None","issue_labels":"query","issue_description":"Example:    SELECT n.newsId.title FROM News n WHERE n.newsId.title = 'Hibernate OGM 101'    where newsId is an embedded identifier.  See CompositeIdQueriesTest for more examples.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1881?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-68334","commnet_date":"2015-06-01T05:07:49-0700","commnet_user":"Davide D&#39;Alto","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Davide D&#39;Alton added a comment  - 01\/Jun\/2015 05:07 AM    n        n        This is an issue for OGM, sorry n    n    n        n            Show  n            n                        n    n    n    n                nn       Davide D&#39;Alton added a comment  - 01\/Jun\/2015 05:07 AM                      This is an issue for OGM, sorry              n        n    n"},{"commnet_id":"comment-68336","commnet_date":"2015-06-01T05:12:04-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 01\/Jun\/2015 05:12 AM    n        n        You can move issues between projects, no need to reject and reopen. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 01\/Jun\/2015 05:12 AM                      You can move issues between projects, no need to reject and reopen.              n        n    n"},{"commnet_id":"comment-68337","commnet_date":"2015-06-01T05:15:23-0700","commnet_user":"Davide D&#39;Alto","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Davide D&#39;Alton added a comment  - 01\/Jun\/2015 05:15 AM    n        n        I could not find a way to do it. n    n    n        n            Show  n            n                        n    n    n    n                nn       Davide D&#39;Alton added a comment  - 01\/Jun\/2015 05:15 AM                      I could not find a way to do it.              n        n    n"},{"commnet_id":"comment-68338","commnet_date":"2015-06-01T05:15:58-0700","commnet_user":"Davide D&#39;Alto","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Davide D&#39;Alton added a comment  - 01\/Jun\/2015 05:15 AM    n        n        Is there a way to delete this issue? n    n    n        n            Show  n            n                        n    n    n    n                nn       Davide D&#39;Alton added a comment  - 01\/Jun\/2015 05:15 AM                      Is there a way to delete this issue?              n        n    n"}]}},{"HHH-9836":{"info":{"issue_title":"enhance extensibility of MultipleHiLoPerTableGenerator","issue_key":"HHH-9836","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Rejected","issue_fix_version":"4.3.10 ,                                            5.0.0.CR1","issue_component":"4.3.10 ,                                            5.0.0.CR1","issue_labels":"4.3.10","issue_description":"maxLo, hiloOptimizer, returnClass and keySize should be protected to allow access in custom implementations.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9836?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-68335","commnet_date":"2015-06-01T05:11:54-0700","commnet_user":"Dennis Kieselhorst","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Dennis Kieselhorstn added a comment  - 01\/Jun\/2015 05:11 AM    n        n        Pull request created: https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/973 n    n    n        n            Show  n            n                        n    n    n    n                nn       Dennis Kieselhorstn added a comment  - 01\/Jun\/2015 05:11 AM                      Pull request created:  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/973               n        n    n"},{"commnet_id":"comment-69954","commnet_date":"2015-08-25T11:53:02-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 25\/Aug\/2015 11:53 AM    n        n        MultipleHiLoPerTableGenerator is deprecated as of 5.0, so it would not be appropriate to apply this there.  nnGail Badner Any desire for this on any 4.x branches? n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 25\/Aug\/2015 11:53 AM                      MultipleHiLoPerTableGenerator is deprecated as of 5.0, so it would not be appropriate to apply this there.   nn  Gail Badner  Any desire for this on any 4.x branches?              n        n    n"},{"commnet_id":"comment-69959","commnet_date":"2015-08-25T13:06:28-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 25\/Aug\/2015 13:06 PM    n        n        MultipleHiLoPerTableGenerator is deprecated in 5.0. Also, now that 5.0.0.Final is out, we are no longer making improvements to 4.3. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 25\/Aug\/2015 13:06 PM                      MultipleHiLoPerTableGenerator is deprecated in 5.0. Also, now that 5.0.0.Final is out, we are no longer making improvements to 4.3.              n        n    n"}]}},{"HSEARCH-1879":{"info":{"issue_title":"Entity with @EmbeddedId should not require a @FieldBridge","issue_key":"HSEARCH-1879","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6","issue_labels":"6","issue_description":"An entity with an  @EmbeddedId requires a @FieldBridge but we should be able to provide a default indexing for this scenario.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1879?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-68332","commnet_date":"2015-06-01T04:44:34-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Sanne Grinoveron added a comment  - 01\/Jun\/2015 04:44 AM     - edited  n        n        I assume you mean that it shouldn't require an explicit @FieldBridge annotation right? All types always require a FieldBridge to be associated, although often we automatically assign a good default. n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Sanne Grinoveron added a comment  - 01\/Jun\/2015 04:44 AM     - edited                    I assume you mean that it shouldn't require an  explicit   @FieldBridge  annotation right? All types always require a  FieldBridge  to be associated, although often we automatically assign a good default.              n        n    n"},{"commnet_id":"comment-68333","commnet_date":"2015-06-01T04:53:04-0700","commnet_user":"Davide D&#39;Alto","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Davide D&#39;Alton added a comment  - 01\/Jun\/2015 04:53 AM    n        n        Yes, that's what I mean.nnIf I'm not wrong, at the moment, we don't need to explicitly use @FieldBridge for embedded properties, but we need to use it explicitly for embedded identifier.\r\nnIt would be nice to have the same behaviour in both cases. n    n    n        n            Show  n            n                        n    n    n    n                nn       Davide D&#39;Alton added a comment  - 01\/Jun\/2015 04:53 AM                      Yes, that's what I mean. nn If I'm not wrong, at the moment, we don't need to explicitly use @FieldBridge for embedded properties, but we need to use it explicitly for embedded identifier. nIt would be nice to have the same behaviour in both cases.              n        n    n"},{"commnet_id":"comment-68339","commnet_date":"2015-06-01T05:16:18-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 01\/Jun\/2015 05:16 AM    n        n        An ID requires a TwoWayFieldBridge so that's a bit more complex; we also require to know if updates\/deletes need a single Term or a Query to target to identify a Lucene Document.nnThis is not a simple change, and I'd rather do it after the free form refactoring as it expects a similar structure. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 01\/Jun\/2015 05:16 AM                      An ID requires a  TwoWayFieldBridge  so that's a bit more complex; we also require to know if updates\/deletes need a single Term or a Query to target to identify a Lucene Document. nn This is not a simple change, and I'd rather do it after the free form refactoring as it expects a similar structure.              n        n    n"},{"commnet_id":"comment-68340","commnet_date":"2015-06-01T05:22:01-0700","commnet_user":"Davide D&#39;Alto","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Davide D&#39;Alton added a comment  - 01\/Jun\/2015 05:22 AM    n        n        &gt; This is not a simple change, and I'd rather do it after the free form refactoring as it expects a similar structure.nnThat's ok, I just wanted to keep track of it. I'm pretty sure it's not the first time I'm surprised by the current behaviour  n    n    n        n            Show  n            n                        n    n    n    n                nn       Davide D&#39;Alton added a comment  - 01\/Jun\/2015 05:22 AM                      &gt; This is not a simple change, and I'd rather do it after the free form refactoring as it expects a similar structure. nn That's ok, I just wanted to keep track of it. I'm pretty sure it's not the first time I'm surprised by the current behaviour                n        n    n"}]}},{"HHH-9835":{"info":{"issue_title":"hibernate and h2 database UUID validation error","issue_key":"HHH-9835","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"5.1.0","issue_component":"5.1.0","issue_labels":"5.1.0","issue_description":"Wrong column type in tablename for column label_id. Found: varbinary, expected: binary(16)  I have specified a UUID field as an @Id column with \r\n @Column(name = \"label_id\", nullable = false, columnDefinition = \"binary(16)\" )  The table is created properly with a binary(16) but when validating it seems varbinary is returned. Which causes the message to popup.  H2 uses varbinary for everything. Even when binary(16) is specified during creation of table the meta data request on the column returns varbinary.  The workaround  I used to get it working was creating a new H2Dialect class extending org.hibernate.dialect.H2Dialect  In the constructor of the new H2Dialect overrule:\r\n registerColumnType( Types.BINARY, \"varbinary\" );  This is the workaround for me.   TRACE:\r\n Caused by: org.hibernate.HibernateException: Wrong column type in TEST3590876896783704391.DB.PUBLIC.PRODUCT_LABEL_PRICE_HIST for column label_id. Found: varbinary, expected: binary(16)\r\n \tat org.hibernate.mapping.Table.validateColumns(Table.java:373) ~&#91;hibernate-core-4.3.10.Final.jar:4.3.10.Final&#93; \r\n \tat org.hibernate.cfg.Configuration.validateSchema(Configuration.java:1338) ~&#91;hibernate-core-4.3.10.Final.jar:4.3.10.Final&#93; \r\n \tat org.hibernate.tool.hbm2ddl.SchemaValidator.validate(SchemaValidator.java:175) ~&#91;hibernate-core-4.3.10.Final.jar:4.3.10.Final&#93; \r\n \tat org.hibernate.internal.SessionFactoryImpl.&lt;init&gt;(SessionFactoryImpl.java:525) ~&#91;hibernate-core-4.3.10.Final.jar:4.3.10.Final&#93; \r\n \tat org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1859) ~&#91;hibernate-core-4.3.10.Final.jar:4.3.10.Final&#93; \r\n \tat org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl$4.perform(EntityManagerFactoryBuilderImpl.java:857) ~&#91;hibernate-entitymanager-4.3.10.Final.jar:4.3.10.Final&#93; \r\n \tat org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl$4.perform(EntityManagerFactoryBuilderImpl.java:850) ~&#91;hibernate-entitymanager-4.3.10.Final.jar:4.3.10.Final&#93; \r\n \tat org.hibernate.boot.registry.classloading.internal.ClassLoaderServiceImpl.withTccl(ClassLoaderServiceImpl.java:425) ~&#91;hibernate-core-4.3.10.Final.jar:4.3.10.Final&#93; \r\n \tat org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:849) ~&#91;hibernate-entitymanager-4.3.10.Final.jar:4.3.10.Final&#93;","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9835?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-71982","commnet_date":"2015-10-27T12:17:01-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 27\/Oct\/2015 12:17 PM    n        n        This bug report does not indicate that the reported issue affects version 5.x. Versions prior to 5.x are no longer maintained. It would be a great help to the Hibernate team and community for someone to verify that the reported issue still affects version 5.x. If so, please add the 5.x version that you verified with to the list of affected-versions and attach the (preferably SSCCE) test case you used to do the verification to the report; from there the issues will be looked at during our triage meetings.nnFor details, see http:\/\/in.relation.to\/2015\/10\/27\/great-jira-cleanup-2015\/ n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 27\/Oct\/2015 12:17 PM                      This bug report does not indicate that the reported issue affects version 5.x. Versions prior to 5.x are no longer maintained. It would be a great help to the Hibernate team and community for someone to verify that the reported issue still affects version 5.x. If so, please add the 5.x version that you verified with to the list of affected-versions and attach the (preferably SSCCE) test case you used to do the verification to the report; from there the issues will be looked at during our triage meetings. nn For details, see  http:\/\/in.relation.to\/2015\/10\/27\/great-jira-cleanup-2015\/               n        n    n"},{"commnet_id":"comment-72120","commnet_date":"2015-10-27T20:24:32-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 27\/Oct\/2015 20:24 PM    n        n        As part of verifying that this issue affects 5.0, please just set the \"Affects version\". Leave the \"verify-affects-5.0\" label and leave the issue in \"Awaiting Response\" status; these are critical for us to be able to track these verifications and triage them. Thanks. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 27\/Oct\/2015 20:24 PM                      As part of verifying that this issue affects 5.0, please just set the \"Affects version\". Leave the \"verify-affects-5.0\" label and leave the issue in \"Awaiting Response\" status; these are critical for us to be able to track these verifications and triage them. Thanks.              n        n    n"},{"commnet_id":"comment-72992","commnet_date":"2015-10-28T22:58:31-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 28\/Oct\/2015 22:58 PM    n        n        I think this is clearly not a bug in Hibernate.  The types are not equal (because the database is not returning the correct type).nnBut I think this is part of something I'd like to do in Hibernate later which is to be \"smarter\" about these type validations.  Think \"assignable from\" versus \"equal\". n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 28\/Oct\/2015 22:58 PM                      I think this is clearly not a bug in Hibernate.  The types are not equal (because the database is not returning the correct type). nn But I think this is part of something I'd like to do in Hibernate later which is to be \"smarter\" about these type validations.  Think \"assignable from\" versus \"equal\".              n        n    n"},{"commnet_id":"comment-82197","commnet_date":"2016-08-06T14:27:54-0700","commnet_user":"Henry Tung","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Henry Tungn added a comment  - 06\/Aug\/2016 14:27 PM     - edited  n        n        I can verify this occurring against Hibernate 5. Using Hibernate 5.1.0.Final as part of Dropwizard 1.0.0 (5.2.1 had some compatibility issues, so I had to override).nnnsql&gt; ALTER TABLE account ALTER COLUMN reset_code BINARY(16);rn(Update count: 0, 29 ms)rnsql&gt; SHOW COLUMNS FROM account;rnFIELD           | TYPE          | NULL | KEY | DEFAULTrnID              | BIGINT(19)    | NO   | PRI | NULLrnADMIN           | BOOLEAN(1)    | NO   |     | NULLrnCREATED         | TIMESTAMP(23) | NO   |     | NULLrnEMAIL           | VARCHAR(255)  | NO   | UNI | NULLrnHASHED_PASSWORD | VARCHAR(255)  | NO   |     | NULLrnLAST_LOGIN      | TIMESTAMP(23) | YES  |     | NULLrnVERIFY_CODE     | VARBINARY(16) | YES  |     | NULLrnVERIFY_EXPIRE   | TIMESTAMP(23) | YES  |     | NULLrnRESET_CODE      | VARBINARY(16) | YES  | UNI | NULLrnRESET_EXPIRE    | TIMESTAMP(23) | YES  |     | NULLrnnnnRelevant property blocks from Account entity:nnnrn@Entityrn@Table(name = \"account\" , indexes = {rn        <span class=\"code-comment\">\/\/ ...rn<\/span>        @Index(name = <span class=\"code-quote\">\"verify_code_idx\"<\/span>, columnList = <span class=\"code-quote\">\"verify_code, verify_expire\"<\/span>),rn        @Index(name = <span class=\"code-quote\">\"reset_code_idx\"<\/span>, columnList = <span class=\"code-quote\">\"reset_code, reset_expire\"<\/span>)rn})rnpublic  class Account implements  Principal {rnrn    <span class=\"code-comment\">\/\/ ...rn<\/span>rn    @Embeddedrn    @AttributeOverrides({rn            @AttributeOverride(name = <span class=\"code-quote\">\"code\"<\/span>, column = @Column(name = <span class=\"code-quote\">\"verify_code\"<\/span>, unique = <span class=\"code-keyword\">true<\/span>)),rn            @AttributeOverride(name = <span class=\"code-quote\">\"expire\"<\/span>, column = @Column(name = <span class=\"code-quote\">\"verify_expire\"<\/span>))rn    })rn    @Nullablern    private  ExpiringCode verify;rnrn    @Embeddedrn    @AttributeOverrides({rn            @AttributeOverride(name = <span class=\"code-quote\">\"code\"<\/span>, column = @Column(name = <span class=\"code-quote\">\"reset_code\"<\/span>, unique = <span class=\"code-keyword\">true<\/span>)),rn            @AttributeOverride(name = <span class=\"code-quote\">\"expire\"<\/span>, column = @Column(name = <span class=\"code-quote\">\"reset_expire\"<\/span>))rn    })rn    @Nullablern    private  ExpiringCode reset;rnrn    \/\/ ...rn rn}rnnnnand embedded entity ExpiringCode:nnnrn@Embeddablernpublic  final  class ExpiringCode {rn    @Column(name = <span class=\"code-quote\">\"code\"<\/span>, unique = <span class=\"code-keyword\">true<\/span>, nullable = <span class=\"code-keyword\">false<\/span>)rn    <span class=\"code-keyword\">private<\/span> UUID code;rnrn    @Column(name = <span class=\"code-quote\">\"expire\"<\/span>, nullable = <span class=\"code-keyword\">false<\/span>)rn    <span class=\"code-keyword\">private<\/span> Instant expire;rnrn    <span class=\"code-comment\">\/\/ ...rn<\/span>rn}rnnnnStarting with hibernate.hbm2ddl.auto: validate, the following error is thrown:nnException in thread \"main\" org.hibernate.tool.schema.spi.SchemaManagementException: Schema-validation: wrong column type encountered in column [reset_code] in table [account]; found [varbinary (Types#VARBINARY)], but expecting [binary (Types#BINARY)]rntat org.hibernate.tool.schema.internal.SchemaValidatorImpl.validateColumnType(SchemaValidatorImpl.java:170)rntat org.hibernate.tool.schema.internal.SchemaValidatorImpl.validateTable(SchemaValidatorImpl.java:155)rntat org.hibernate.tool.schema.internal.SchemaValidatorImpl.performValidation(SchemaValidatorImpl.java:100)rntat org.hibernate.tool.schema.internal.SchemaValidatorImpl.doValidation(SchemaValidatorImpl.java:67)rnnnnEDIT: I don't think I can change the affected versions field, unfortunately. Can someone do so on my behalf? Thanks in advance! n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Henry Tungn added a comment  - 06\/Aug\/2016 14:27 PM     - edited                    I can verify this occurring against Hibernate 5. Using Hibernate 5.1.0.Final as part of Dropwizard 1.0.0 (5.2.1 had some compatibility issues, so I had to override). nn  n sql&gt; ALTER TABLE account ALTER COLUMN reset_code BINARY(16);rn(Update count: 0, 29 ms)rnsql&gt; SHOW COLUMNS FROM account;rnFIELD           | TYPE          | NULL | KEY | DEFAULTrnID              | BIGINT(19)    | NO   | PRI | NULLrnADMIN           | BOOLEAN(1)    | NO   |     | NULLrnCREATED         | TIMESTAMP(23) | NO   |     | NULLrnEMAIL           | VARCHAR(255)  | NO   | UNI | NULLrnHASHED_PASSWORD | VARCHAR(255)  | NO   |     | NULLrnLAST_LOGIN      | TIMESTAMP(23) | YES  |     | NULLrnVERIFY_CODE     | VARBINARY(16) | YES  |     | NULLrnVERIFY_EXPIRE   | TIMESTAMP(23) | YES  |     | NULLrnRESET_CODE      | VARBINARY(16) | YES  | UNI | NULLrnRESET_EXPIRE    | TIMESTAMP(23) | YES  |     | NULLrn n  nn Relevant property blocks from  Account  entity: nn  n rn@Entityrn@Table(name =  \"account\" , indexes = {rn         \/\/ ...rn         @Index(name =  \"verify_code_idx\" , columnList =  \"verify_code, verify_expire\" ),rn        @Index(name =  \"reset_code_idx\" , columnList =  \"reset_code, reset_expire\" )rn})rn public  class Account  implements  Principal {rnrn     \/\/ ...rn rn    @Embeddedrn    @AttributeOverrides({rn            @AttributeOverride(name =  \"code\" , column = @Column(name =  \"verify_code\" , unique =  true )),rn            @AttributeOverride(name =  \"expire\" , column = @Column(name =  \"verify_expire\" ))rn    })rn    @Nullablern     private  ExpiringCode verify;rnrn    @Embeddedrn    @AttributeOverrides({rn            @AttributeOverride(name =  \"code\" , column = @Column(name =  \"reset_code\" , unique =  true )),rn            @AttributeOverride(name =  \"expire\" , column = @Column(name =  \"reset_expire\" ))rn    })rn    @Nullablern     private  ExpiringCode reset;rnrn     \/\/ ...rn rn}rn n  nn and embedded entity  ExpiringCode : nn  n rn@Embeddablern public   final  class ExpiringCode {rn    @Column(name =  \"code\" , unique =  true , nullable =  false )rn     private  UUID code;rnrn    @Column(name =  \"expire\" , nullable =  false )rn     private  Instant expire;rnrn     \/\/ ...rn rn}rn n  nn Starting with  hibernate.hbm2ddl.auto: validate , the following error is thrown: n  n Exception in thread \"main\" org.hibernate.tool.schema.spi.SchemaManagementException: Schema-validation: wrong column type encountered in column [reset_code] in table [account]; found [varbinary (Types#VARBINARY)], but expecting [binary (Types#BINARY)]rntat org.hibernate.tool.schema.internal.SchemaValidatorImpl.validateColumnType(SchemaValidatorImpl.java:170)rntat org.hibernate.tool.schema.internal.SchemaValidatorImpl.validateTable(SchemaValidatorImpl.java:155)rntat org.hibernate.tool.schema.internal.SchemaValidatorImpl.performValidation(SchemaValidatorImpl.java:100)rntat org.hibernate.tool.schema.internal.SchemaValidatorImpl.doValidation(SchemaValidatorImpl.java:67)rn n  nn EDIT: I don't think I can change the affected versions field, unfortunately. Can someone do so on my behalf? Thanks in advance!              n        n    n"},{"commnet_id":"comment-83340","commnet_date":"2016-08-30T06:47:23-0700","commnet_user":"Daniel Spilker","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Daniel Spilkern added a comment  - 30\/Aug\/2016 06:47 AM    n        n        I reported the problem to the H2 bug tracker: https:\/\/github.com\/h2database\/h2database\/issues\/345 n    n    n        n            Show  n            n                        n    n    n    n                nn       Daniel Spilkern added a comment  - 30\/Aug\/2016 06:47 AM                      I reported the problem to the H2 bug tracker:  https:\/\/github.com\/h2database\/h2database\/issues\/345               n        n    n"},{"commnet_id":"comment-83341","commnet_date":"2016-08-30T07:01:24-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 30\/Aug\/2016 07:01 AM    n        n        Henry Tung I updated the affected version field.  However, this is not a bug in Hibernate so the affected version is not quite relevant.  This would be a new feature to schema validation to check column types based on the idea of type-assignability rather than type-equality.  nnI have started on some of the internals we would need to make that switch, however I am very worried about handling custom data types, OTHER, etc.  If you wanted to take a stab at implementing this, take a look at org.hibernate.type.descriptor.sql.JdbcTypeFamilyInformation.  That is the general idea I had for implementing this.  One concern would be the directionality aspect to type-assignability as opposed to type-equality, especially in terms of data truncation (Types#BIGINT -&gt; Types.SMALLINT, e.g.). n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 30\/Aug\/2016 07:01 AM                       Henry Tung  I updated the affected version field.  However, this is not a bug in Hibernate so the affected version is not quite relevant.  This would be a new feature to schema validation to check column types based on the idea of type-assignability rather than type-equality.   nn I have started on some of the internals we would need to make that switch, however I am very worried about handling custom data types, OTHER, etc.  If you wanted to take a stab at implementing this, take a look at  org.hibernate.type.descriptor.sql.JdbcTypeFamilyInformation .  That is the general idea I had for implementing this.  One concern would be the directionality aspect to type-assignability as opposed to type-equality, especially in terms of data truncation ( Types#BIGINT  -&gt;  Types.SMALLINT , e.g.).              n        n    n"},{"commnet_id":"comment-83342","commnet_date":"2016-08-30T07:03:14-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 30\/Aug\/2016 07:03 AM    n        n        Thanks Daniel Spilker.  But it sounds like something they are not going to change.  Which is ok; it is something I want to support eventually anyway.  Just a matter of finding resources (time for me, or someone else to do it). n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 30\/Aug\/2016 07:03 AM                      Thanks  Daniel Spilker .  But it sounds like something they are not going to change.  Which is ok; it is something I want to support eventually anyway.  Just a matter of finding resources (time for me, or someone else to do it).              n        n    n"}]}},{"OGM-845":{"info":{"issue_title":"Remove test specific class GridDialectType and use GridDialect directly in SkipByGridDialect","issue_key":"OGM-845","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Minor","issue_affects_version":"Rejected","issue_fix_version":"4.2.0.CR1","issue_component":"4.2.0.CR1","issue_labels":"4.2.0.CR1","issue_description":"Using GridDialectType seems to be a unnecessary indirection. SkipByGridDialect should use the actual GridDialect classes. Regarding the additional methods the GridDialectType enum offers - it might either be replaced by actual grid dialect metadata or the tests which use these methods can just be modified (the methods isDocumentStore and supportsQueries are used at most once).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-845?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-68224","commnet_date":"2015-05-28T06:11:00-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 28\/May\/2015 06:11 AM    n        n        you can't do that I think as the tests are in core and the dialect class are in each of the specific modules. n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 28\/May\/2015 06:11 AM                      you can't do that I think as the tests are in core and the dialect class are in each of the specific modules.              n        n    n"},{"commnet_id":"comment-69101","commnet_date":"2015-07-10T06:01:31-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 10\/Jul\/2015 06:01 AM    n        n        No one seem to have contradicted me. n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 10\/Jul\/2015 06:01 AM                      No one seem to have contradicted me.              n        n    n"}]}},{"HHH-9823":{"info":{"issue_title":"org.hibernate.cfg.annotations.SimpleValueBinder#fillSimpleValue incorrectly using HCANN classloading directly","issue_key":"HHH-9823","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.0.Beta2","issue_component":"5.0.0.Beta2","issue_labels":"5.0.0.Beta2","issue_description":"org.hibernate.cfg.annotations.SimpleValueBinder#fillSimpleValue incorrectly using HCANN classloading directly","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9823?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-68199","commnet_date":"2015-05-27T14:03:37-0700","commnet_user":"John O&#39;Hara","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       John O&#39;Haran added a comment  - 27\/May\/2015 14:03 PM    n        n        With the patch applied, I am now seeing this exception deploying a jpa app in WF10;nn21:57:47,567 ERROR &#91;org.jboss.msc.service.fail&#93;  (ServerService Thread Pool &#8211; 55) MSC000001: Failed to start service jboss.persistenceunit.\"app.ear\/app.jar#pu\"._FIRST_PHASE: org.jboss.msc.service.StartException in service jboss.persistenceunit.\"app.ear\/app.jar#pu\".FIRST_PHASE_: java.lang.IllegalArgumentException: interface javax.persistence.Entity is not visible from class loader\r\nn        at org.jboss.as.jpa.service.PhaseOnePersistenceUnitServiceImpl$1$1.run(PhaseOnePersistenceUnitServiceImpl.java:121)\r\nn        at org.jboss.as.jpa.service.PhaseOnePersistenceUnitServiceImpl$1$1.run(PhaseOnePersistenceUnitServiceImpl.java:103)\r\nn        at org.wildfly.security.manager.WildFlySecurityManager.doChecked(WildFlySecurityManager.java:666) &#91;wildfly-elytron-1.0.0.Alpha1.jar:1.0.0.Alpha1&#93; \r\nn        at org.jboss.as.jpa.service.PhaseOnePersistenceUnitServiceImpl$1.run(PhaseOnePersistenceUnitServiceImpl.java:130)\r\nn        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) &#91;rt.jar:1.8.0_45&#93; \r\nn        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) &#91;rt.jar:1.8.0_45&#93; \r\nn        at java.lang.Thread.run(Thread.java:745) &#91;rt.jar:1.8.0_45&#93; \r\nn        at org.jboss.threads.JBossThread.run(JBossThread.java:320)\r\nnCaused by: java.lang.IllegalArgumentException: interface javax.persistence.Entity is not visible from class loader\r\nn        at java.lang.reflect.Proxy$ProxyClassFactory.apply(Proxy.java:581) &#91;rt.jar:1.8.0_45&#93; \r\nn        at java.lang.reflect.Proxy$ProxyClassFactory.apply(Proxy.java:557) &#91;rt.jar:1.8.0_45&#93; \r\nn        at java.lang.reflect.WeakCache$Factory.get(WeakCache.java:230) &#91;rt.jar:1.8.0_45&#93; \r\nn        at java.lang.reflect.WeakCache.get(WeakCache.java:127) &#91;rt.jar:1.8.0_45&#93; \r\nn        at java.lang.reflect.Proxy.getProxyClass0(Proxy.java:419) &#91;rt.jar:1.8.0_45&#93; \r\nn        at java.lang.reflect.Proxy.getProxyClass(Proxy.java:371) &#91;rt.jar:1.8.0_45&#93; \r\nn        at org.hibernate.annotations.common.annotationfactory.AnnotationFactory.create(AnnotationFactory.java:46)\r\nn        at org.hibernate.cfg.annotations.reflection.JPAOverriddenAnnotationReader.getEntity(JPAOverriddenAnnotationReader.java:2668)\r\nn        at org.hibernate.cfg.annotations.reflection.JPAOverriddenAnnotationReader.initAnnotations(JPAOverriddenAnnotationReader.java:338)\r\nn        at org.hibernate.cfg.annotations.reflection.JPAOverriddenAnnotationReader.isAnnotationPresent(JPAOverriddenAnnotationReader.java:310)\r\nn        at org.hibernate.annotations.common.reflection.java.JavaXAnnotatedElement.isAnnotationPresent(JavaXAnnotatedElement.java:60)\r\nn        at org.hibernate.boot.model.source.internal.annotations.AnnotationMetadataSourceProcessorImpl.&lt;init&gt;(AnnotationMetadataSourceProcessorImpl.java:115)\r\nn        at org.hibernate.boot.internal.MetadataBuildingProcess$2.&lt;init&gt;(MetadataBuildingProcess.java:151)\r\nn        at org.hibernate.boot.internal.MetadataBuildingProcess.build(MetadataBuildingProcess.java:145)\r\nn        at org.hibernate.boot.internal.MetadataBuilderImpl.build(MetadataBuilderImpl.java:396)\r\nn        at org.hibernate.boot.internal.MetadataBuilderImpl.build(MetadataBuilderImpl.java:82)\r\nn        at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.&lt;init&gt;(EntityManagerFactoryBuilderImpl.java:180)\r\nn        at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.&lt;init&gt;(EntityManagerFactoryBuilderImpl.java:146)\r\nn        at org.hibernate.jpa.boot.spi.Bootstrap.getEntityManagerFactoryBuilder(Bootstrap.java:28)\r\nn        at org.hibernate.jpa.boot.spi.Bootstrap.getEntityManagerFactoryBuilder(Bootstrap.java:40)\r\nn        at org.jboss.as.jpa.hibernate5.TwoPhaseBootstrapImpl.&lt;init&gt;(TwoPhaseBootstrapImpl.java:39)\r\nn        at org.jboss.as.jpa.hibernate5.HibernatePersistenceProviderAdaptor.getBootstrap(HibernatePersistenceProviderAdaptor.java:172)\r\nn        at org.jboss.as.jpa.service.PhaseOnePersistenceUnitServiceImpl.createContainerEntityManagerFactoryBuilder(PhaseOnePersistenceUnitServiceImpl.java:243)\r\nn        at org.jboss.as.jpa.service.PhaseOnePersistenceUnitServiceImpl.access$800(PhaseOnePersistenceUnitServiceImpl.java:60)\r\nn        at org.jboss.as.jpa.service.PhaseOnePersistenceUnitServiceImpl$1$1.run(PhaseOnePersistenceUnitServiceImpl.java:118) n    n    n        n            Show  n            n                        n    n    n    n                nn       John O&#39;Haran added a comment  - 27\/May\/2015 14:03 PM                      With the patch applied, I am now seeing this exception deploying a jpa app in WF10; nn 21:57:47,567 ERROR  &#91;org.jboss.msc.service.fail&#93;  (ServerService Thread Pool &#8211; 55) MSC000001: Failed to start service jboss.persistenceunit.\"app.ear\/app.jar#pu\"._ FIRST_PHASE  : org.jboss.msc.service.StartException in service jboss.persistenceunit.\"app.ear\/app.jar#pu\".  FIRST_PHASE _: java.lang.IllegalArgumentException: interface javax.persistence.Entity is not visible from class loader n        at org.jboss.as.jpa.service.PhaseOnePersistenceUnitServiceImpl$1$1.run(PhaseOnePersistenceUnitServiceImpl.java:121) n        at org.jboss.as.jpa.service.PhaseOnePersistenceUnitServiceImpl$1$1.run(PhaseOnePersistenceUnitServiceImpl.java:103) n        at org.wildfly.security.manager.WildFlySecurityManager.doChecked(WildFlySecurityManager.java:666)  &#91;wildfly-elytron-1.0.0.Alpha1.jar:1.0.0.Alpha1&#93;  n        at org.jboss.as.jpa.service.PhaseOnePersistenceUnitServiceImpl$1.run(PhaseOnePersistenceUnitServiceImpl.java:130) n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)  &#91;rt.jar:1.8.0_45&#93;  n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)  &#91;rt.jar:1.8.0_45&#93;  n        at java.lang.Thread.run(Thread.java:745)  &#91;rt.jar:1.8.0_45&#93;  n        at org.jboss.threads.JBossThread.run(JBossThread.java:320) nCaused by: java.lang.IllegalArgumentException: interface javax.persistence.Entity is not visible from class loader n        at java.lang.reflect.Proxy$ProxyClassFactory.apply(Proxy.java:581)  &#91;rt.jar:1.8.0_45&#93;  n        at java.lang.reflect.Proxy$ProxyClassFactory.apply(Proxy.java:557)  &#91;rt.jar:1.8.0_45&#93;  n        at java.lang.reflect.WeakCache$Factory.get(WeakCache.java:230)  &#91;rt.jar:1.8.0_45&#93;  n        at java.lang.reflect.WeakCache.get(WeakCache.java:127)  &#91;rt.jar:1.8.0_45&#93;  n        at java.lang.reflect.Proxy.getProxyClass0(Proxy.java:419)  &#91;rt.jar:1.8.0_45&#93;  n        at java.lang.reflect.Proxy.getProxyClass(Proxy.java:371)  &#91;rt.jar:1.8.0_45&#93;  n        at org.hibernate.annotations.common.annotationfactory.AnnotationFactory.create(AnnotationFactory.java:46) n        at org.hibernate.cfg.annotations.reflection.JPAOverriddenAnnotationReader.getEntity(JPAOverriddenAnnotationReader.java:2668) n        at org.hibernate.cfg.annotations.reflection.JPAOverriddenAnnotationReader.initAnnotations(JPAOverriddenAnnotationReader.java:338) n        at org.hibernate.cfg.annotations.reflection.JPAOverriddenAnnotationReader.isAnnotationPresent(JPAOverriddenAnnotationReader.java:310) n        at org.hibernate.annotations.common.reflection.java.JavaXAnnotatedElement.isAnnotationPresent(JavaXAnnotatedElement.java:60) n        at org.hibernate.boot.model.source.internal.annotations.AnnotationMetadataSourceProcessorImpl.&lt;init&gt;(AnnotationMetadataSourceProcessorImpl.java:115) n        at org.hibernate.boot.internal.MetadataBuildingProcess$2.&lt;init&gt;(MetadataBuildingProcess.java:151) n        at org.hibernate.boot.internal.MetadataBuildingProcess.build(MetadataBuildingProcess.java:145) n        at org.hibernate.boot.internal.MetadataBuilderImpl.build(MetadataBuilderImpl.java:396) n        at org.hibernate.boot.internal.MetadataBuilderImpl.build(MetadataBuilderImpl.java:82) n        at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.&lt;init&gt;(EntityManagerFactoryBuilderImpl.java:180) n        at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.&lt;init&gt;(EntityManagerFactoryBuilderImpl.java:146) n        at org.hibernate.jpa.boot.spi.Bootstrap.getEntityManagerFactoryBuilder(Bootstrap.java:28) n        at org.hibernate.jpa.boot.spi.Bootstrap.getEntityManagerFactoryBuilder(Bootstrap.java:40) n        at org.jboss.as.jpa.hibernate5.TwoPhaseBootstrapImpl.&lt;init&gt;(TwoPhaseBootstrapImpl.java:39) n        at org.jboss.as.jpa.hibernate5.HibernatePersistenceProviderAdaptor.getBootstrap(HibernatePersistenceProviderAdaptor.java:172) n        at org.jboss.as.jpa.service.PhaseOnePersistenceUnitServiceImpl.createContainerEntityManagerFactoryBuilder(PhaseOnePersistenceUnitServiceImpl.java:243) n        at org.jboss.as.jpa.service.PhaseOnePersistenceUnitServiceImpl.access$800(PhaseOnePersistenceUnitServiceImpl.java:60) n        at org.jboss.as.jpa.service.PhaseOnePersistenceUnitServiceImpl$1$1.run(PhaseOnePersistenceUnitServiceImpl.java:118)              n        n    n"},{"commnet_id":"comment-68200","commnet_date":"2015-05-27T14:12:14-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 27\/May\/2015 14:12 PM    n        n        That is obviously a different issue.   n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 27\/May\/2015 14:12 PM                      That is obviously a different issue.                n        n    n"},{"commnet_id":"comment-68201","commnet_date":"2015-05-27T14:12:57-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 27\/May\/2015 14:12 PM    n        n        And without a test I am not going to have time to track this down before CR1 n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 27\/May\/2015 14:12 PM                      And without a test I am not going to have time to track this down before CR1              n        n    n"},{"commnet_id":"comment-68203","commnet_date":"2015-05-27T15:59:45-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 27\/May\/2015 15:59 PM    n        n        Ah, this one is another (missed?) direct usage of Thread.currentThread().getContextClassLoader() -&gt; https:\/\/hibernate.atlassian.net\/browse\/HHH-9825 n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 27\/May\/2015 15:59 PM                      Ah, this one is another (missed?) direct usage of  Thread.currentThread().getContextClassLoader()  -&gt;  https:\/\/hibernate.atlassian.net\/browse\/HHH-9825               n        n    n"}]}},{"HHH-9820":{"info":{"issue_title":"Handle JDBC drivers that do not properly report metadata regarding case of identifiers","issue_key":"HHH-9820","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.CR1","issue_labels":"5.0.0.CR1","issue_description":"Specifically, handle JDBC drivers which report bad\/inconsistent data between the following methods:  \tjava.sql.DatabaseMetaData#storesMixedCaseQuotedIdentifiers \tjava.sql.DatabaseMetaData#storesLowerCaseQuotedIdentifiers \tjava.sql.DatabaseMetaData#storesUpperCaseQuotedIdentifiers \tjava.sql.DatabaseMetaData#storesMixedCaseIdentifiers \tjava.sql.DatabaseMetaData#storesUpperCaseIdentifiers \tjava.sql.DatabaseMetaData#storesLowerCaseIdentifiers    Ultimately part of the question here is the best way to model the interaction between Dialects and JdbcEnvironment.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9820?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-9819":{"info":{"issue_title":"Better support for activation\/de-activation cycles of (Enterprise) OSGi services","issue_key":"HHH-9819","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Won&#39;t Fix","issue_fix_version":"None","issue_component":"None","issue_labels":"hibernate-osgi","issue_description":"Specifically thinking support for TransactionManagers and DataSources.  Others?","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9819?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-68190","commnet_date":"2015-05-27T10:45:31-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Steve Ebersolen added a comment  - 27\/May\/2015 10:45 AM     - edited  n        n        Seennnthttp:\/\/aries.apache.org\/modules\/jpaproject.htmlnthttp:\/\/aries.apache.org\/modules\/jndiproject.htmlnthttp:\/\/aries.apache.org\/modules\/transactionsproject.htmlnthttp:\/\/karaf.apache.org\/manual\/latest\/users-guide\/jndi.htmlnnnnfor some details n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Steve Ebersolen added a comment  - 27\/May\/2015 10:45 AM     - edited                    See nn nt  http:\/\/aries.apache.org\/modules\/jpaproject.html  nt  http:\/\/aries.apache.org\/modules\/jndiproject.html  nt  http:\/\/aries.apache.org\/modules\/transactionsproject.html  nt  http:\/\/karaf.apache.org\/manual\/latest\/users-guide\/jndi.html  n nnn for some details              n        n    n"},{"commnet_id":"comment-68215","commnet_date":"2015-05-28T00:20:57-0700","commnet_user":"Christian Schneider","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Christian Schneidern added a comment  - 28\/May\/2015 00:20 AM    n        n        As long as you plan to work together with the new aries jpa code there should be no need to track the TransactionManager or DataSource. The aries jpa 2.0 code will track both and automatically unpublish and close the EntityManagerFactory when one of the needed services goes away. So unless you keep additional references to OSGi services there should be no need to track them. n    n    n        n            Show  n            n                        n    n    n    n                nn       Christian Schneidern added a comment  - 28\/May\/2015 00:20 AM                      As long as you plan to work together with the new aries jpa code there should be no need to track the TransactionManager or DataSource. The aries jpa 2.0 code will track both and automatically unpublish and close the EntityManagerFactory when one of the needed services goes away. So unless you keep additional references to OSGi services there should be no need to track them.              n        n    n"},{"commnet_id":"comment-68221","commnet_date":"2015-05-28T04:40:58-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 28\/May\/2015 04:40 AM    n        n        Thanks for the feedback Christian.  nnWhile we do not rely on Aries specifically, Aries is what we softly target and all we test against at the moment.  It is also the e-OSGi JPA adapter we pull in our Karaf feature file.nnSo IIUC really I can just close this as \"no need to do anything here\" (with the caveat \"as long as using Aries\")? n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 28\/May\/2015 04:40 AM                      Thanks for the feedback Christian.   nn While we do not rely on Aries specifically, Aries is what we softly target and all we test against at the moment.  It is also the e-OSGi JPA adapter we pull in our Karaf feature file. nn So IIUC really I can just close this as \"no need to do anything here\" (with the caveat \"as long as using Aries\")?              n        n    n"},{"commnet_id":"comment-68222","commnet_date":"2015-05-28T04:41:18-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 28\/May\/2015 04:41 AM    n        n        Brett Meyer FYI... n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 28\/May\/2015 04:41 AM                       Brett Meyer  FYI...              n        n    n"},{"commnet_id":"comment-68223","commnet_date":"2015-05-28T04:51:02-0700","commnet_user":"Christian Schneider","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Christian Schneidern added a comment  - 28\/May\/2015 04:51 AM    n        n        Yes .. I think you should not need to do anything there. In general if you e.g. get a DataSource object in the PersistenceUnitInfo then how should you be able to track the respective service. So the only important thing is that you do not keep any additional references that would outlive the EntityManagerFactory. n    n    n        n            Show  n            n                        n    n    n    n                nn       Christian Schneidern added a comment  - 28\/May\/2015 04:51 AM                      Yes .. I think you should not need to do anything there. In general if you e.g. get a DataSource object in the PersistenceUnitInfo then how should you be able to track the respective service. So the only important thing is that you do not keep any additional references that would outlive the EntityManagerFactory.              n        n    n"},{"commnet_id":"comment-70933","commnet_date":"2015-10-06T18:00:09-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 06\/Oct\/2015 18:00 PM    n        n        Per discussion, use e-OSGI container (Aries JPA) should handle this for us. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 06\/Oct\/2015 18:00 PM                      Per discussion, use e-OSGI container (Aries JPA) should handle this for us.              n        n    n"}]}},{"HV-995":{"info":{"issue_title":"Add google analytics to the HTML documentation","issue_key":"HV-995","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.2.Final","issue_labels":"5.2.2.Final","issue_description":"Optaplanner uses a version of pressgang that allows to add the google analytics snippet in the HTML generated. That would be super handy, let's just look at Optaplanner's trick.  PS: they have the script nicely degrading when no internet is present and all that jazz.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-995?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-70397","commnet_date":"2015-09-17T03:53:04-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 17\/Sep\/2015 03:53 AM    n        n        Emmanuel Bernard You feel like contributing this? n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 17\/Sep\/2015 03:53 AM                       Emmanuel Bernard  You feel like contributing this?              n        n    n"},{"commnet_id":"comment-70399","commnet_date":"2015-09-17T06:01:55-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 17\/Sep\/2015 06:01 AM    n        n        OK. Look what I've become ! n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 17\/Sep\/2015 06:01 AM                      OK. Look what I've become !              n        n    n"}]}},{"HSEARCH-1878":{"info":{"issue_title":"Add google analytics to the HTML documentation","issue_key":"HSEARCH-1878","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.3.0.Final,                                            5.4.0.CR1","issue_labels":"5.3.0.Final,                                            5.4.0.CR1","issue_description":"Optaplanner uses a version of pressgang that allows to add the google analytics snippet in the HTML generated. That would be super handy, let's just look at Optaplanner's trick.  PS: they have the script nicely degrading when no internet is present and all that jazz.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1878?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-68424","commnet_date":"2015-06-09T07:48:45-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 09\/Jun\/2015 07:48 AM    n        n        https:\/\/github.com\/hibernate\/hibernate-search\/pull\/840\r\nnhttps:\/\/github.com\/hibernate\/hibernate-search\/pull\/841 n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 09\/Jun\/2015 07:48 AM                       https:\/\/github.com\/hibernate\/hibernate-search\/pull\/840  n https:\/\/github.com\/hibernate\/hibernate-search\/pull\/841               n        n    n"}]}},{"OGM-841":{"info":{"issue_title":"Add google analytics to the HTML documentation","issue_key":"OGM-841","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"4.2.0.Final","issue_labels":"4.2.0.Final","issue_description":"Optaplanner uses a version of pressgang that allows to add the google analytics snippet in the HTML generated. That would be super handy, let's just look at Optaplanner's trick.  Geoffrey De Smet if you have some quick pointers for us, ship them in   PS: they have the script nicely degrading when no internet is present and all that jazz.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-841?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-68029","commnet_date":"2015-05-22T03:06:51-0700","commnet_user":"Geoffrey De Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Geoffrey De Smetn added a comment  - 22\/May\/2015 03:06 AM     - edited  n        n        ntUse pressgang at least 3.1.3ntMaven configuration to inspire (not sure how that translates in gradle): https:\/\/github.com\/pressgang\/pressgang-tools\/blob\/master\/pressgang-tools-example\/pom.xml#L43ntSpecific this part:nnrn              &lt;!-- To use Google Analytics: --&gt;rn              &lt;transformerParameters&gt;rn                &lt;html.googleAnalyticsId&gt;UA-XXXXXXX-X&lt;\/html.googleAnalyticsId&gt;&lt;!-- Your project GA --&gt;rn                &lt;html.googleTagManagerId&gt;GTM-NJWS5L&lt;\/html.googleTagManagerId&gt;&lt;!-- That's the JBoss GTM id, only use if  you're a JBoss project --&gt;rn                &lt;html.googleTagManagerChannel&gt;PressgangToolsExample&lt;\/html.googleTagManagerChannel&gt;&lt;!-- The label of your project for  JBoss management --&gt;rn              &lt;\/transformerParameters&gt;rnnnnnnAnd then you'll find a bit of a GA code near the bottom of your html files.nnThe Google GA script itself is smart enough to not call home if used from a file:\/\/ address.\r\nnIf a company ends up hosting it on their own server, I believe you can easily filter out those calls in GA adminstration views.nnHTH  n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Geoffrey De Smetn added a comment  - 22\/May\/2015 03:06 AM     - edited                    nt Use pressgang at least 3.1.3 nt Maven configuration to inspire (not sure how that translates in gradle):  https:\/\/github.com\/pressgang\/pressgang-tools\/blob\/master\/pressgang-tools-example\/pom.xml#L43  nt Specific this part:n  n rn              &lt;!-- To use Google Analytics: --&gt;rn              &lt;transformerParameters&gt;rn                &lt;html.googleAnalyticsId&gt;UA-XXXXXXX-X&lt;\/html.googleAnalyticsId&gt;&lt;!-- Your project GA --&gt;rn                &lt;html.googleTagManagerId&gt;GTM-NJWS5L&lt;\/html.googleTagManagerId&gt;&lt;!-- That's the JBoss GTM id, only use  if  you're a JBoss project --&gt;rn                &lt;html.googleTagManagerChannel&gt;PressgangToolsExample&lt;\/html.googleTagManagerChannel&gt;&lt;!-- The label of your project  for  JBoss management --&gt;rn              &lt;\/transformerParameters&gt;rn n   n nnn And then you'll find a bit of a GA code near the bottom of your html files. nn The Google GA script itself is smart enough to not call home if used from a  file:\/\/  address. nIf a company ends up hosting it on their own server, I believe you can easily filter out those calls in GA adminstration views. nn HTH                n        n    n"},{"commnet_id":"comment-68153","commnet_date":"2015-05-26T15:02:43-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 26\/May\/2015 15:02 PM    n        n        Geoffrey De Smet I set things up but things don't seem to work. At least not the real time Google Analytics view. Did you need to set something specific because of the Google Tag Manager usage? Or the fact that the doc is on docs.jboss.org? n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 26\/May\/2015 15:02 PM                       Geoffrey De Smet  I set things up but things don't seem to work. At least not the real time Google Analytics view. Did you need to set something specific because of the Google Tag Manager usage? Or the fact that the doc is on docs.jboss.org?              n        n    n"},{"commnet_id":"comment-68159","commnet_date":"2015-05-26T23:19:51-0700","commnet_user":"Geoffrey De Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Geoffrey De Smetn added a comment  - 26\/May\/2015 23:19 PM    n        n        Did you host the generated html online? (Offline visits are not reported to GA) Can you give me a link to it, I 'll take a look. n    n    n        n            Show  n            n                        n    n    n    n                nn       Geoffrey De Smetn added a comment  - 26\/May\/2015 23:19 PM                      Did you host the generated html online? (Offline visits are not reported to GA) Can you give me a link to it, I 'll take a look.              n        n    n"},{"commnet_id":"comment-68160","commnet_date":"2015-05-26T23:20:31-0700","commnet_user":"Geoffrey De Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Geoffrey De Smetn added a comment  - 26\/May\/2015 23:20 PM    n        n        Also check your GA settings if they filter the view on only the domain name hibernate.org for example (but that wasn't the case for me, it just worked). n    n    n        n            Show  n            n                        n    n    n    n                nn       Geoffrey De Smetn added a comment  - 26\/May\/2015 23:20 PM                      Also check your GA settings if they filter the view on only the domain name hibernate.org for example (but that wasn't the case for me, it just worked).              n        n    n"},{"commnet_id":"comment-68161","commnet_date":"2015-05-26T23:52:59-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 26\/May\/2015 23:52 PM    n        n        Geoffrey De Smet Yes I tested online as you told me the file:\/\/ deactivates the script. The test is at http:\/\/docs.jboss.org\/hibernate\/ogm\/secret-test\/html_single\/nnThere seem to be several things going on.\r\nnWhen I look at http:\/\/docs.jboss.org\/optaplanner\/release\/6.2.0.Final\/optaplanner-docs\/html_single\/index.html your script version is different (that's not non tag manager version)nnOn http:\/\/docs.jboss.org\/hibernate\/ogm\/secret-test\/html_single\/ I don't see a abine.stub.Google Analytics script in the headers like in Optaplanner's case. Also there are a lot of other tracking scripts which are inserted by the docs.jboss.org Apache I suppose.nnI am attaching the index.html that I generate that does not have the additional scripts. n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 26\/May\/2015 23:52 PM                       Geoffrey De Smet  Yes I tested online as you told me the  file:\/\/  deactivates the script. The test is at  http:\/\/docs.jboss.org\/hibernate\/ogm\/secret-test\/html_single\/  nn There seem to be several things going on. nWhen I look at  http:\/\/docs.jboss.org\/optaplanner\/release\/6.2.0.Final\/optaplanner-docs\/html_single\/index.html  your script version is different (that's not non tag manager version) nn On  http:\/\/docs.jboss.org\/hibernate\/ogm\/secret-test\/html_single\/  I don't see a abine.stub.Google Analytics script in the headers like in Optaplanner's case. Also there are a lot of other tracking scripts which are inserted by the docs.jboss.org Apache I suppose. nn I am attaching the index.html that I generate that does not have the additional scripts.              n        n    n"},{"commnet_id":"comment-68162","commnet_date":"2015-05-27T00:01:02-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 27\/May\/2015 00:01 AM    n        n        hum, actually, now it works. Go figure!\r\nnThanks Geoffrey for all your help! n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 27\/May\/2015 00:01 AM                      hum, actually, now it works. Go figure! nThanks Geoffrey for all your help!              n        n    n"},{"commnet_id":"comment-68163","commnet_date":"2015-05-27T00:07:45-0700","commnet_user":"Geoffrey De Smet","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Geoffrey De Smetn added a comment  - 27\/May\/2015 00:07 AM    n        n        You're welcome  Once we release 6.3.0.Beta1, we 'll also be using the newer (GTM) version of the script for docs. On our website (optaplanner.org), we already use the GTM version. n    n    n        n            Show  n            n                        n    n    n    n                nn       Geoffrey De Smetn added a comment  - 27\/May\/2015 00:07 AM                      You're welcome   Once we release 6.3.0.Beta1, we 'll also be using the newer (GTM) version of the script for docs. On our website (optaplanner.org), we already use the GTM version.              n        n    n"},{"commnet_id":"comment-68164","commnet_date":"2015-05-27T00:27:12-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 27\/May\/2015 00:27 AM    n        n        BTW, the xslt adds all the other tracking scripts. I tried on an other host and that's not apache injecting them. n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 27\/May\/2015 00:27 AM                      BTW, the xslt adds all the other tracking scripts. I tried on an other host and that's not apache injecting them.              n        n    n"}]}},{"HSEARCH-1877":{"info":{"issue_title":"Gracefully handle null values in TikaBridge","issue_key":"HSEARCH-1877","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.3.0.CR1","issue_labels":"5.3.0.CR1","issue_description":"The built-in TikaBridge throws an IllegalArgumentException if a null value is given.  Although I can understand the thought behind that, here's my situation:  Artificer can store file content either on the filesystem or as a Blob, but that's configurable during runtime. So, my entity fields look something like:         @Lob      @Field      @FieldBridge(impl = ArtificerTikaBridge.class)      public  Blob getContent() {          return  content;      }        @Field      @FieldBridge(impl = ArtificerTikaBridge.class)      public  String  getContentPath() {          return  contentPath;      }     'content' and 'contentPath' are mutually exclusive.  At first, I was hoping to simply use @TikaBridge on both, but you run into the null issue.  ArtificerTikaBridge simply does:         @Override      public  void set(String  name, Object  value, Document document, LuceneOptions luceneOptions) {          if  (value != null ) {              super .set(name, value, document, luceneOptions);          }      }     Sure, I could write a custom loader, etc.  However, unless you guys think this is an extreme edge case, it might be nice to at least make nullability an option on the annotation.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1877?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-68001","commnet_date":"2015-05-21T02:14:55-0700","commnet_user":"Hardy Ferentschik","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Hardy Ferentschikn added a comment  - 21\/May\/2015 02:14 AM    n        n        I think you are right, the current IllegalArgumentException seems too much. null values should jsut be ignored. n    n    n        n            Show  n            n                        n    n    n    n                nn       Hardy Ferentschikn added a comment  - 21\/May\/2015 02:14 AM                      I think you are right, the current  IllegalArgumentException  seems too much.  null  values should jsut be ignored.              n        n    n"},{"commnet_id":"comment-68011","commnet_date":"2015-05-21T06:28:22-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 21\/May\/2015 06:28 AM    n        n        +1 let's make this consistent to other bridges, and support and optional null-representing token. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 21\/May\/2015 06:28 AM                      +1 let's make this consistent to other bridges, and support and optional null-representing token.              n        n    n"}]}},{"OGM-839":{"info":{"issue_title":"Don&#39;t manage associations on the inverse side in Cassandra","issue_key":"OGM-839","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"4.2.0.Final","issue_labels":"4.2.0.Final","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-839?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-1876":{"info":{"issue_title":"Can we have the old DateBridge back?","issue_key":"HSEARCH-1876","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Won&#39;t Fix","issue_fix_version":"5.0.0.Final","issue_component":"5.0.0.Final","issue_labels":"5.0.0.Final","issue_description":"We use date fields both for sorting and faceting and are therefore indexing the field multiple times with different resolution (for performance reasons). With HSEARCH 5.xxx we are no longer able to do this because the old DateBridge has been removed.     @Fields({  \t@Field(analyze=Analyze.NO,\t\t\t  \t\tbridge=@FieldBridge(impl=org.hibernate.search.bridge.builtin.DateBridge.class,   \t\tparams=@Parameter(name=\"resolution\" , value=\"hour\" ))  \t),  \t@Field(name = \"created_srt\" , analyze = Analyze.NO,  \t\tbridge=@FieldBridge(impl=org.hibernate.search.bridge.builtin.DateBridge.class,   \t\tparams=@Parameter(name=\"resolution\" , value=\"second\" ))  \t)  })  @Column(name=\"created\" )  @Temporal(TemporalType.TIMESTAMP)  private  Date created;","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1876?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-68002","commnet_date":"2015-05-21T02:19:29-0700","commnet_user":"Hardy Ferentschik","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Hardy Ferentschikn added a comment  - 21\/May\/2015 02:19 AM    n        n        The old date bridge has not been removed, but just renamed. It's now called StringEncodingDateBridge. You should be able to just switch to this bridge.  n    n    n        n            Show  n            n                        n    n    n    n                nn       Hardy Ferentschikn added a comment  - 21\/May\/2015 02:19 AM                      The old date bridge has not been removed, but just renamed. It's now called  StringEncodingDateBridge . You should be able to just switch to this bridge.               n        n    n"},{"commnet_id":"comment-68007","commnet_date":"2015-05-21T05:22:16-0700","commnet_user":"Peter B. Vahlstrup","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Peter B. Vahlstrupn added a comment  - 21\/May\/2015 05:22 AM    n        n        great thanks. Missed it because of the new name  n    n    n        n            Show  n            n                        n    n    n    n                nn       Peter B. Vahlstrupn added a comment  - 21\/May\/2015 05:22 AM                      great thanks. Missed it because of the new name                n        n    n"},{"commnet_id":"comment-68010","commnet_date":"2015-05-21T06:24:58-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 21\/May\/2015 06:24 AM    n        n        Hi Peter,\r\nnthanks for sharing that use case. I'll update the migration guides shortly, we apparently missed to make a note of this change. Could you confirm the alternative works for you, to close this issue? n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 21\/May\/2015 06:24 AM                      Hi Peter, nthanks for sharing that use case. I'll update the migration guides shortly, we apparently missed to make a note of this change. Could you confirm the alternative works for you, to close this issue?              n        n    n"},{"commnet_id":"comment-68014","commnet_date":"2015-05-21T06:42:47-0700","commnet_user":"Peter B. Vahlstrup","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Peter B. Vahlstrupn added a comment  - 21\/May\/2015 06:42 AM    n        n        yes it works as expected n    n    n        n            Show  n            n                        n    n    n    n                nn       Peter B. Vahlstrupn added a comment  - 21\/May\/2015 06:42 AM                      yes it works as expected              n        n    n"},{"commnet_id":"comment-68017","commnet_date":"2015-05-21T08:04:30-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 21\/May\/2015 08:04 AM    n        n        Thanks Peter! Closing this. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 21\/May\/2015 08:04 AM                      Thanks Peter! Closing this.              n        n    n"}]}},{"HHH-9808":{"info":{"issue_title":"@ColumnTransformer is not applied on @Id members","issue_key":"HHH-9808","issue_type":"New Feature","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Rejected","issue_fix_version":"None","issue_component":"None","issue_labels":"hibernate-core","issue_description":"Having a class like:     @Entity  @Table(name=\"CONTRACT\" , schema=\"MYSCHEMA\" )  public  class Contract {  \t@Id  \t@ColumnTransformer(read=\"BINARY(CONTRACT_KEY)\" )  \t@Column(name=\"CONTRACT_KEY\" , updatable=false )  \tprivate  byte [] contractKey;  [...]  }     1.) Using this code to retrieve an object:    \t\tbyte [] key = new  byte [] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};  \t\tContract contract = em.find(Contract.class, key);     results in this SQL statement:       select          businessco0_.BUSI_CONT_MAIN_KEY as BUSI_CON1_0_0_      from          MYSCHEMA.CONTRACT businessco0_       where          businessco0_.CONTRACT_KEY=?     The @ColumnTransformer is neither applied on the select field nor on the where clause.  2.) Using this code to retrieve an object:    \t\tbyte [] key = new  byte [] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};  \t\tTypedQuery&lt;Contract&gt; query = em.createQuery(\"select c from Contract c where c.contractKey = ?1\" , Contract.class);  \t\tquery.setParameter(1, key);  \t\tContract contract = query.getSingleResult();     results in this SQL statement:       select          businessco0_.CONTRACT_KEY as BUSI_CON1_0_,          BINARY(businessco0_.OTHER_KEY) as OTHER_KEY27_0_      from          MYSCHEMA.CONTRACT businessco0_       where          BINARY(businessco0_.CONTRACT_KEY)=?     Now the @ColumnTransformer is correctly applied on the where clause, but not on the selection.\r\n Other non @Id fields which also have an @ColumnTransformer annotation are correctly created in above SQL statement (in above example column OTHER_KEY).  Bug or feature?","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9808?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69529","commnet_date":"2015-07-30T17:36:19-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 30\/Jul\/2015 17:36 PM    n        n        missing feature. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 30\/Jul\/2015 17:36 PM                      missing feature.              n        n    n"},{"commnet_id":"comment-70892","commnet_date":"2015-10-03T11:48:41-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 03\/Oct\/2015 11:48 AM    n        n        So much easier to follow when you format things  n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 03\/Oct\/2015 11:48 AM                      So much easier to follow when you format things                n        n    n"},{"commnet_id":"comment-70894","commnet_date":"2015-10-03T13:36:20-0700","commnet_user":"Thomas Meyer","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Thomas Meyern added a comment  - 03\/Oct\/2015 13:36 PM    n        n        Oops, I didn't know about the format options in jira. good to know  n    n    n        n            Show  n            n                        n    n    n    n                nn       Thomas Meyern added a comment  - 03\/Oct\/2015 13:36 PM                      Oops, I didn't know about the format options in jira. good to know                n        n    n"},{"commnet_id":"comment-74984","commnet_date":"2016-02-03T04:46:53-0800","commnet_user":"Andrea Boriero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Andrea Borieron added a comment  - 03\/Feb\/2016 04:46 AM     - edited  n        n        working on this feature I noticed that a transformer on and entity @Id can cause problems whennntupdating the entity. because the id of the managed entity is different from its db valuentlazy loading manyToOne collections, the where clause refers to the owner managed entity id that is different from the db valuennnnso not sure if I'm missing something or if it is just not good to introduce this new feature.nnnn n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Andrea Borieron added a comment  - 03\/Feb\/2016 04:46 AM     - edited                    working on this feature I noticed that a transformer on and entity @Id can cause problems when n nt updating the entity. because the id of the managed entity is different from its db value nt lazy loading manyToOne collections, the where clause refers to the owner managed entity id that is different from the db value n nnn so not sure if I'm missing something or if it is just not good to introduce this new feature. nnnn             n        n    n"},{"commnet_id":"comment-75037","commnet_date":"2016-02-08T15:11:41-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 08\/Feb\/2016 15:11 PM    n        n        To be honest, I'd personally vote -1 to this. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 08\/Feb\/2016 15:11 PM                      To be honest, I'd personally vote -1 to this.              n        n    n"},{"commnet_id":"comment-75038","commnet_date":"2016-02-08T15:29:01-0800","commnet_user":"Andrea Boriero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Andrea Borieron added a comment  - 08\/Feb\/2016 15:29 PM    n        n        -1 also for me n    n    n        n            Show  n            n                        n    n    n    n                nn       Andrea Borieron added a comment  - 08\/Feb\/2016 15:29 PM                      -1 also for me              n        n    n"},{"commnet_id":"comment-75040","commnet_date":"2016-02-08T19:02:12-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 08\/Feb\/2016 19:02 PM    n        n        Ok then, until this gets some votes or something else changes, going to reject this. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 08\/Feb\/2016 19:02 PM                      Ok then, until this gets some votes or something else changes, going to reject this.              n        n    n"},{"commnet_id":"comment-76933","commnet_date":"2016-04-11T05:34:42-0700","commnet_user":"Jeroen Gremmen","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Jeroen Gremmenn added a comment  - 11\/Apr\/2016 05:34 AM     - edited  n        n        +1 nnI actually require this to do something like this:nnnrn@Idrn@OneToOnern@ColumnTransformer(forColumn=\"cryptedid\" , write=\"encrypt(?)\" , read=\"decrypt(cryptedid)\" )rn@JoinColumnOrFormula(formula=@JoinFormula(value=\"decrypt(cryptedid)\" , referencedColumnName=\"docid\" ))rnprivate  Doc doc;rnn n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Jeroen Gremmenn added a comment  - 11\/Apr\/2016 05:34 AM     - edited                    +1  nn I actually require this to do something like this: nn  n rn@Idrn@OneToOnern@ColumnTransformer(forColumn= \"cryptedid\" , write= \"encrypt(?)\" , read= \"decrypt(cryptedid)\" )rn@JoinColumnOrFormula(formula=@JoinFormula(value= \"decrypt(cryptedid)\" , referencedColumnName= \"docid\" ))rn private  Doc doc;rn n               n        n    n"}]}},{"HHH-9807":{"info":{"issue_title":"Better error message when @Formula and @Id are combined","issue_key":"HHH-9807","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.1.0","issue_labels":"5.1.0","issue_description":"An NullPointerException occurs when you use a @Formula annotation and a @Id annotation on the same class member.  Example Stacktrace:  Thread &#91;pool-2-thread-2&#93;  (Suspended (exception NullPointerException))\t\r\n \tEjb3Column.forceNotNull() line: 477\t\r\n \tAnnotationBinder.processElementAnnotations(PropertyHolder, Nullability, PropertyData, HashMap&lt;String,IdentifierGeneratorDefinition&gt;, EntityBinder, boolean, boolean, boolean, MetadataBuildingContext, Map&lt;XClass,InheritanceState&gt;) line: 2214\t\r\n \tAnnotationBinder.processIdPropertiesIfNotAlready(Map&lt;XClass,InheritanceState&gt;, MetadataBuildingContext, PersistentClass, EntityBinder, PropertyHolder, HashMap&lt;String,IdentifierGeneratorDefinition&gt;, ElementsToProcess, boolean, Set&lt;String&gt;) line: 923\t\r\n \tAnnotationBinder.bindClass(XClass, Map&lt;XClass,InheritanceState&gt;, MetadataBuildingContext) line: 750\t\r\n \tAnnotationMetadataSourceProcessorImpl.processEntityHierarchies(Set&lt;String&gt;) line: 259\t\r\n \tMetadataBuildingProcess$2.processEntityHierarchies(Set&lt;String&gt;) line: 244\t\r\n \tMetadataBuildingProcess.build(MetadataSources, MetadataBuilderImpl$MetadataBuildingOptionsImpl) line: 287\t\r\n \tMetadataBuilderImpl.build() line: 413\t\r\n \tMetadataBuilderImpl.build() line: 99\t\r\n \tEntityManagerFactoryBuilderImpl.&lt;init&gt;(PersistenceUnitDescriptor, Map, ClassLoader) line: 200\t\r\n \tBootstrap.getEntityManagerFactoryBuilder(PersistenceUnitDescriptor, Map, ClassLoader) line: 51\t\r\n \tHibernatePersistenceProvider.getEntityManagerFactoryBuilder(PersistenceUnitDescriptor, Map, ClassLoader) line: 182\t\r\n \tHibernatePersistenceProvider.getEntityManagerFactoryBuilderOrNull(String, Map, ClassLoader) line: 131\t\r\n \tHibernatePersistenceProvider.getEntityManagerFactoryBuilderOrNull(String, Map) line: 88\t\r\n \tHibernatePersistenceProvider.createEntityManagerFactory(String, Map) line: 69\t\r\n \tPersistence.createEntityManagerFactory(String, Map) line: 55\t\r\n \tPersistence.createEntityManagerFactory(String) line: 39\t\r\n \tLimitPosition.getLimpos() line: 24\t\r\n \tNativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available &#91;native method&#93; \t\r\n \tNativeMethodAccessorImpl.invoke(Object, Object[]) line: not available\t\r\n \tDelegatingMethodAccessorImpl.invoke(Object, Object[]) line: not available\t\r\n \tMethod.invoke(Object, Object...) line: not available\t\r\n \tResourceMethodInvocationHandlerFactory$1.invoke(Object, Method, Object[]) line: 81\t\r\n \tAbstractJavaResourceMethodDispatcher$1.run() line: 164\t\r\n \tJavaResourceMethodDispatcherProvider$TypeOutInvoker(AbstractJavaResourceMethodDispatcher).invoke(ContainerRequest, Object, Object...) line: 181\t\r\n \tJavaResourceMethodDispatcherProvider$TypeOutInvoker.doDispatch(Object, ContainerRequest) line: 203\t\r\n \tJavaResourceMethodDispatcherProvider$TypeOutInvoker(AbstractJavaResourceMethodDispatcher).dispatch(Object, ContainerRequest) line: 101\t\r\n \tResourceMethodInvoker.invoke(RequestProcessingContext, Object) line: 389\t\r\n \tResourceMethodInvoker.apply(RequestProcessingContext) line: 347\t\r\n \tResourceMethodInvoker.apply(Object) line: 102\t\r\n \tServerRuntime$2.run() line: 305\t\r\n \tErrors$1.call() line: 271\t\r\n \tErrors$1.call() line: 267\t\r\n \tErrors.process(Callable&lt;T&gt;, boolean) line: 315\t\r\n \tErrors.process(Producer&lt;T&gt;, boolean) line: 297\t\r\n \tErrors.process(Runnable) line: 267\t\r\n \tRequestScope.runInScope(RequestScope$Instance, Runnable) line: 317\t\r\n \tServerRuntime.process(ContainerRequest) line: 288\t\r\n \tApplicationHandler.handle(ContainerRequest) line: 1110\t\r\n \tJdkHttpHandlerContainer.handle(HttpExchange) line: 179\t\r\n \tFilter$Chain.doFilter(HttpExchange) line: not available\t\r\n \tAuthFilter.doFilter(HttpExchange, Filter$Chain) line: not available\t\r\n \tFilter$Chain.doFilter(HttpExchange) line: not available\t\r\n \tServerImpl$Exchange$LinkHandler.handle(HttpExchange) line: not available\t\r\n \tFilter$Chain.doFilter(HttpExchange) line: not available\t\r\n \tServerImpl$Exchange.run() line: not available\t\r\n \tThreadPoolExecutor.runWorker(ThreadPoolExecutor$Worker) line: not available\t\r\n \tThreadPoolExecutor$Worker.run() line: not available\t\r\n \tThread.run() line: not available","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9807?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-67990","commnet_date":"2015-05-20T06:14:31-0700","commnet_user":"Thomas Meyer","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Thomas Meyern added a comment  - 20\/May\/2015 06:14 AM    n        n        The member mappingColumn is null in class Ejb3Column:nntpublic void forceNotNull() n{rnttmappingColumn.setNullable( false );rnt}nnnobject data:\r\nnthistEjb3Column  (id=127)t\r\nntcontexttMetadataBuildingContextRootImpl  (id=144)t\r\nntdefaultValuetnullt\r\nntexplicitTableNametnullt\r\nntformulatFormula  (id=147)t\r\nntformulaStringt\"BINARY(PRIMARY_KEY)\" (id=149)t\r\nntinsertablettruet\r\nntisImplicittfalset\r\nntjoinstnullt\r\nntlengtht255 &#91;0xff&#93; t\r\nntlogicalColumnNametnullt\r\nntmappingColumntnullt\r\nntnullablettruet\r\nntprecisiont0 &#91;0x0&#93; t\r\nntpropertyHoldertClassPropertyHolder  (id=164)t\r\nntpropertyNametnullt\r\nntreadExpressiontnullt\r\nntscalet0 &#91;0x0&#93; t\r\nntsqlTypetnullt\r\nnttabletnullt\r\nntuniquetfalset\r\nntupdatablettruet\r\nntwriteExpressiontnullt n    n    n        n            Show  n            n                        n    n    n    n                nn       Thomas Meyern added a comment  - 20\/May\/2015 06:14 AM                      The member mappingColumn is null in class Ejb3Column: nn tpublic void forceNotNull()  n{rnttmappingColumn.setNullable( false );rnt}nnn object data: nthistEjb3Column  (id=127)t ntcontexttMetadataBuildingContextRootImpl  (id=144)t ntdefaultValuetnullt ntexplicitTableNametnullt ntformulatFormula  (id=147)t ntformulaStringt\"BINARY(PRIMARY_KEY)\" (id=149)t ntinsertablettruet ntisImplicittfalset ntjoinstnullt ntlengtht255  &#91;0xff&#93; t ntlogicalColumnNametnullt ntmappingColumntnullt ntnullablettruet ntprecisiont0  &#91;0x0&#93; t ntpropertyHoldertClassPropertyHolder  (id=164)t ntpropertyNametnullt ntreadExpressiontnullt ntscalet0  &#91;0x0&#93; t ntsqlTypetnullt nttabletnullt ntuniquetfalset ntupdatablettruet ntwriteExpressiontnullt              n        n    n"},{"commnet_id":"comment-68346","commnet_date":"2015-06-01T09:13:11-0700","commnet_user":"Brett Meyer","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Brett Meyern added a comment  - 01\/Jun\/2015 09:13 AM    n        n        Can you please attach a test case that we can use to 1.) reproduce and 2.) add as a regression test?  Thanks! n    n    n        n            Show  n            n                        n    n    n    n                nn       Brett Meyern added a comment  - 01\/Jun\/2015 09:13 AM                      Can you please attach a test case that we can use to 1.) reproduce and 2.) add as a regression test?  Thanks!              n        n    n"},{"commnet_id":"comment-68504","commnet_date":"2015-06-14T07:49:50-0700","commnet_user":"Thomas Meyer","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Thomas Meyern added a comment  - 14\/Jun\/2015 07:49 AM    n        n        Unpack archive and run with\r\nn$ mvn exec:java -Dexec.mainClass=de.m3y3r.hhh9807.App n    n    n        n            Show  n            n                        n    n    n    n                nn       Thomas Meyern added a comment  - 14\/Jun\/2015 07:49 AM                      Unpack archive and run with n$ mvn exec:java -Dexec.mainClass=de.m3y3r.hhh9807.App              n        n    n"},{"commnet_id":"comment-70891","commnet_date":"2015-10-03T11:47:18-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 03\/Oct\/2015 11:47 AM    n        n        The attachment here seems corrupt.  I cannot open it at any rate.  nnReally I just need to see your mapping leading to this.   n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 03\/Oct\/2015 11:47 AM                      The attachment here seems corrupt.  I cannot open it at any rate.   nn Really I just need to see your mapping leading to this.                n        n    n"},{"commnet_id":"comment-70893","commnet_date":"2015-10-03T13:34:27-0700","commnet_user":"Thomas Meyer","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Thomas Meyern added a comment  - 03\/Oct\/2015 13:34 PM    n        n        Reattached as zip... n    n    n        n            Show  n            n                        n    n    n    n                nn       Thomas Meyern added a comment  - 03\/Oct\/2015 13:34 PM                      Reattached as zip...              n        n    n"},{"commnet_id":"comment-70954","commnet_date":"2015-10-07T07:10:43-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 07\/Oct\/2015 07:10 AM    n        n        I asked about this one on the hibernate-dev list.  So far everyone is in agreement that this should not be supported.  We just do not see the justification for supporting it.   We do all agree that there should be a better error message about this not being supported, beside just a NPE.nnSo at the moment I am inclined to \"reject\" the feature request, although I will likely just re-categorize it as an improvement to the exception. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 07\/Oct\/2015 07:10 AM                      I asked about this one on the hibernate-dev list.  So far everyone is in agreement that this should not be supported.  We just do not see the justification for supporting it.   We do all agree that there should be a better error message about this not being supported, beside just a NPE. nn So at the moment I am inclined to \"reject\" the feature request, although I will likely just re-categorize it as an improvement to the exception.              n        n    n"}]}},{"OGM-836":{"info":{"issue_title":"Add Cassandra dependencies to the distribution package","issue_key":"OGM-836","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"4.2.0.Final","issue_labels":"4.2.0.Final","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-836?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-834":{"info":{"issue_title":"Release notes script should list all components of an issue","issue_key":"OGM-834","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"4.2.0.Final","issue_labels":"4.2.0.Final","issue_description":"Currently only the first component is shown, but all associated ones should be added.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-834?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-67976","commnet_date":"2015-05-20T00:52:33-0700","commnet_user":"Davide D&#39;Alto","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Davide D&#39;Alton added a comment  - 20\/May\/2015 00:52 AM    n        n        Should we store the scripts in a folder in the project.nnSomething like release-scripts or scripts? n    n    n        n            Show  n            n                        n    n    n    n                nn       Davide D&#39;Alton added a comment  - 20\/May\/2015 00:52 AM                      Should we store the scripts in a folder in the project. nn Something like release-scripts or scripts?              n        n    n"},{"commnet_id":"comment-67981","commnet_date":"2015-05-20T01:02:31-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 20\/May\/2015 01:02 AM    n        n        They are stored in the project already: https:\/\/github.com\/hibernate\/hibernate-ogm\/tree\/master\/src\/main\/release-scriptsnnThe one for the release notes is https:\/\/github.com\/hibernate\/hibernate-ogm\/blob\/master\/src\/main\/release-scripts\/pre-release.rbnnThe other scripts in that folder resemble the steps from the release job on CI, we only did not yet get to changing the job to invoking these scripts instead of the inline bash steps. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 20\/May\/2015 01:02 AM                      They are stored in the project already:  https:\/\/github.com\/hibernate\/hibernate-ogm\/tree\/master\/src\/main\/release-scripts  nn The one for the release notes is  https:\/\/github.com\/hibernate\/hibernate-ogm\/blob\/master\/src\/main\/release-scripts\/pre-release.rb  nn The other scripts in that folder resemble the steps from the release job on CI, we only did not yet get to changing the job to invoking these scripts instead of the inline bash steps.              n        n    n"},{"commnet_id":"comment-67983","commnet_date":"2015-05-20T01:09:53-0700","commnet_user":"Davide D&#39;Alto","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Davide D&#39;Alton added a comment  - 20\/May\/2015 01:09 AM    n        n        Cool, I completely forgot about this because these sub-folder don't appear.nnWe should probably mention these scripts\/folder  in the how to release guide. n    n    n        n            Show  n            n                        n    n    n    n                nn       Davide D&#39;Alton added a comment  - 20\/May\/2015 01:09 AM                      Cool, I completely forgot about this because these sub-folder don't appear. nn We should probably mention these scripts\/folder  in the how to release guide.              n        n    n"}]}},{"OGM-832":{"info":{"issue_title":"Investigate alternative association mappings for Cassandra","issue_key":"OGM-832","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"cassandra","issue_description":"Instead of mapping associations via dedicated association tables, we may leverage the list\/set\/map data types Cassandra provides for storing the ids of associated elements. That be beneficial wrt. to consistency (an entity and the associated ids can be written in one round-trip to the datastore).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-832?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-830":{"info":{"issue_title":"Storing multiply generators in one CouchDB document","issue_key":"OGM-830","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"couchdb","issue_description":"I was trying to configure generators to have one document for all id. So I tried following configurations      @TableGenerator(       name = \"gen\" ,       table = \"sequences\" ,       pkColumnValue = \"all\" ,       valueColumnName = \"firstClass\"      )     @TableGenerator(        name = \"gen\" ,        table = \"sequences\" ,        pkColumnValue = \"all\" ,        valueColumnName = \"secondClass\"      )   But this didn't work for CouchDB ( for Mogno did), please check my pr for my understadning of this problem.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-830?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-67946","commnet_date":"2015-05-19T00:17:45-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 19\/May\/2015 00:17 AM    n        n        If you say it doesn't work, what exactly does happen? Do you see any error\/exception? In general I think you are better off by using different PK column values (e.g. the current approach will not be portable to Hibernate ORM). Or even yet better work with UUIDs. Still it should be possible on document stores. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 19\/May\/2015 00:17 AM                      If you say it doesn't work, what exactly does happen? Do you see any error\/exception? In general I think you are better off by using different PK column values (e.g. the current approach will not be portable to Hibernate ORM). Or even yet better work with UUIDs. Still it should be possible on document stores.              n        n    n"},{"commnet_id":"comment-67953","commnet_date":"2015-05-19T06:58:15-0700","commnet_user":"Adam Stawicki","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Adam Stawickin added a comment  - 19\/May\/2015 06:58 AM    n        n        You're right, I made mistake, and I actually meant what you suggest. Now I see logic here, ORM and Mongo will create one table\/document, but CouchDB will have one document per one sequence anyway. Sorry for confusion n    n    n        n            Show  n            n                        n    n    n    n                nn       Adam Stawickin added a comment  - 19\/May\/2015 06:58 AM                      You're right, I made mistake, and I actually meant what you suggest. Now I see logic here, ORM and Mongo will create one table\/document, but CouchDB will have one document per one sequence anyway. Sorry for confusion              n        n    n"},{"commnet_id":"comment-67954","commnet_date":"2015-05-19T07:25:59-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Gunnar Morlingn added a comment  - 19\/May\/2015 07:25 AM     - edited  n        n        In theory your original approach should work, so I'd still be interested in the exact error you got. But as said I'd advice against using it, because it's a) not portable to fixed-schema stores and b) causes contention on that single document. n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Gunnar Morlingn added a comment  - 19\/May\/2015 07:25 AM     - edited                    In theory your original approach should work, so I'd still be interested in the exact error you got. But as said I'd advice against using it, because it's a) not portable to fixed-schema stores and b) causes contention on that single document.              n        n    n"},{"commnet_id":"comment-67955","commnet_date":"2015-05-19T07:31:52-0700","commnet_user":"Adam Stawicki","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Adam Stawickin added a comment  - 19\/May\/2015 07:31 AM     - edited  n        n        I didn't get any error, I just couldn't keep all my sequences in one document, like I have in Mongo. n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Adam Stawickin added a comment  - 19\/May\/2015 07:31 AM     - edited                    I didn't get any error, I just couldn't keep all my sequences in one document, like I have in Mongo.              n        n    n"}]}},{"HHH-9804":{"info":{"issue_title":"Ehcache integration uses a write lock where a read lock is requested in EhcacheTransactionalDataRegion","issue_key":"HHH-9804","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.CR1","issue_labels":"5.0.0.CR1","issue_description":"As a follow up                                                          HHH-9612                                                              Closed","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9804?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-829":{"info":{"issue_title":"Error message upon connection failure is cryptic in Cassandra backend","issue_key":"OGM-829","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"4.2.0.Beta1","issue_component":"4.2.0.Beta1","issue_labels":"4.2.0.Beta1","issue_description":"org.hibernate.service.spi.ServiceException: Unable to create requested service [org.hibernate.ogm.dialect.spi.GridDialect]          at com.datastax.driver.core.ControlConnection.reconnectInternal(ControlConnection.java:220)          at com.datastax.driver.core.ControlConnection.connect(ControlConnection.java:78)          at com.datastax.driver.core.Cluster$Manager.init(Cluster.java:1231)          at com.datastax.driver.core.Cluster.init(Cluster.java:158)          at com.datastax.driver.core.Cluster.connect(Cluster.java:246)          at org.hibernate.ogm.datastore.cassandra.impl.CassandraDatastoreProvider.start(CassandraDatastoreProvider.java:114)          at org.hibernate.service.internal.AbstractServiceRegistryImpl.startService(AbstractServiceRegistryImpl.java:329)          at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:237)          at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:206)          at org.hibernate.ogm.dialect.impl.GridDialectInitiator.initiateService(GridDialectInitiator.java:50)          at org.hibernate.ogm.dialect.impl.GridDialectInitiator.initiateService(GridDialectInitiator.java:34)          at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:105)          at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:251)          at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:225)          at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:206)          at org.hibernate.ogm.dialect.impl.OgmDialectFactoryInitiator$OgmDialectFactory.&lt;init&gt;(OgmDialectFactoryInitiator.java:44)          at org.hibernate.ogm.dialect.impl.OgmDialectFactoryInitiator.initiateService(OgmDialectFactoryInitiator.java:31)          at org.hibernate.ogm.dialect.impl.OgmDialectFactoryInitiator.initiateService(OgmDialectFactoryInitiator.java:25)          at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:105)          at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:251)          at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:225)          at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:206)          at org.hibernate.engine.jdbc.internal.JdbcServicesImpl.configure(JdbcServicesImpl.java:95)          at org.hibernate.ogm.service.impl.OgmJdbcServicesInitiator$OgmJdbcServicesImpl.configure(OgmJdbcServicesInitiator.java:50)          at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.configureService(StandardServiceRegistryImpl.java:111)          at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:234)          at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:206)          at org.hibernate.cfg.Configuration.buildTypeRegistrations(Configuration.java:1887)          at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1845)          at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1930)          at org.hibernate.ogm.cfg.OgmConfiguration.buildSessionFactory(OgmConfiguration.java:96)          at org.hibernate.ogm.cfg.OgmConfiguration.buildSessionFactory(OgmConfiguration.java:38)          at org.hibernate.ogm.utils.OgmTestRunner.buildSessionFactory(OgmTestRunner.java:178)          at org.hibernate.ogm.utils.OgmTestRunner.run(OgmTestRunner.java:116)          at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:283)          at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:173)          at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)          at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:128)     Other backends, have an explicit ServiceException error with something explicit.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-829?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-9801":{"info":{"issue_title":"Distribute some more test helpers like JdbcConnectionAccessImpl","issue_key":"HHH-9801","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"build,                                            testsuite","issue_description":"I've copied JdbcConnectionAccessImpl into Hibernate Search as it's part of the Hibernate ORM testsuite, not distributed in the Maven repositories.  It would be nice if this utility was distributed as end users might benefit from it (and Search too); there seem to be more interesting utilities in that same package.  A simple fix would be to distribute these as \"test jar\", an alternative would be to move these to hibernate-testing.\r\n Or to merge the 'hibernate-testing' back into the hibernate tests module.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9801?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-1872":{"info":{"issue_title":"Create a proper API for sorting definitions","issue_key":"HSEARCH-1872","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.6.0.Beta3","issue_labels":"5.6.0.Beta3","issue_description":"Especially useful for the DSL, but not exclusively as we apply sorting as an independent component from the query definition.  Important to possibly decouple from the Lucene engine in local mode, and also to abstract the user application code from the Lucene API changes.  However while abstraction has some benefits, let's make sure that no functionality is taken away from people having deep Lucene understanding.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1872?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-82458","commnet_date":"2016-08-12T03:20:37-0700","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 12\/Aug\/2016 03:20 AM    n        n        Where is this API going?\r\nnOur ultimate goal is to be more independent of Lucene internal API. Currently, most of our machinery is based on Lucene API (we build our index with Lucene Documents for instance) and this has to change.\r\nnIt's a Search 6 thing though.nOk. So this API is bound to disappear in its current form.nnIs this API going to support native sorts?\r\nnNative sorts are important. The fact is that Elasticsearch brings a lot of power to the user and it is really important to allow the user to use this power.nI completely agree with that. I was just saying that maybe we should try to provide a way to chain DSL-built sorts with native sorts (through another API, provided only by the ES module) instead of adding backend-dependent methods to the DSL. \r\nnBut if the API is to be rebuilt from the ground up in 6, well, I guess I can live with that.nnShould we keep andByIndexOrder\/andByScore\r\nn+1 to keep them. I also thought they might be useful.nWill do. I will also add a way to chain an andByField after a byScore, just in case.nnShould we keep in(Unit)\r\nnMaybe we could simply provide a fixed value for Elasticsearch (probably meter) and document that?\r\nnIn the long term, we will probably need to be able to define backend specific options but it might not be a priority for now.nAgreed, a fixed value seems the way to go. I'll check out what the unit for our FullTextQuery.SPATIAL_DISTANCE is, but it seems to be kilometers (org.hibernate.search.query.engine.impl.DocumentExtractorImpl.extract(int) =&gt; org.hibernate.search.query.engine.impl.QueryHits.spatialDistance(int) =&gt; org.hibernate.search.spatial.impl.DistanceCollector.HitEntry.getDistance(Point) =&gt; org.hibernate.search.spatial.impl.Point.getDistanceTo(double, double)). A bit odd, but changing it would be an API break, so let's be consistent...nnIs the byDistanceFromSpatialQuery(Query) method making sense\r\nnIt's a useful shortcut. If we can provide a useful error message if the user is not providing a spatial query, I think it's worth it. If it's going to be cryptic, probably not.nNot sure it's really a shortcut, that was my point. Without it, we'd have this kind of code:nnnrnQuery luceneQuery = builder.spatial()rntt.onField( \"location\"  )rntt.within( 100, Unit.KM )rnttt.ofLatitude( centerLatitude )rnttt.andLongitude( centerLongitude )rnt.createQuery();rnFullTextQuery hibQuery = fullTextSession.createFullTextQuery( luceneQuery, POI.class );rnSort sort = builder.sort()rnt.byField( \"location\"  )rnttt.fromLatitude( centerLatitude )rnttt.andLongitude( centerLongitude )rnt.createSort();rnhibQuery.setSort( sort );rnnnnAnd with it, that kind of code:nnnrnQuery luceneQuery = builder.spatial()rntt.onField( \"location\"  )rntt.within( 100, Unit.KM )rnttt.ofLatitude( centerLatitude )rnttt.andLongitude( centerLongitude )rnt.createQuery();rnFullTextQuery hibQuery = fullTextSession.createFullTextQuery( luceneQuery, POI.class );rnSort sort = builder.sort()rnt.byField( \"location\"  )rnttt.byDistanceFromSpatialQuery( luceneQuery )rnt.createSort();rnhibQuery.setSort( sort );rnnnnSo we gained one line of code. Out of a dozen. And we lost in clarity, though that's a matter of opinion.\r\nnAnyway, I'll see if we can at least implement this cleanly.nnDo we want to support sorting on unmapped fields\r\nnI think it can be considered an acceptable limitation to always sort on common fields. I wouldn't enforce it though so that it continues to work as before for Lucene.\r\nnIt would be something to keep in mind for Search 6.nOk to support only common fields. But as to \"work as before\", the DSL didn't exist \"before\", so it will only mean that users can provide their own SortField through the byNative methods.nnThanks! n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 12\/Aug\/2016 03:20 AM                       Where is this API going? nOur ultimate goal is to be more independent of Lucene internal API. Currently, most of our machinery is based on Lucene API (we build our index with Lucene Documents for instance) and this has to change. nIt's a Search 6 thing though.  n Ok. So this API is bound to disappear in its current form. nn  Is this API going to support native sorts? nNative sorts are important. The fact is that Elasticsearch brings a lot of power to the user and it is really important to allow the user to use this power.  n I completely agree with that. I was just saying that maybe we should try to provide a way to chain DSL-built sorts with native sorts (through another API, provided only by the ES module) instead of adding backend-dependent methods to the DSL.  nBut if the API is to be rebuilt from the ground up in 6, well, I guess I can live with that. nn  Should we keep andByIndexOrder\/andByScore n+1 to keep them. I also thought they might be useful.  n Will do. I will also add a way to chain an  andByField  after a  byScore , just in case. nn  Should we keep in(Unit) nMaybe we could simply provide a fixed value for Elasticsearch (probably meter) and document that? nIn the long term, we will probably need to be able to define backend specific options but it might not be a priority for now.  n Agreed, a fixed value seems the way to go. I'll check out what the unit for our FullTextQuery.SPATIAL_DISTANCE is, but it seems to be kilometers ( org.hibernate.search.query.engine.impl.DocumentExtractorImpl.extract(int)  =&gt;  org.hibernate.search.query.engine.impl.QueryHits.spatialDistance(int)  =&gt;  org.hibernate.search.spatial.impl.DistanceCollector.HitEntry.getDistance(Point)  =&gt;  org.hibernate.search.spatial.impl.Point.getDistanceTo(double, double) ). A bit odd, but changing it would be an API break, so let's be consistent... nn  Is the byDistanceFromSpatialQuery(Query) method making sense nIt's a useful shortcut. If we can provide a useful error message if the user is not providing a spatial query, I think it's worth it. If it's going to be cryptic, probably not.  n Not sure it's really a shortcut, that was my point. Without it, we'd have this kind of code: nn  n rnQuery luceneQuery = builder.spatial()rntt.onField(  \"location\"  )rntt.within( 100, Unit.KM )rnttt.ofLatitude( centerLatitude )rnttt.andLongitude( centerLongitude )rnt.createQuery();rnFullTextQuery hibQuery = fullTextSession.createFullTextQuery( luceneQuery, POI.class );rnSort sort = builder.sort()rnt.byField(  \"location\"  )rnttt.fromLatitude( centerLatitude )rnttt.andLongitude( centerLongitude )rnt.createSort();rnhibQuery.setSort( sort );rn n  nn And with it, that kind of code: nn  n rnQuery luceneQuery = builder.spatial()rntt.onField(  \"location\"  )rntt.within( 100, Unit.KM )rnttt.ofLatitude( centerLatitude )rnttt.andLongitude( centerLongitude )rnt.createQuery();rnFullTextQuery hibQuery = fullTextSession.createFullTextQuery( luceneQuery, POI.class );rnSort sort = builder.sort()rnt.byField(  \"location\"  )rnttt.byDistanceFromSpatialQuery( luceneQuery )rnt.createSort();rnhibQuery.setSort( sort );rn n  nn So we gained one line of code. Out of a dozen. And we lost in clarity, though that's a matter of opinion. nAnyway, I'll see if we can at least implement this cleanly. nn  Do we want to support sorting on unmapped fields nI think it can be considered an acceptable limitation to always sort on common fields. I wouldn't enforce it though so that it continues to work as before for Lucene. nIt would be something to keep in mind for Search 6.  n Ok to support only common fields. But as to \"work as before\", the DSL didn't exist \"before\", so it will only mean that users can provide their own  SortField  through the  byNative  methods. nn Thanks!              n        n    n"},{"commnet_id":"comment-82854","commnet_date":"2016-08-23T01:13:14-0700","commnet_user":"Nicolas Helleringer","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Nicolas Helleringern added a comment  - 23\/Aug\/2016 01:13 AM    n        n        nElasticsearch lets you sort by distance between a point and a coordinate in a document through several methods. SLOPPY_ARC (default), ARC and PLANE. Do you think that is implementable directly via the Lucene Sort\/SortField classes like you did DistanceSortField \/ DistanceComparator.\r\nnIs that worth it?\r\nnAnd what is the current implementation doing?nnIf I do understand the Elasticsearch doc well, ARC is a mathematically correct spherical distance, SLOPPY_ARC is a \"faster\" computation method and PLANE is planar distance with local projection around the center of the search.nnI do think that trying to save some CPU cycle here is overkill and not needed in most cases but I think it is globally doable to have a support for multiple distance computation methods in Hibernate Search.nnThe current implementation is doing accurate spherical computation.nnI need to grab some time to go deeper into Elasticsearch and Hibernate Search code to compare if you need to. n    n    n        n            Show  n            n                        n    n    n    n                nn       Nicolas Helleringern added a comment  - 23\/Aug\/2016 01:13 AM                      n Elasticsearch lets you sort by distance between a point and a coordinate in a document through several methods. SLOPPY_ARC (default), ARC and PLANE. Do you think that is implementable directly via the Lucene Sort\/SortField classes like you did DistanceSortField \/ DistanceComparator. nIs that worth it? nAnd what is the current implementation doing?  nn If I do understand the Elasticsearch doc well, ARC is a mathematically correct spherical distance, SLOPPY_ARC is a \"faster\" computation method and PLANE is planar distance with local projection around the center of the search. nn I do think that trying to save some CPU cycle here is overkill and not needed in most cases but I  think  it is globally doable to have a support for multiple distance computation methods in Hibernate Search. nn The current implementation is doing accurate spherical computation. nn I need to grab some time to go deeper into Elasticsearch and Hibernate Search code to compare if you need to.              n        n    n"},{"commnet_id":"comment-83147","commnet_date":"2016-08-26T02:14:41-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 26\/Aug\/2016 02:14 AM    n        n        Where is the API goingnnThe most likely scenario is that QueryBuilder will be made generic in 6 to output:nnntLucene Query or Elasticsearch JSON when createQuery is calledntLucene Sort or Elasticsearch JSON when createSort is calledntbe byNative(SortField) for Lucene and byNative(String) for ESnnnnIt's not rebuilt from the ground up, just generified to meet our needs. We did explore in Rome something that integrate the DSL and the createQuery but it was not destroying the DSL, just adding more leaves options if I recall.nnSpatialnnOk Nicolas Helleringer, let's keep withComputeMethod for later just making usre the DSL could be expanded.\r\nnOn byDistanceFromSpatialQuery(Query) I'm fine with dropping it.nnNativennI still feel native should be in with a oveloaded method byNative(SortField) and byNative(String), the former only usable with Lucene, the latter only with Elasticsearch. Yes using a custom SortField to keep the JSON string payload seems fine to me for the time being. In 6, we will be able to introduce a generic type bedending ont he backend targeted. So yes it looks hacky but that's temporary. Make it experimental if you have concerns.nnDo we want to support sorting on unmapped fieldsnnDoesn't native gives us a way out?\r\nnAnyways, I'm fine with restricting for now. n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 26\/Aug\/2016 02:14 AM                        Where is the API going nn The most likely scenario is that  QueryBuilder  will be made generic in 6 to output: nn nt Lucene  Query  or Elasticsearch JSON when createQuery is called nt Lucene  Sort  or Elasticsearch JSON when createSort is called nt be  byNative(SortField)  for Lucene and  byNative(String)  for ES n nnn It's not rebuilt from the ground up, just generified to meet our needs. We did explore in Rome something that integrate the DSL and the  createQuery  but it was not destroying the DSL, just adding more leaves options if I recall. nn   Spatial nn Ok  Nicolas Helleringer , let's keep  withComputeMethod  for later just making usre the DSL could be expanded. nOn  byDistanceFromSpatialQuery(Query)  I'm fine with dropping it. nn   Native nn I still feel native should be in with a oveloaded method  byNative(SortField)  and  byNative(String) , the former only usable with Lucene, the latter only with Elasticsearch. Yes using a custom  SortField  to keep the JSON string payload seems fine to me for the time being. In 6, we will be able to introduce a generic type bedending ont he backend targeted. So yes it looks hacky but that's temporary. Make it experimental if you have concerns. nn   Do we want to support sorting on unmapped fields nn Doesn't native gives us a way out? nAnyways, I'm fine with restricting for now.              n        n    n"},{"commnet_id":"comment-83148","commnet_date":"2016-08-26T02:15:32-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 26\/Aug\/2016 02:15 AM    n        n        I think I've caught up with the status, let me know otherwise. And thanks for the relay  n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 26\/Aug\/2016 02:15 AM                      I think I've caught up with the status, let me know otherwise. And thanks for the relay                n        n    n"},{"commnet_id":"comment-83149","commnet_date":"2016-08-26T02:49:15-0700","commnet_user":"Yoann Rodiu00E8re","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 26\/Aug\/2016 02:49 AM    n        n        Emmanuel Bernard Thanks. It seems the PR there will fulfill your requirements: https:\/\/github.com\/hibernate\/hibernate-search\/pull\/1139 n    n    n        n            Show  n            n                        n    n    n    n                nn       Yoann Rodiu00E8ren added a comment  - 26\/Aug\/2016 02:49 AM                       Emmanuel Bernard  Thanks. It seems the PR there will fulfill your requirements:  https:\/\/github.com\/hibernate\/hibernate-search\/pull\/1139               n        n    n"}]}},{"HHH-9795":{"info":{"issue_title":"Create delegating base class for SessionFactory(Implementor) implementations","issue_key":"HHH-9795","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.CR1","issue_labels":"5.0.0.CR1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9795?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-1869":{"info":{"issue_title":"Validate for each hibernate.search prefixed configuration property to be consumed","issue_key":"HSEARCH-1869","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6","issue_labels":"6","issue_description":"While we can not validate all properties since all of environment properties and JVM are available in our configuration, we could at least make sure that those having an \"hibernate.search.\" prefix are valid.  Validity if the property is also a bit tricky to define, as we allow independent property definitions for each module, and some are defined by third party extensions.  So the idea is to track which specific keys are being actually \"hit\" by some cfg.getProperty( \"key\" ) .. any property which has an unexpected key name would not be hit. For these we trigger a warning being logged.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1869?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-9791":{"info":{"issue_title":"Add varargs to Restrictions.in(...)","issue_key":"HHH-9791","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"5.0.0.Beta2","issue_component":"5.0.0.Beta2","issue_labels":"5.0.0.Beta2","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9791?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-826":{"info":{"issue_title":"Don&#39;t run @BeforeClass\/@AfterClass methods if entire test class is skipped","issue_key":"OGM-826","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"4.2.0.CR1","issue_labels":"4.2.0.CR1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-826?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-825":{"info":{"issue_title":"Support queries on referenced entity if stored on current side of association","issue_key":"OGM-825","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"5.x","issue_labels":"5.x","issue_description":"It should be possible to support queries such as     TypedQuery&lt;DashboardItem&gt; query = em.createQuery(\"from DashboardItem WHERE parent = :parentID ORDER BY id\" , DashboardItem.class);  query.setParameter(\"parentID\" , dashboard);     Also without join capabilities if the associated id is stored on \"this\" side of the association.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-825?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-1867":{"info":{"issue_title":"Change TypeMetadata#getEmbeddedTypeMetadata() to return a set instead of list","issue_key":"HSEARCH-1867","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.5.1.Final,                                            5.6.0.Alpha1","issue_labels":"5.5.1.Final,                                            5.6.0.Alpha1","issue_description":"Re-do the change undone with                                                          HSEARCH-1866                                                              Closed                , once                                                          HSEARCH-1865                                                              Open                 has been resolved and released and the Lucene-based parser component doesn't rely on that method any longer.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1867?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-1866":{"info":{"issue_title":"Revert changes to signatures of methods in TypeMetadata and PropertyMetadata","issue_key":"HSEARCH-1866","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.3.0.Beta1","issue_component":"5.3.0.Beta1","issue_labels":"5.3.0.Beta1","issue_description":"The Lucene-basded HQL parser component uses the internal method TypeMetadata#getEmbeddedTypeMetadata() atm. In the long run this needs to be altered to make use the public meta-data API instead, but for now it causes a compatibility issue, as this method's signature has changed from 5.2 to 5.3 (returns a set now instead of a list).   In order to make the parser component work with 5.2 and 5.3, let's revert that change for now and re-do it once                                                          HSEARCH-1865                                                              Open                 is implemented.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1866?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HSEARCH-1865":{"info":{"issue_title":"Extend public meta-data API to provide information on embedded properties\/fields","issue_key":"HSEARCH-1865","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1865?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-823":{"info":{"issue_title":"Upgrade to Hibernate Search 5.2.0.Final","issue_key":"OGM-823","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"4.2.0.CR1","issue_labels":"4.2.0.CR1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-823?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-67835","commnet_date":"2015-05-11T03:51:28-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 11\/May\/2015 03:51 AM    n        n        https:\/\/github.com\/hibernate\/hibernate-ogm\/pull\/530 n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 11\/May\/2015 03:51 AM                       https:\/\/github.com\/hibernate\/hibernate-ogm\/pull\/530               n        n    n"}]}},{"OGM-822":{"info":{"issue_title":"Upgrade to Infinispan 7.2.1.Final","issue_key":"OGM-822","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"4.2.0.CR1","issue_labels":"4.2.0.CR1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-822?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-821":{"info":{"issue_title":"Multi-tenancy support for Hibernate OGM","issue_key":"OGM-821","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"core","issue_description":"Hibernate Search now supporting a proper integration with the Hibernate ORM tenant-id system, Hibernate OGM has to at least comply with the SPI of Hibernate Search.  It's possible that fully supporting multi-tenancy in OGM isn't far out of reach at this point, but would need at least some tests and probably some design brainstorming.  Queries might already be generating the correct results, although I'd need to double check that the execution of queries isn't bypassing the filters enforced by Search.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-821?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-991":{"info":{"issue_title":"Add constraint annotations for Polish identification numbers","issue_key":"HV-991","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"5.1.3.Final","issue_component":"5.1.3.Final","issue_labels":"5.1.3.Final","issue_description":"Polish indetifiaction numbers REGON and NIP are using Mod11 checksum algorithm but with weights that does not increase linearly, e.g. 14 digit REGON has weights: 2 4 8 5 0 9 7 3 6 1 2 4 8.  It would be nice to have the possibility to provide custom weights as a parameter to Mod1XCheck annotation.  Provide constraint annotations for three Polish identification numbers:  \tNIP (information can be found here - https:\/\/pl.wikipedia.org\/wiki\/NIP) \tREGON (information can be found here - https:\/\/pl.wikipedia.org\/wiki\/REGON) \tPESEL (information can be found here - https:\/\/pl.wikipedia.org\/wiki\/PESEL)","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-991?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-67833","commnet_date":"2015-05-11T02:49:35-0700","commnet_user":"Hardy Ferentschik","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Hardy Ferentschikn added a comment  - 11\/May\/2015 02:49 AM    n        n        Thanks for the issue report. The quickest way to see a feature like this in Validator is to contribute and create a pull request. Do you fell up for it?  n    n    n        n            Show  n            n                        n    n    n    n                nn       Hardy Ferentschikn added a comment  - 11\/May\/2015 02:49 AM                      Thanks for the issue report. The quickest way to see a feature like this in Validator is to  contribute  and create a pull request. Do you fell up for it?                n        n    n"},{"commnet_id":"comment-67834","commnet_date":"2015-05-11T03:06:56-0700","commnet_user":"Marcin Kwaczyu0144ski","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Marcin Kwaczyu0144skin added a comment  - 11\/May\/2015 03:06 AM    n        n        Yes, I will give it a try  n    n    n        n            Show  n            n                        n    n    n    n                nn       Marcin Kwaczyu0144skin added a comment  - 11\/May\/2015 03:06 AM                      Yes, I will give it a try                n        n    n"},{"commnet_id":"comment-67836","commnet_date":"2015-05-11T03:57:06-0700","commnet_user":"Hardy Ferentschik","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Hardy Ferentschikn added a comment  - 11\/May\/2015 03:57 AM    n        n        Awesome, if you need a hand with something let us know. n    n    n        n            Show  n            n                        n    n    n    n                nn       Hardy Ferentschikn added a comment  - 11\/May\/2015 03:57 AM                      Awesome, if you need a hand with something let us know.              n        n    n"},{"commnet_id":"comment-84905","commnet_date":"2016-10-12T02:32:29-0700","commnet_user":"Marko Bekhta","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Marko Bekhtan added a comment  - 12\/Oct\/2016 02:32 AM    n        n        hi, Guillaume Smet, I was looking into this one - and I thought that it can be implemented like this:nnrn...rn@Constraint(validatedBy = { })rn@ReportAsSingleViolationrn@Mod11Check(weights = { 8, 9, 2, 3, 4, 5, 6, 7 }, processingDirection = Mod11Check.ProcessingDirection.LEFT_TO_RIGHT)rnpublic  @interface  REGON9 {rn...rn<\/pre>n<\/div><\/div>nn<p>So just by adding additional parameter to Mod check (weights), and then simply declaring the annotations for REGON and so on. But the problem that I see is that even though the algorithm seems to be similar to Mod check, for REGON you need to calculate <\/p>n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">n<pre class=\"code-java\">sum % moduloParam<\/pre>n<\/div><\/div>n<p>and for Mod11 it's :<\/p>n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">n<pre class=\"code-java\">moduloParam - ( sum % moduloParam )<\/pre>n<\/div><\/div>nn<p>So I don't think that this approach would work for the case of this REGON number, and that a new validator should be written for it, rather than just putting a Mod11Check annotation on the REGON annotation declaration. Most likely this new validator will extend from the Mod11CheckValidator.<\/p>nn<p>What do you think ?<\/p> <\/div>n    <\/div>n    <div class=\"twixi-wrap concise actionContainer\">n        <div class=\"action-head\">n            <a href=\"#\" title=\"Expand comment\" class=\"twixi\"><span class=\"icon-default aui-icon aui-icon-small aui-iconfont-collapsed\"><span>Show<\/span><\/span><\/a>n            <div class=\"action-details flooded\">n                        n    n    n    n                nn    <a class=\"user-hover user-avatar\" rel=\"markob\" id=\"commentauthor_84905_concise\" href=\"\/secure\/ViewProfile.jspa?name=markob\"><span class=\"aui-avatar aui-avatar-xsmall\"><span class=\"aui-avatar-inner\"><img src=\"https:\/\/secure.gravatar.com\/avatar\/136f6bc1af4534247dc1e61efb63c961?d=mm&amp;s=16\" alt=\"markob\" \/><\/span><\/span> Marko Bekhta<\/a>n added a comment  - <span class='commentdate_84905_concise subText'><span class='date user-tz' title='12\/Oct\/2016 02:32 AM'><time class='livestamp' datetime='2016-10-12T02:32:29-0700'>12\/Oct\/2016 02:32 AM<\/time><\/span><\/span>                    hi,  Guillaume Smet , I was looking into this one - and I thought that it can be implemented like this: n  n rn...rn@Constraint(validatedBy = { })rn@ReportAsSingleViolationrn@Mod11Check(weights = { 8, 9, 2, 3, 4, 5, 6, 7 }, processingDirection = Mod11Check.ProcessingDirection.LEFT_TO_RIGHT)rn public  @ interface  REGON9 {rn...rn n  nn So just by adding additional parameter to Mod check (weights), and then simply declaring the annotations for REGON and so on. But the problem that I see is that even though the algorithm seems to be similar to Mod check, for REGON you need to calculate  n  n sum % moduloParam n  n and for Mod11 it's : n  n moduloParam - ( sum % moduloParam ) n  nn So I don't think that this approach would work for the case of this REGON number, and that a new validator should be written for it, rather than just putting a Mod11Check annotation on the REGON annotation declaration. Most likely this new validator will extend from the Mod11CheckValidator. nn What do you think ?              n        n    nnn                             nnnn    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 24\/Oct\/2016 00:51 AM    n        n        PR is merged; leaving this issue open for the time being until the docs have been updated as well. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 24\/Oct\/2016 00:51 AM                      PR is merged; leaving this issue open for the time being until the docs have been updated as well.              n        n    nnn"},{"commnet_id":"comment-85114","commnet_date":"2016-10-24T00:51:31-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 24\/Oct\/2016 00:51 AM    n        n        PR is merged; leaving this issue open for the time being until the docs have been updated as well. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 24\/Oct\/2016 00:51 AM                      PR is merged; leaving this issue open for the time being until the docs have been updated as well.              n        n    n"}]}},{"HHH-9781":{"info":{"issue_title":"Upgrade Hibernate to support Infinispan 7.2.1.Final configurations","issue_key":"HHH-9781","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"4.3.10,                                            5.0.0.CR1","issue_labels":"4.3.10,                                            5.0.0.CR1","issue_description":"On master (only):  \tInfinispan dependency is upgraded to 7.2.1.Final \tThe default Infinispan configuration is upgraded to 7.2 XML    On 4.3 (only):  \tInfinispan dependency remains at 6.0.0.Final (to avoid possible backward-compatibility issues) \tThe Infinispan 7.2 configuration is provided as a test resource by                                                          HHH-9796                                                              Closed                    Clear\/evict and element count were fixed to work with Infinispan 7.2.1.Final in both master and 4.3. These changes also work on 4.3 with Infinispan 6.0.0.Final.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9781?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-67807","commnet_date":"2015-05-08T13:44:05-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 08\/May\/2015 13:44 PM    n        n        This one is done right?  Can I resolve it? n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 08\/May\/2015 13:44 PM                      This one is done right?  Can I resolve it?              n        n    n"},{"commnet_id":"comment-67831","commnet_date":"2015-05-11T01:32:06-0700","commnet_user":"Galder Zamarreno","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Galder Zamarrenon added a comment  - 11\/May\/2015 01:32 AM    n        n        I've pushed the fixes to master and sent a PR for 4.3 that Gail can have a look at. n    n    n        n            Show  n            n                        n    n    n    n                nn       Galder Zamarrenon added a comment  - 11\/May\/2015 01:32 AM                      I've pushed the fixes to master and sent a PR for 4.3 that Gail can have a look at.              n        n    n"},{"commnet_id":"comment-67863","commnet_date":"2015-05-13T12:57:59-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Gail Badnern added a comment  - 13\/May\/2015 12:57 PM     - edited  n        n        The following pull requests ultimately ended up being for n    n                n        n            n            HHH-9796n        n                                                    Closed n             n (not this issue):nnthttps:\/\/github.com\/hibernate\/hibernate-orm\/pull\/951nthttps:\/\/github.com\/hibernate\/hibernate-orm\/pull\/953nn n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Gail Badnern added a comment  - 13\/May\/2015 12:57 PM     - edited                    The following pull requests ultimately ended up being for n     n                 n         n             n            HHH-9796n         n                                                     Closed n             n (not this issue): n nt  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/951  nt  https:\/\/github.com\/hibernate\/hibernate-orm\/pull\/953  n n             n        n    n"},{"commnet_id":"comment-67865","commnet_date":"2015-05-13T13:13:08-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 13\/May\/2015 13:13 PM    n        n        Fixed on master and 4.3 branches. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 13\/May\/2015 13:13 PM                      Fixed on master and 4.3 branches.              n        n    n"},{"commnet_id":"comment-67881","commnet_date":"2015-05-14T14:35:25-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 14\/May\/2015 14:35 PM    n        n        Closing to prepare for Hibernate ORM 4.3.10.Final release. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 14\/May\/2015 14:35 PM                      Closing to prepare for Hibernate ORM 4.3.10.Final release.              n        n    n"}]}},{"OGM-818":{"info":{"issue_title":"Make OGM support JPA&#39;s autodetection for @Entity annotated classes ","issue_key":"OGM-818","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Duplicate","issue_fix_version":"4.1.3.Final","issue_component":"4.1.3.Final","issue_labels":"4.1.3.Final","issue_description":"Actually, the only way to map entities in OGM is to list them in the persistence.xml, using the &lt;class&gt; tag. Since JPA provide the possibility to automatically detect which class to map simply scanning for @Entity annotated classes, it would be a great improvement to add this support in OGM. I've already tried to make it work, but it seems OGM can't make it. I even added the JPA facet to my project and enabled the autodetection, but it still didn't work.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-818?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-69105","commnet_date":"2015-07-10T06:13:01-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 10\/Jul\/2015 06:13 AM    n        n        In which environnement did you see this problem? AFAIK, the class detection should work just like in ORM. But that's not the only time I see this remark, can you tell us how you reproduce this problem? n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 10\/Jul\/2015 06:13 AM                      In which environnement did you see this problem? AFAIK, the class detection should work just like in ORM. But that's not the only time I see this remark, can you tell us how you reproduce this problem?              n        n    n"},{"commnet_id":"comment-69157","commnet_date":"2015-07-15T03:59:21-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 15\/Jul\/2015 03:59 AM    n        n        Seems to be the same as or at least related to n    n                n        n            n            OGM-828n        n                                                    Closed n             n. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 15\/Jul\/2015 03:59 AM                      Seems to be the same as or at least related to n     n                 n         n             n            OGM-828n         n                                                     Closed n             n.              n        n    n"},{"commnet_id":"comment-69170","commnet_date":"2015-07-15T12:37:43-0700","commnet_user":"Gregorio Palama","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gregorio Palaman added a comment  - 15\/Jul\/2015 12:37 PM    n        n        I will provide a valid example project.  \r\nn@Gunnar: yes, it should be exactly the same. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gregorio Palaman added a comment  - 15\/Jul\/2015 12:37 PM                      I will provide a valid example project.   n@Gunnar: yes, it should be exactly the same.              n        n    n"},{"commnet_id":"comment-69171","commnet_date":"2015-07-15T13:20:14-0700","commnet_user":"Gregorio Palama","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gregorio Palaman added a comment  - 15\/Jul\/2015 13:20 PM    n        n        I've added an attachment. It contains a simple project with a rest service. Deploy it in WildFly. It is set to use a MongoDB instance on localhost. You can invoke the service just to trigger the insert of an entity into MongoDB. In the persistence.xml, I've commented the \"&lt;class&gt;\" tag, and doing so I obtain the following exception:nnorg.jboss.resteasy.spi.UnhandledException: javax.ejb.EJBException: java.lang.IllegalArgumentException: Unknown entity: com.gregoriopalama.example.PersonnnUncommenting the \"&lt;class&gt;\" tag, it works perfectly.nnLet me know if you need more informations. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gregorio Palaman added a comment  - 15\/Jul\/2015 13:20 PM                      I've added an attachment. It contains a simple project with a rest service. Deploy it in WildFly. It is set to use a MongoDB instance on localhost. You can invoke the service just to trigger the insert of an entity into MongoDB. In the persistence.xml, I've commented the \"&lt;class&gt;\" tag, and doing so I obtain the following exception: nn org.jboss.resteasy.spi.UnhandledException: javax.ejb.EJBException: java.lang.IllegalArgumentException: Unknown entity: com.gregoriopalama.example.Person nn Uncommenting the \"&lt;class&gt;\" tag, it works perfectly. nn Let me know if you need more informations.              n        n    n"},{"commnet_id":"comment-69172","commnet_date":"2015-07-15T22:18:11-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Gunnar Morlingn added a comment  - 15\/Jul\/2015 22:18 PM     - edited  n        n        Thanks, Gregorio Palama. It's high on our to-do list and we'll take a look asap. If you have any ideas for what's causing it, let us know  n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Gunnar Morlingn added a comment  - 15\/Jul\/2015 22:18 PM     - edited                    Thanks,  Gregorio Palama . It's high on our to-do list and we'll take a look asap. If you have any ideas for what's causing it, let us know                n        n    n"}]}},{"HHH-9780":{"info":{"issue_title":"Unique instance for both CacheKey and EntityKey contracts","issue_key":"HHH-9780","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Out of Date","issue_fix_version":"None","issue_component":"5.1.0","issue_labels":"5.1.0","issue_description":"According to performance metrics we allocate both an high amount of CacheKey instances and an high amount of EntityKey instances.  While these two different contracts serve two different goals, the implementation of each is extremely similar so it would be interesting to explore reuse of allocated instances for both purposes.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9780?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-67808","commnet_date":"2015-05-08T13:58:02-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 08\/May\/2015 13:58 PM    n        n        This is not the discussion I was thinking of.  Should I just create a new one?  nnThe one I was talking about was the fact that we create a org.hibernate.cache.spi.CacheKey and then each caching impl wraps that in its own concept of a \"cache key\".  Essentially 2 \"cache key\" instantiations per cache entry.  What we had discussed was possibly just dropping our CacheKey (its methods are used in pretty questionable ways anyway) and simply use the cache provider.nnToday, we do this in psuedo code:nnrnCacheKey cacheKey = session.generateCacheKey( ... ); \/\/ which calls our CacheKey ctorrn someCacheRegion.add( cacheKey, someData ); \/\/ the region typically wraps our CacheKey rnnnnwe could instead have:nnrnObject  cacheKey = regionFactory.generateCacheKey( ... ); \/\/ the SPI calls expect Object  already...rn someCacheRegion.add( cacheKey, someData ); \/\/ It's already the cache providers own key type, no need to wrap! FTW! rnn n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 08\/May\/2015 13:58 PM                      This is not the discussion I was thinking of.  Should I just create a new one?   nn The one I was talking about was the fact that we create a  org.hibernate.cache.spi.CacheKey  and then each caching impl wraps that in its own concept of a \"cache key\".  Essentially 2 \"cache key\" instantiations per cache entry.  What we had discussed was possibly just dropping our  CacheKey  (its methods are used in pretty questionable ways anyway) and simply use the cache provider. nn Today, we do this in psuedo code: n  n rnCacheKey cacheKey = session.generateCacheKey( ... );  \/\/ which calls our CacheKey ctorrn someCacheRegion.add( cacheKey, someData );  \/\/ the region typically wraps our CacheKey rn n  nn we could instead have: n  n rn Object  cacheKey = regionFactory.generateCacheKey( ... );  \/\/ the SPI calls expect  Object  already...rn someCacheRegion.add( cacheKey, someData );  \/\/ It's already the cache providers own key type, no need to wrap! FTW! rn n               n        n    n"},{"commnet_id":"comment-67918","commnet_date":"2015-05-15T15:11:10-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 15\/May\/2015 15:11 PM    n        n        Ok, it took me a while to import the project in the IDE to have a look. I now understand what you mean, and remember our discussion.. indeed it's a slightly different thing than what I had in mind when creating the issue, but they seem strongly related.nnFor both purposes I need to rethink the role of org.hibernate.cache.spi.CacheKey; it would be excellent to have only one instance for each of internal CacheKey, cache-specific CacheKey(s) and also EntityKey.\r\nnI'm not sure how far that's feasible but it's interesting to try...nnWhile I remember us previously discussing on the 2lc implementors wrapping our cache key.. I'm not finding that in the source code now. Would you have a pointer of where these are generated? n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 15\/May\/2015 15:11 PM                      Ok, it took me a while to import the project in the IDE to have a look. I now understand what you mean, and remember our discussion.. indeed it's a slightly different thing than what I had in mind when creating the issue, but they seem strongly related. nn For both purposes I need to rethink the role of  org.hibernate.cache.spi.CacheKey ; it would be excellent to have only one instance for each of internal CacheKey, cache-specific CacheKey(s) and also EntityKey. nI'm not sure how far that's feasible but it's interesting to try... nn While I remember us previously discussing on the 2lc implementors wrapping our cache key.. I'm not finding that in the source code now. Would you have a pointer of where these are generated?              n        n    n"},{"commnet_id":"comment-68019","commnet_date":"2015-05-21T09:28:56-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 21\/May\/2015 09:28 AM    n        n        We had an in depth design discussion on IRC:nn[17:16] &lt;sannegrinovero&gt; sebersole: I can spend some time to aim at HHH-9780 this  weekend, but will need some pointers from yourn[17:17] &lt;sebersole&gt; sannegrinovero: tbh i dont really know what you mean with your part of that :)rn[17:17] &lt;sebersole&gt; also that seems directly at odds with the idea of leveraging the cache impls notion of a cache keyrn[17:18] &lt;sebersole&gt; bascially, there are 3 concepts herern[17:18] &lt;sebersole&gt; and i just dont see how we can model them all as the same classrn[17:19] &lt;sannegrinovero&gt; maybe not, I just need to understand it better. You mentioned the 2lc implementors create their own, I didn't find thatrn[17:19] &lt;sebersole&gt; especially as delegated to the cache implrn[17:19] &lt;sannegrinovero&gt; you have a pointer?rn[17:19] &lt;sebersole&gt; actually its something you mentioned :)rn[17:19] &lt;sebersole&gt; so you tell me...rn[17:20] &lt;sebersole&gt; lets take infinispan e.g...rn[17:20] &lt;sannegrinovero&gt; yes I also remember that :) I'm not finding it anymore though, wondering if  that's just an outdated obeservation.rn[17:20] &lt;sebersole&gt; ultimately I ask inifispan to store some data for  mern[17:20] &lt;sebersole&gt; i pass it (1) the data to cachern[17:20] &lt;sebersole&gt; andrn[17:20] &lt;sebersole&gt; (2) my CacheKeyrn[17:21] &lt;sebersole&gt; what does infinispan do  there internally&gt;rn[17:21] &lt;sebersole&gt; ?rn[17:21] &lt;sebersole&gt; does it directly key the entry using my CacheKey?rn[17:21] &lt;sebersole&gt; surely not right?rn[17:21] &lt;sannegrinovero&gt; looking at master today, it seems to just use that key instance w\/o rewrapsrn[17:21] &lt;sannegrinovero&gt; (which is not what I remember)rn[17:21] &lt;sebersole&gt; ok thenrn[17:21] &lt;sebersole&gt; well...rn[17:22] &lt;sebersole&gt; master of what&gt;rn[17:22] &lt;sebersole&gt; hibernate-infinispan?rn[17:22] &lt;sebersole&gt; orrn[17:22] &lt;sebersole&gt; infinispan?rn[17:22] &lt;sannegrinovero&gt; it also feels wrong actually because it means it can hardly optimize it for  its custom serialization strategiesrn[17:22] &lt;sannegrinovero&gt; hibernate-infinispanrn[17:22] &lt;sebersole&gt; well more i mean what infnispan does after hibernate-infinispan hands it the inforn[17:22] &lt;sannegrinovero&gt; so sebersole, proposal:rn[17:23] &lt;sebersole&gt; i thought that was the issuern[17:23] &lt;sannegrinovero&gt; 1# we change the CacheKey to be an interface rn[17:23] &lt;sebersole&gt; ok...rn[17:23] &lt;sannegrinovero&gt; 2# and then add a \"createCacheKey\"  method on the 2lc provider SPIrn[17:23] &lt;sannegrinovero&gt; so to allow the providers to factor custom keys as neededrn[17:23] &lt;sebersole&gt; sure, thats what i suggested :)rn[17:23] &lt;sannegrinovero&gt; (any custom optimisation there can wait)rn[17:23] &lt;sannegrinovero&gt; ok greatrn[17:24] &lt;sebersole&gt; butrn[17:24] &lt;sebersole&gt; we dont even need CacheKey interface rn[17:24] &lt;sebersole&gt; we never use those data valuesrn[17:24] &lt;sannegrinovero&gt; that's right the 2lc interface  accepts \"Object \"  for  keysrn[17:24] &lt;sebersole&gt; really createCacheKey can return  Object rn[17:24] &lt;sebersole&gt; rightrn[17:24] &lt;sebersole&gt; i meanrn[17:25] &lt;sebersole&gt; might be a nice chance to improve thatrn[17:25] &lt;sannegrinovero&gt; but should we keep that? It seems nicer to change the SPI interface  to only accept the typesafe CacheKeyrn[17:25] &lt;sebersole&gt; 2 things i hate passingrn[17:25] &lt;sebersole&gt; Object rn[17:25] &lt;sebersole&gt; String rn[17:25] &lt;sannegrinovero&gt; +1rn[17:25] &lt;sebersole&gt; i am fine with thatrn[17:26] &lt;sannegrinovero&gt; I'd assume that once we offload the factory responsibility to the cache implementor, they should be able to make keys conforming to it w\/o drawbacks.. right?rn[17:26] &lt;sebersole&gt; alex may not be :)rn[17:26] &lt;sannegrinovero&gt; I'll make this  change as PR and then ask for  feedback from Alex and Galderrn[17:26] &lt;sebersole&gt; sounds perfectrn[17:27] &lt;sannegrinovero&gt; ok, second part of the problem:rn[17:27] &lt;sebersole&gt; but back torn[17:27] &lt;sebersole&gt; rightrrn[17:27] &lt;sebersole&gt; and so here is one problemrn[17:27] &lt;sannegrinovero&gt; the key to EntityEntry is a different beast entirely then, right?rn[17:27] &lt;sebersole&gt; we removed the idea of some of the selectors from EntityKeyrn[17:28] &lt;sebersole&gt; well i assume you mean EntityKey, notEntityEntryrn[17:28] &lt;sannegrinovero&gt; yes, EntityKey, the key to EntityEntry ;)rn[17:29] &lt;sebersole&gt; so second level cache needs to segment things differently then PCrn[17:29] &lt;sebersole&gt; it needs to account for  tenancy e.g.rn[17:29] &lt;sebersole&gt; whereas the PC does notrn[17:29] &lt;sebersole&gt; (the PC is inherently tied to *a* tenant)rn[17:30] &lt;sannegrinovero&gt; good pointrn[17:31] &lt;sannegrinovero&gt; but what if  we were to add - again on the 2lc SPI - a method like \"CacheKey convert(EntityKey, additional metadata like tenantId )rn[17:31] &lt;sannegrinovero&gt; or vice-versa could be even more interestingrn[17:31] &lt;sannegrinovero&gt; would there be some method in ORM to benefit from invoking this  conversion?rn[17:32] &lt;sebersole&gt; well it assumes having the EntityKeyrn[17:32] &lt;sannegrinovero&gt; (some strategic method)rn[17:32] &lt;sebersole&gt; or creating it if  we dontrn[17:32] &lt;sebersole&gt; its this  later point that is concerningrn[17:32] &lt;sannegrinovero&gt; well if  you don't, you'd invoke the other method we agreed on, the factory.rn[17:32] &lt;sebersole&gt; ohrn[17:32] &lt;sebersole&gt; you mean having multiple methodsrn[17:33] &lt;sebersole&gt; surern[17:33] &lt;sannegrinovero&gt; yes, to add a conversion method as something on top of the factoryrn[17:33] &lt;sannegrinovero&gt; see there are for  sure cases in which one implementation could serve fine for  both use cases (say multi-tenancy is disabled, for  one)rn[17:34] &lt;sebersole&gt; well depending on the declaration of CacheKey... the \"other way\"  may not be neededrn[17:34] &lt;sannegrinovero&gt; what I don't know, if  there are points in code in ORM in which you'd have one and need the otherrn[17:35] &lt;sebersole&gt; ohhhhhrn[17:35] &lt;sebersole&gt; another oddityrn[17:35] &lt;sebersole&gt; so CacheKey can be used to key entity datarn[17:35] &lt;sebersole&gt; butrn[17:35] &lt;sebersole&gt; it can also be used to cache collection datarn[17:36] &lt;sebersole&gt; so its related to org.hibernate.engine.spi.CollectionKey as wellrn[17:36] &lt;sebersole&gt; CollectionKey is the EntityKey corollary in the PCrn[17:36] &lt;sannegrinovero&gt; ah, contract-wise that gets ugly unless we seprate the notion of cache key into two different types toorn[17:37] &lt;sebersole&gt; thats why its called \"entityOrRoleName\"  in CacheKeyrn[17:37] &lt;sebersole&gt; which we couldrn[17:37] &lt;sebersole&gt; since the Regions are distinctrn[17:37] &lt;sebersole&gt; CollectionRegion\/CollectionRegionAccessStrategyrn[17:37] &lt;sebersole&gt; versusrn[17:37] &lt;sannegrinovero&gt; considering they're currently accepting \"Object \"  I guess it won't be too bad ;)rn[17:37] &lt;sebersole&gt; EntityRegion\/EntityRegionAccessStrategyrn[17:38] &lt;sebersole&gt; we might have to parametize the access stratregy though for  that to workrn[17:38] &lt;sebersole&gt; as I think they share get() etc methodsrn[17:38] &lt;sebersole&gt; yeah... org.hibernate.cache.spi.access.RegionAccessStrategyrn[17:39] &lt;sebersole&gt; we'd need RegionAccessStrategy&lt;T&gt; - where &lt;T&gt; is \"key type\" rn[17:39] &lt;sannegrinovero&gt; so each access strategy already is a different contract.. they could then accept the same type CacheKey but convert from\/to the CollectionKey or EntityKey ?rn[17:40] &lt;sebersole&gt; i think having the caches convert *to* CacheKey makes sensern[17:40] &lt;sebersole&gt; i actually dont think the other way makes sensern[17:40] &lt;sebersole&gt; imorn[17:40] &lt;sebersole&gt; again, assuming CacheKey exposes its statern[17:40] &lt;sebersole&gt; at least the ones we care about :)rn[17:41] &lt;sannegrinovero&gt; ok, the biggest win is definitely from cache to EntityKey (as one would hope there are more cache hits than cache stores)rn[17:41] &lt;sannegrinovero&gt; so my primary goal is to see if  we can avoid allocating an EntityKey after a cache hitrn[17:42] &lt;sebersole&gt; are you thinking to wrapo the EntityKey?rn[17:42] &lt;sebersole&gt; if  so...rn[17:42] &lt;sebersole&gt; then here is what i think makes sense...rn[17:42] &lt;sebersole&gt; 1) split CacheKey into 2 interfacesrn[17:42] &lt;sebersole&gt; EntityCacheKeyrn[17:42] &lt;sebersole&gt; CollectionCacheKeyrn[17:43] &lt;sebersole&gt; they each define just one methodrn[17:43] &lt;sebersole&gt; EntityCacheKey#toEntityKeyrn[17:43] &lt;sebersole&gt; CollectionCacheKey#toCollectionKeyrn[17:43] &lt;sannegrinovero&gt; ah, sweetrn[17:43] &lt;sannegrinovero&gt; then you could have some such implementations just return  \"this \" , right?rn[17:43] &lt;sebersole&gt; 2) RegionFactory provides the factory for  creating these cache keysrn[17:44] &lt;sebersole&gt; rightrn[17:44] &lt;sebersole&gt; this  factory would allow:rn[17:44] &lt;sebersole&gt; a) creation from simple valuesrn[17:44] &lt;sebersole&gt; b) creation from EntityKey\/CollectionKey +rn[17:45] &lt;sannegrinovero&gt; nice, that all feels fitting well the needsrn[17:45] &lt;sebersole&gt; our spi can provide a Helper for  thesern[17:45] &lt;sannegrinovero&gt; I'm only wondering if  there is a practical use for  2)brn[17:45] &lt;sannegrinovero&gt; you'd need to point me to the ORM code which could benefit from that, I don't have metrics for  this  case rn[17:46] &lt;sebersole&gt; it depends what you envision practicallty inside these cache key implsrn[17:46] &lt;sannegrinovero&gt; although, this  could be done after an API freeze.. just making sure there is a practical use for  it.rn[17:46] &lt;sebersole&gt; are they holding (wrapping) EntityKey\/CollectionKey instances?rn[17:46] &lt;sebersole&gt; its mainly the after action stuffrn[17:47] &lt;sebersole&gt; so we are pushing flushed changes to the cachern[17:47] &lt;sebersole&gt; we'd have the PC keysrn[17:48] &lt;sannegrinovero&gt; at best the 2lc could reuse the same instance, but the key type would need to satisfy the cache key contract toorn[17:48] &lt;sannegrinovero&gt; the alternative is a wrap but I wonder if  that would still win us somethingrn[17:49] &lt;sebersole&gt; not followingrn[17:49] &lt;sannegrinovero&gt; I mean, when it comes to store things in the cache, and you have the PC keysrn[17:49] &lt;sebersole&gt; right, which is why isaid:rn[17:50] &lt;sannegrinovero&gt; *ideally* one would like to reuse the PC keys as-is (if  configuration allows - like again no multi-tenant)rn[17:50] &lt;sebersole&gt; [10:46] &lt;sebersole&gt; it depends what you envision practicallty inside these cache key implsrn[17:50] &lt;sannegrinovero&gt; yesrn[17:50] &lt;sebersole&gt; but imagine:rn[17:51] &lt;sebersole&gt; EntityCacheKeyImpl implements  EntityCacheKey { private  final  EntityKey entityKey; private  final  tenantId; ... }rn[17:51] &lt;sebersole&gt; so its ^^ toEntityKey is simplern[17:51] &lt;sebersole&gt; and saves some instantiationsrn[17:51] &lt;sannegrinovero&gt; right that's the stronger benefitrn[17:52] &lt;sannegrinovero&gt; but I was now looking at the possibility to also save some allocation in the inverse transformationrn[17:52] &lt;sebersole&gt; wdym?rn[17:52] &lt;sannegrinovero&gt; which is a minor, more questionable winrn[17:52] &lt;sebersole&gt; EntityKey-&gt;EntityCacheKey?rn[17:52] &lt;sannegrinovero&gt; yesrn[17:53] &lt;sannegrinovero&gt; to be able to use the EntityKey instance as key within the caches.rn[17:53] &lt;sebersole&gt; well i think we already track thatrn[17:53] &lt;sannegrinovero&gt; track?rn[17:54] &lt;sebersole&gt; well that could happen, sure, but only if  the other \"selectors\"  (tenantId, etc) are the same across sessionsrn[17:54] &lt;sannegrinovero&gt; yesrn[17:54] &lt;sannegrinovero&gt; it's not something we can enforce, especially not as a type because of those reasonsrn[17:54] &lt;sebersole&gt; yeah, i thought EntityEntry cached the cache keyrn[17:54] &lt;sannegrinovero&gt; but the key factory or a smart cache implementor could take advantage from some configurationsrn[17:55] &lt;sebersole&gt; well as far as tenancy goes...rn[17:55] &lt;sebersole&gt; you dont really need a configrn[17:56] &lt;sebersole&gt; if  the tenantId is ever null  you know the SF is not using multi-trenancyrn[17:56] &lt;sannegrinovero&gt; right, I just mean that conceptually the implementor could be able to do  some smart choices in some circumstances - even if  not all.rn[17:56] &lt;sebersole&gt; and the EntityKey *shoul d be* safe to use (more or less) as the cache keyrn[17:57] &lt;sebersole&gt; but of course, with this  new  split in EntityEntry that is much more difficult mnowrn[17:57] &lt;sannegrinovero&gt; it gets a bit tricky as those keys will need to implement a safe equals contractrn[17:57] &lt;sannegrinovero&gt; if  potentially multiple different implementations of those keys are in the same cachern[17:57] &lt;sebersole&gt; yeah, i see why you'd want to use EntityKey as the cache key, but...rn[17:58] &lt;sebersole&gt; i just dont think its feasiblern[17:58] &lt;sebersole&gt; doing so would put a lot of stress on the PC to understand this  toorn[17:58] &lt;sebersole&gt; \"hey can my EntityKeys be used as a cache key?  if  so, I need to build these special ones...\" rn[17:58] &lt;sannegrinovero&gt; it's complex if  we don't do  a further step. but what if  all EntityKey were created by that same key factory?rn[17:59] &lt;sebersole&gt; i think thats wrong toorn[17:59] &lt;sebersole&gt; why should the l2 cache be involved in building PC keys?rn[17:59] &lt;sebersole&gt; again perf wise i get itrn[17:59] &lt;sannegrinovero&gt; ok, if  it doesn't fit the concept then let's stop at the plan abovern[17:59] &lt;sebersole&gt; conceptually, design-wise.... it just does nt fitrn[18:00] &lt;sannegrinovero&gt; design-wise, I see it as we need a unique way to identify an entity, and you allow the 2nd level cache implementor to set the factory globally.rn[18:00] &lt;sebersole&gt; wellrn[18:01] &lt;sebersole&gt; \"unique way to identify an entity\"  is a big gloss  over :)rn[18:01] &lt;sebersole&gt; thats the problemrn[18:01] &lt;sannegrinovero&gt; well, per persister ;)rn[18:01] &lt;sebersole&gt; its not even per persisterrn[18:01] &lt;sebersole&gt; well, i guess if  you include tenant it in that surern[18:02] &lt;sebersole&gt; do  remember though that *you* were the one that had me remove tenantId from EntityKey ;)rn[18:02] &lt;sannegrinovero&gt; yes I remember :)rn[18:02] &lt;sebersole&gt; otherwise this  is not a discussion :)rn[18:03] &lt;sebersole&gt; but i do  like the rest  of the design we scioped outrn[18:03] &lt;sebersole&gt; feels rightrn[18:03] &lt;sannegrinovero&gt; but ok the plan you described above seems very sound, up to the 2\/b part which is of lower valuern[18:04] &lt;sebersole&gt; sannegrinovero: i dont think it is :)rn[18:04] &lt;sebersole&gt; really its just an overloaded method formrn[18:05] &lt;sannegrinovero&gt; no? I thought we had just decided that this  last part gets too complex, for  low benefitsrn[18:05] &lt;sebersole&gt; well you were talking about actually *using* the EntityKey and the EntityCacheKeyrn[18:05] &lt;sebersole&gt; thats differentrn[18:05] &lt;sebersole&gt; 2.a is this :rn[18:07] &lt;sebersole&gt; EntityCacheKey cacheKey = regionFactory().getKeyFactory().createEntityCacheKey( entityName, key, tenantId, .. )rn[18:07] &lt;sebersole&gt; 2.b is simply an overload:rn[18:07] &lt;sebersole&gt; EntityCacheKey cacheKey = regionFactory().getKeyFactory().createEntityCacheKey( theEntityKey, tenantId, .. )rn[18:08] &lt;sannegrinovero&gt; ok we can add it as convenience, but we agree that it's likely the implementor will need to allocate a new  EntityCacheKey, right?rn[18:09] &lt;sannegrinovero&gt; instance reuse seems out of reachrn[18:09] &lt;sebersole&gt; well, not necessarilyrn[18:10] &lt;sebersole&gt; but thats not my primary design goalrn[18:10] &lt;sebersole&gt; butrn[18:10] &lt;sebersole&gt; look at it...rn[18:10] &lt;sebersole&gt; regionFactory().getKeyFactory().createEntityCacheKey( theEntityKey, tenantId, .. )rn[18:10] &lt;sebersole&gt; and keep a few things in mind...rn[18:11] &lt;sebersole&gt; 1) the *sole* contract fior EntityCacheKey is #toEntityKeyrn[18:11] &lt;sannegrinovero&gt; right, it looks sexy :) And it doesn't hurt to allow the implementor to do  something smarter eventually than what we've thought of today.rn[18:11] &lt;sebersole&gt; so its actually possible for  the EntityKey to implement that contract toorn[18:11] &lt;sebersole&gt; with a caveatrn[18:12] &lt;sebersole&gt; \"hey... EntityKey *can* act as a EntityCacheKey, but only in non-multi-tenant environments\" rn[18:12] &lt;sebersole&gt; and createEntityCacheKey knows thatrn[18:12] &lt;sebersole&gt; ergo...rn[18:12] &lt;sebersole&gt; :)rn[18:13] &lt;sannegrinovero&gt; but only if  EntityKey implements  EntityCacheKey, for  typesafetyrn[18:14] &lt;sannegrinovero&gt; I mean, to have the method compile..rn[18:14] &lt;sebersole&gt; @Override public  EntityCacheKey createEntityCacheKey(EntityKey theEntityKey, String  tenantId)) { return  tenantId == null  ? theEntityKey : new  EntityCacheKeyImpl( theEntityKey, tenantId ); }rn[18:14] &lt;sebersole&gt; [11:11] &lt;sebersole&gt; 1) the *sole* contract fior EntityCacheKey is #toEntityKeyrn[18:14] &lt;sebersole&gt; [11:11] &lt;sebersole&gt; so its actually possible for  the EntityKey to implement that contract toorn[18:14] &lt;sebersole&gt; [11:11] &lt;sebersole&gt; with a caveatrn[18:14] &lt;sebersole&gt; [11:12] &lt;sebersole&gt; \"hey... EntityKey *can* act as a EntityCacheKey, but only in non-multi-tenant environments\" rn[18:14] &lt;sebersole&gt; :)rn[18:15] &lt;sannegrinovero&gt; ok, I was thinking of \"conceptually\"  not to actually have it implement the Java interface rn[18:15] &lt;sebersole&gt; too bad we cant groovy this  :)rn[18:15] &lt;sannegrinovero&gt; wouldn't it then be confusing? One might think he can pass the EntityKey directly into the caching methods, without invoking the createEntityCacheKey method first to create the \"right kind\"  of EntityCacheKeyrn[18:16] &lt;sebersole&gt; well that would be a bug right?rn[18:16] &lt;sebersole&gt; ;)rn[18:16] &lt;sannegrinovero&gt; yes we could catch  it with testsrn[18:16] &lt;sebersole&gt; lookrn[18:16] &lt;sebersole&gt; like i said, that part is not my primary design goal herern[18:17] &lt;sebersole&gt; butrn[18:19] &lt;sebersole&gt; it is possible if  we just have EntityKey implement EntityCacheKeyrn[18:19] &lt;sebersole&gt; its not idealrn[18:21] &lt;sebersole&gt; we could also use reflection based java duck typingrn[18:21] &lt;sebersole&gt; to make the EntityKey act like a EntityCacheKey in those casesrn[18:22] &lt;sebersole&gt; not sure how well that works with serialization etc thoughrn[18:23] &lt;sannegrinovero&gt; I think we could leave this  lust detail openrn[18:23] &lt;sebersole&gt; seems like an awful lot os hacks and drawbacks, which to me generally shows that you are trying to fit a square peg oin round holern[18:23] &lt;sannegrinovero&gt; the contract changes seem clearrn[18:23] &lt;sannegrinovero&gt; right, which is why above I was inclined to say we wouldn't benefit from this  last point for  instance reuse, but really this  last one is the lowest valuern[18:24] &lt;sebersole&gt; as long  as you are not sayin that method should not exist, okrn[18:24] &lt;sannegrinovero&gt; so I'd vote to keep the EntityKey contract \"clean\" , let the implementor figure out a clever workaround if  he wishes sorn[18:25] &lt;sannegrinovero&gt; no the method is finern[18:25] &lt;sannegrinovero&gt; it looks good and fits the purposern[18:25] &lt;sebersole&gt; i agree that duck typing EntityKey into an EntiytCacheKey is too muchrn[18:25] &lt;sebersole&gt; rightrn[18:25] &lt;sannegrinovero&gt; BTW the implementor could try  casting the key to its private  implementation - it might have been self-generated - rn[18:25] &lt;sannegrinovero&gt; and his custom implementation *could* be able to fullfill the other contract too..rn[18:26] &lt;sannegrinovero&gt; just not ORM's problem ;)rn[18:26] &lt;sannegrinovero&gt; thanks sebersole, I'll log this  on JIRA there is lots of good ideas. I'll see how far I can apply it to reality :)rn[18:26] &lt;sebersole&gt; nice!rn[18:26] &lt;sebersole&gt; looking forward to itrn[18:26] &lt;sebersole&gt; love good design discussions :)rn[18:26] &lt;sannegrinovero&gt; +1 !n n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 21\/May\/2015 09:28 AM                      We had an in depth design discussion on IRC: n  n [17:16] &lt;sannegrinovero&gt; sebersole: I can spend some time to aim at HHH-9780  this  weekend, but will need some pointers from yourn[17:17] &lt;sebersole&gt; sannegrinovero: tbh i dont really know what you mean with your part of that :)rn[17:17] &lt;sebersole&gt; also that seems directly at odds with the idea of leveraging the cache impls notion of a cache keyrn[17:18] &lt;sebersole&gt; bascially, there are 3 concepts herern[17:18] &lt;sebersole&gt; and i just dont see how we can model them all as the same classrn[17:19] &lt;sannegrinovero&gt; maybe not, I just need to understand it better. You mentioned the 2lc implementors create their own, I didn't find thatrn[17:19] &lt;sebersole&gt; especially as delegated to the cache implrn[17:19] &lt;sannegrinovero&gt; you have a pointer?rn[17:19] &lt;sebersole&gt; actually its something you mentioned :)rn[17:19] &lt;sebersole&gt; so you tell me...rn[17:20] &lt;sebersole&gt; lets take infinispan e.g...rn[17:20] &lt;sannegrinovero&gt; yes I also remember that :) I'm not finding it anymore though, wondering  if  that's just an outdated obeservation.rn[17:20] &lt;sebersole&gt; ultimately I ask inifispan to store some data  for  mern[17:20] &lt;sebersole&gt; i pass it (1) the data to cachern[17:20] &lt;sebersole&gt; andrn[17:20] &lt;sebersole&gt; (2) my CacheKeyrn[17:21] &lt;sebersole&gt; what does infinispan  do  there internally&gt;rn[17:21] &lt;sebersole&gt; ?rn[17:21] &lt;sebersole&gt; does it directly key the entry using my CacheKey?rn[17:21] &lt;sebersole&gt; surely not right?rn[17:21] &lt;sannegrinovero&gt; looking at master today, it seems to just use that key instance w\/o rewrapsrn[17:21] &lt;sannegrinovero&gt; (which is not what I remember)rn[17:21] &lt;sebersole&gt; ok thenrn[17:21] &lt;sebersole&gt; well...rn[17:22] &lt;sebersole&gt; master of what&gt;rn[17:22] &lt;sebersole&gt; hibernate-infinispan?rn[17:22] &lt;sebersole&gt; orrn[17:22] &lt;sebersole&gt; infinispan?rn[17:22] &lt;sannegrinovero&gt; it also feels wrong actually because it means it can hardly optimize it  for  its custom serialization strategiesrn[17:22] &lt;sannegrinovero&gt; hibernate-infinispanrn[17:22] &lt;sebersole&gt; well more i mean what infnispan does after hibernate-infinispan hands it the inforn[17:22] &lt;sannegrinovero&gt; so sebersole, proposal:rn[17:23] &lt;sebersole&gt; i thought that was the issuern[17:23] &lt;sannegrinovero&gt; 1# we change the CacheKey to be an  interface rn[17:23] &lt;sebersole&gt; ok...rn[17:23] &lt;sannegrinovero&gt; 2# and then add a  \"createCacheKey\"  method on the 2lc provider SPIrn[17:23] &lt;sannegrinovero&gt; so to allow the providers to factor custom keys as neededrn[17:23] &lt;sebersole&gt; sure, thats what i suggested :)rn[17:23] &lt;sannegrinovero&gt; (any custom optimisation there can wait)rn[17:23] &lt;sannegrinovero&gt; ok greatrn[17:24] &lt;sebersole&gt; butrn[17:24] &lt;sebersole&gt; we dont even need CacheKey  interface rn[17:24] &lt;sebersole&gt; we never use those data valuesrn[17:24] &lt;sannegrinovero&gt; that's right the 2lc  interface  accepts  \" Object \"   for  keysrn[17:24] &lt;sebersole&gt; really createCacheKey can  return   Object rn[17:24] &lt;sebersole&gt; rightrn[17:24] &lt;sebersole&gt; i meanrn[17:25] &lt;sebersole&gt; might be a nice chance to improve thatrn[17:25] &lt;sannegrinovero&gt; but should we keep that? It seems nicer to change the SPI  interface  to only accept the typesafe CacheKeyrn[17:25] &lt;sebersole&gt; 2 things i hate passingrn[17:25] &lt;sebersole&gt;  Object rn[17:25] &lt;sebersole&gt;  String rn[17:25] &lt;sannegrinovero&gt; +1rn[17:25] &lt;sebersole&gt; i am fine with thatrn[17:26] &lt;sannegrinovero&gt; I'd assume that once we offload the factory responsibility to the cache implementor, they should be able to make keys conforming to it w\/o drawbacks.. right?rn[17:26] &lt;sebersole&gt; alex may not be :)rn[17:26] &lt;sannegrinovero&gt; I'll make  this  change as PR and then ask  for  feedback from Alex and Galderrn[17:26] &lt;sebersole&gt; sounds perfectrn[17:27] &lt;sannegrinovero&gt; ok, second part of the problem:rn[17:27] &lt;sebersole&gt; but back torn[17:27] &lt;sebersole&gt; rightrrn[17:27] &lt;sebersole&gt; and so here is one problemrn[17:27] &lt;sannegrinovero&gt; the key to EntityEntry is a different beast entirely then, right?rn[17:27] &lt;sebersole&gt; we removed the idea of some of the selectors from EntityKeyrn[17:28] &lt;sebersole&gt; well i assume you mean EntityKey, notEntityEntryrn[17:28] &lt;sannegrinovero&gt; yes, EntityKey, the key to EntityEntry ;)rn[17:29] &lt;sebersole&gt; so second level cache needs to segment things differently then PCrn[17:29] &lt;sebersole&gt; it needs to account  for  tenancy e.g.rn[17:29] &lt;sebersole&gt; whereas the PC does notrn[17:29] &lt;sebersole&gt; (the PC is inherently tied to *a* tenant)rn[17:30] &lt;sannegrinovero&gt; good pointrn[17:31] &lt;sannegrinovero&gt; but what  if  we were to add - again on the 2lc SPI - a method like \"CacheKey convert(EntityKey, additional metadata like tenantId )rn[17:31] &lt;sannegrinovero&gt; or vice-versa could be even more interestingrn[17:31] &lt;sannegrinovero&gt; would there be some method in ORM to benefit from invoking  this  conversion?rn[17:32] &lt;sebersole&gt; well it assumes having the EntityKeyrn[17:32] &lt;sannegrinovero&gt; (some strategic method)rn[17:32] &lt;sebersole&gt; or creating it  if  we dontrn[17:32] &lt;sebersole&gt; its  this  later point that is concerningrn[17:32] &lt;sannegrinovero&gt; well  if  you don't, you'd invoke the other method we agreed on, the factory.rn[17:32] &lt;sebersole&gt; ohrn[17:32] &lt;sebersole&gt; you mean having multiple methodsrn[17:33] &lt;sebersole&gt; surern[17:33] &lt;sannegrinovero&gt; yes, to add a conversion method as something on top of the factoryrn[17:33] &lt;sannegrinovero&gt; see there are  for  sure cases in which one implementation could serve fine  for  both use cases (say multi-tenancy is disabled,  for  one)rn[17:34] &lt;sebersole&gt; well depending on the declaration of CacheKey... the  \"other way\"  may not be neededrn[17:34] &lt;sannegrinovero&gt; what I don't know,  if  there are points in code in ORM in which you'd have one and need the otherrn[17:35] &lt;sebersole&gt; ohhhhhrn[17:35] &lt;sebersole&gt; another oddityrn[17:35] &lt;sebersole&gt; so CacheKey can be used to key entity datarn[17:35] &lt;sebersole&gt; butrn[17:35] &lt;sebersole&gt; it can also be used to cache collection datarn[17:36] &lt;sebersole&gt; so its related to org.hibernate.engine.spi.CollectionKey as wellrn[17:36] &lt;sebersole&gt; CollectionKey is the EntityKey corollary in the PCrn[17:36] &lt;sannegrinovero&gt; ah, contract-wise that gets ugly unless we seprate the notion of cache key into two different types toorn[17:37] &lt;sebersole&gt; thats why its called  \"entityOrRoleName\"  in CacheKeyrn[17:37] &lt;sebersole&gt; which we couldrn[17:37] &lt;sebersole&gt; since the Regions are distinctrn[17:37] &lt;sebersole&gt; CollectionRegion\/CollectionRegionAccessStrategyrn[17:37] &lt;sebersole&gt; versusrn[17:37] &lt;sannegrinovero&gt; considering they're currently accepting  \" Object \"  I guess it won't be too bad ;)rn[17:37] &lt;sebersole&gt; EntityRegion\/EntityRegionAccessStrategyrn[17:38] &lt;sebersole&gt; we might have to parametize the access stratregy though  for  that to workrn[17:38] &lt;sebersole&gt; as I think they share get() etc methodsrn[17:38] &lt;sebersole&gt; yeah... org.hibernate.cache.spi.access.RegionAccessStrategyrn[17:39] &lt;sebersole&gt; we'd need RegionAccessStrategy&lt;T&gt; - where &lt;T&gt; is  \"key type\" rn[17:39] &lt;sannegrinovero&gt; so each access strategy already is a different contract.. they could then accept the same type CacheKey but convert from\/to the CollectionKey or EntityKey ?rn[17:40] &lt;sebersole&gt; i think having the caches convert *to* CacheKey makes sensern[17:40] &lt;sebersole&gt; i actually dont think the other way makes sensern[17:40] &lt;sebersole&gt; imorn[17:40] &lt;sebersole&gt; again, assuming CacheKey exposes its statern[17:40] &lt;sebersole&gt; at least the ones we care about :)rn[17:41] &lt;sannegrinovero&gt; ok, the biggest win is definitely from cache to EntityKey (as one would hope there are more cache hits than cache stores)rn[17:41] &lt;sannegrinovero&gt; so my primary goal is to see  if  we can avoid allocating an EntityKey after a cache hitrn[17:42] &lt;sebersole&gt; are you thinking to wrapo the EntityKey?rn[17:42] &lt;sebersole&gt;  if  so...rn[17:42] &lt;sebersole&gt; then here is what i think makes sense...rn[17:42] &lt;sebersole&gt; 1) split CacheKey into 2 interfacesrn[17:42] &lt;sebersole&gt; EntityCacheKeyrn[17:42] &lt;sebersole&gt; CollectionCacheKeyrn[17:43] &lt;sebersole&gt; they each define just one methodrn[17:43] &lt;sebersole&gt; EntityCacheKey#toEntityKeyrn[17:43] &lt;sebersole&gt; CollectionCacheKey#toCollectionKeyrn[17:43] &lt;sannegrinovero&gt; ah, sweetrn[17:43] &lt;sannegrinovero&gt; then you could have some such implementations just  return   \" this \" , right?rn[17:43] &lt;sebersole&gt; 2) RegionFactory provides the factory  for  creating these cache keysrn[17:44] &lt;sebersole&gt; rightrn[17:44] &lt;sebersole&gt;  this  factory would allow:rn[17:44] &lt;sebersole&gt; a) creation from simple valuesrn[17:44] &lt;sebersole&gt; b) creation from EntityKey\/CollectionKey +rn[17:45] &lt;sannegrinovero&gt; nice, that all feels fitting well the needsrn[17:45] &lt;sebersole&gt; our spi can provide a Helper  for  thesern[17:45] &lt;sannegrinovero&gt; I'm only wondering  if  there is a practical use  for  2)brn[17:45] &lt;sannegrinovero&gt; you'd need to point me to the ORM code which could benefit from that, I don't have metrics  for   this   case rn[17:46] &lt;sebersole&gt; it depends what you envision practicallty inside these cache key implsrn[17:46] &lt;sannegrinovero&gt; although,  this  could be done after an API freeze.. just making sure there is a practical use  for  it.rn[17:46] &lt;sebersole&gt; are they holding (wrapping) EntityKey\/CollectionKey instances?rn[17:46] &lt;sebersole&gt; its mainly the after action stuffrn[17:47] &lt;sebersole&gt; so we are pushing flushed changes to the cachern[17:47] &lt;sebersole&gt; we'd have the PC keysrn[17:48] &lt;sannegrinovero&gt; at best the 2lc could reuse the same instance, but the key type would need to satisfy the cache key contract toorn[17:48] &lt;sannegrinovero&gt; the alternative is a wrap but I wonder  if  that would still win us somethingrn[17:49] &lt;sebersole&gt; not followingrn[17:49] &lt;sannegrinovero&gt; I mean, when it comes to store things in the cache, and you have the PC keysrn[17:49] &lt;sebersole&gt; right, which is why isaid:rn[17:50] &lt;sannegrinovero&gt; *ideally* one would like to reuse the PC keys as-is ( if  configuration allows - like again no multi-tenant)rn[17:50] &lt;sebersole&gt; [10:46] &lt;sebersole&gt; it depends what you envision practicallty inside these cache key implsrn[17:50] &lt;sannegrinovero&gt; yesrn[17:50] &lt;sebersole&gt; but imagine:rn[17:51] &lt;sebersole&gt; EntityCacheKeyImpl  implements  EntityCacheKey {  private   final  EntityKey entityKey;  private   final  tenantId; ... }rn[17:51] &lt;sebersole&gt; so its ^^ toEntityKey is simplern[17:51] &lt;sebersole&gt; and saves some instantiationsrn[17:51] &lt;sannegrinovero&gt; right that's the stronger benefitrn[17:52] &lt;sannegrinovero&gt; but I was now looking at the possibility to also save some allocation in the inverse transformationrn[17:52] &lt;sebersole&gt; wdym?rn[17:52] &lt;sannegrinovero&gt; which is a minor, more questionable winrn[17:52] &lt;sebersole&gt; EntityKey-&gt;EntityCacheKey?rn[17:52] &lt;sannegrinovero&gt; yesrn[17:53] &lt;sannegrinovero&gt; to be able to use the EntityKey instance as key within the caches.rn[17:53] &lt;sebersole&gt; well i think we already track thatrn[17:53] &lt;sannegrinovero&gt; track?rn[17:54] &lt;sebersole&gt; well that could happen, sure, but only  if  the other  \"selectors\"  (tenantId, etc) are the same across sessionsrn[17:54] &lt;sannegrinovero&gt; yesrn[17:54] &lt;sannegrinovero&gt; it's not something we can enforce, especially not as a type because of those reasonsrn[17:54] &lt;sebersole&gt; yeah, i thought EntityEntry cached the cache keyrn[17:54] &lt;sannegrinovero&gt; but the key factory or a smart cache implementor could take advantage from some configurationsrn[17:55] &lt;sebersole&gt; well as far as tenancy goes...rn[17:55] &lt;sebersole&gt; you dont really need a configrn[17:56] &lt;sebersole&gt;  if  the tenantId is ever  null  you know the SF is not using multi-trenancyrn[17:56] &lt;sannegrinovero&gt; right, I just mean that conceptually the implementor could be able to  do  some smart choices in some circumstances - even  if  not all.rn[17:56] &lt;sebersole&gt; and the EntityKey *shoul d be* safe to use (more or less) as the cache keyrn[17:57] &lt;sebersole&gt; but of course, with  this   new  split in EntityEntry that is much more difficult mnowrn[17:57] &lt;sannegrinovero&gt; it gets a bit tricky as those keys will need to implement a safe equals contractrn[17:57] &lt;sannegrinovero&gt;  if  potentially multiple different implementations of those keys are in the same cachern[17:57] &lt;sebersole&gt; yeah, i see why you'd want to use EntityKey as the cache key, but...rn[17:58] &lt;sebersole&gt; i just dont think its feasiblern[17:58] &lt;sebersole&gt; doing so would put a lot of stress on the PC to understand  this  toorn[17:58] &lt;sebersole&gt;  \"hey can my EntityKeys be used as a cache key?   if  so, I need to build these special ones...\" rn[17:58] &lt;sannegrinovero&gt; it's complex  if  we don't  do  a further step. but what  if  all EntityKey were created by that same key factory?rn[17:59] &lt;sebersole&gt; i think thats wrong toorn[17:59] &lt;sebersole&gt; why should the l2 cache be involved in building PC keys?rn[17:59] &lt;sebersole&gt; again perf wise i get itrn[17:59] &lt;sannegrinovero&gt; ok,  if  it doesn't fit the concept then let's stop at the plan abovern[17:59] &lt;sebersole&gt; conceptually, design-wise.... it just does nt fitrn[18:00] &lt;sannegrinovero&gt; design-wise, I see it as we need a unique way to identify an entity, and you allow the 2nd level cache implementor to set the factory globally.rn[18:00] &lt;sebersole&gt; wellrn[18:01] &lt;sebersole&gt;  \"unique way to identify an entity\"  is a big gloss  over :)rn[18:01] &lt;sebersole&gt; thats the problemrn[18:01] &lt;sannegrinovero&gt; well, per persister ;)rn[18:01] &lt;sebersole&gt; its not even per persisterrn[18:01] &lt;sebersole&gt; well, i guess  if  you include tenant it in that surern[18:02] &lt;sebersole&gt;  do  remember though that *you* were the one that had me remove tenantId from EntityKey ;)rn[18:02] &lt;sannegrinovero&gt; yes I remember :)rn[18:02] &lt;sebersole&gt; otherwise  this  is not a discussion :)rn[18:03] &lt;sebersole&gt; but i  do  like the  rest  of the design we scioped outrn[18:03] &lt;sebersole&gt; feels rightrn[18:03] &lt;sannegrinovero&gt; but ok the plan you described above seems very sound, up to the 2\/b part which is of lower valuern[18:04] &lt;sebersole&gt; sannegrinovero: i dont think it is :)rn[18:04] &lt;sebersole&gt; really its just an overloaded method formrn[18:05] &lt;sannegrinovero&gt; no? I thought we had just decided that  this  last part gets too complex,  for  low benefitsrn[18:05] &lt;sebersole&gt; well you were talking about actually *using* the EntityKey and the EntityCacheKeyrn[18:05] &lt;sebersole&gt; thats differentrn[18:05] &lt;sebersole&gt; 2.a is  this :rn[18:07] &lt;sebersole&gt; EntityCacheKey cacheKey = regionFactory().getKeyFactory().createEntityCacheKey( entityName, key, tenantId, .. )rn[18:07] &lt;sebersole&gt; 2.b is simply an overload:rn[18:07] &lt;sebersole&gt; EntityCacheKey cacheKey = regionFactory().getKeyFactory().createEntityCacheKey( theEntityKey, tenantId, .. )rn[18:08] &lt;sannegrinovero&gt; ok we can add it as convenience, but we agree that it's likely the implementor will need to allocate a  new  EntityCacheKey, right?rn[18:09] &lt;sannegrinovero&gt; instance reuse seems out of reachrn[18:09] &lt;sebersole&gt; well, not necessarilyrn[18:10] &lt;sebersole&gt; but thats not my primary design goalrn[18:10] &lt;sebersole&gt; butrn[18:10] &lt;sebersole&gt; look at it...rn[18:10] &lt;sebersole&gt; regionFactory().getKeyFactory().createEntityCacheKey( theEntityKey, tenantId, .. )rn[18:10] &lt;sebersole&gt; and keep a few things in mind...rn[18:11] &lt;sebersole&gt; 1) the *sole* contract fior EntityCacheKey is #toEntityKeyrn[18:11] &lt;sannegrinovero&gt; right, it looks sexy :) And it doesn't hurt to allow the implementor to  do  something smarter eventually than what we've thought of today.rn[18:11] &lt;sebersole&gt; so its actually possible  for  the EntityKey to implement that contract toorn[18:11] &lt;sebersole&gt; with a caveatrn[18:12] &lt;sebersole&gt;  \"hey... EntityKey *can* act as a EntityCacheKey, but only in non-multi-tenant environments\" rn[18:12] &lt;sebersole&gt; and createEntityCacheKey knows thatrn[18:12] &lt;sebersole&gt; ergo...rn[18:12] &lt;sebersole&gt; :)rn[18:13] &lt;sannegrinovero&gt; but only  if  EntityKey  implements  EntityCacheKey,  for  typesafetyrn[18:14] &lt;sannegrinovero&gt; I mean, to have the method compile..rn[18:14] &lt;sebersole&gt; @Override  public  EntityCacheKey createEntityCacheKey(EntityKey theEntityKey,  String  tenantId)) {  return  tenantId ==  null  ? theEntityKey :  new  EntityCacheKeyImpl( theEntityKey, tenantId ); }rn[18:14] &lt;sebersole&gt; [11:11] &lt;sebersole&gt; 1) the *sole* contract fior EntityCacheKey is #toEntityKeyrn[18:14] &lt;sebersole&gt; [11:11] &lt;sebersole&gt; so its actually possible  for  the EntityKey to implement that contract toorn[18:14] &lt;sebersole&gt; [11:11] &lt;sebersole&gt; with a caveatrn[18:14] &lt;sebersole&gt; [11:12] &lt;sebersole&gt;  \"hey... EntityKey *can* act as a EntityCacheKey, but only in non-multi-tenant environments\" rn[18:14] &lt;sebersole&gt; :)rn[18:15] &lt;sannegrinovero&gt; ok, I was thinking of  \"conceptually\"  not to actually have it implement the Java  interface rn[18:15] &lt;sebersole&gt; too bad we cant groovy  this  :)rn[18:15] &lt;sannegrinovero&gt; wouldn't it then be confusing? One might think he can pass the EntityKey directly into the caching methods, without invoking the createEntityCacheKey method first to create the  \"right kind\"  of EntityCacheKeyrn[18:16] &lt;sebersole&gt; well that would be a bug right?rn[18:16] &lt;sebersole&gt; ;)rn[18:16] &lt;sannegrinovero&gt; yes we could  catch  it with testsrn[18:16] &lt;sebersole&gt; lookrn[18:16] &lt;sebersole&gt; like i said, that part is not my primary design goal herern[18:17] &lt;sebersole&gt; butrn[18:19] &lt;sebersole&gt; it is possible  if  we just have EntityKey implement EntityCacheKeyrn[18:19] &lt;sebersole&gt; its not idealrn[18:21] &lt;sebersole&gt; we could also use reflection based java duck typingrn[18:21] &lt;sebersole&gt; to make the EntityKey act like a EntityCacheKey in those casesrn[18:22] &lt;sebersole&gt; not sure how well that works with serialization etc thoughrn[18:23] &lt;sannegrinovero&gt; I think we could leave  this  lust detail openrn[18:23] &lt;sebersole&gt; seems like an awful lot os hacks and drawbacks, which to me generally shows that you are trying to fit a square peg oin round holern[18:23] &lt;sannegrinovero&gt; the contract changes seem clearrn[18:23] &lt;sannegrinovero&gt; right, which is why above I was inclined to say we wouldn't benefit from  this  last point  for  instance reuse, but really  this  last one is the lowest valuern[18:24] &lt;sebersole&gt; as  long  as you are not sayin that method should not exist, okrn[18:24] &lt;sannegrinovero&gt; so I'd vote to keep the EntityKey contract  \"clean\" , let the implementor figure out a clever workaround  if  he wishes sorn[18:25] &lt;sannegrinovero&gt; no the method is finern[18:25] &lt;sannegrinovero&gt; it looks good and fits the purposern[18:25] &lt;sebersole&gt; i agree that duck typing EntityKey into an EntiytCacheKey is too muchrn[18:25] &lt;sebersole&gt; rightrn[18:25] &lt;sannegrinovero&gt; BTW the implementor could  try  casting the key to its  private  implementation - it might have been self-generated - rn[18:25] &lt;sannegrinovero&gt; and his custom implementation *could* be able to fullfill the other contract too..rn[18:26] &lt;sannegrinovero&gt; just not ORM's problem ;)rn[18:26] &lt;sannegrinovero&gt; thanks sebersole, I'll log  this  on JIRA there is lots of good ideas. I'll see how far I can apply it to reality :)rn[18:26] &lt;sebersole&gt; nice!rn[18:26] &lt;sebersole&gt; looking forward to itrn[18:26] &lt;sebersole&gt; love good design discussions :)rn[18:26] &lt;sannegrinovero&gt; +1 ! n               n        n    n"},{"commnet_id":"comment-68356","commnet_date":"2015-06-01T14:44:14-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 01\/Jun\/2015 14:44 PM    n        n        I've split this issue, as there are some good parts to merge and some others which need further thought.nnCreated n    n                n        n            n            HHH-9840n        n                                                    Closed n             n which is essentially your original idea, @steve, with one main difference: the generateCacheKey is not a method of the RegionFactory but of the RegionAccessStrategy&lt;T&gt;, I hope that's ok? That allows implementors to use a key optimized for a specific Region. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 01\/Jun\/2015 14:44 PM                      I've split this issue, as there are some good parts to merge and some others which need further thought. nn Created n     n                 n         n             n            HHH-9840n         n                                                     Closed n             n which is essentially your original idea, @steve, with one main difference: the  generateCacheKey  is not a method of the  RegionFactory  but of the  RegionAccessStrategy&lt;T&gt; , I hope that's ok? That allows implementors to use a key optimized for a specific Region.              n        n    n"},{"commnet_id":"comment-70886","commnet_date":"2015-10-02T16:18:19-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 02\/Oct\/2015 16:18 PM    n        n        Sanne, what still needs done here exactly? n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 02\/Oct\/2015 16:18 PM                      Sanne, what still needs done here exactly?              n        n    n"},{"commnet_id":"comment-70903","commnet_date":"2015-10-05T02:33:51-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 05\/Oct\/2015 02:33 AM    n        n        I need to check, I also thought we had it done: we ended up breaking it in multiple smaller tasks, I need to verify if we applied the full picture. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 05\/Oct\/2015 02:33 AM                      I need to check, I also thought we had it done: we ended up breaking it in multiple smaller tasks, I need to verify if we applied the full picture.              n        n    n"},{"commnet_id":"comment-73386","commnet_date":"2015-11-06T12:26:12-0800","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 06\/Nov\/2015 12:26 PM    n        n        Sanne, what still needs done here exactly n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 06\/Nov\/2015 12:26 PM                      Sanne, what still needs done here exactly              n        n    n"},{"commnet_id":"comment-73387","commnet_date":"2015-11-06T12:35:26-0800","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 06\/Nov\/2015 12:35 PM    n        n        Sorry, forgot about this one. We ended up implementing \"the good parts\" of the idea as n    n                n        n            n            HHH-9840n        n                                                    Closed n             n, and not implementing the rest of it (this issue). I'll reject this part, at least until there is more data. n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 06\/Nov\/2015 12:35 PM                      Sorry, forgot about this one. We ended up implementing \"the good parts\" of the idea as n     n                 n         n             n            HHH-9840n         n                                                     Closed n             n, and not implementing the rest of it (this issue). I'll reject this part, at least until there is more data.              n        n    n"}]}},{"OGM-815":{"info":{"issue_title":"Remove CassandraDatastoreProvider#metaDataCache","issue_key":"OGM-815","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"cassandra","issue_description":"I think we can get rid of the CassandraDatastoreProvider#metaDataCache field. It only is used for testing (get number of entities), and there we can get the table names by iterating over the entity persisters accessible through the session factory.  If that data actually is needed, it would have to be a thread-safe map as DatastoreProvider is accessed concurrently.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-815?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-67777","commnet_date":"2015-05-07T04:07:41-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 07\/May\/2015 04:07 AM    n        n        Jonathan Halliday, could you check this one out? Thx! n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 07\/May\/2015 04:07 AM                       Jonathan Halliday , could you check this one out? Thx!              n        n    n"},{"commnet_id":"comment-67778","commnet_date":"2015-05-07T04:09:33-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 07\/May\/2015 04:09 AM    n        n        Btw. I've created and tagged several issues with the cassandra label. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 07\/May\/2015 04:09 AM                      Btw. I've created and tagged several issues with the  cassandra label .              n        n    n"},{"commnet_id":"comment-67779","commnet_date":"2015-05-07T04:29:24-0700","commnet_user":"Davide D&#39;Alto","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Davide D&#39;Alton added a comment  - 07\/May\/2015 04:29 AM    n        n        Actually, I thought we decided to put the name of the datastore in the title instead of creating a label for it, like for https:\/\/hibernate.atlassian.net\/browse\/OGM-605 n    n    n        n            Show  n            n                        n    n    n    n                nn       Davide D&#39;Alton added a comment  - 07\/May\/2015 04:29 AM                      Actually, I thought we decided to put the name of the datastore in the title instead of creating a label for it, like for  https:\/\/hibernate.atlassian.net\/browse\/OGM-605               n        n    n"},{"commnet_id":"comment-67780","commnet_date":"2015-05-07T04:41:14-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 07\/May\/2015 04:41 AM    n        n        I think we wanted to create a component for each backend actually. Hardy has written a script which extracts the component name and pre-fixes release note entries with that, so I think we can start doing so now. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 07\/May\/2015 04:41 AM                      I think we wanted to create a component for each backend actually. Hardy has written a script which extracts the component name and pre-fixes release note entries with that, so I think we can start doing so now.              n        n    n"}]}},{"OGM-814":{"info":{"issue_title":"Explore mapping Calendar as Strings in Cassandra","issue_key":"OGM-814","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"cassandra","issue_description":"As of                                                          OGM-122                                                              Closed                , `Calendar` properties are mapped as a timestamp, loosing any time zone information. I.e. upon read-back we don't know the TZ to convert to. Instead we may provide an option to persist such properties as formatted Strings.  If we decide to wait for a future native Cassandra datatype with TZ support, we should log a warning \/ add a note to the docs about the loss of information in the current approach.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-814?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-813":{"info":{"issue_title":"Add Cassandra to JBoss Modules ZIP","issue_key":"OGM-813","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"4.2.0.Final","issue_labels":"4.2.0.Final","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-813?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-812":{"info":{"issue_title":"Update Fongo to 1.6.2","issue_key":"OGM-812","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Trivial","issue_affects_version":"Fixed","issue_fix_version":"4.2.0.Beta1","issue_component":"4.2.0.Beta1","issue_labels":"4.2.0.Beta1","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-812?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-811":{"info":{"issue_title":"Use MongoDB driver codec feature to avoid unnecessary object creation","issue_key":"OGM-811","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"mongodb","issue_description":"http:\/\/mongodb.github.io\/mongo-java-driver\/3.0\/bson\/codecs\/  I have not investigated but if it could avoid the extra object creations we are seeing during the JSON \/ BSON parsing, that would be a nice performance boost for Hibernate OGM.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-811?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-810":{"info":{"issue_title":"Upgrade to MongoDB driver 3.0","issue_key":"OGM-810","issue_type":"New Feature","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.Alpha1","issue_labels":"5.0.0.Alpha1","issue_description":"Migration does not seem to hard for us http:\/\/mongodb.github.io\/mongo-java-driver\/3.0\/whats-new\/upgrading\/","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-810?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-67774","commnet_date":"2015-05-07T01:34:34-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Emmanuel Bernardn added a comment  - 07\/May\/2015 01:34 AM     - edited  n        n        List of identified issues and tasks:nnntWriteConcern.ERRORS_IGNORED no longer exists (migration)ntnttDeprecate WriteConcernType.ERRORS_IGNORED &#91;DONE&#93; nttCreate issue to remove deprecated ERRORS_IGNORED in 5.0ntntntMongoDB seems to use JULLogger which is uninitialized by defaultntCharacter is not an accepted value anymore https:\/\/jira.mongodb.org\/browse\/JAVA-1804ntnttadd our own type converter (OGM level) &#91;DONE&#93; nttOpen issue to remove this conversion once the driver fixed the issuentntntQueries of the style nn { $query : { author : 'Oscar Wilde' }, $orderby : { name : 1 } } nn failntnttProbably related to https:\/\/jira.mongodb.org\/browse\/JAVA-1657ntntnn n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Emmanuel Bernardn added a comment  - 07\/May\/2015 01:34 AM     - edited                    List of identified issues and tasks: nn nt WriteConcern.ERRORS_IGNORED no longer exists (migration)nt ntt Deprecate WriteConcernType.ERRORS_IGNORED  &#91;DONE&#93;  ntt Create issue to remove deprecated ERRORS_IGNORED in 5.0 nt nt nt MongoDB seems to use JULLogger which is uninitialized by default nt Character is not an accepted value anymore  https:\/\/jira.mongodb.org\/browse\/JAVA-1804 nt ntt add our own type converter (OGM level)  &#91;DONE&#93;  ntt Open issue to remove this conversion once the driver fixed the issue nt nt nt Queries of the style n  n  { $query : { author : 'Oscar Wilde' }, $orderby : { name : 1 } }  n  n  fail nt ntt Probably related to  https:\/\/jira.mongodb.org\/browse\/JAVA-1657  nt nt n n             n        n    n"},{"commnet_id":"comment-67782","commnet_date":"2015-05-07T07:18:52-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 07\/May\/2015 07:18 AM    n        n        Moved this to 5.0.0.Alpha1 as discussed. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 07\/May\/2015 07:18 AM                      Moved this to 5.0.0.Alpha1 as discussed.              n        n    n"},{"commnet_id":"comment-69459","commnet_date":"2015-07-28T04:41:30-0700","commnet_user":"Hardy Ferentschik","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Hardy Ferentschikn added a comment  - 28\/Jul\/2015 04:41 AM    n        n        There are also several deprecations to take care of:nnntMongoClient#getDB -&gt; MongoClient#getDatabasentDB -&gt; MongoDatabasentDBCollection -&gt; MongoCollection&lt;Document&gt;ntmake use of Filters for queriesnn n    n    n        n            Show  n            n                        n    n    n    n                nn       Hardy Ferentschikn added a comment  - 28\/Jul\/2015 04:41 AM                      There are also several deprecations to take care of: nn nt  MongoClient#getDB  -&gt;  MongoClient#getDatabase  nt  DB  -&gt;  MongoDatabase  nt  DBCollection  -&gt;  MongoCollection&lt;Document&gt;  nt make use of  Filters  for queries n n             n        n    n"},{"commnet_id":"comment-69460","commnet_date":"2015-07-28T04:51:50-0700","commnet_user":"Hardy Ferentschik","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Hardy Ferentschikn added a comment  - 28\/Jul\/2015 04:51 AM    n        n        Another issue which needs addressing is the passing of driver options. At the moment only a limited set of driver options can be passed to the driver. This leads to very high timeouts in the DatastoreInitializationTest. In this case serverSelectionTimeout should have a lower value then the default 30000ms. nnTo allow passing of driver settings we discussed the following approach:nnntCreate a property namespace hibernate.ogm.mongodb.driver.. For '<\/b>' any of the valid driver option names can be used with an appropriate valuentImplementation wise we have then two optionsntnttcollect all options and other connection details and use the MongoClientURI to parse the connections settings + optionsnttuse reflection to apply the options to MongoClientOptionsntntnn n    n    n        n            Show  n            n                        n    n    n    n                nn       Hardy Ferentschikn added a comment  - 28\/Jul\/2015 04:51 AM                      Another issue which needs addressing is the passing of driver options. At the moment only a limited set of driver options can be passed to the driver. This leads to very high timeouts in the  DatastoreInitializationTest . In this case  serverSelectionTimeout  should have a lower value then the default 30000ms.  nn To allow passing of driver settings we discussed the following approach: nn nt Create a property namespace  hibernate.ogm.mongodb.driver.  . For ' ' any of the valid driver option names can be used with an appropriate value nt Implementation wise we have then two optionsnt ntt collect all options and other connection details and use the  MongoClientURI  to parse the connections settings + options ntt use reflection to apply the options to  MongoClientOptions  nt nt n n             n        n    n"}]}},{"OGM-807":{"info":{"issue_title":"Clarify usage of the CLI syntax for native query wrt. to JSON property keys","issue_key":"OGM-807","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Blocker","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"4.2.0.CR1","issue_labels":"4.2.0.CR1","issue_description":"See https:\/\/forum.hibernate.org\/viewtopic.php?f=31&amp;t=1039404  Probably a note of some kind after the examples","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-807?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-67845","commnet_date":"2015-05-12T02:43:07-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 12\/May\/2015 02:43 AM    n        n        Actually it's not that single ticks are mandatory, but JSON keys need to be given in quotes, be it single or double quotes. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 12\/May\/2015 02:43 AM                      Actually it's not that single ticks are mandatory, but JSON keys need to be given in quotes, be it single or double quotes.              n        n    n"}]}},{"HV-989":{"info":{"issue_title":"ConcurrentReferenceHashMap is inadvertently licensed as LGPL","issue_key":"HV-989","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.0.CR1","issue_labels":"5.2.0.CR1","issue_description":"ConcurrentReferenceHashMap is originally from Doug Lea under public domain.\r\n Jason Greene added some improvements under Red Hat employment  Let's move from LGPL to ASL for this class and keep Doug Lea's note on public domain.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-989?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-67737","commnet_date":"2015-05-04T09:44:06-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 04\/May\/2015 09:44 AM    n        n        https:\/\/github.com\/hibernate\/hibernate-validator\/pull\/414 n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 04\/May\/2015 09:44 AM                       https:\/\/github.com\/hibernate\/hibernate-validator\/pull\/414               n        n    n"}]}},{"HHH-9766":{"info":{"issue_title":"Make CurrentSessionContext implementation isolate sessions per tenant id","issue_key":"HHH-9766","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"None","issue_description":"Today,\r\n CurrentSessionContext implementations cache sessions, per context (thread, managed, JTA). They also check that the session returned is using the right tenant id (according to CurrentTenantIdentifierResolver. An exception is raised other wise.  A user proposed the following adjustments:  CurrentSessionContext implementations will cache sessions per tenant id and per context. For a given context, say the same thread, we would receive different sessions if CurrentTenantIdentifierResolver returns different tenant ids between the calls to Session.currentSession().  The use case is as followed. Some part of the application needs to access the data from more than one tenant (some admin or dashboard). In this case, it might be necessary to have different sessions for each tenant id requested within the same context.  Steve Ebersole do you think that's a reasonable change?  The context is here https:\/\/forum.hibernate.org\/viewtopic.php?f=1&amp;t=1035802","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9766?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-67667","commnet_date":"2015-04-30T10:22:15-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 30\/Apr\/2015 10:22 AM    n        n        Personally, I do not think this is reasonable.  Specifically this notion that getCurrentSession() suddenly starts returning me different things.nnBe that as it may, they are more than welcome to implement a custom CurrentSessionContext.  Or if this gets enough votes, I guess I would be convinced it makes enough sense to look at. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 30\/Apr\/2015 10:22 AM                      Personally, I do not think this is reasonable.  Specifically this notion that  getCurrentSession()  suddenly starts returning me different things. nn Be that as it may, they are more than welcome to implement a custom  CurrentSessionContext .  Or if this gets enough votes, I guess I would be convinced it makes enough sense to look at.              n        n    n"},{"commnet_id":"comment-67947","commnet_date":"2015-05-19T02:36:44-0700","commnet_user":"Florian Beaufumu00E9","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Florian Beaufumu00E9n added a comment  - 19\/May\/2015 02:36 AM    n        n        Hello, I may be the user at the origin of this feature request.nnI think using multiple sessions (each one being tied to separate tenants) in the same context from the SAME session factory is in fact doomed to fail, as it does not properly support second second level caching (as well as session factory stats).nnIndeed, considering that the second level cache is at the session factory level, I think data cached on behalf of one tenant would be visible to other tenants, hence breaking the isolation of the tenants. The same goes for session factory stats.nnCan you confirm my explanation ?nnIf confirmed, you can remove the feature request for me because the caching issue is a too important limitation.nnAs a consequence each tenant must have its own session factory, and the present Hibernate implementations of \"current session\" are enough to support the uses cases I need. n    n    n        n            Show  n            n                        n    n    n    n                nn       Florian Beaufumu00E9n added a comment  - 19\/May\/2015 02:36 AM                      Hello, I may be the user at the origin of this feature request. nn I think using multiple sessions (each one being tied to separate tenants) in the same context from the SAME session factory is in fact doomed to fail, as it does not properly support second second level caching (as well as session factory stats). nn Indeed, considering that the second level cache is at the session factory level, I think data cached on behalf of one tenant would be visible to other tenants, hence breaking the isolation of the tenants. The same goes for session factory stats. nn Can you confirm my explanation ? nn If confirmed, you can remove the feature request for me because the caching issue is a too important limitation. nn As a consequence each tenant must have its own session factory, and the present Hibernate implementations of \"current session\" are enough to support the uses cases I need.              n        n    n"},{"commnet_id":"comment-67949","commnet_date":"2015-05-19T04:57:08-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 19\/May\/2015 04:57 AM    n        n        Florian, the second level cache takes the tenant id into account (except for the SessionFactory operations like evictEntity but that's not relevant here).\r\nnYou can look at CacheKey. n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 19\/May\/2015 04:57 AM                      Florian, the second level cache takes the tenant id into account (except for the  SessionFactory  operations like  evictEntity  but that's not relevant here). nYou can look at  CacheKey .              n        n    n"},{"commnet_id":"comment-67952","commnet_date":"2015-05-19T06:45:57-0700","commnet_user":"Florian Beaufumu00E9","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Florian Beaufumu00E9n added a comment  - 19\/May\/2015 06:45 AM    n        n        Great. Thank you Emmanuel.nnNow what about session factory stats ?nnAnd are there other mutable data in the session factory that are not \"tenant-aware\" ? n    n    n        n            Show  n            n                        n    n    n    n                nn       Florian Beaufumu00E9n added a comment  - 19\/May\/2015 06:45 AM                      Great. Thank you Emmanuel. nn Now what about session factory stats ? nn And are there other mutable data in the session factory that are not \"tenant-aware\" ?              n        n    n"},{"commnet_id":"comment-68003","commnet_date":"2015-05-21T02:41:08-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 21\/May\/2015 02:41 AM    n        n        Well, Session stats will be tenant isolated by definition. I am not sure SessionFactory's stats would make sense if isolated by tenant as a SessionFactory does handle all tenants.\r\nnWhat are your use cases? n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 21\/May\/2015 02:41 AM                      Well,  Session  stats will be tenant isolated by definition. I am not sure  SessionFactory 's stats would make sense if isolated by tenant as a  SessionFactory  does handle all tenants. nWhat are your use cases?              n        n    n"},{"commnet_id":"comment-68012","commnet_date":"2015-05-21T06:34:20-0700","commnet_user":"Florian Beaufumu00E9","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Florian Beaufumu00E9n added a comment  - 21\/May\/2015 06:34 AM    n        n        This is getting a little complicated by text messages. Emmanuel, if you have some time next month before or after your presentation at Toulouse JUG, maybe we can continue the technical discussion? n    n    n        n            Show  n            n                        n    n    n    n                nn       Florian Beaufumu00E9n added a comment  - 21\/May\/2015 06:34 AM                      This is getting a little complicated by text messages. Emmanuel, if you have some time next month before or after your presentation at Toulouse JUG, maybe we can continue the technical discussion?              n        n    n"}]}},{"HHH-9762":{"info":{"issue_title":"Complete deprecation of Settings contract","issue_key":"HHH-9762","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.0.Beta2","issue_component":"5.0.0.Beta2","issue_labels":"5.0.0.Beta2","issue_description":"Mainly replace its usage in SPIs to instead use SessionFactoryOptions","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9762?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-9761":{"info":{"issue_title":"Make native APIs typed","issue_key":"HHH-9761","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.CR1","issue_labels":"5.0.0.CR1","issue_description":"Find links to the hibernate-dev discussions...","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9761?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-67660","commnet_date":"2015-04-29T23:49:15-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 29\/Apr\/2015 23:49 PM    n        n        Looks related: http:\/\/lists.jboss.org\/pipermail\/hibernate-dev\/2012-January\/007625.html n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 29\/Apr\/2015 23:49 PM                      Looks related:  http:\/\/lists.jboss.org\/pipermail\/hibernate-dev\/2012-January\/007625.html               n        n    n"},{"commnet_id":"comment-67661","commnet_date":"2015-04-30T01:37:32-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 30\/Apr\/2015 01:37 AM    n        n        Reading the 2012 discussion, my favored approach would be:nnntoffer a generic version of get \/ loadntask users to respect Sanne's constraint, i.e. use the @Proxy contract when invoking the methodsnttrack the Proxy -&gt; actual class as Steve mentionsnnnnWe can possibly add a non generic method in some session extension\/delegate contract available via unwrap() or a more specific Session method forUntyped(). This might not be as bad considering we also need to support entities provided by name and not class. We could move these \"overloaded\" contracts (like public Object load(String entityName, Serializable id); to a specific delegate. n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 30\/Apr\/2015 01:37 AM                      Reading the 2012 discussion, my favored approach would be: nn nt offer a generic version of get \/ load nt ask users to respect Sanne's constraint, i.e. use the @Proxy contract when invoking the methods nt track the Proxy -&gt; actual class as Steve mentions n nnn We can possibly add a non generic method in some session extension\/delegate contract available via unwrap() or a more specific Session method  forUntyped() . This might not be as bad considering we also need to support entities provided by name and not class. We could move these \"overloaded\" contracts (like  public Object load(String entityName, Serializable id);  to a specific delegate.              n        n    n"},{"commnet_id":"comment-67739","commnet_date":"2015-05-04T21:26:08-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Steve Ebersolen added a comment  - 04\/May\/2015 21:26 PM     - edited  n        n        Few thoughts...nnntI am not sure what you mean exactly by \"offer a generic version of get \/ load\".  Are you suggesting we change the signatures of get \/ load?  Or are you suggesting adding additional types methods?  Personally, I'd just not do anything with Session#get and Session#load specifically.  These essentially are the untyped API.   I'd vote to apply the typing to the IdentifierLoadAccess, NaturalIdLoadAccess and SimpleNaturalIdLoadAccess methodsntAt the moment nothing stops someone from using the same interface as proxy for more than one entity.  This is the first semantic (non-API enforced) change proposed here.ntAt the moment the API allows users to quite happily (and really this is the only way the API works currently) perform a load\/get by the entity class rather than the proxy class.  This is the second semantic change proposed.nnnnI am not really in favor of new typed variants of all the Class-accepting methods on Session (get and load are just some of the methods in question, and bear in mind that even just those \"2\" are already overloaded to accept locking options, or not).  One option is to handle this in the org.hibernate.IdentifierLoadAccess and {[org.hibernate.NaturalIdLoadAccess}} approaches.  Basically leave get, load, etc as-is and add type parameters to IdentifierLoadAccess and NaturalIdLoadAccess.  Today we have:nnntpublic IdentifierLoadAccess byId(String entityName)ntpublic IdentifierLoadAccess byId(Class entityClass)ntpublic NaturalIdLoadAccess byNaturalId(String entityName)ntpublic NaturalIdLoadAccess byNaturalId(Class entityClass)ntpublic SimpleNaturalIdLoadAccess bySimpleNaturalId(String entityName)ntpublic SimpleNaturalIdLoadAccess bySimpleNaturalId(Class entityClass)nnnnWe would expand this into:nnntpublic IdentifierLoadAccess byId(String entityName)ntpublic &lt;T&gt; IdentifierLoadAccess&lt;T&gt; byId(Class&lt;T&gt; entityClass)ntpublic &lt;T&gt; IdentifierLoadAccess&lt;T&gt; byId(Class entityClass, Class&lt;T&gt; proxy)ntpublic NaturalIdLoadAccess byNaturalId(String entityName)ntpublic &lt;T&gt; NaturalIdLoadAccess&lt;T&gt; byNaturalId(Class&lt;T&gt; entityClass)ntpublic &lt;T&gt; NaturalIdLoadAccess&lt;T&gt; byNaturalId(Class entityClass, Class&lt;T&gt; proxy)ntpublic SimpleNaturalIdLoadAccess bySimpleNaturalId(String entityName)ntpublic &lt;T&gt; SimpleNaturalIdLoadAccess&lt;T&gt; bySimpleNaturalId(Class&lt;T&gt; entityClass)ntpublic &lt;T&gt; SimpleNaturalIdLoadAccess&lt;T&gt; bySimpleNaturalId(Class entityClass, Class&lt;T&gt; proxy)nnnnNot sure if we really need an un-typed variant for these.  E.g.:nnntpublic IdentifierLoadAccess byIdUntyped(Class entityClass)ntpublic NaturalIdLoadAccess byNaturalIdUntyped(Class entityClass)ntpublic SimpleNaturalIdLoadAccess bySimpleNaturalIdUntyped(Class entityClass)nn n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Steve Ebersolen added a comment  - 04\/May\/2015 21:26 PM     - edited                    Few thoughts... nn nt I am not sure what you mean exactly by \"offer a generic  version  of get \/ load\".  Are you suggesting we change the signatures of get \/ load?  Or are you suggesting adding additional types methods?  Personally, I'd just not do anything with  Session#get  and  Session#load  specifically.  These essentially  are  the untyped API.   I'd vote to apply the typing to the  IdentifierLoadAccess ,  NaturalIdLoadAccess  and  SimpleNaturalIdLoadAccess  methods nt At the moment nothing stops someone from using the same interface as proxy for more than one entity.  This is the first semantic (non-API enforced) change proposed here. nt At the moment the API allows users to quite happily (and really this is the only way the API works currently) perform a load\/get by the entity class rather than the proxy class.  This is the second semantic change proposed. n nnn I am not really in favor of new typed variants of all the Class-accepting methods on Session (get and load are just some of the methods in question, and bear in mind that even just those \"2\" are already overloaded to accept locking options, or not).  One option is to handle this in the  org.hibernate.IdentifierLoadAccess  and {[org.hibernate.NaturalIdLoadAccess}} approaches.  Basically leave get, load, etc as-is and add type parameters to  IdentifierLoadAccess  and  NaturalIdLoadAccess .  Today we have: nn nt public IdentifierLoadAccess byId(String entityName) nt public IdentifierLoadAccess byId(Class entityClass) nt public NaturalIdLoadAccess byNaturalId(String entityName) nt public NaturalIdLoadAccess byNaturalId(Class entityClass) nt public SimpleNaturalIdLoadAccess bySimpleNaturalId(String entityName) nt public SimpleNaturalIdLoadAccess bySimpleNaturalId(Class entityClass) n nnn We would expand this into: nn nt public IdentifierLoadAccess byId(String entityName) nt public &lt;T&gt; IdentifierLoadAccess&lt;T&gt; byId(Class&lt;T&gt; entityClass) nt public &lt;T&gt; IdentifierLoadAccess&lt;T&gt; byId(Class entityClass, Class&lt;T&gt; proxy) nt public NaturalIdLoadAccess byNaturalId(String entityName) nt public &lt;T&gt; NaturalIdLoadAccess&lt;T&gt; byNaturalId(Class&lt;T&gt; entityClass) nt public &lt;T&gt; NaturalIdLoadAccess&lt;T&gt; byNaturalId(Class entityClass, Class&lt;T&gt; proxy) nt public SimpleNaturalIdLoadAccess bySimpleNaturalId(String entityName) nt public &lt;T&gt; SimpleNaturalIdLoadAccess&lt;T&gt; bySimpleNaturalId(Class&lt;T&gt; entityClass) nt public &lt;T&gt; SimpleNaturalIdLoadAccess&lt;T&gt; bySimpleNaturalId(Class entityClass, Class&lt;T&gt; proxy) n nnn Not sure if we really need an un-typed variant for these.  E.g.: nn nt public IdentifierLoadAccess byIdUntyped(Class entityClass) nt public NaturalIdLoadAccess byNaturalIdUntyped(Class entityClass) nt public SimpleNaturalIdLoadAccess bySimpleNaturalIdUntyped(Class entityClass) n n             n        n    n"},{"commnet_id":"comment-67786","commnet_date":"2015-05-07T12:30:15-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 07\/May\/2015 12:30 PM    n        n        Going once... going twice... n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 07\/May\/2015 12:30 PM                      Going once... going twice...              n        n    n"},{"commnet_id":"comment-67787","commnet_date":"2015-05-07T12:40:43-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 07\/May\/2015 12:40 PM    n        n        FWIW, if only the XyLoadAccess types are generified, I find it's much less useful than it could be. Isn't get()\/load() what is used in 95% of the cases? I find the proposal of generifying get()\/load() (i.e. altering the existing methods, not adding new variants) attractive; Requiring the proxy interface to be passed in such cases (as suggested by Emmanuel Bernard) seems acceptable to me. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 07\/May\/2015 12:40 PM                      FWIW, if only the  XyLoadAccess  types are generified, I find it's much less useful than it could be. Isn't  get() \/ load()  what is used in 95% of the cases? I find the proposal of generifying  get() \/ load()  (i.e.  altering  the existing methods, not adding new variants) attractive; Requiring the proxy interface to be passed in such cases (as suggested by  Emmanuel Bernard ) seems acceptable to me.              n        n    n"},{"commnet_id":"comment-67812","commnet_date":"2015-05-10T07:12:42-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 10\/May\/2015 07:12 AM    n        n        I do not necessarily disagree.  However, what then is your proposal for allowing \"untyped\" access? n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 10\/May\/2015 07:12 AM                      I do not necessarily disagree.  However, what then is your proposal for allowing \"untyped\" access?              n        n    n"}]}},{"HV-988":{"info":{"issue_title":"Review and refactor metadata in relation to handling @UnwrapValidated and type use constraints","issue_key":"HV-988","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"5.2.0.Beta1","issue_component":"5.2.0.Beta1","issue_labels":"5.2.0.Beta1","issue_description":"Currently the handling of type use annotation and unwrapping mode are very confusing. For example the unwrap mode is part of the property metadata, even though it might not apply to all constraints - see also discussion on this pull request.  Also the whole handling of the different type of constraints (wrapped vs unwrapped vs type use) seems very ad hoc. This should be looked over, maybe as part of or together with                                                          HV-477                                                              Open                 and                                                          HV-445                                                              Open","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-988?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-9753":{"info":{"issue_title":"Remove ClassicAvgFunction, ClassicCountFunction, ClassicSumFunction","issue_key":"HHH-9753","issue_type":"Remove Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.Beta2","issue_labels":"5.0.0.Beta2","issue_description":"Remove ClassicAvgFunction, ClassicCountFunction, ClassicSumFunction.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9753?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-67650","commnet_date":"2015-04-28T14:20:51-0700","commnet_user":"Gail Badner","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gail Badnern added a comment  - 28\/Apr\/2015 14:20 PM    n        n        Fixed in master branch. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gail Badnern added a comment  - 28\/Apr\/2015 14:20 PM                      Fixed in master branch.              n        n    n"}]}},{"HSEARCH-1861":{"info":{"issue_title":"Enable IndexedEmbedded#includeEmbeddedObjectId to be enforced via SearchConfiguration Properties","issue_key":"HSEARCH-1861","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Minor","issue_affects_version":"Rejected","issue_fix_version":"5.2.0.Beta1","issue_component":"5.2.0.Beta1","issue_labels":"5.2.0.Beta1","issue_description":"I think it's a good idea to enable integrators to enforce IndexedEmbedded#includeEmbeddedObjectId to be true without the user having to set it on every single annotation.  This can easily be achieved by changing AnnotationMetadataProvider to ignore the values set in the @IndexedEmbedded if we configure it to do so. Maybe this shouldn't be exposed via Properties but via a field\/method in SearchConfiguration.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1861?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-75331","commnet_date":"2016-02-22T02:44:42-0800","commnet_user":"Martin Braun","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Martin Braunn added a comment  - 22\/Feb\/2016 02:44 AM    n        n        Hmm. This could be enforced for the async backend however (without any config property) n    n    n        n            Show  n            n                        n    n    n    n                nn       Martin Braunn added a comment  - 22\/Feb\/2016 02:44 AM                      Hmm. This could be enforced for the async backend however (without any config property)              n        n    n"}]}},{"HV-985":{"info":{"issue_title":"Update to Classmate 1.1.0 or latest","issue_key":"HV-985","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.1.3.Final","issue_component":"5.1.3.Final","issue_labels":"5.1.3.Final","issue_description":"Classmate 1.1.0 fixes a bug that causes class cast exceptions with some object models. The bug is causing hibernate persistence failures when the 'classmate:1.0.0' is pulled in transitively via hibernate-validator:5.1.3.Final and spring-boot-starter-web:1.2.3.RELEASE.  https:\/\/github.com\/cowtowncoder\/java-classmate\/blob\/master\/VERSION.txt:  1.1.0 (19-Aug-2014)  #16: ClassCastException in TypeResolver (ResolvedRecursiveType cannot be cast to ResolvedObjectType)  https:\/\/github.com\/cowtowncoder\/java-classmate\/blob\/master\/VERSION.txt:","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-985?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-67632","commnet_date":"2015-04-27T14:14:56-0700","commnet_user":"Hardy Ferentschik","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Hardy Ferentschikn added a comment  - 27\/Apr\/2015 14:14 PM    n        n        Could you provide such a object model? It would be nice to reproduce the problem and add a test. n    n    n        n            Show  n            n                        n    n    n    n                nn       Hardy Ferentschikn added a comment  - 27\/Apr\/2015 14:14 PM                      Could you provide such a object model? It would be nice to reproduce the problem and add a test.              n        n    n"}]}},{"HHH-9746":{"info":{"issue_title":"Improve hibernate-spatial integration","issue_key":"HHH-9746","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.0.0.Beta2","issue_labels":"5.0.0.Beta2","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9746?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HV-984":{"info":{"issue_title":"Further documentation review and improvements","issue_key":"HV-984","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.0.Final","issue_labels":"5.2.0.Final","issue_description":"Apply literal formatting to chapters not covered by                                                          HV-941                                                              Closed                .","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-984?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"OGM-802":{"info":{"issue_title":"Add support for joined inheritance (natural mapping for EAV stores)","issue_key":"OGM-802","issue_type":"New Feature","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Won&#39;t Fix","issue_fix_version":"5.0.0.CR1","issue_component":"5.0.0.CR1","issue_labels":"5.0.0.CR1","issue_description":"As an OGM implementor, I would like to be able to map individual classes via joined inheritance.   Acknowledging that most NoSQL datastores do not support joins, this is a very useful strategy for at least Datomic and presumably any EAV datastore.   Given that entities in EAV stores are represented as:  &#91;eid&#93;  &#91;attribute name&#93;  &#91;value&#93;   a natural mapping between JPA entities and EAV entities would be as follows:  @Entity \r\n @Table(name = \"persistable\")\r\n @Inheritance(strategy = InheritanceType.JOINED)\r\n public class Persistable  {     @Basic      Long id;      @Basic      String name;    }  @Entity\r\n @Table(name = \"foo\")\r\n public class Foo extends Persistable  {     @Basic     String bar;      }  Would map to   persistable\r\n persistable\/id\r\n persistable\/name  foo\r\n foo\/bar  as attributes in the EAV store and eliminate unnecessary duplication of attributes.   This should be relatively easy to implement, requiring a new EntityPersister, EntityDiscriminator, and the registration of the Persister with the OgmPersisterClassResolver","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-802?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-67635","commnet_date":"2015-04-28T02:09:52-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 28\/Apr\/2015 02:09 AM    n        n        Hi Josiah Haswell,nnJust so that I get my thoughts in order, you cannot use the the current strategy because attribute names are prepended with the table name in Datomics? Presumably to give them proper namespace isolation. By using the joined strategy, you would cut down the number of attribute metadata created. Is that correct?nnIf yes it seems to me that a EAV database might prefer the SINGLE_TABLE strategy where all columns are stored in the same table. The EAV model is after all a way to map sparse matrices which is what SINGLE_TABLE models are about. am I missing something? Is it because in EAV\/Datomics you purposely do not want to have discriminator attributes? In which case, how do you know that a given entity id is both persistable and foo (to know it is in the end of type foo)?\r\nnI don't know Datomics much so I might be completely off base. n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 28\/Apr\/2015 02:09 AM                      Hi  Josiah Haswell , nn Just so that I get my thoughts in order, you cannot use the the current strategy because attribute names are prepended with the table name in Datomics? Presumably to give them proper namespace isolation. By using the joined strategy, you would cut down the number of attribute metadata created. Is that correct? nn If yes it seems to me that a EAV database might prefer the SINGLE_TABLE strategy where all columns are stored in the same table. The EAV model is after all a way to map sparse matrices which is what SINGLE_TABLE models are about. am I missing something? Is it because in EAV\/Datomics you purposely do not want to have discriminator attributes? In which case, how do you know that a given entity id is both persistable and foo (to know it is in the end of type foo)? nI don't know Datomics much so I might be completely off base.              n        n    n"},{"commnet_id":"comment-67648","commnet_date":"2015-04-28T09:42:24-0700","commnet_user":"Josiah Haswell","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n                                            n    n                nn       Josiah Haswelln added a comment  - 28\/Apr\/2015 09:42 AM     - edited  n        n        Hi Emmanuel,nnSINGLE_TABLE is probably not ideal as Datomic as namespacing the attribute name by some property of the entity is equivalent, but faster and more compact.  It certainly is supported, however.nnGoing back and evaluating, it looks like TABLE_PER_CLASS is actually natural for EAV stores.  Originally, I thought that inherited properties were included in the set of properties on the PersistentClass definition, which problematized resolving a property upon retrieval in a tuple snapshot. While there are legitimate uses for joined inheritance (it allows Datomic to function as a graph database more effectively), it's not necessary for now.nnI think this issue can be reduced in priority or closed. nnThanks! n    n    n        n            Show  n            n                        n    n    n                                            n    n                nn       Josiah Haswelln added a comment  - 28\/Apr\/2015 09:42 AM     - edited                    Hi Emmanuel, nn SINGLE_TABLE is probably not ideal as Datomic as namespacing the attribute name by some property of the entity is equivalent, but faster and more compact.  It certainly is supported, however. nn Going back and evaluating, it looks like TABLE_PER_CLASS is actually natural for EAV stores.  Originally, I thought that inherited properties were included in the set of properties on the PersistentClass definition, which problematized resolving a property upon retrieval in a tuple snapshot. While there are legitimate uses for joined inheritance (it allows Datomic to function as a graph database more effectively), it's not necessary for now. nn I think this issue can be reduced in priority or closed.  nn Thanks!              n        n    n"},{"commnet_id":"comment-67654","commnet_date":"2015-04-29T02:04:40-0700","commnet_user":"Emmanuel Bernard","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Emmanuel Bernardn added a comment  - 29\/Apr\/2015 02:04 AM    n        n        Ok, let's close it for now to keep things clean, we can open an new one when the issue becomes more concrete. Looking forward to see your pull request for datomic. n    n    n        n            Show  n            n                        n    n    n    n                nn       Emmanuel Bernardn added a comment  - 29\/Apr\/2015 02:04 AM                      Ok, let's close it for now to keep things clean, we can open an new one when the issue becomes more concrete. Looking forward to see your pull request for datomic.              n        n    n"}]}},{"HV-983":{"info":{"issue_title":"Support @Pattern for numerical types","issue_key":"HV-983","issue_type":"Improvement","issue_status":"Resolved","issue_priority":"Resolved","issue_resolution":"Major","issue_affects_version":"Won&#39;t Fix","issue_fix_version":"None","issue_component":"None","issue_labels":"engine","issue_description":"Integer types like byte, short, int and long should be no problem. Floating point types might need some investigation since the string representation of such a type might not always be what one expects.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-983?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-84943","commnet_date":"2016-10-14T00:38:28-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 14\/Oct\/2016 00:38 AM    n        n        Hey Hardy Ferentschik, what are the use cases you had in mind with this one? I.e. when would a user want to apply a regular expression to a numeric property? n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 14\/Oct\/2016 00:38 AM                      Hey  Hardy Ferentschik , what are the use cases you had in mind with this one? I.e. when would a user want to apply a regular expression to a numeric property?              n        n    n"},{"commnet_id":"comment-84947","commnet_date":"2016-10-14T10:39:02-0700","commnet_user":"Hardy Ferentschik","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Hardy Ferentschikn added a comment  - 14\/Oct\/2016 10:39 AM    n        n        n what are the use cases you had in mind with this one? I.e. when would a user want to apply a regular expression to a numeric property?nnI think that came out of some Stackoverflow question or maybe even forum. AFAIR it appeared more than once, so I created the issue. More as a ground for a discussion. Personally I am a bit skeptical. There are two things which worries me:nnntYou need to do a type conversion (from number to string). So far we always refrained from type conversions of this typentObviously there is a problem with float\/double types which get converted to stringsnnnnGiven that (at least in BV) we tend to be more on the conservative side, I am not sure it is such a good thing to do. As said, open for discussion.  n    n    n        n            Show  n            n                        n    n    n    n                nn       Hardy Ferentschikn added a comment  - 14\/Oct\/2016 10:39 AM                      n  what are the use cases you had in mind with this one? I.e. when would a user want to apply a regular expression to a numeric property?  nn I think that came out of some Stackoverflow question or maybe even forum. AFAIR it appeared more than once, so I created the issue. More as a ground for a discussion. Personally I am a bit skeptical. There are two things which worries me: nn nt You need to do a type conversion (from number to string). So far we always refrained from type conversions of this type nt Obviously there is a problem with float\/double types which get converted to strings n nnn Given that (at least in BV) we tend to be more on the conservative side, I am not sure it is such a good thing to do. As said, open for discussion.               n        n    n"},{"commnet_id":"comment-85001","commnet_date":"2016-10-17T03:50:00-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 17\/Oct\/2016 03:50 AM    n        n        Ok, thanks, Hardy Ferentschik! Personally I'm also not convinced of adding this, I cannot see a good use case really (same goes for Guillaume Smet AFAIK).nnMarko Bekhta, do you have any specific use case in mind where one would be using this? If not I'm inclined to close this one as \"Won't fix\". Sorry for bringing it up only now, I wasn't quick enough to keep up with your speed of changes. That said it's always a good idea to quickly sync before hacking away so we are all on the same page. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 17\/Oct\/2016 03:50 AM                      Ok, thanks,  Hardy Ferentschik ! Personally I'm also not convinced of adding this, I cannot see a good use case really (same goes for  Guillaume Smet  AFAIK). nn  Marko Bekhta , do you have any specific use case in mind where one would be using this? If not I'm inclined to close this one as \"Won't fix\". Sorry for bringing it up only now, I wasn't quick enough to keep up with your speed of changes. That said it's always a good idea to quickly sync before hacking away so we are all on the same page.              n        n    n"},{"commnet_id":"comment-85002","commnet_date":"2016-10-17T04:11:44-0700","commnet_user":"Marko Bekhta","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Marko Bekhtan added a comment  - 17\/Oct\/2016 04:11 AM    n        n        Gunnar Morling no, I cannot see any practical use cases for this. Except maybe some specific numbers, where a digit represent some meaning and should be from a predefined set of digits. Maybe such cases could be applied to some identification numbers ?nnThere's this other PR with NumberPattern (547) which seems to be a better approach than making current @Pattern available for numbers. But again ... It may only be a better solution for the problem that does not really exist nnIt wasn't a huge amount of work so I wouldn't mind if it'll be rejected.   n    n    n        n            Show  n            n                        n    n    n    n                nn       Marko Bekhtan added a comment  - 17\/Oct\/2016 04:11 AM                       Gunnar Morling  no, I cannot see any practical use cases for this. Except maybe some specific numbers, where a digit represent some meaning and should be from a predefined set of digits. Maybe such cases could be applied to some identification numbers ? nn There's this other PR with NumberPattern ( 547 ) which seems to be a better approach than making current @Pattern available for numbers. But again ... It may only be a better solution for the problem that does not really exist   nn It wasn't a huge amount of work so I wouldn't mind if it'll be rejected.                n        n    n"},{"commnet_id":"comment-85005","commnet_date":"2016-10-17T07:14:36-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 17\/Oct\/2016 07:14 AM    n        n        Ok, as no strong use cases are in sight, let's close this as \"Won't fix\" then. As always people can always come up with their own validator (and constraint) should there really be a need. Thanks for your effort Marko Bekhta, it's one issue off the list either way  n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 17\/Oct\/2016 07:14 AM                      Ok, as no strong use cases are in sight, let's close this as \"Won't fix\" then. As always people can always come up with their own validator (and constraint) should there really be a need. Thanks for your effort  Marko Bekhta , it's one issue off the list either way                n        n    n"},{"commnet_id":"comment-85006","commnet_date":"2016-10-17T07:15:08-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 17\/Oct\/2016 07:15 AM    n        n        The team agreed to reject it as we couldn't come up with a reasonable use case that'd justify this addition. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 17\/Oct\/2016 07:15 AM                      The team agreed to reject it as we couldn't come up with a reasonable use case that'd justify this addition.              n        n    n"}]}},{"HHH-9742":{"info":{"issue_title":"Allow to strictly adhere to JPA disallowance of restricting a fetched join","issue_key":"HHH-9742","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Minor","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"5.2.0","issue_labels":"5.2.0","issue_description":"JPA says the a fetched join should not be allowed to be restricted.  For example, it says that this should not be allowed:     select a from Animal a join fetch a.children c where c.name = 'Larry'     The reason being that you fetch an incomplete view of the fetched association (partially loaded collection or potentially missing to-one).  HQL does allow this syntax.  We already have a setting to allow the user to request strictly complying with JPQL contructs.  We should leverage that in this case.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9742?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-9738":{"info":{"issue_title":"Upgrade master (5.0) to Gradle 2.4","issue_key":"HHH-9738","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.0.Beta1","issue_component":"5.0.0.Beta1","issue_labels":"5.0.0.Beta1","issue_description":"With java 8 and gradle 2.2 it is not possible to run a single unit test anymore.   gradlew -Dtest.single=EnumeratedTypeTest :hibernate-core:test  ...  FAILURE: Build failed with an exception.    * What went wrong:  Execution failed for task ':test'.  &gt; Could not find matching test for pattern: EnumeratedTypeTest     This should be fixed with gradle 2.3.\r\n http:\/\/gradle.org\/docs\/current\/release-notes\r\n https:\/\/issues.gradle.org\/browse\/GRADLE-3157  Unfortunately with gradle 2.3 antlr does not create the java source files as expected","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9738?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-67470","commnet_date":"2015-04-22T00:41:54-0700","commnet_user":"Oliver Breidenbach","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Oliver Breidenbachn added a comment  - 22\/Apr\/2015 00:41 AM    n        n        The antlr problems seems to be addressed here:\r\nnhttps:\/\/issues.gradle.org\/browse\/GRADLE-3262 n    n    n        n            Show  n            n                        n    n    n    n                nn       Oliver Breidenbachn added a comment  - 22\/Apr\/2015 00:41 AM                      The antlr problems seems to be addressed here: n https:\/\/issues.gradle.org\/browse\/GRADLE-3262               n        n    n"},{"commnet_id":"comment-67872","commnet_date":"2015-05-14T12:22:34-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 14\/May\/2015 12:22 PM    n        n        I am unfortunately in the middle of doing a major release (5.0). I just don't have time to test out new Gradle releases.  If you want to verify that every facet of Hibernate build works with 2.4 (which supposedly includes the Antlr plugin fix) and work on fixing things that don't that would be great.  Otherwise this is going to have to wait post-5.0 n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 14\/May\/2015 12:22 PM                      I am unfortunately in the middle of doing a major release (5.0). I just don't have time to test out new Gradle releases.  If  you  want to verify that every facet of Hibernate build works with 2.4 (which supposedly includes the Antlr plugin fix) and work on fixing things that don't that would be great.  Otherwise this is going to have to wait post-5.0              n        n    n"},{"commnet_id":"comment-68263","commnet_date":"2015-05-29T14:01:36-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 29\/May\/2015 14:01 PM    n        n        Basic build worked fine with 2.4.  Cannot speak for all tasks. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 29\/May\/2015 14:01 PM                      Basic build worked fine with 2.4.  Cannot speak for all tasks.              n        n    n"}]}},{"OGM-800":{"info":{"issue_title":"Documentation on WildFly deployment omits the necessity to download latest Infinispan modules","issue_key":"OGM-800","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"None","issue_component":"4.2.0.CR1","issue_labels":"4.2.0.CR1","issue_description":"We documented how to deploy Hibernate OGM modules, and give some pointers on how to add Hibernate Search modules as well, but when someone wants to use Infinispan as storage we should point out the need to download the Infinispan 7 modules.  See also this conversation: https:\/\/twitter.com\/fnharms\/status\/589742460915609600","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-800?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-67855","commnet_date":"2015-05-12T07:38:18-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 12\/May\/2015 07:38 AM    n        n        Sanne Grinovero, can we close this now? The \"is fixed by\" relationship to n    n                n        n            n            OGM-803n        n                                                    Closed n             n seems to indicate that. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 12\/May\/2015 07:38 AM                       Sanne Grinovero , can we close this now? The \"is fixed by\" relationship to n     n                 n         n             n            OGM-803n         n                                                     Closed n             n seems to indicate that.              n        n    n"},{"commnet_id":"comment-67856","commnet_date":"2015-05-12T08:06:02-0700","commnet_user":"Sanne Grinovero","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Sanne Grinoveron added a comment  - 12\/May\/2015 08:06 AM    n        n        yes, resolved it. thanks! n    n    n        n            Show  n            n                        n    n    n    n                nn       Sanne Grinoveron added a comment  - 12\/May\/2015 08:06 AM                      yes, resolved it. thanks!              n        n    n"},{"commnet_id":"comment-67857","commnet_date":"2015-05-12T08:08:24-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 12\/May\/2015 08:08 AM    n        n        Cool, thanks! n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 12\/May\/2015 08:08 AM                      Cool, thanks!              n        n    n"}]}},{"HSEARCH-1857":{"info":{"issue_title":"Throw exceptions on usage of a FullTextSession whose underlying Session is closed","issue_key":"HSEARCH-1857","issue_type":"Improvement","issue_status":"Open","issue_priority":"Open","issue_resolution":"Minor","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"6","issue_labels":"6","issue_description":"Had some interesting feedback from a failing test which turned out to be applying an incorrect usage of FullTextEntityManager in an EJB context.  The injections points were wrongly mapped because of how CDI and @PersistenceContext was being applied, making it attempt using an underlying EntityManager which was already closed.  The tricky part is that it would sometimes work fine; the discriminating factor turned out to be that some of the operations exposed on the FullTextEntityManager don't actually make use of the underlying EntityManager.\r\n For example, when running a FullTextQuery you wouldn't have an exception about the EntityManager being closed if there are no matches for the query.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1857?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-9730":{"info":{"issue_title":"Set FetchMode to SUBSELECT programmatically","issue_key":"HHH-9730","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Won&#39;t Fix","issue_fix_version":"None","issue_component":"None","issue_labels":"query-criteria","issue_description":"Currently Hibernate allows one to set the FetchMode to SUBSELECT via annotations.  However, it is not possible to set the FetchMode on a Criteria to SUBSELECT (note the mistmatch in potential values in org.hibernate.annotations.FetchMode and org.hibernate.FetchMode).","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9730?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-67330","commnet_date":"2015-04-17T07:54:26-0700","commnet_user":"Brett Meyer","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Brett Meyern added a comment  - 17\/Apr\/2015 07:54 AM    n        n        The Criteria API is considered deprecated since 4.2\/4.3, so this probably won't be fixed... n    n    n        n            Show  n            n                        n    n    n    n                nn       Brett Meyern added a comment  - 17\/Apr\/2015 07:54 AM                      The Criteria API is considered deprecated since 4.2\/4.3, so this probably won't be fixed...              n        n    n"}]}},{"OGM-799":{"info":{"issue_title":"Use ORM&#39;s IdGenerationTypeInterpreter SPI to customize how AUTO is mapped","issue_key":"OGM-799","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"core","issue_description":"","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/OGM-799?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-9728":{"info":{"issue_title":"Audit Settings to decide what should become a SessionFactoryServiceRegistry service","issue_key":"HHH-9728","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.0.Beta1","issue_component":"5.0.0.Beta1","issue_labels":"5.0.0.Beta1","issue_description":"org.hibernate.hql.spi.QueryTranslatorFactory for sure.  Others?","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9728?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-9727":{"info":{"issue_title":"Slight redesign to bootstrapping APIs to allow for OGM bootstrapping","issue_key":"HHH-9727","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.0.Beta1","issue_component":"5.0.0.Beta1","issue_labels":"5.0.0.Beta1","issue_description":"Few points:   \tAs discussed with Gunnar Morling, a centralized OgmService (ala EnversService) makes the most sense for handling enabled\/disabled and any centralized config processing. \tMake SessionFactoryBuilder pluggable.  This piece (alone really) allows OGM to be bootstrapped via the same bootstrap API calls as ORM.  Add a SessionFactoryBuilder#unwrap method. \tNeed to develop a means for providing SessionFactoryServiceRegistry customization.  This is beyond the Integrator use-case which simply allows configuring existing SessionFactoryServiceRegistry services.  Here we need allowing to override or add additional SessionFactoryServiceRegistry services.  Consider a SessionFactoryServiceContributor.  This covers the org.hibernate.hql.spi.QueryTranslatorFactory need. \tNeed to account for \"Hibernate Search properties\".  Still need to understand this use-case a little bit better.    Gunnar Morling Anything I missed from our discussion?","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9727?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-67442","commnet_date":"2015-04-20T10:07:17-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 20\/Apr\/2015 10:07 AM    n        n        Here is the new exposed method then:nnnrnpublic  interface  SessionFactoryBuilderFactory {rnt\/**rnt * The contract method.  Return the SessionFactoryBuilder.  May <span class=\"code-keyword\">return<\/span> {@code <span class=\"code-keyword\">null<\/span>}rnt *rnt * @param metadata The metadata from which we will be building a SessionFactory.rnt * @param defaultBuilder The default  SessionFactoryBuilder instance.  If the SessionFactoryBuilder being builtrnt * here needs to use this  passed SessionFactoryBuilder instance it is the responsibility of the builtrnt * SessionFactoryBuilder impl to delegate configuration calls to the passed default  impl.rnt *rnt * @return  The SessionFactoryBuilder, or {@code null }rnt *\/rntpublic  SessionFactoryBuilder getSessionFactoryBuilder(MetadataImplementor metadata, SessionFactoryBuilder defaultBuilder);rn}rnn n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 20\/Apr\/2015 10:07 AM                      Here is the new exposed method then: nn  n rn public   interface  SessionFactoryBuilderFactory {rnt\/**rnt * The contract method.  Return the SessionFactoryBuilder.  May  return  {@code  null }rnt *rnt * @param metadata The metadata from which we will be building a SessionFactory.rnt * @param defaultBuilder The  default  SessionFactoryBuilder instance.  If the SessionFactoryBuilder being builtrnt * here needs to use  this  passed SessionFactoryBuilder instance it is the responsibility of the builtrnt * SessionFactoryBuilder impl to delegate configuration calls to the passed  default  impl.rnt *rnt * @ return  The SessionFactoryBuilder, or {@code  null }rnt *\/rnt public  SessionFactoryBuilder getSessionFactoryBuilder(MetadataImplementor metadata, SessionFactoryBuilder defaultBuilder);rn}rn n               n        n    n"},{"commnet_id":"comment-67444","commnet_date":"2015-04-20T13:20:30-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 20\/Apr\/2015 13:20 PM    n        n        Actually, for StandardServiceRegistryBuilder#build I guess there really is no reason that the Map copy happens so early in that method.  I simply moved that to after all \"service contributors\" were applied. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 20\/Apr\/2015 13:20 PM                      Actually, for  StandardServiceRegistryBuilder#build  I guess there really is no reason that the Map copy happens so early in that method.  I simply moved that to after all \"service contributors\" were applied.              n        n    n"},{"commnet_id":"comment-67445","commnet_date":"2015-04-20T13:28:01-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 20\/Apr\/2015 13:28 PM    n        n        nIt would be your responsibility to delegate any calls on your SessionFactoryBuilder impl to the default one.nnYes, that's what I had in mind, too.nnnIf you write up a \"base delegating SessionFactoryBuilder impl\", I will include it in ORM.nnWill do, PR to come.nnnI simply moved that to after all \"service contributors\" were applied.nnCool, was about to suggest exactly that  n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 20\/Apr\/2015 13:28 PM                      n It would be your responsibility to delegate any calls on your SessionFactoryBuilder impl to the default one.  nn Yes, that's what I had in mind, too. nn n If you write up a \"base delegating SessionFactoryBuilder impl\", I will include it in ORM.  nn Will do, PR to come. nn n I simply moved that to after all \"service contributors\" were applied.  nn Cool, was about to suggest exactly that                n        n    n"},{"commnet_id":"comment-67446","commnet_date":"2015-04-20T14:02:45-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 20\/Apr\/2015 14:02 PM    n        n        Nice!  2 actually makes a quorum in these parts!  nnAnyway, everything else looking good? n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 20\/Apr\/2015 14:02 PM                      Nice!  2 actually makes a quorum in these parts!    nn Anyway, everything else looking good?              n        n    n"},{"commnet_id":"comment-67457","commnet_date":"2015-04-21T04:40:33-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 21\/Apr\/2015 04:40 AM    n        n        Yeah, it's looking quite good indeed. Adapted OGM to most changes, still need to update some more tests to the changed contracts. But I don't expect any more major issues by now.nnOne thing I noted though was that I lacked a way for passing OGM-specific options set on our custom builder contract to the service interested in that option. I've sent PR #936 for a proposal for this. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 21\/Apr\/2015 04:40 AM                      Yeah, it's looking quite good indeed. Adapted OGM to most changes, still need to update some more tests to the changed contracts. But I don't expect any more major issues by now. nn One thing I noted though was that I lacked a way for passing OGM-specific options set on our custom builder contract to the service interested in that option. I've sent  PR #936  for a proposal for this.              n        n    n"}]}},{"HHH-9726":{"info":{"issue_title":"Rename MetadataBuilderContributor to MetadataBuilderInitializer and pass it the StandardServiceRegistry","issue_key":"HHH-9726","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.0.0.Beta1","issue_component":"5.0.0.Beta1","issue_labels":"5.0.0.Beta1","issue_description":"Configurer is a better conceptualization of what this contract represents.  I had opted to not name it that because Configurer is kind of an awkward English \"word\".  But Gunnar Morling convinced me its best.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9726?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}},{"HHH-9724":{"info":{"issue_title":"More complete &quot;temp table&quot; coverage and allow Dialects to influence which strategy is used","issue_key":"HHH-9724","issue_type":"New Feature","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"4.2.14","issue_component":"4.2.14","issue_labels":"4.2.14","issue_description":"On each DML\/bulk update\/delete for an entity in a multi-table inheritance hierarchy, an \"ORA-00955: name is already used by an existing object\" exception is recorded in the database error logs.  The exception is silently discarded by Hibernate, but the unnecessary failed creation and exception processing impacts performance where high volumes of bulk operations occur. Also, it creates significant data in the database server side logs.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HHH-9724?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-67346","commnet_date":"2015-04-17T12:29:29-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 17\/Apr\/2015 12:29 PM    n        n        This is not a bug.  We can argue semantics all day, but at worst it is an improvement.. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 17\/Apr\/2015 12:29 PM                      This is not a bug.  We can argue semantics all day, but at worst it is an improvement..              n        n    n"},{"commnet_id":"comment-67347","commnet_date":"2015-04-17T14:07:42-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 17\/Apr\/2015 14:07 PM    n        n        Initially I decided to allow Dialects return null from #getDefaultMultiTableBulkIdStrategy.  In such cases, the behavior is the same as what used to happen.  I did this because knowing how each Dialect needs to handled a fully-contained MultiTableBulkIdStrategy more of an audit than I wanted to put into this as on a late Friday afternoon nnLong term, I think the best approach is to remove the Dialect method intended to support table tabled in a piecemeal fashion and to make MultiTableBulkIdStrategy be a fully self-contained contract.  That requires some planning though since the calls into the Dialect methods happen from many \"levels\" (while building PersistentClasses, while building EntityPersisters and finally from Sessions).  Anyway the Dialect methods in question are:nntsupportsTemporaryTablesntgenerateTemporaryTableNamentgetCreateTemporaryTableStringntgetDropTemporaryTableStringntperformTemporaryTableDDLInIsolationntdropTemporaryTableAfterUsenn n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 17\/Apr\/2015 14:07 PM                      Initially I decided to allow Dialects return null from  #getDefaultMultiTableBulkIdStrategy .  In such cases, the behavior is the same as what used to happen.  I did this because knowing how each Dialect needs to handled a fully-contained MultiTableBulkIdStrategy more of an audit than I wanted to put into this as on a late Friday afternoon   nn Long term, I think the best approach is to remove the Dialect method intended to support table tabled in a piecemeal fashion and to make MultiTableBulkIdStrategy be a fully self-contained contract.  That requires some planning though since the calls into the Dialect methods happen from many \"levels\" (while building PersistentClasses, while building EntityPersisters and finally from Sessions).  Anyway the Dialect methods in question are: n nt supportsTemporaryTables nt generateTemporaryTableName nt getCreateTemporaryTableString nt getDropTemporaryTableString nt performTemporaryTableDDLInIsolation nt dropTemporaryTableAfterUse n n             n        n    n"},{"commnet_id":"comment-67348","commnet_date":"2015-04-17T14:22:38-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 17\/Apr\/2015 14:22 PM    n        n        Minor correction.. actually I do not allow nulls to be returned, but I do limit the \"fallback choices\" to what they were previously.  Only the OracleDialects this behavior so far.n n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 17\/Apr\/2015 14:22 PM                      Minor correction.. actually I do not allow nulls to be returned, but I do limit the \"fallback choices\" to what they were previously.  Only the OracleDialects this behavior so far. n             n        n    n"},{"commnet_id":"comment-67349","commnet_date":"2015-04-17T14:24:07-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 17\/Apr\/2015 14:24 PM    n        n        Gail Badner Per our IRC discussion, org.hibernate.hql.spi.MultiTableBulkIdHelper#needsIdTable is the bit used to limit the \"temp tables\" that actually get created. n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 17\/Apr\/2015 14:24 PM                       Gail Badner  Per our IRC discussion,  org.hibernate.hql.spi.MultiTableBulkIdHelper#needsIdTable  is the bit used to limit the \"temp tables\" that actually get created.              n        n    n"},{"commnet_id":"comment-67466","commnet_date":"2015-04-21T19:10:24-0700","commnet_user":"Steve Ebersole","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Steve Ebersolen added a comment  - 21\/Apr\/2015 19:10 PM    n        n        Here are the things we need from \"temp table support\":nnntThe ability to export needed persistent and global-temp-table definitions to the database (MultiTableBulkIdStrategy#prepare currently).ntThe (configurable) ability to cleanup exported persistent and global-temp-table definitions from the database (MultiTableBulkIdStrategy#release currently).ntThe ability to export local-temp-tables \"on demand\"ntThe ability to clean up local-temp-tables after use if indicated by env.ntThe ability to execute inserts into the bulk-id tablentThe ability to use the bulk-id table in subselectsnnnnThe first 4 all relate to managing the bulk-id table definitions.  The last 2 relate to using the bulk-id table to perform the multi-table update\/delete.  The last 2 have a variation such that the persistent table case needs to manage a \"session identifier\" column whereas the local-temp-table and global-temp-table cases do not.nnWhen we need to create\/drop (manage) the bulk-id table definitions depends on the strategy in use.  For persistent and global-temp strategies, this happens around the SessionFactory starting and stopping.  For the local-temp strategy, this happens as we need the bulk-id tables (for each session).  The part I struggle with is that in the one case (persistent and global-temp strategies) we can use the DDL immediately and not have to keep it around; in the second (local-temp strategy) we do. And the fact that this leaks outside of the strategy.  One possible solution there is to have the local-temp strategy itself keep track of the necessary DDL per-entity rather than the persisters having to conditionally store it or not (leakage).nnDove-tailing into that, I think it also does not make sense for PersistentClass#prepareTemporaryTables to store its work on PersistentClass itself.  I think a signature change is in order there to have that method return the Table.  We can then pass those (singly or all-together) to the strategy for export and pass the name to the persisters for it to know.nnI'd like to follow a similar pattern for the last 2 goals as well.  The strategy ought to be the thing that drives the generation of the bulk-id table insert statement, the generation of the bulk-id table subselect and any binding of parameters (session identifier). n    n    n        n            Show  n            n                        n    n    n    n                nn       Steve Ebersolen added a comment  - 21\/Apr\/2015 19:10 PM                      Here are the things we need from \"temp table support\": nn nt The ability to export  needed  persistent and global-temp-table definitions to the database ( MultiTableBulkIdStrategy#prepare  currently). nt The (configurable) ability to cleanup exported persistent and global-temp-table definitions from the database ( MultiTableBulkIdStrategy#release  currently). nt The ability to export local-temp-tables \"on demand\" nt The ability to clean up local-temp-tables after use if indicated by env. nt The ability to execute inserts into the bulk-id table nt The ability to use the bulk-id table in subselects n nnn The first 4 all relate to managing the bulk-id table definitions.  The last 2 relate to using the bulk-id table to perform the multi-table update\/delete.  The last 2 have a variation such that the persistent table case needs to manage a \"session identifier\" column whereas the local-temp-table and global-temp-table cases do not. nn When we need to create\/drop (manage) the bulk-id table definitions depends on the strategy in use.  For persistent and global-temp strategies, this happens around the SessionFactory starting and stopping.  For the local-temp strategy, this happens as we need the bulk-id tables (for each session).  The part I struggle with is that in the one case (persistent and global-temp strategies) we can use the DDL immediately and not have to keep it around; in the second (local-temp strategy) we do. And the fact that this leaks outside of the strategy.  One possible solution there is to have the local-temp strategy itself keep track of the necessary DDL per-entity rather than the persisters having to conditionally store it or not (leakage). nn Dove-tailing into that, I think it also does not make sense for  PersistentClass#prepareTemporaryTables  to store its work on PersistentClass itself.  I think a signature change is in order there to have that method return the  Table .  We can then pass those (singly or all-together) to the strategy for export and pass the name to the persisters for it to know. nn I'd like to follow a similar pattern for the last 2 goals as well.  The strategy ought to be the thing that drives the generation of the bulk-id table insert statement, the generation of the bulk-id table subselect and any binding of parameters (session identifier).              n        n    n"}]}},{"HV-980":{"info":{"issue_title":"Store violated element of a java.util.Set in Path","issue_key":"HV-980","issue_type":"Improvement","issue_status":"Closed","issue_priority":"Closed","issue_resolution":"Major","issue_affects_version":"Fixed","issue_fix_version":"5.2.0.Beta1","issue_component":"5.2.0.Beta1","issue_labels":"5.2.0.Beta1","issue_description":"When a bean property of type java.util.Set is annotated with @Valid (cascade validation), and an element of that Set is violated, the resulting Path of the ConstraintViolation does contain no information which element of the Set is violated. Unfortunately, the validation spec does not describe how the Path should be build when traversing a java.util.Set. However, using a Set is the most natural many-association type when it comes to domain modeling.  Violated elements of Lists and arrays can be identified by their index, violated elements in a Map can be identified by the key. The only way to reliably identify the violated element of a Set is the element itself. Therefore the violated element has to be stored in the Path.  Since the spec is very unclear what to do with Set elements, I suggest to store the violated element as Node.key in the Path. This would make the API changes minimal. It makes even more sense, since a Set can be considered as special kind Map, where each element is mapped to itself.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HV-980?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[{"commnet_id":"comment-67236","commnet_date":"2015-04-13T06:24:37-0700","commnet_user":"Felix Feisst","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Felix Feisstn added a comment  - 13\/Apr\/2015 06:24 AM    n        n        I have provided a pull request which stores the violated element of a Set as Node.key in the Path. However, there are test failures when running against the tck test suite, because the test suite is expecting a null key for Set properties. I consider this as a bug, since the specification does not determine the semantics for Set properties.nnhttps:\/\/github.com\/hibernate\/hibernate-validator\/pull\/398 n    n    n        n            Show  n            n                        n    n    n    n                nn       Felix Feisstn added a comment  - 13\/Apr\/2015 06:24 AM                      I have provided a pull request which stores the violated element of a Set as Node.key in the Path. However, there are test failures when running against the tck test suite, because the test suite is expecting a null key for Set properties. I consider this as a bug, since the specification does not determine the semantics for Set properties. nn  https:\/\/github.com\/hibernate\/hibernate-validator\/pull\/398               n        n    n"},{"commnet_id":"comment-67256","commnet_date":"2015-04-14T03:25:47-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 14\/Apr\/2015 03:25 AM    n        n        That's an interesting idea. I think such feature would have to be explicitly enabled by some configuration option as the spec clearly says that the key only for maps ever is non-null. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 14\/Apr\/2015 03:25 AM                      That's an interesting idea. I think such feature would have to be explicitly enabled by some configuration option as the spec clearly says that the key only for maps ever is non-null.              n        n    n"},{"commnet_id":"comment-67257","commnet_date":"2015-04-14T03:29:37-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 14\/Apr\/2015 03:29 AM    n        n        (Just seeing your comment now)nnnI consider this as a bug, since the specification does not determine the semantics for Set properties.nnThe JavaDoc of Node#getKey() states:nnnReturns: the key the node is placed in if contained in a Map, null otherwisennThe proposed behavior would not be inline with this, hence my suggestion to let users opt-in through some option. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 14\/Apr\/2015 03:29 AM                      (Just seeing your comment now) nn n I consider this as a bug, since the specification does not determine the semantics for Set properties.  nn The JavaDoc of  Node#getKey()  states: nn n Returns: the key the node is placed in if contained in a Map, null otherwise  nn The proposed behavior would not be inline with this, hence my suggestion to let users opt-in through some option.              n        n    n"},{"commnet_id":"comment-67432","commnet_date":"2015-04-20T02:47:59-0700","commnet_user":"Hardy Ferentschik","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Hardy Ferentschikn added a comment  - 20\/Apr\/2015 02:47 AM    n        n        As Gunnar Morling is saying, we cannot just change this behavior. The spec is clear on this. If anything it needs to be something which one can enable via a Hibernate Validator specific option. nnI am also wondering what one really gains here. As nice as it sounds to: \"a Set can be considered as special kind Map, where each element is mapped to itself\" - it is still a bit of a stretch. I assume you you get your Path instance from a ConstraintViolation which already has a #getInvalidValue.  n    n    n        n            Show  n            n                        n    n    n    n                nn       Hardy Ferentschikn added a comment  - 20\/Apr\/2015 02:47 AM                      As  Gunnar Morling  is saying, we cannot just change this behavior. The spec is clear on this. If anything it needs to be something which one can enable via a Hibernate Validator specific option.  nn I am also wondering what one really gains here. As nice as it sounds to: \"a Set can be considered as special kind Map, where each element is mapped to itself\" - it is still a bit of a stretch. I assume you you get your  Path  instance from a  ConstraintViolation  which already has a  #getInvalidValue .               n        n    n"},{"commnet_id":"comment-67433","commnet_date":"2015-04-20T03:11:55-0700","commnet_user":"Felix Feisst","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Felix Feisstn added a comment  - 20\/Apr\/2015 03:11 AM    n        n        #getInvalidValue only returns the element of a Set, if the element is the last element in the Path.nnI have a use case, where user input is validated with the validator. The user is entering data in a single UI but the model behind the UI is rather complex with multiple classes with references between each other. One of these relations is a Set and without this patch, no visisble feedback can be given to the user which property exactly was invalid.nnI understand your concerns about the specification conformity, espacially the javadoc on the Node interface. I think a special configuration option to activate the behaviour will be OK, I do not know how to implement that, though. Maybe someone else could implement that on top of my pull request? n    n    n        n            Show  n            n                        n    n    n    n                nn       Felix Feisstn added a comment  - 20\/Apr\/2015 03:11 AM                      #getInvalidValue only returns the element of a Set, if the element is the last element in the Path. nn I have a use case, where user input is validated with the validator. The user is entering data in a single UI but the model behind the UI is rather complex with multiple classes with references between each other. One of these relations is a Set and without this patch, no visisble feedback can be given to the user which property exactly was invalid. nn I understand your concerns about the specification conformity, espacially the javadoc on the Node interface. I think a special configuration option to activate the behaviour will be OK, I do not know how to implement that, though. Maybe someone else could implement that on top of my pull request?              n        n    n"},{"commnet_id":"comment-67473","commnet_date":"2015-04-22T02:59:51-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 22\/Apr\/2015 02:59 AM    n        n        Hey Felix Feisst: Hardy Ferentschik and me have mused a bit more about this. How about this: Instead of (ab)-using getKey() you create a new sub-interface of Node exposing a getter for the set element if present. Then one can obtain an instance of this via myNode.as(NewNodeSubType.class).getSetElement(). n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 22\/Apr\/2015 02:59 AM                      Hey  Felix Feisst :  Hardy Ferentschik  and me have mused a bit more about this. How about this: Instead of (ab)-using  getKey()  you create a new sub-interface of  Node  exposing a getter for the set element if present. Then one can obtain an instance of this via  myNode.as(NewNodeSubType.class).getSetElement() .              n        n    n"},{"commnet_id":"comment-67559","commnet_date":"2015-04-23T01:33:03-0700","commnet_user":"Felix Feisst","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Felix Feisstn added a comment  - 23\/Apr\/2015 01:33 AM    n        n        Sounds good to me. However, I don't know when I find time to implement this. If you have some time to spare, I will be more than happy to see this being implemented .nnAre there any chances that this feature finds its way in the upcoming bean validation specification? It would be nice if a user would not have to unwrap the Node subtype. n    n    n        n            Show  n            n                        n    n    n    n                nn       Felix Feisstn added a comment  - 23\/Apr\/2015 01:33 AM                      Sounds good to me. However, I don't know when I find time to implement this. If you have some time to spare, I will be more than happy to see this being implemented  . nn Are there any chances that this feature finds its way in the upcoming bean validation specification? It would be nice if a user would not have to unwrap the Node subtype.              n        n    n"},{"commnet_id":"comment-67560","commnet_date":"2015-04-23T01:39:32-0700","commnet_user":"Gunnar Morling","commnet_info":"n    n        n            Hide  n            nn                n                    More n                nn                n                    nn                        Permalinkn                        nn                                                                                            n                nn            n                    n    n    n    n                nn       Gunnar Morlingn added a comment  - 23\/Apr\/2015 01:39 AM    n        n        I will give it a go.nnWrt. to Bean Validation, I am sympathetic to the idea of addressing this issue in one way or another. I will open a BVAL issue. n    n    n        n            Show  n            n                        n    n    n    n                nn       Gunnar Morlingn added a comment  - 23\/Apr\/2015 01:39 AM                      I will give it a go. nn Wrt. to Bean Validation, I am sympathetic to the idea of addressing this issue in one way or another. I will open a BVAL issue.              n        n    n"}]}},{"HSEARCH-1852":{"info":{"issue_title":"Create extension point for plugging in Criteria providers","issue_key":"HSEARCH-1852","issue_type":"New Feature","issue_status":"Open","issue_priority":"Open","issue_resolution":"Major","issue_affects_version":"Unresolved","issue_fix_version":"None","issue_component":"None","issue_labels":"query","issue_description":"HSEARCH-1793                                                              Closed                 fixes an issue where cross-hierarchy queries (i.e. queries relating to entities with different id types and\/or id property names) would fail. The fix for                                                          HSEARCH-1793                                                              Closed                 creates a separate Criteria object for each hierarchy present in the ids to be loaded from the database.   This conflicts though with the FullTextQuery#setCriteriaQuery() API which allows to pass in a single criteria object. One idea would be to deprecate and eventually remove setCriteriaQuery() and provide an extension point instead which allows to provide a custom criteria instance per entity type:     public  interface  CriteriaProvider {      Criteria getCriteria(Class &lt;?&gt; entityType);  }     And:     final  FullTextSession fullTextSession = ...;  List&lt;?&gt; results = fullTextSession.createFullTextQuery( query )      .setCriteriaProvider(          new  CriteriaProvider {              public  Criteria getCriteria(Class &lt;?&gt; entityType) {                  \/\/ for  Book add a fetch join, everything else  is defaulted                   if  ( entityType == Book.class ) {                      return  fullTextSession.createCriteria( Book.class ).setFetchMode( \"authors\" , FetchMode.JOIN );                  }                  else  {                      return  fullTextSession.createCriteria( entityType );                  }              }          }      )      .list();     On a related note, org.hibernate.search.jpa.FullTextQuery#setCriteriaQuery() expects a org.hibernate.Criteria instance instead of the JPA counter-part.  Probably it'd make sense if the extension point described above works with the JPA criteria API in general, given that the Hibernate Criteria API is to be considered deprecated as per the ORM dev guide.","issue_from_url":"https:\/\/hibernate.atlassian.net\/browse\/HSEARCH-1852?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel&_=1483937179653"},"comments":[]}}]